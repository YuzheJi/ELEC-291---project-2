0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sat Mar 22 00:16:26 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _bmm150_interface_selection
0000             28            public _bmm150_error_codes_print_result
0000             29            public _bmm150_delay_us
0000             30            public _bmm150_spi_write
0000             31            public _bmm150_spi_read
0000             32            public _spi_transfer
0000             33            public _waitms
0000             34            public _ptr_delay_us
0000             35            public _Timer3us
0000             36            public _Set_Pin_Output
0000             37            public __c51_external_startup
0000             38            public _bmm150_interface_selection_PARM_2
0000             39            public _bmm150_error_codes_print_result_PARM_2
0000             40   ;--------------------------------------------------------
0000             41   ; Special Function Registers
0000             42   ;--------------------------------------------------------
0000             43   _ACC            DATA 0xe0
0000             44   _ADC0ASAH       DATA 0xb6
0000             45   _ADC0ASAL       DATA 0xb5
0000             46   _ADC0ASCF       DATA 0xa1
0000             47   _ADC0ASCT       DATA 0xc7
0000             48   _ADC0CF0        DATA 0xbc
0000             49   _ADC0CF1        DATA 0xb9
0000             50   _ADC0CF2        DATA 0xdf
0000             51   _ADC0CN0        DATA 0xe8
0000             52   _ADC0CN1        DATA 0xb2
0000             53   _ADC0CN2        DATA 0xb3
0000             54   _ADC0GTH        DATA 0xc4
0000             55   _ADC0GTL        DATA 0xc3
0000             56   _ADC0H          DATA 0xbe
0000             57   _ADC0L          DATA 0xbd
0000             58   _ADC0LTH        DATA 0xc6
0000             59   _ADC0LTL        DATA 0xc5
0000             60   _ADC0MX         DATA 0xbb
0000             61   _B              DATA 0xf0
0000             62   _CKCON0         DATA 0x8e
0000             63   _CKCON1         DATA 0xa6
0000             64   _CLEN0          DATA 0xc6
0000             65   _CLIE0          DATA 0xc7
0000             66   _CLIF0          DATA 0xe8
0000             67   _CLKSEL         DATA 0xa9
0000             68   _CLOUT0         DATA 0xd1
0000             69   _CLU0CF         DATA 0xb1
0000             70   _CLU0FN         DATA 0xaf
0000             71   _CLU0MX         DATA 0x84
0000             72   _CLU1CF         DATA 0xb3
0000             73   _CLU1FN         DATA 0xb2
0000             74   _CLU1MX         DATA 0x85
0000             75   _CLU2CF         DATA 0xb6
0000             76   _CLU2FN         DATA 0xb5
0000             77   _CLU2MX         DATA 0x91
0000             78   _CLU3CF         DATA 0xbf
0000             79   _CLU3FN         DATA 0xbe
0000             80   _CLU3MX         DATA 0xae
0000             81   _CMP0CN0        DATA 0x9b
0000             82   _CMP0CN1        DATA 0x99
0000             83   _CMP0MD         DATA 0x9d
0000             84   _CMP0MX         DATA 0x9f
0000             85   _CMP1CN0        DATA 0xbf
0000             86   _CMP1CN1        DATA 0xac
0000             87   _CMP1MD         DATA 0xab
0000             88   _CMP1MX         DATA 0xaa
0000             89   _CRC0CN0        DATA 0xce
0000             90   _CRC0CN1        DATA 0x86
0000             91   _CRC0CNT        DATA 0xd3
0000             92   _CRC0DAT        DATA 0xcb
0000             93   _CRC0FLIP       DATA 0xcf
0000             94   _CRC0IN         DATA 0xca
0000             95   _CRC0ST         DATA 0xd2
0000             96   _DAC0CF0        DATA 0x91
0000             97   _DAC0CF1        DATA 0x92
0000             98   _DAC0H          DATA 0x85
0000             99   _DAC0L          DATA 0x84
0000            100   _DAC1CF0        DATA 0x93
0000            101   _DAC1CF1        DATA 0x94
0000            102   _DAC1H          DATA 0x8a
0000            103   _DAC1L          DATA 0x89
0000            104   _DAC2CF0        DATA 0x95
0000            105   _DAC2CF1        DATA 0x96
0000            106   _DAC2H          DATA 0x8c
0000            107   _DAC2L          DATA 0x8b
0000            108   _DAC3CF0        DATA 0x9a
0000            109   _DAC3CF1        DATA 0x9c
0000            110   _DAC3H          DATA 0x8e
0000            111   _DAC3L          DATA 0x8d
0000            112   _DACGCF0        DATA 0x88
0000            113   _DACGCF1        DATA 0x98
0000            114   _DACGCF2        DATA 0xa2
0000            115   _DERIVID        DATA 0xad
0000            116   _DEVICEID       DATA 0xb5
0000            117   _DPH            DATA 0x83
0000            118   _DPL            DATA 0x82
0000            119   _EIE1           DATA 0xe6
0000            120   _EIE2           DATA 0xf3
0000            121   _EIP1           DATA 0xbb
0000            122   _EIP1H          DATA 0xee
0000            123   _EIP2           DATA 0xed
0000            124   _EIP2H          DATA 0xf6
0000            125   _EMI0CN         DATA 0xe7
0000            126   _FLKEY          DATA 0xb7
0000            127   _HFO0CAL        DATA 0xc7
0000            128   _HFO1CAL        DATA 0xd6
0000            129   _HFOCN          DATA 0xef
0000            130   _I2C0ADM        DATA 0xff
0000            131   _I2C0CN0        DATA 0xba
0000            132   _I2C0DIN        DATA 0xbc
0000            133   _I2C0DOUT       DATA 0xbb
0000            134   _I2C0FCN0       DATA 0xad
0000            135   _I2C0FCN1       DATA 0xab
0000            136   _I2C0FCT        DATA 0xf5
0000            137   _I2C0SLAD       DATA 0xbd
0000            138   _I2C0STAT       DATA 0xb9
0000            139   _IE             DATA 0xa8
0000            140   _IP             DATA 0xb8
0000            141   _IPH            DATA 0xf2
0000            142   _IT01CF         DATA 0xe4
0000            143   _LFO0CN         DATA 0xb1
0000            144   _P0             DATA 0x80
0000            145   _P0MASK         DATA 0xfe
0000            146   _P0MAT          DATA 0xfd
0000            147   _P0MDIN         DATA 0xf1
0000            148   _P0MDOUT        DATA 0xa4
0000            149   _P0SKIP         DATA 0xd4
0000            150   _P1             DATA 0x90
0000            151   _P1MASK         DATA 0xee
0000            152   _P1MAT          DATA 0xed
0000            153   _P1MDIN         DATA 0xf2
0000            154   _P1MDOUT        DATA 0xa5
0000            155   _P1SKIP         DATA 0xd5
0000            156   _P2             DATA 0xa0
0000            157   _P2MASK         DATA 0xfc
0000            158   _P2MAT          DATA 0xfb
0000            159   _P2MDIN         DATA 0xf3
0000            160   _P2MDOUT        DATA 0xa6
0000            161   _P2SKIP         DATA 0xcc
0000            162   _P3             DATA 0xb0
0000            163   _P3MDIN         DATA 0xf4
0000            164   _P3MDOUT        DATA 0x9c
0000            165   _PCA0CENT       DATA 0x9e
0000            166   _PCA0CLR        DATA 0x9c
0000            167   _PCA0CN0        DATA 0xd8
0000            168   _PCA0CPH0       DATA 0xfc
0000            169   _PCA0CPH1       DATA 0xea
0000            170   _PCA0CPH2       DATA 0xec
0000            171   _PCA0CPH3       DATA 0xf5
0000            172   _PCA0CPH4       DATA 0x85
0000            173   _PCA0CPH5       DATA 0xde
0000            174   _PCA0CPL0       DATA 0xfb
0000            175   _PCA0CPL1       DATA 0xe9
0000            176   _PCA0CPL2       DATA 0xeb
0000            177   _PCA0CPL3       DATA 0xf4
0000            178   _PCA0CPL4       DATA 0x84
0000            179   _PCA0CPL5       DATA 0xdd
0000            180   _PCA0CPM0       DATA 0xda
0000            181   _PCA0CPM1       DATA 0xdb
0000            182   _PCA0CPM2       DATA 0xdc
0000            183   _PCA0CPM3       DATA 0xae
0000            184   _PCA0CPM4       DATA 0xaf
0000            185   _PCA0CPM5       DATA 0xcc
0000            186   _PCA0H          DATA 0xfa
0000            187   _PCA0L          DATA 0xf9
0000            188   _PCA0MD         DATA 0xd9
0000            189   _PCA0POL        DATA 0x96
0000            190   _PCA0PWM        DATA 0xf7
0000            191   _PCON0          DATA 0x87
0000            192   _PCON1          DATA 0xcd
0000            193   _PFE0CN         DATA 0xc1
0000            194   _PRTDRV         DATA 0xf6
0000            195   _PSCTL          DATA 0x8f
0000            196   _PSTAT0         DATA 0xaa
0000            197   _PSW            DATA 0xd0
0000            198   _REF0CN         DATA 0xd1
0000            199   _REG0CN         DATA 0xc9
0000            200   _REVID          DATA 0xb6
0000            201   _RSTSRC         DATA 0xef
0000            202   _SBCON1         DATA 0x94
0000            203   _SBRLH1         DATA 0x96
0000            204   _SBRLL1         DATA 0x95
0000            205   _SBUF           DATA 0x99
0000            206   _SBUF0          DATA 0x99
0000            207   _SBUF1          DATA 0x92
0000            208   _SCON           DATA 0x98
0000            209   _SCON0          DATA 0x98
0000            210   _SCON1          DATA 0xc8
0000            211   _SFRPAGE        DATA 0xa7
0000            212   _SFRPGCN        DATA 0xbc
0000            213   _SFRSTACK       DATA 0xd7
0000            214   _SMB0ADM        DATA 0xd6
0000            215   _SMB0ADR        DATA 0xd7
0000            216   _SMB0CF         DATA 0xc1
0000            217   _SMB0CN0        DATA 0xc0
0000            218   _SMB0DAT        DATA 0xc2
0000            219   _SMB0FCN0       DATA 0xc3
0000            220   _SMB0FCN1       DATA 0xc4
0000            221   _SMB0FCT        DATA 0xef
0000            222   _SMB0RXLN       DATA 0xc5
0000            223   _SMB0TC         DATA 0xac
0000            224   _SMOD1          DATA 0x93
0000            225   _SP             DATA 0x81
0000            226   _SPI0CFG        DATA 0xa1
0000            227   _SPI0CKR        DATA 0xa2
0000            228   _SPI0CN0        DATA 0xf8
0000            229   _SPI0DAT        DATA 0xa3
0000            230   _SPI0FCN0       DATA 0x9a
0000            231   _SPI0FCN1       DATA 0x9b
0000            232   _SPI0FCT        DATA 0xf7
0000            233   _SPI0PCF        DATA 0xdf
0000            234   _TCON           DATA 0x88
0000            235   _TH0            DATA 0x8c
0000            236   _TH1            DATA 0x8d
0000            237   _TL0            DATA 0x8a
0000            238   _TL1            DATA 0x8b
0000            239   _TMOD           DATA 0x89
0000            240   _TMR2CN0        DATA 0xc8
0000            241   _TMR2CN1        DATA 0xfd
0000            242   _TMR2H          DATA 0xcf
0000            243   _TMR2L          DATA 0xce
0000            244   _TMR2RLH        DATA 0xcb
0000            245   _TMR2RLL        DATA 0xca
0000            246   _TMR3CN0        DATA 0x91
0000            247   _TMR3CN1        DATA 0xfe
0000            248   _TMR3H          DATA 0x95
0000            249   _TMR3L          DATA 0x94
0000            250   _TMR3RLH        DATA 0x93
0000            251   _TMR3RLL        DATA 0x92
0000            252   _TMR4CN0        DATA 0x98
0000            253   _TMR4CN1        DATA 0xff
0000            254   _TMR4H          DATA 0xa5
0000            255   _TMR4L          DATA 0xa4
0000            256   _TMR4RLH        DATA 0xa3
0000            257   _TMR4RLL        DATA 0xa2
0000            258   _TMR5CN0        DATA 0xc0
0000            259   _TMR5CN1        DATA 0xf1
0000            260   _TMR5H          DATA 0xd5
0000            261   _TMR5L          DATA 0xd4
0000            262   _TMR5RLH        DATA 0xd3
0000            263   _TMR5RLL        DATA 0xd2
0000            264   _UART0PCF       DATA 0xd9
0000            265   _UART1FCN0      DATA 0x9d
0000            266   _UART1FCN1      DATA 0xd8
0000            267   _UART1FCT       DATA 0xfa
0000            268   _UART1LIN       DATA 0x9e
0000            269   _UART1PCF       DATA 0xda
0000            270   _VDM0CN         DATA 0xff
0000            271   _WDTCN          DATA 0x97
0000            272   _XBR0           DATA 0xe1
0000            273   _XBR1           DATA 0xe2
0000            274   _XBR2           DATA 0xe3
0000            275   _XOSC0CN        DATA 0x86
0000            276   _DPTR           DATA 0x8382
0000            277   _TMR2RL         DATA 0xcbca
0000            278   _TMR3RL         DATA 0x9392
0000            279   _TMR4RL         DATA 0xa3a2
0000            280   _TMR5RL         DATA 0xd3d2
0000            281   _TMR0           DATA 0x8c8a
0000            282   _TMR1           DATA 0x8d8b
0000            283   _TMR2           DATA 0xcfce
0000            284   _TMR3           DATA 0x9594
0000            285   _TMR4           DATA 0xa5a4
0000            286   _TMR5           DATA 0xd5d4
0000            287   _SBRL1          DATA 0x9695
0000            288   _PCA0           DATA 0xfaf9
0000            289   _PCA0CP0        DATA 0xfcfb
0000            290   _PCA0CP1        DATA 0xeae9
0000            291   _PCA0CP2        DATA 0xeceb
0000            292   _PCA0CP3        DATA 0xf5f4
0000            293   _PCA0CP4        DATA 0x8584
0000            294   _PCA0CP5        DATA 0xdedd
0000            295   _ADC0ASA        DATA 0xb6b5
0000            296   _ADC0GT         DATA 0xc4c3
0000            297   _ADC0           DATA 0xbebd
0000            298   _ADC0LT         DATA 0xc6c5
0000            299   _DAC0           DATA 0x8584
0000            300   _DAC1           DATA 0x8a89
0000            301   _DAC2           DATA 0x8c8b
0000            302   _DAC3           DATA 0x8e8d
0000            303   ;--------------------------------------------------------
0000            304   ; special function bits
0000            305   ;--------------------------------------------------------
0000            306   _ACC_0          BIT 0xe0
0000            307   _ACC_1          BIT 0xe1
0000            308   _ACC_2          BIT 0xe2
0000            309   _ACC_3          BIT 0xe3
0000            310   _ACC_4          BIT 0xe4
0000            311   _ACC_5          BIT 0xe5
0000            312   _ACC_6          BIT 0xe6
0000            313   _ACC_7          BIT 0xe7
0000            314   _TEMPE          BIT 0xe8
0000            315   _ADGN0          BIT 0xe9
0000            316   _ADGN1          BIT 0xea
0000            317   _ADWINT         BIT 0xeb
0000            318   _ADBUSY         BIT 0xec
0000            319   _ADINT          BIT 0xed
0000            320   _IPOEN          BIT 0xee
0000            321   _ADEN           BIT 0xef
0000            322   _B_0            BIT 0xf0
0000            323   _B_1            BIT 0xf1
0000            324   _B_2            BIT 0xf2
0000            325   _B_3            BIT 0xf3
0000            326   _B_4            BIT 0xf4
0000            327   _B_5            BIT 0xf5
0000            328   _B_6            BIT 0xf6
0000            329   _B_7            BIT 0xf7
0000            330   _C0FIF          BIT 0xe8
0000            331   _C0RIF          BIT 0xe9
0000            332   _C1FIF          BIT 0xea
0000            333   _C1RIF          BIT 0xeb
0000            334   _C2FIF          BIT 0xec
0000            335   _C2RIF          BIT 0xed
0000            336   _C3FIF          BIT 0xee
0000            337   _C3RIF          BIT 0xef
0000            338   _D1SRC0         BIT 0x88
0000            339   _D1SRC1         BIT 0x89
0000            340   _D1AMEN         BIT 0x8a
0000            341   _D01REFSL       BIT 0x8b
0000            342   _D3SRC0         BIT 0x8c
0000            343   _D3SRC1         BIT 0x8d
0000            344   _D3AMEN         BIT 0x8e
0000            345   _D23REFSL       BIT 0x8f
0000            346   _D0UDIS         BIT 0x98
0000            347   _D1UDIS         BIT 0x99
0000            348   _D2UDIS         BIT 0x9a
0000            349   _D3UDIS         BIT 0x9b
0000            350   _EX0            BIT 0xa8
0000            351   _ET0            BIT 0xa9
0000            352   _EX1            BIT 0xaa
0000            353   _ET1            BIT 0xab
0000            354   _ES0            BIT 0xac
0000            355   _ET2            BIT 0xad
0000            356   _ESPI0          BIT 0xae
0000            357   _EA             BIT 0xaf
0000            358   _PX0            BIT 0xb8
0000            359   _PT0            BIT 0xb9
0000            360   _PX1            BIT 0xba
0000            361   _PT1            BIT 0xbb
0000            362   _PS0            BIT 0xbc
0000            363   _PT2            BIT 0xbd
0000            364   _PSPI0          BIT 0xbe
0000            365   _P0_0           BIT 0x80
0000            366   _P0_1           BIT 0x81
0000            367   _P0_2           BIT 0x82
0000            368   _P0_3           BIT 0x83
0000            369   _P0_4           BIT 0x84
0000            370   _P0_5           BIT 0x85
0000            371   _P0_6           BIT 0x86
0000            372   _P0_7           BIT 0x87
0000            373   _P1_0           BIT 0x90
0000            374   _P1_1           BIT 0x91
0000            375   _P1_2           BIT 0x92
0000            376   _P1_3           BIT 0x93
0000            377   _P1_4           BIT 0x94
0000            378   _P1_5           BIT 0x95
0000            379   _P1_6           BIT 0x96
0000            380   _P1_7           BIT 0x97
0000            381   _P2_0           BIT 0xa0
0000            382   _P2_1           BIT 0xa1
0000            383   _P2_2           BIT 0xa2
0000            384   _P2_3           BIT 0xa3
0000            385   _P2_4           BIT 0xa4
0000            386   _P2_5           BIT 0xa5
0000            387   _P2_6           BIT 0xa6
0000            388   _P3_0           BIT 0xb0
0000            389   _P3_1           BIT 0xb1
0000            390   _P3_2           BIT 0xb2
0000            391   _P3_3           BIT 0xb3
0000            392   _P3_4           BIT 0xb4
0000            393   _P3_7           BIT 0xb7
0000            394   _CCF0           BIT 0xd8
0000            395   _CCF1           BIT 0xd9
0000            396   _CCF2           BIT 0xda
0000            397   _CCF3           BIT 0xdb
0000            398   _CCF4           BIT 0xdc
0000            399   _CCF5           BIT 0xdd
0000            400   _CR             BIT 0xde
0000            401   _CF             BIT 0xdf
0000            402   _PARITY         BIT 0xd0
0000            403   _F1             BIT 0xd1
0000            404   _OV             BIT 0xd2
0000            405   _RS0            BIT 0xd3
0000            406   _RS1            BIT 0xd4
0000            407   _F0             BIT 0xd5
0000            408   _AC             BIT 0xd6
0000            409   _CY             BIT 0xd7
0000            410   _RI             BIT 0x98
0000            411   _TI             BIT 0x99
0000            412   _RB8            BIT 0x9a
0000            413   _TB8            BIT 0x9b
0000            414   _REN            BIT 0x9c
0000            415   _CE             BIT 0x9d
0000            416   _SMODE          BIT 0x9e
0000            417   _RI1            BIT 0xc8
0000            418   _TI1            BIT 0xc9
0000            419   _RBX1           BIT 0xca
0000            420   _TBX1           BIT 0xcb
0000            421   _REN1           BIT 0xcc
0000            422   _PERR1          BIT 0xcd
0000            423   _OVR1           BIT 0xce
0000            424   _SI             BIT 0xc0
0000            425   _ACK            BIT 0xc1
0000            426   _ARBLOST        BIT 0xc2
0000            427   _ACKRQ          BIT 0xc3
0000            428   _STO            BIT 0xc4
0000            429   _STA            BIT 0xc5
0000            430   _TXMODE         BIT 0xc6
0000            431   _MASTER         BIT 0xc7
0000            432   _SPIEN          BIT 0xf8
0000            433   _TXNF           BIT 0xf9
0000            434   _NSSMD0         BIT 0xfa
0000            435   _NSSMD1         BIT 0xfb
0000            436   _RXOVRN         BIT 0xfc
0000            437   _MODF           BIT 0xfd
0000            438   _WCOL           BIT 0xfe
0000            439   _SPIF           BIT 0xff
0000            440   _IT0            BIT 0x88
0000            441   _IE0            BIT 0x89
0000            442   _IT1            BIT 0x8a
0000            443   _IE1            BIT 0x8b
0000            444   _TR0            BIT 0x8c
0000            445   _TF0            BIT 0x8d
0000            446   _TR1            BIT 0x8e
0000            447   _TF1            BIT 0x8f
0000            448   _T2XCLK0        BIT 0xc8
0000            449   _T2XCLK1        BIT 0xc9
0000            450   _TR2            BIT 0xca
0000            451   _T2SPLIT        BIT 0xcb
0000            452   _TF2CEN         BIT 0xcc
0000            453   _TF2LEN         BIT 0xcd
0000            454   _TF2L           BIT 0xce
0000            455   _TF2H           BIT 0xcf
0000            456   _T4XCLK0        BIT 0x98
0000            457   _T4XCLK1        BIT 0x99
0000            458   _TR4            BIT 0x9a
0000            459   _T4SPLIT        BIT 0x9b
0000            460   _TF4CEN         BIT 0x9c
0000            461   _TF4LEN         BIT 0x9d
0000            462   _TF4L           BIT 0x9e
0000            463   _TF4H           BIT 0x9f
0000            464   _T5XCLK0        BIT 0xc0
0000            465   _T5XCLK1        BIT 0xc1
0000            466   _TR5            BIT 0xc2
0000            467   _T5SPLIT        BIT 0xc3
0000            468   _TF5CEN         BIT 0xc4
0000            469   _TF5LEN         BIT 0xc5
0000            470   _TF5L           BIT 0xc6
0000            471   _TF5H           BIT 0xc7
0000            472   _RIE            BIT 0xd8
0000            473   _RXTO0          BIT 0xd9
0000            474   _RXTO1          BIT 0xda
0000            475   _RFRQ           BIT 0xdb
0000            476   _TIE            BIT 0xdc
0000            477   _TXHOLD         BIT 0xdd
0000            478   _TXNF1          BIT 0xde
0000            479   _TFRQ           BIT 0xdf
0000            480   ;--------------------------------------------------------
0000            481   ; overlayable register banks
0000            482   ;--------------------------------------------------------
0000            483            rbank0 segment data overlay
0000            484   ;--------------------------------------------------------
0000            485   ; internal ram data
0000            486   ;--------------------------------------------------------
0000            487            rseg R_DSEG
0000            488   _bmm150_error_codes_print_result_PARM_2:
0000            489            ds 1
0001            490   _bmm150_interface_selection_PARM_2:
0001            491            ds 1
0002            492   _get_data_dev_1_98:
0002            493            ds 2
0004            494   _get_data_sloc0_1_0:
0004            495            ds 2
0006            496   ;--------------------------------------------------------
0006            497   ; overlayable items in internal ram 
0006            498   ;--------------------------------------------------------
0000            499            rseg    R_OSEG
0000            500            rseg    R_OSEG
0000            501            rseg    R_OSEG
0000            502   ;--------------------------------------------------------
0000            503   ; indirectly addressable internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_ISEG
0000            506   ;--------------------------------------------------------
0000            507   ; absolute internal ram data
0000            508   ;--------------------------------------------------------
0000            509            DSEG
0000            510   ;--------------------------------------------------------
0000            511   ; bit data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_BSEG
0000            514   ;--------------------------------------------------------
0000            515   ; paged external ram data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_PSEG
0000            518   ;--------------------------------------------------------
0000            519   ; external ram data
0000            520   ;--------------------------------------------------------
0000            521            rseg R_XSEG
0000            522   _bmm150_interface_selection_rslt_1_89:
0000            523            ds 1
0001            524   _set_config_rslt_1_95:
0001            525            ds 1
0002            526   _set_config_settings_1_95:
0002            527            ds 17
0013            528   _get_data_rslt_1_99:
0013            529            ds 1
0014            530   _get_data_mag_data_1_99:
0014            531            ds 6
001A            532   _main_dev_1_104:
001A            533            ds 31
0039            534   ;--------------------------------------------------------
0039            535   ; absolute external ram data
0039            536   ;--------------------------------------------------------
0000            537            XSEG
0000            538   ;--------------------------------------------------------
0000            539   ; external initialized ram data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_IXSEG
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_CSEG
0000            545   ;--------------------------------------------------------
0000            546   ; Reset entry point and interrupt vectors
0000            547   ;--------------------------------------------------------
0000            548            CSEG at 0x0000
0000 020000     549            ljmp    _crt0
0003            550   ;--------------------------------------------------------
0003            551   ; global & static initialisations
0003            552   ;--------------------------------------------------------
0000            553            rseg R_HOME
0000            554            rseg R_GSINIT
0000            555            rseg R_GSINIT
0000            556   ;--------------------------------------------------------
0000            557   ; data variables initialization
0000            558   ;--------------------------------------------------------
0000            559            rseg R_DINIT
0000            560            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            561   ;--------------------------------------------------------
0000            562   ; code
0000            563   ;--------------------------------------------------------
0000            564            rseg R_CSEG
0000            565   ;------------------------------------------------------------
0000            566   ;Allocation info for local variables in function '_c51_external_startup'
0000            567   ;------------------------------------------------------------
0000            568   ;------------------------------------------------------------
0000            569   ;        sensor_test.c:39: char _c51_external_startup (void)
0000            570   ;        -----------------------------------------
0000            571   ;         function _c51_external_startup
0000            572   ;        -----------------------------------------
0000            573   __c51_external_startup:
0000            574            using   0
0000            575   ;        sensor_test.c:42: SFRPAGE = 0x00;
0000 75A700     576            mov     _SFRPAGE,#0x00
0003            577   ;        sensor_test.c:43: WDTCN = 0xDE; //First key
0003 7597DE     578            mov     _WDTCN,#0xDE
0006            579   ;        sensor_test.c:44: WDTCN = 0xAD; //Second key
0006 7597AD     580            mov     _WDTCN,#0xAD
0009            581   ;        sensor_test.c:46: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     582            mov     _VDM0CN,#0x80
000C            583   ;        sensor_test.c:47: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     584            mov     _RSTSRC,#0x06
000F            585   ;        sensor_test.c:54: SFRPAGE = 0x10;
000F 75A710     586            mov     _SFRPAGE,#0x10
0012            587   ;        sensor_test.c:55: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     588            mov     _PFE0CN,#0x20
0015            589   ;        sensor_test.c:56: SFRPAGE = 0x00;
0015 75A700     590            mov     _SFRPAGE,#0x00
0018            591   ;        sensor_test.c:77: CLKSEL = 0x00;
0018 75A900     592            mov     _CLKSEL,#0x00
001B            593   ;        sensor_test.c:78: CLKSEL = 0x00;
001B 75A900     594            mov     _CLKSEL,#0x00
001E            595   ;        sensor_test.c:79: while ((CLKSEL & 0x80) == 0);
001E            596   L002001?:
001E E5A9       597            mov     a,_CLKSEL
0020 30E700     598            jnb     acc.7,L002001?
0023            599   ;        sensor_test.c:80: CLKSEL = 0x03;
0023 75A903     600            mov     _CLKSEL,#0x03
0026            601   ;        sensor_test.c:81: CLKSEL = 0x03;
0026 75A903     602            mov     _CLKSEL,#0x03
0029            603   ;        sensor_test.c:82: while ((CLKSEL & 0x80) == 0);
0029            604   L002004?:
0029 E5A9       605            mov     a,_CLKSEL
002B 30E780     606            jnb     acc.7,L002004?
002E            607   ;        sensor_test.c:87: P0MDOUT |= 0xE0;
002E 43A4E0     608            orl     _P0MDOUT,#0xE0
0031            609   ;        sensor_test.c:88: P1MDOUT |= 0x01; 
0031 43A501     610            orl     _P1MDOUT,#0x01
0034            611   ;        sensor_test.c:89: XBR0=0b_0000_0011; //SPI0E=1, URT0E=1
0034 75E103     612            mov     _XBR0,#0x03
0037            613   ;        sensor_test.c:90: XBR1=0b_0000_0000;
0037 75E200     614            mov     _XBR1,#0x00
003A            615   ;        sensor_test.c:91: XBR2=0b_0100_0000; // Enable crossbar and weak pull-ups
003A 75E340     616            mov     _XBR2,#0x40
003D            617   ;        sensor_test.c:97: SCON0 = 0x10;
003D 759810     618            mov     _SCON0,#0x10
0040            619   ;        sensor_test.c:98: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0040 758DE6     620            mov     _TH1,#0xE6
0043            621   ;        sensor_test.c:99: TL1 = TH1;      // Init Timer1
0043 858D8B     622            mov     _TL1,_TH1
0046            623   ;        sensor_test.c:100: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     624            anl     _TMOD,#0x0F
0049            625   ;        sensor_test.c:101: TMOD |=  0x20;                       
0049 438920     626            orl     _TMOD,#0x20
004C            627   ;        sensor_test.c:102: TR1 = 1; // START Timer1
004C D28E       628            setb    _TR1
004E            629   ;        sensor_test.c:103: TI = 1;  // Indicate TX0 ready
004E D299       630            setb    _TI
0050            631   ;        sensor_test.c:106: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0050 75A223     632            mov     _SPI0CKR,#0x23
0053            633   ;        sensor_test.c:107: SPI0CFG = 0b_0100_0000; //SPI in master mode
0053 75A140     634            mov     _SPI0CFG,#0x40
0056            635   ;        sensor_test.c:108: SPI0CN0 = 0b_0000_0001; //SPI enabled and in three wire mode
0056 75F801     636            mov     _SPI0CN0,#0x01
0059            637   ;        sensor_test.c:111: P0MDOUT &= ~(1<<4); // set P0.4 as open drain input 
0059 53A4EF     638            anl     _P0MDOUT,#0xEF
005C            639   ;        sensor_test.c:112: P0 |= (1<<4); //enable pull up resistor on P0.4 
005C 438010     640            orl     _P0,#0x10
005F            641   ;        sensor_test.c:113: EIE2 |= 0x02; 
005F 43F302     642            orl     _EIE2,#0x02
0062            643   ;        sensor_test.c:115: return 0;
0062 758200     644            mov     dpl,#0x00
0065 22         645            ret
0066            646   ;------------------------------------------------------------
0066            647   ;Allocation info for local variables in function 'Set_Pin_Output'
0066            648   ;------------------------------------------------------------
0066            649   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_61'
0066            650   ;pin                       Allocated to registers r2 
0066            651   ;------------------------------------------------------------
0066            652   ;        sensor_test.c:118: void Set_Pin_Output (unsigned char pin)
0066            653   ;        -----------------------------------------
0066            654   ;         function Set_Pin_Output
0066            655   ;        -----------------------------------------
0066            656   _Set_Pin_Output:
0066 AA82       657            mov     r2,dpl
0068            658   ;        sensor_test.c:122: mask=(1<<(pin&0x7));
0068 7407       659            mov     a,#0x07
006A 5A         660            anl     a,r2
006B F5F0       661            mov     b,a
006D 05F0       662            inc     b
006F 7401       663            mov     a,#0x01
0071 8000       664            sjmp    L003011?
0073            665   L003009?:
0073 25E0       666            add     a,acc
0075            667   L003011?:
0075 D5F080     668            djnz    b,L003009?
0078 FB         669            mov     r3,a
0079            670   ;        sensor_test.c:123: switch(pin/0x10)
0079 EA         671            mov     a,r2
007A C4         672            swap    a
007B 540F       673            anl     a,#0x0f
007D FA         674            mov  r2,a
007E 24FC       675            add     a,#0xff - 0x03
0080 4000       676            jc      L003006?
0082 EA         677            mov     a,r2
0083 2A         678            add     a,r2
0084 2A         679            add     a,r2
0085 90B900     680            mov     dptr,#L003013?
0088 73         681            jmp     @a+dptr
0089            682   L003013?:
0089 020000     683            ljmp    L003001?
008C 020000     684            ljmp    L003002?
008F 020000     685            ljmp    L003003?
0092 020000     686            ljmp    L003004?
0095            687   ;        sensor_test.c:125: case 0: P0MDOUT |= mask; break;
0095            688   L003001?:
0095 EB         689            mov     a,r3
0096 42A4       690            orl     _P0MDOUT,a
0098            691   ;        sensor_test.c:126: case 1: P1MDOUT |= mask; break;
0098 22         692            ret
0099            693   L003002?:
0099 EB         694            mov     a,r3
009A 42A5       695            orl     _P1MDOUT,a
009C            696   ;        sensor_test.c:127: case 2: P2MDOUT |= mask; break; 
009C 22         697            ret
009D            698   L003003?:
009D EB         699            mov     a,r3
009E 42A6       700            orl     _P2MDOUT,a
00A0            701   ;        sensor_test.c:128: case 3: P3MDOUT |= mask; break; 
00A0 22         702            ret
00A1            703   L003004?:
00A1 EB         704            mov     a,r3
00A2 429C       705            orl     _P3MDOUT,a
00A4            706   ;        sensor_test.c:129: }    
00A4            707   L003006?:
00A4 22         708            ret
00A5            709   ;------------------------------------------------------------
00A5            710   ;Allocation info for local variables in function 'Timer3us'
00A5            711   ;------------------------------------------------------------
00A5            712   ;i                         Allocated with name '_Timer3us_i_1_64'
00A5            713   ;us                        Allocated to registers r2 
00A5            714   ;------------------------------------------------------------
00A5            715   ;        sensor_test.c:133: void Timer3us(unsigned char us)
00A5            716   ;        -----------------------------------------
00A5            717   ;         function Timer3us
00A5            718   ;        -----------------------------------------
00A5            719   _Timer3us:
00A5 AA82       720            mov     r2,dpl
00A7            721   ;        sensor_test.c:138: CKCON0|=0b_0100_0000;
00A7 438E40     722            orl     _CKCON0,#0x40
00AA            723   ;        sensor_test.c:140: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00AA 7592B8     724            mov     _TMR3RL,#0xB8
00AD 7593FF     725            mov     (_TMR3RL >> 8),#0xFF
00B0            726   ;        sensor_test.c:141: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00B0 859294     727            mov     _TMR3,_TMR3RL
00B3 859395     728            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00B6            729   ;        sensor_test.c:143: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00B6 759104     730            mov     _TMR3CN0,#0x04
00B9            731   ;        sensor_test.c:144: for (i = 0; i < us; i++)       // Count <us> overflows
00B9 7B00       732            mov     r3,#0x00
00BB            733   L004004?:
00BB C3         734            clr     c
00BC EB         735            mov     a,r3
00BD 9A         736            subb    a,r2
00BE 5000       737            jnc     L004007?
00C0            738   ;        sensor_test.c:146: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00C0            739   L004001?:
00C0 E591       740            mov     a,_TMR3CN0
00C2 30E7C0     741            jnb     acc.7,L004001?
00C5            742   ;        sensor_test.c:147: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00C5 53917F     743            anl     _TMR3CN0,#0x7F
00C8            744   ;        sensor_test.c:144: for (i = 0; i < us; i++)       // Count <us> overflows
00C8 0B         745            inc     r3
00C9 8000       746            sjmp    L004004?
00CB            747   L004007?:
00CB            748   ;        sensor_test.c:149: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00CB 759100     749            mov     _TMR3CN0,#0x00
00CE 22         750            ret
00CF            751   ;------------------------------------------------------------
00CF            752   ;Allocation info for local variables in function 'ptr_delay_us'
00CF            753   ;------------------------------------------------------------
00CF            754   ;intf_ptr                  Allocated to stack - offset -5
00CF            755   ;period                    Allocated to registers r2 r3 r4 r5 
00CF            756   ;------------------------------------------------------------
00CF            757   ;        sensor_test.c:153: void ptr_delay_us (uint32_t period, void *intf_ptr) reentrant
00CF            758   ;        -----------------------------------------
00CF            759   ;         function ptr_delay_us
00CF            760   ;        -----------------------------------------
00CF            761   _ptr_delay_us:
00CF C000       762            push    _bp
00D1 858100     763            mov     _bp,sp
00D4 AA82       764            mov     r2,dpl
00D6 AB83       765            mov     r3,dph
00D8 ACF0       766            mov     r4,b
00DA FD         767            mov     r5,a
00DB            768   ;        sensor_test.c:156: while (period--)
00DB            769   L005001?:
00DB 8A06       770            mov     ar6,r2
00DD 8B07       771            mov     ar7,r3
00DF 8C00       772            mov     ar0,r4
00E1 8D01       773            mov     ar1,r5
00E3 1A         774            dec     r2
00E4 BAFF00     775            cjne    r2,#0xff,L005009?
00E7 1B         776            dec     r3
00E8 BBFF00     777            cjne    r3,#0xff,L005009?
00EB 1C         778            dec     r4
00EC BCFF00     779            cjne    r4,#0xff,L005009?
00EF 1D         780            dec     r5
00F0            781   L005009?:
00F0 EE         782            mov     a,r6
00F1 4F         783            orl     a,r7
00F2 48         784            orl     a,r0
00F3 49         785            orl     a,r1
00F4 6000       786            jz      L005004?
00F6            787   ;        sensor_test.c:158: Timer3us(1);
00F6 758201     788            mov     dpl,#0x01
00F9 C002       789            push    ar2
00FB C003       790            push    ar3
00FD C004       791            push    ar4
00FF C005       792            push    ar5
0101 120000     793            lcall   _Timer3us
0104 D005       794            pop     ar5
0106 D004       795            pop     ar4
0108 D003       796            pop     ar3
010A D002       797            pop     ar2
010C 8000       798            sjmp    L005001?
010E            799   L005004?:
010E D000       800            pop     _bp
0110 22         801            ret
0111            802   ;------------------------------------------------------------
0111            803   ;Allocation info for local variables in function 'waitms'
0111            804   ;------------------------------------------------------------
0111            805   ;ms                        Allocated to registers r2 r3 
0111            806   ;j                         Allocated with name '_waitms_j_1_70'
0111            807   ;k                         Allocated with name '_waitms_k_1_70'
0111            808   ;------------------------------------------------------------
0111            809   ;        sensor_test.c:162: void waitms (unsigned int ms)
0111            810   ;        -----------------------------------------
0111            811   ;         function waitms
0111            812   ;        -----------------------------------------
0111            813   _waitms:
0111 AA82       814            mov     r2,dpl
0113 AB83       815            mov     r3,dph
0115            816   ;        sensor_test.c:166: for(j=0; j<ms; j++)
0115 7C00       817            mov     r4,#0x00
0117 7D00       818            mov     r5,#0x00
0119            819   L006005?:
0119 C3         820            clr     c
011A EC         821            mov     a,r4
011B 9A         822            subb    a,r2
011C ED         823            mov     a,r5
011D 9B         824            subb    a,r3
011E 5000       825            jnc     L006009?
0120            826   ;        sensor_test.c:167: for (k=0; k<4; k++) Timer3us(250);
0120 7E00       827            mov     r6,#0x00
0122            828   L006001?:
0122 BE0440     829            cjne    r6,#0x04,L006018?
0125            830   L006018?:
0125 5000       831            jnc     L006007?
0127 7582FA     832            mov     dpl,#0xFA
012A C002       833            push    ar2
012C C003       834            push    ar3
012E C004       835            push    ar4
0130 C005       836            push    ar5
0132 C006       837            push    ar6
0134 120000     838            lcall   _Timer3us
0137 D006       839            pop     ar6
0139 D005       840            pop     ar5
013B D004       841            pop     ar4
013D D003       842            pop     ar3
013F D002       843            pop     ar2
0141 0E         844            inc     r6
0142 8000       845            sjmp    L006001?
0144            846   L006007?:
0144            847   ;        sensor_test.c:166: for(j=0; j<ms; j++)
0144 0C         848            inc     r4
0145 BC0080     849            cjne    r4,#0x00,L006005?
0148 0D         850            inc     r5
0149 8000       851            sjmp    L006005?
014B            852   L006009?:
014B 22         853            ret
014C            854   ;------------------------------------------------------------
014C            855   ;Allocation info for local variables in function 'spi_transfer'
014C            856   ;------------------------------------------------------------
014C            857   ;x                         Allocated to registers 
014C            858   ;------------------------------------------------------------
014C            859   ;        sensor_test.c:171: uint8_t spi_transfer(uint8_t x) // instead of data we used x
014C            860   ;        -----------------------------------------
014C            861   ;         function spi_transfer
014C            862   ;        -----------------------------------------
014C            863   _spi_transfer:
014C 8582A3     864            mov     _SPI0DAT,dpl
014F            865   ;        sensor_test.c:174: while (!(SPI0CN0 & 0x80)); // Wait for transmission to complete (SPIF flag)
014F            866   L007001?:
014F E5F8       867            mov     a,_SPI0CN0
0151 30E7C0     868            jnb     acc.7,L007001?
0154            869   ;        sensor_test.c:175: SPI0CN0 &= ~0x80;          // Clear the flag
0154 53F87F     870            anl     _SPI0CN0,#0x7F
0157            871   ;        sensor_test.c:176: return SPI0DAT;            // Return received byte
0157 85A382     872            mov     dpl,_SPI0DAT
015A 22         873            ret
015B            874   ;------------------------------------------------------------
015B            875   ;Allocation info for local variables in function 'bmm150_spi_read'
015B            876   ;------------------------------------------------------------
015B            877   ;reg_data                  Allocated to stack - offset -5
015B            878   ;length                    Allocated to stack - offset -9
015B            879   ;intf_ptr                  Allocated to stack - offset -12
015B            880   ;reg_addr                  Allocated to registers r2 
015B            881   ;i                         Allocated to stack - offset 1
015B            882   ;------------------------------------------------------------
015B            883   ;        sensor_test.c:195: int8_t bmm150_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) __reentrant
015B            884   ;        -----------------------------------------
015B            885   ;         function bmm150_spi_read
015B            886   ;        -----------------------------------------
015B            887   _bmm150_spi_read:
015B C000       888            push    _bp
015D E581       889            mov     a,sp
015F F500       890            mov     _bp,a
0161 2404       891            add     a,#0x04
0163 F581       892            mov     sp,a
0165 AA82       893            mov     r2,dpl
0167            894   ;        sensor_test.c:201: reg_addr |= 0x80;
0167 430280     895            orl     ar2,#0x80
016A            896   ;        sensor_test.c:202: CS = 0;
016A C285       897            clr     _P0_5
016C            898   ;        sensor_test.c:205: if (spi_transfer(reg_addr) == 0xFF)
016C 8A82       899            mov     dpl,r2
016E 120000     900            lcall   _spi_transfer
0171 AA82       901            mov     r2,dpl
0173 BAFF00     902            cjne    r2,#0xFF,L008011?
0176            903   ;        sensor_test.c:207: CS = 1; // End SPI 
0176 D285       904            setb    _P0_5
0178            905   ;        sensor_test.c:208: return BMM150_E_COM_FAIL;
0178 7582FC     906            mov     dpl,#0xFC
017B            907   ;        sensor_test.c:211: for (i = 0; i < length; i++)
017B 8000       908            sjmp    L008007?
017D            909   L008011?:
017D A800       910            mov     r0,_bp
017F 08         911            inc     r0
0180 E4         912            clr     a
0181 F6         913            mov     @r0,a
0182 08         914            inc     r0
0183 F6         915            mov     @r0,a
0184 08         916            inc     r0
0185 F6         917            mov     @r0,a
0186 08         918            inc     r0
0187 F6         919            mov     @r0,a
0188            920   L008003?:
0188 A800       921            mov     r0,_bp
018A 08         922            inc     r0
018B E500       923            mov     a,_bp
018D 24F7       924            add     a,#0xf7
018F F9         925            mov     r1,a
0190 C3         926            clr     c
0191 E6         927            mov     a,@r0
0192 97         928            subb    a,@r1
0193 08         929            inc     r0
0194 E6         930            mov     a,@r0
0195 09         931            inc     r1
0196 97         932            subb    a,@r1
0197 08         933            inc     r0
0198 E6         934            mov     a,@r0
0199 09         935            inc     r1
019A 97         936            subb    a,@r1
019B 08         937            inc     r0
019C E6         938            mov     a,@r0
019D 09         939            inc     r1
019E 97         940            subb    a,@r1
019F 5000       941            jnc     L008006?
01A1            942   ;        sensor_test.c:213: reg_data[i] = spi_transfer(0x00);
01A1 E500       943            mov     a,_bp
01A3 24FB       944            add     a,#0xfb
01A5 F8         945            mov     r0,a
01A6 A900       946            mov     r1,_bp
01A8 09         947            inc     r1
01A9 E7         948            mov     a,@r1
01AA 26         949            add     a,@r0
01AB FE         950            mov     r6,a
01AC 09         951            inc     r1
01AD E7         952            mov     a,@r1
01AE 08         953            inc     r0
01AF 36         954            addc    a,@r0
01B0 FF         955            mov     r7,a
01B1 08         956            inc     r0
01B2 8602       957            mov     ar2,@r0
01B4 758200     958            mov     dpl,#0x00
01B7 C002       959            push    ar2
01B9 C006       960            push    ar6
01BB C007       961            push    ar7
01BD 120000     962            lcall   _spi_transfer
01C0 AB82       963            mov     r3,dpl
01C2 D007       964            pop     ar7
01C4 D006       965            pop     ar6
01C6 D002       966            pop     ar2
01C8 8E82       967            mov     dpl,r6
01CA 8F83       968            mov     dph,r7
01CC 8AF0       969            mov     b,r2
01CE EB         970            mov     a,r3
01CF 120000     971            lcall   __gptrput
01D2            972   ;        sensor_test.c:211: for (i = 0; i < length; i++)
01D2 A800       973            mov     r0,_bp
01D4 08         974            inc     r0
01D5 06         975            inc     @r0
01D6 B60040     976            cjne    @r0,#0x00,L008016?
01D9 08         977            inc     r0
01DA 06         978            inc     @r0
01DB B60040     979            cjne    @r0,#0x00,L008016?
01DE 08         980            inc     r0
01DF 06         981            inc     @r0
01E0 B60040     982            cjne    @r0,#0x00,L008016?
01E3 08         983            inc     r0
01E4 06         984            inc     @r0
01E5            985   L008016?:
01E5 8000       986            sjmp    L008003?
01E7            987   L008006?:
01E7            988   ;        sensor_test.c:216: CS = 1;
01E7 D285       989            setb    _P0_5
01E9            990   ;        sensor_test.c:217: return BMM150_OK;
01E9 758200     991            mov     dpl,#0x00
01EC            992   L008007?:
01EC 850081     993            mov     sp,_bp
01EF D000       994            pop     _bp
01F1 22         995            ret
01F2            996   ;------------------------------------------------------------
01F2            997   ;Allocation info for local variables in function 'bmm150_spi_write'
01F2            998   ;------------------------------------------------------------
01F2            999   ;reg_data                  Allocated to stack - offset -5
01F2           1000   ;length                    Allocated to stack - offset -9
01F2           1001   ;intf_ptr                  Allocated to stack - offset -12
01F2           1002   ;reg_addr                  Allocated to registers r2 
01F2           1003   ;i                         Allocated to stack - offset 1
01F2           1004   ;------------------------------------------------------------
01F2           1005   ;        sensor_test.c:236: int8_t bmm150_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) __reentrant
01F2           1006   ;        -----------------------------------------
01F2           1007   ;         function bmm150_spi_write
01F2           1008   ;        -----------------------------------------
01F2           1009   _bmm150_spi_write:
01F2 C000      1010            push    _bp
01F4 E581      1011            mov     a,sp
01F6 F500      1012            mov     _bp,a
01F8 2404      1013            add     a,#0x04
01FA F581      1014            mov     sp,a
01FC AA82      1015            mov     r2,dpl
01FE           1016   ;        sensor_test.c:241: CS = 0; // Pull CS low to start communication
01FE C285      1017            clr     _P0_5
0200           1018   ;        sensor_test.c:244: if (spi_transfer(reg_addr & 0x7F) == 0xFF) // Check if transfer failed
0200 747F      1019            mov     a,#0x7F
0202 5A        1020            anl     a,r2
0203 F582      1021            mov     dpl,a
0205 120000    1022            lcall   _spi_transfer
0208 AA82      1023            mov     r2,dpl
020A BAFF80    1024            cjne    r2,#0xFF,L009014?
020D           1025   ;        sensor_test.c:246: CS = 1; // Pull CS high
020D D285      1026            setb    _P0_5
020F           1027   ;        sensor_test.c:247: return BMM150_E_COM_FAIL; // Return communication failure
020F 7582FC    1028            mov     dpl,#0xFC
0212           1029   ;        sensor_test.c:251: for (i = 0; i < length; i++)
0212 8000      1030            sjmp    L009009?
0214           1031   L009014?:
0214 A800      1032            mov     r0,_bp
0216 08        1033            inc     r0
0217 E4        1034            clr     a
0218 F6        1035            mov     @r0,a
0219 08        1036            inc     r0
021A F6        1037            mov     @r0,a
021B 08        1038            inc     r0
021C F6        1039            mov     @r0,a
021D 08        1040            inc     r0
021E F6        1041            mov     @r0,a
021F           1042   L009005?:
021F A800      1043            mov     r0,_bp
0221 08        1044            inc     r0
0222 E500      1045            mov     a,_bp
0224 24F7      1046            add     a,#0xf7
0226 F9        1047            mov     r1,a
0227 C3        1048            clr     c
0228 E6        1049            mov     a,@r0
0229 97        1050            subb    a,@r1
022A 08        1051            inc     r0
022B E6        1052            mov     a,@r0
022C 09        1053            inc     r1
022D 97        1054            subb    a,@r1
022E 08        1055            inc     r0
022F E6        1056            mov     a,@r0
0230 09        1057            inc     r1
0231 97        1058            subb    a,@r1
0232 08        1059            inc     r0
0233 E6        1060            mov     a,@r0
0234 09        1061            inc     r1
0235 97        1062            subb    a,@r1
0236 5000      1063            jnc     L009008?
0238           1064   ;        sensor_test.c:253: if (spi_transfer(reg_data[i]) == 0xFF) // Check if transfer failed
0238 E500      1065            mov     a,_bp
023A 24FB      1066            add     a,#0xfb
023C F8        1067            mov     r0,a
023D A900      1068            mov     r1,_bp
023F 09        1069            inc     r1
0240 E7        1070            mov     a,@r1
0241 26        1071            add     a,@r0
0242 FE        1072            mov     r6,a
0243 09        1073            inc     r1
0244 E7        1074            mov     a,@r1
0245 08        1075            inc     r0
0246 36        1076            addc    a,@r0
0247 FF        1077            mov     r7,a
0248 08        1078            inc     r0
0249 8602      1079            mov     ar2,@r0
024B 8E82      1080            mov     dpl,r6
024D 8F83      1081            mov     dph,r7
024F 8AF0      1082            mov     b,r2
0251 120000    1083            lcall   __gptrget
0254 F582      1084            mov     dpl,a
0256 120000    1085            lcall   _spi_transfer
0259 AA82      1086            mov     r2,dpl
025B BAFFC0    1087            cjne    r2,#0xFF,L009007?
025E           1088   ;        sensor_test.c:255: CS = 1; // Pull CS high
025E D285      1089            setb    _P0_5
0260           1090   ;        sensor_test.c:256: return BMM150_E_COM_FAIL; // Return communication failure
0260 7582FC    1091            mov     dpl,#0xFC
0263 8000      1092            sjmp    L009009?
0265           1093   L009007?:
0265           1094   ;        sensor_test.c:251: for (i = 0; i < length; i++)
0265 A800      1095            mov     r0,_bp
0267 08        1096            inc     r0
0268 06        1097            inc     @r0
0269 B60000    1098            cjne    @r0,#0x00,L009020?
026C 08        1099            inc     r0
026D 06        1100            inc     @r0
026E B60000    1101            cjne    @r0,#0x00,L009020?
0271 08        1102            inc     r0
0272 06        1103            inc     @r0
0273 B60000    1104            cjne    @r0,#0x00,L009020?
0276 08        1105            inc     r0
0277 06        1106            inc     @r0
0278           1107   L009020?:
0278 8000      1108            sjmp    L009005?
027A           1109   L009008?:
027A           1110   ;        sensor_test.c:260: CS = 1; // Pull CS high to end communication
027A D285      1111            setb    _P0_5
027C           1112   ;        sensor_test.c:262: return BMM150_OK; // If all transfers succeeded, return success
027C 758200    1113            mov     dpl,#0x00
027F           1114   L009009?:
027F 850081    1115            mov     sp,_bp
0282 D000      1116            pop     _bp
0284 22        1117            ret
0285           1118   ;------------------------------------------------------------
0285           1119   ;Allocation info for local variables in function 'bmm150_delay_us'
0285           1120   ;------------------------------------------------------------
0285           1121   ;intf_ptr                  Allocated to stack - offset -5
0285           1122   ;period                    Allocated to registers r2 r3 r4 r5 
0285           1123   ;------------------------------------------------------------
0285           1124   ;        sensor_test.c:266: void bmm150_delay_us(uint32_t period, void *intf_ptr) __reentrant
0285           1125   ;        -----------------------------------------
0285           1126   ;         function bmm150_delay_us
0285           1127   ;        -----------------------------------------
0285           1128   _bmm150_delay_us:
0285 C000      1129            push    _bp
0287 858100    1130            mov     _bp,sp
028A AA82      1131            mov     r2,dpl
028C AB83      1132            mov     r3,dph
028E ACF0      1133            mov     r4,b
0290 FD        1134            mov     r5,a
0291           1135   ;        sensor_test.c:269: while (period--) Timer3us(1); 
0291           1136   L010001?:
0291 8A06      1137            mov     ar6,r2
0293 8B07      1138            mov     ar7,r3
0295 8C00      1139            mov     ar0,r4
0297 8D01      1140            mov     ar1,r5
0299 1A        1141            dec     r2
029A BAFF80    1142            cjne    r2,#0xff,L010009?
029D 1B        1143            dec     r3
029E BBFF80    1144            cjne    r3,#0xff,L010009?
02A1 1C        1145            dec     r4
02A2 BCFF80    1146            cjne    r4,#0xff,L010009?
02A5 1D        1147            dec     r5
02A6           1148   L010009?:
02A6 EE        1149            mov     a,r6
02A7 4F        1150            orl     a,r7
02A8 48        1151            orl     a,r0
02A9 49        1152            orl     a,r1
02AA 6000      1153            jz      L010004?
02AC 758201    1154            mov     dpl,#0x01
02AF C002      1155            push    ar2
02B1 C003      1156            push    ar3
02B3 C004      1157            push    ar4
02B5 C005      1158            push    ar5
02B7 120000    1159            lcall   _Timer3us
02BA D005      1160            pop     ar5
02BC D004      1161            pop     ar4
02BE D003      1162            pop     ar3
02C0 D002      1163            pop     ar2
02C2 8000      1164            sjmp    L010001?
02C4           1165   L010004?:
02C4 D000      1166            pop     _bp
02C6 22        1167            ret
02C7           1168   ;------------------------------------------------------------
02C7           1169   ;Allocation info for local variables in function 'bmm150_error_codes_print_result'
02C7           1170   ;------------------------------------------------------------
02C7           1171   ;rslt                      Allocated with name '_bmm150_error_codes_print_result_PARM_2'
02C7           1172   ;api_name                  Allocated to registers r2 r3 r4 
02C7           1173   ;------------------------------------------------------------
02C7           1174   ;        sensor_test.c:275: void bmm150_error_codes_print_result(const char api_name[], int8_t rslt)
02C7           1175   ;        -----------------------------------------
02C7           1176   ;         function bmm150_error_codes_print_result
02C7           1177   ;        -----------------------------------------
02C7           1178   _bmm150_error_codes_print_result:
02C7 AA82      1179            mov     r2,dpl
02C9 AB83      1180            mov     r3,dph
02CB ACF0      1181            mov     r4,b
02CD           1182   ;        sensor_test.c:277: if (rslt != BMM150_OK)
02CD E540      1183            mov     a,_bmm150_error_codes_print_result_PARM_2
02CF 7000      1184            jnz     L011016?
02D1 22        1185            ret
02D2           1186   L011016?:
02D2           1187   ;        sensor_test.c:279: printf("%s\t", api_name);
02D2 C002      1188            push    ar2
02D4 C003      1189            push    ar3
02D6 C004      1190            push    ar4
02D8 7440      1191            mov     a,#__str_0
02DA C0E0      1192            push    acc
02DC 74C2      1193            mov     a,#(__str_0 >> 8)
02DE C0E0      1194            push    acc
02E0 7480      1195            mov     a,#0x80
02E2 C0E0      1196            push    acc
02E4 120000    1197            lcall   _printf
02E7 E581      1198            mov     a,sp
02E9 24FA      1199            add     a,#0xfa
02EB F581      1200            mov     sp,a
02ED           1201   ;        sensor_test.c:281: switch (rslt)
02ED 74FC      1202            mov     a,#0xFC
02EF B540C0    1203            cjne    a,_bmm150_error_codes_print_result_PARM_2,L011017?
02F2 8000      1204            sjmp    L011002?
02F4           1205   L011017?:
02F4 74FD      1206            mov     a,#0xFD
02F6 B54040    1207            cjne    a,_bmm150_error_codes_print_result_PARM_2,L011018?
02F9 020000    1208            ljmp    L011004?
02FC           1209   L011018?:
02FC 74FE      1210            mov     a,#0xFE
02FE B540C0    1211            cjne    a,_bmm150_error_codes_print_result_PARM_2,L011019?
0301 8000      1212            sjmp    L011003?
0303           1213   L011019?:
0303 74FF      1214            mov     a,#0xFF
0305 B54040    1215            cjne    a,_bmm150_error_codes_print_result_PARM_2,L011020?
0308 8000      1216            sjmp    L011021?
030A           1217   L011020?:
030A 020000    1218            ljmp    L011005?
030D           1219   L011021?:
030D           1220   ;        sensor_test.c:284: printf("Error [%d] : Null pointer error.", rslt);
030D E540      1221            mov     a,_bmm150_error_codes_print_result_PARM_2
030F FA        1222            mov     r2,a
0310 33        1223            rlc     a
0311 95E0      1224            subb    a,acc
0313 FB        1225            mov     r3,a
0314 C002      1226            push    ar2
0316 C003      1227            push    ar3
0318 7400      1228            mov     a,#__str_1
031A C0E0      1229            push    acc
031C 74C5      1230            mov     a,#(__str_1 >> 8)
031E C0E0      1231            push    acc
0320 7480      1232            mov     a,#0x80
0322 C0E0      1233            push    acc
0324 120000    1234            lcall   _printf
0327 E581      1235            mov     a,sp
0329 24FB      1236            add     a,#0xfb
032B F581      1237            mov     sp,a
032D           1238   ;        sensor_test.c:286: "It occurs when the user tries to assign value (not address) to a pointer, which has been initialized to NULL.\r\n");
032D 7440      1239            mov     a,#__str_2
032F C0E0      1240            push    acc
0331 74C5      1241            mov     a,#(__str_2 >> 8)
0333 C0E0      1242            push    acc
0335 7480      1243            mov     a,#0x80
0337 C0E0      1244            push    acc
0339 120000    1245            lcall   _printf
033C 1581      1246            dec     sp
033E 1581      1247            dec     sp
0340 1581      1248            dec     sp
0342           1249   ;        sensor_test.c:287: break;
0342 22        1250            ret
0343           1251   ;        sensor_test.c:289: case BMM150_E_COM_FAIL:
0343           1252   L011002?:
0343           1253   ;        sensor_test.c:290: printf("Error [%d] : Communication failure error.", rslt);
0343 E540      1254            mov     a,_bmm150_error_codes_print_result_PARM_2
0345 FA        1255            mov     r2,a
0346 33        1256            rlc     a
0347 95E0      1257            subb    a,acc
0349 FB        1258            mov     r3,a
034A C002      1259            push    ar2
034C C003      1260            push    ar3
034E 7480      1261            mov     a,#__str_3
0350 C0E0      1262            push    acc
0352 74C5      1263            mov     a,#(__str_3 >> 8)
0354 C0E0      1264            push    acc
0356 7480      1265            mov     a,#0x80
0358 C0E0      1266            push    acc
035A 120000    1267            lcall   _printf
035D E581      1268            mov     a,sp
035F 24FB      1269            add     a,#0xfb
0361 F581      1270            mov     sp,a
0363           1271   ;        sensor_test.c:292: "It occurs due to read/write operation failure and also due to power failure during communication\r\n");
0363 74C0      1272            mov     a,#__str_4
0365 C0E0      1273            push    acc
0367 74C5      1274            mov     a,#(__str_4 >> 8)
0369 C0E0      1275            push    acc
036B 7480      1276            mov     a,#0x80
036D C0E0      1277            push    acc
036F 120000    1278            lcall   _printf
0372 1581      1279            dec     sp
0374 1581      1280            dec     sp
0376 1581      1281            dec     sp
0378           1282   ;        sensor_test.c:293: break;
0378 22        1283            ret
0379           1284   ;        sensor_test.c:295: case BMM150_E_DEV_NOT_FOUND:
0379           1285   L011003?:
0379           1286   ;        sensor_test.c:296: printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n", rslt);
0379 E540      1287            mov     a,_bmm150_error_codes_print_result_PARM_2
037B FA        1288            mov     r2,a
037C 33        1289            rlc     a
037D 95E0      1290            subb    a,acc
037F FB        1291            mov     r3,a
0380 C002      1292            push    ar2
0382 C003      1293            push    ar3
0384 7400      1294            mov     a,#__str_5
0386 C0E0      1295            push    acc
0388 74C6      1296            mov     a,#(__str_5 >> 8)
038A C0E0      1297            push    acc
038C 7480      1298            mov     a,#0x80
038E C0E0      1299            push    acc
0390 120000    1300            lcall   _printf
0393 E581      1301            mov     a,sp
0395 24FB      1302            add     a,#0xfb
0397 F581      1303            mov     sp,a
0399           1304   ;        sensor_test.c:297: break;
0399           1305   ;        sensor_test.c:299: case BMM150_E_INVALID_CONFIG:
0399 22        1306            ret
039A           1307   L011004?:
039A           1308   ;        sensor_test.c:300: printf("Error [%d] : Invalid sensor configuration.", rslt);
039A E540      1309            mov     a,_bmm150_error_codes_print_result_PARM_2
039C FA        1310            mov     r2,a
039D 33        1311            rlc     a
039E 95E0      1312            subb    a,acc
03A0 FB        1313            mov     r3,a
03A1 C002      1314            push    ar2
03A3 C003      1315            push    ar3
03A5 7440      1316            mov     a,#__str_6
03A7 C0E0      1317            push    acc
03A9 74C6      1318            mov     a,#(__str_6 >> 8)
03AB C0E0      1319            push    acc
03AD 7480      1320            mov     a,#0x80
03AF C0E0      1321            push    acc
03B1 120000    1322            lcall   _printf
03B4 E581      1323            mov     a,sp
03B6 24FB      1324            add     a,#0xfb
03B8 F581      1325            mov     sp,a
03BA           1326   ;        sensor_test.c:301: printf(" It occurs when there is a mismatch in the requested feature with the available one\r\n");
03BA 7480      1327            mov     a,#__str_7
03BC C0E0      1328            push    acc
03BE 74C6      1329            mov     a,#(__str_7 >> 8)
03C0 C0E0      1330            push    acc
03C2 7480      1331            mov     a,#0x80
03C4 C0E0      1332            push    acc
03C6 120000    1333            lcall   _printf
03C9 1581      1334            dec     sp
03CB 1581      1335            dec     sp
03CD 1581      1336            dec     sp
03CF           1337   ;        sensor_test.c:302: break;
03CF           1338   ;        sensor_test.c:304: default:
03CF 22        1339            ret
03D0           1340   L011005?:
03D0           1341   ;        sensor_test.c:305: printf("Error [%d] : Unknown error code\r\n", rslt);
03D0 E540      1342            mov     a,_bmm150_error_codes_print_result_PARM_2
03D2 FA        1343            mov     r2,a
03D3 33        1344            rlc     a
03D4 95E0      1345            subb    a,acc
03D6 FB        1346            mov     r3,a
03D7 C002      1347            push    ar2
03D9 C003      1348            push    ar3
03DB 74C0      1349            mov     a,#__str_8
03DD C0E0      1350            push    acc
03DF 74C6      1351            mov     a,#(__str_8 >> 8)
03E1 C0E0      1352            push    acc
03E3 7480      1353            mov     a,#0x80
03E5 C0E0      1354            push    acc
03E7 120000    1355            lcall   _printf
03EA E581      1356            mov     a,sp
03EC 24FB      1357            add     a,#0xfb
03EE F581      1358            mov     sp,a
03F0           1359   ;        sensor_test.c:307: }
03F0 22        1360            ret
03F1           1361   ;------------------------------------------------------------
03F1           1362   ;Allocation info for local variables in function 'bmm150_interface_selection'
03F1           1363   ;------------------------------------------------------------
03F1           1364   ;intf                      Allocated with name '_bmm150_interface_selection_PARM_2'
03F1           1365   ;dev                       Allocated to registers r2 r3 r4 
03F1           1366   ;rslt                      Allocated with name '_bmm150_interface_selection_rslt_1_89'
03F1           1367   ;------------------------------------------------------------
03F1           1368   ;        sensor_test.c:314: __xdata int8_t bmm150_interface_selection(struct bmm150_dev *dev, uint8_t intf)
03F1           1369   ;        -----------------------------------------
03F1           1370   ;         function bmm150_interface_selection
03F1           1371   ;        -----------------------------------------
03F1           1372   _bmm150_interface_selection:
03F1 AA82      1373            mov     r2,dpl
03F3 AB83      1374            mov     r3,dph
03F5 ACF0      1375            mov     r4,b
03F7           1376   ;        sensor_test.c:316: __xdata int8_t rslt = BMM150_OK;
03F7 90B500    1377            mov     dptr,#_bmm150_interface_selection_rslt_1_89
03FA E4        1378            clr     a
03FB F0        1379            movx    @dptr,a
03FC           1380   ;        sensor_test.c:318: if (dev != NULL)
03FC BA0000    1381            cjne    r2,#0x00,L012011?
03FF BB0000    1382            cjne    r3,#0x00,L012011?
0402 BC0000    1383            cjne    r4,#0x00,L012011?
0405 020000    1384            ljmp    L012005?
0408           1385   L012011?:
0408           1386   ;        sensor_test.c:320: if (intf == BMM150_SPI_INTF)
0408 E5E0      1387            mov     a,_bmm150_interface_selection_PARM_2
040A 6000      1388            jz      L012012?
040C 020000    1389            ljmp    L012002?
040F           1390   L012012?:
040F           1391   ;        sensor_test.c:322: printf("SPI Interface Selected\n");
040F C002      1392            push    ar2
0411 C003      1393            push    ar3
0413 C004      1394            push    ar4
0415 7400      1395            mov     a,#__str_9
0417 C0E0      1396            push    acc
0419 74C8      1397            mov     a,#(__str_9 >> 8)
041B C0E0      1398            push    acc
041D 7480      1399            mov     a,#0x80
041F C0E0      1400            push    acc
0421 120000    1401            lcall   _printf
0424 1581      1402            dec     sp
0426 1581      1403            dec     sp
0428 1581      1404            dec     sp
042A D004      1405            pop     ar4
042C D003      1406            pop     ar3
042E D002      1407            pop     ar2
0430           1408   ;        sensor_test.c:329: dev->read = bmm150_spi_read;
0430 7406      1409            mov     a,#0x06
0432 2A        1410            add     a,r2
0433 FD        1411            mov     r5,a
0434 E4        1412            clr     a
0435 3B        1413            addc    a,r3
0436 FE        1414            mov     r6,a
0437 8C07      1415            mov     ar7,r4
0439 8D82      1416            mov     dpl,r5
043B 8E83      1417            mov     dph,r6
043D 8FF0      1418            mov     b,r7
043F 74F0      1419            mov     a,#_bmm150_spi_read
0441 120000    1420            lcall   __gptrput
0444 A3        1421            inc     dptr
0445 7412      1422            mov     a,#(_bmm150_spi_read >> 8)
0447 120000    1423            lcall   __gptrput
044A           1424   ;        sensor_test.c:330: dev->write = bmm150_spi_write;
044A 7408      1425            mov     a,#0x08
044C 2A        1426            add     a,r2
044D FD        1427            mov     r5,a
044E E4        1428            clr     a
044F 3B        1429            addc    a,r3
0450 FE        1430            mov     r6,a
0451 8C07      1431            mov     ar7,r4
0453 8D82      1432            mov     dpl,r5
0455 8E83      1433            mov     dph,r6
0457 8FF0      1434            mov     b,r7
0459 74A0      1435            mov     a,#_bmm150_spi_write
045B 120000    1436            lcall   __gptrput
045E A3        1437            inc     dptr
045F 7412      1438            mov     a,#(_bmm150_spi_write >> 8)
0461 120000    1439            lcall   __gptrput
0464           1440   ;        sensor_test.c:331: dev->intf = BMM150_SPI_INTF;
0464 7401      1441            mov     a,#0x01
0466 2A        1442            add     a,r2
0467 FD        1443            mov     r5,a
0468 E4        1444            clr     a
0469 3B        1445            addc    a,r3
046A FE        1446            mov     r6,a
046B 8C07      1447            mov     ar7,r4
046D 8D82      1448            mov     dpl,r5
046F 8E83      1449            mov     dph,r6
0471 8FF0      1450            mov     b,r7
0473 E4        1451            clr     a
0474 120000    1452            lcall   __gptrput
0477           1453   ;        sensor_test.c:334: dev->intf_ptr = NULL; // We don't need an intf_ptr for direct GPIO control
0477 7402      1454            mov     a,#0x02
0479 2A        1455            add     a,r2
047A FD        1456            mov     r5,a
047B E4        1457            clr     a
047C 3B        1458            addc    a,r3
047D FE        1459            mov     r6,a
047E 8C07      1460            mov     ar7,r4
0480 8D82      1461            mov     dpl,r5
0482 8E83      1462            mov     dph,r6
0484 8FF0      1463            mov     b,r7
0486 E4        1464            clr     a
0487 120000    1465            lcall   __gptrput
048A A3        1466            inc     dptr
048B E4        1467            clr     a
048C 120000    1468            lcall   __gptrput
048F A3        1469            inc     dptr
0490 E4        1470            clr     a
0491 120000    1471            lcall   __gptrput
0494           1472   ;        sensor_test.c:337: dev->delay_us = bmm150_delay_us;
0494 740A      1473            mov     a,#0x0A
0496 2A        1474            add     a,r2
0497 FA        1475            mov     r2,a
0498 E4        1476            clr     a
0499 3B        1477            addc    a,r3
049A FB        1478            mov     r3,a
049B 8A82      1479            mov     dpl,r2
049D 8B83      1480            mov     dph,r3
049F 8CF0      1481            mov     b,r4
04A1 7450      1482            mov     a,#_bmm150_delay_us
04A3 120000    1483            lcall   __gptrput
04A6 A3        1484            inc     dptr
04A7 7412      1485            mov     a,#(_bmm150_delay_us >> 8)
04A9 120000    1486            lcall   __gptrput
04AC 8000      1487            sjmp    L012006?
04AE           1488   L012002?:
04AE           1489   ;        sensor_test.c:341: printf("Invalid Interface Selection\n");
04AE 7480      1490            mov     a,#__str_10
04B0 C0E0      1491            push    acc
04B2 74C8      1492            mov     a,#(__str_10 >> 8)
04B4 C0E0      1493            push    acc
04B6 7480      1494            mov     a,#0x80
04B8 C0E0      1495            push    acc
04BA 120000    1496            lcall   _printf
04BD 1581      1497            dec     sp
04BF 1581      1498            dec     sp
04C1 1581      1499            dec     sp
04C3           1500   ;        sensor_test.c:342: rslt = BMM150_E_INVALID_CONFIG;
04C3 90B500    1501            mov     dptr,#_bmm150_interface_selection_rslt_1_89
04C6 74FD      1502            mov     a,#0xFD
04C8 F0        1503            movx    @dptr,a
04C9 8000      1504            sjmp    L012006?
04CB           1505   L012005?:
04CB           1506   ;        sensor_test.c:347: rslt = BMM150_E_NULL_PTR;
04CB 90B500    1507            mov     dptr,#_bmm150_interface_selection_rslt_1_89
04CE 74FF      1508            mov     a,#0xFF
04D0 F0        1509            movx    @dptr,a
04D1           1510   L012006?:
04D1           1511   ;        sensor_test.c:350: return rslt;
04D1 90B500    1512            mov     dptr,#_bmm150_interface_selection_rslt_1_89
04D4 E0        1513            movx    a,@dptr
04D5 F582      1514            mov     dpl,a
04D7 22        1515            ret
04D8           1516   ;------------------------------------------------------------
04D8           1517   ;Allocation info for local variables in function 'set_config'
04D8           1518   ;------------------------------------------------------------
04D8           1519   ;dev                       Allocated to registers r2 r3 
04D8           1520   ;rslt                      Allocated with name '_set_config_rslt_1_95'
04D8           1521   ;settings                  Allocated with name '_set_config_settings_1_95'
04D8           1522   ;------------------------------------------------------------
04D8           1523   ;        sensor_test.c:353: static int8_t set_config(__xdata struct bmm150_dev *dev)
04D8           1524   ;        -----------------------------------------
04D8           1525   ;         function set_config
04D8           1526   ;        -----------------------------------------
04D8           1527   _set_config:
04D8 AA82      1528            mov     r2,dpl
04DA AB83      1529            mov     r3,dph
04DC           1530   ;        sensor_test.c:361: settings.pwr_mode = BMM150_POWERMODE_NORMAL;
04DC 90B5A1    1531            mov     dptr,#(_set_config_settings_1_95 + 0x0001)
04DF E4        1532            clr     a
04E0 F0        1533            movx    @dptr,a
04E1           1534   ;        sensor_test.c:362: rslt = bmm150_set_op_mode(&settings, dev);
04E1 8A00      1535            mov     _bmm150_set_op_mode_PARM_2,r2
04E3 8B01      1536            mov     (_bmm150_set_op_mode_PARM_2 + 1),r3
04E5 750200    1537            mov     (_bmm150_set_op_mode_PARM_2 + 2),#0x00
04E8 90B5A0    1538            mov     dptr,#_set_config_settings_1_95
04EB 75F000    1539            mov     b,#0x00
04EE C002      1540            push    ar2
04F0 C003      1541            push    ar3
04F2 120000    1542            lcall   _bmm150_set_op_mode
04F5 AC82      1543            mov     r4,dpl
04F7 90B550    1544            mov     dptr,#_set_config_rslt_1_95
04FA EC        1545            mov     a,r4
04FB F0        1546            movx    @dptr,a
04FC           1547   ;        sensor_test.c:363: bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
04FC 8C40      1548            mov     _bmm150_error_codes_print_result_PARM_2,r4
04FE 90C9A0    1549            mov     dptr,#__str_11
0501 75F080    1550            mov     b,#0x80
0504 C004      1551            push    ar4
0506 120000    1552            lcall   _bmm150_error_codes_print_result
0509 D004      1553            pop     ar4
050B D003      1554            pop     ar3
050D D002      1555            pop     ar2
050F           1556   ;        sensor_test.c:365: if (rslt == BMM150_OK)
050F EC        1557            mov     a,r4
0510 7000      1558            jnz     L013004?
0512           1559   ;        sensor_test.c:370: settings.preset_mode = BMM150_PRESETMODE_LOWPOWER;
0512 90B5A5    1560            mov     dptr,#(_set_config_settings_1_95 + 0x0005)
0515 7401      1561            mov     a,#0x01
0517 F0        1562            movx    @dptr,a
0518           1563   ;        sensor_test.c:371: rslt = bmm150_set_presetmode(&settings, dev);
0518 8A00      1564            mov     _bmm150_set_presetmode_PARM_2,r2
051A 8B01      1565            mov     (_bmm150_set_presetmode_PARM_2 + 1),r3
051C 750200    1566            mov     (_bmm150_set_presetmode_PARM_2 + 2),#0x00
051F 90B5A0    1567            mov     dptr,#_set_config_settings_1_95
0522 75F000    1568            mov     b,#0x00
0525 C002      1569            push    ar2
0527 C003      1570            push    ar3
0529 120000    1571            lcall   _bmm150_set_presetmode
052C AC82      1572            mov     r4,dpl
052E 90B550    1573            mov     dptr,#_set_config_rslt_1_95
0531 EC        1574            mov     a,r4
0532 F0        1575            movx    @dptr,a
0533           1576   ;        sensor_test.c:372: bmm150_error_codes_print_result("bmm150_set_presetmode", rslt);
0533 8C40      1577            mov     _bmm150_error_codes_print_result_PARM_2,r4
0535 90CAC0    1578            mov     dptr,#__str_12
0538 75F080    1579            mov     b,#0x80
053B C004      1580            push    ar4
053D 120000    1581            lcall   _bmm150_error_codes_print_result
0540 D004      1582            pop     ar4
0542 D003      1583            pop     ar3
0544 D002      1584            pop     ar2
0546           1585   ;        sensor_test.c:374: if (rslt == BMM150_OK)
0546 EC        1586            mov     a,r4
0547 7000      1587            jnz     L013004?
0549           1588   ;        sensor_test.c:377: settings.int_settings.drdy_pin_en = 0x01;
0549 90B5A6    1589            mov     dptr,#(_set_config_settings_1_95 + 0x0006)
054C 7401      1590            mov     a,#0x01
054E F0        1591            movx    @dptr,a
054F           1592   ;        sensor_test.c:378: rslt = bmm150_set_sensor_settings(BMM150_SEL_DRDY_PIN_EN, &settings, dev);
054F 7500A0    1593            mov     _bmm150_set_sensor_settings_PARM_2,#_set_config_settings_1_95
0552 7501B5    1594            mov     (_bmm150_set_sensor_settings_PARM_2 + 1),#(_set_config_settings_1_95 >> 8)
0555 750200    1595            mov     (_bmm150_set_sensor_settings_PARM_2 + 2),#0x00
0558 8A00      1596            mov     _bmm150_set_sensor_settings_PARM_3,r2
055A 8B01      1597            mov     (_bmm150_set_sensor_settings_PARM_3 + 1),r3
055C 750200    1598            mov     (_bmm150_set_sensor_settings_PARM_3 + 2),#0x00
055F 900010    1599            mov     dptr,#0x0010
0562 120000    1600            lcall   _bmm150_set_sensor_settings
0565 AA82      1601            mov     r2,dpl
0567 90B550    1602            mov     dptr,#_set_config_rslt_1_95
056A EA        1603            mov     a,r2
056B F0        1604            movx    @dptr,a
056C           1605   ;        sensor_test.c:379: bmm150_error_codes_print_result("bmm150_set_sensor_settings", rslt);
056C 8A40      1606            mov     _bmm150_error_codes_print_result_PARM_2,r2
056E 90CC10    1607            mov     dptr,#__str_13
0571 75F080    1608            mov     b,#0x80
0574 120000    1609            lcall   _bmm150_error_codes_print_result
0577           1610   L013004?:
0577           1611   ;        sensor_test.c:383: return rslt;
0577 90B550    1612            mov     dptr,#_set_config_rslt_1_95
057A E0        1613            movx    a,@dptr
057B F582      1614            mov     dpl,a
057D 22        1615            ret
057E           1616   ;------------------------------------------------------------
057E           1617   ;Allocation info for local variables in function 'get_data'
057E           1618   ;------------------------------------------------------------
057E           1619   ;dev                       Allocated with name '_get_data_dev_1_98'
057E           1620   ;sloc0                     Allocated with name '_get_data_sloc0_1_0'
057E           1621   ;rslt                      Allocated with name '_get_data_rslt_1_99'
057E           1622   ;idx                       Allocated with name '_get_data_idx_1_99'
057E           1623   ;mag_data                  Allocated with name '_get_data_mag_data_1_99'
057E           1624   ;------------------------------------------------------------
057E           1625   ;        sensor_test.c:386: static int8_t get_data(__xdata struct bmm150_dev *dev)
057E           1626   ;        -----------------------------------------
057E           1627   ;         function get_data
057E           1628   ;        -----------------------------------------
057E           1629   _get_data:
057E 858250    1630            mov     _get_data_dev_1_98,dpl
0581 858351    1631            mov     (_get_data_dev_1_98 + 1),dph
0584           1632   ;        sensor_test.c:399: rslt = bmm150_get_interrupt_status(dev);
0584 AC50      1633            mov     r4,_get_data_dev_1_98
0586 AD51      1634            mov     r5,(_get_data_dev_1_98 + 1)
0588 7E00      1635            mov     r6,#0x00
058A 8C82      1636            mov     dpl,r4
058C 8D83      1637            mov     dph,r5
058E 8EF0      1638            mov     b,r6
0590 120000    1639            lcall   _bmm150_get_interrupt_status
0593 E582      1640            mov     a,dpl
0595 90B5F0    1641            mov     dptr,#_get_data_rslt_1_99
0598 F0        1642            movx    @dptr,a
0599           1643   ;        sensor_test.c:401: if (dev->int_status & BMM150_INT_ASSERTED_DRDY)
0599 741C      1644            mov     a,#0x1C
059B 2550      1645            add     a,_get_data_dev_1_98
059D F582      1646            mov     dpl,a
059F E4        1647            clr     a
05A0 3551      1648            addc    a,(_get_data_dev_1_98 + 1)
05A2 F583      1649            mov     dph,a
05A4 E0        1650            movx    a,@dptr
05A5 FC        1651            mov     r4,a
05A6 A3        1652            inc     dptr
05A7 E0        1653            movx    a,@dptr
05A8 FD        1654            mov     r5,a
05A9 20E0E0    1655            jb      acc.0,L014016?
05AC 020000    1656            ljmp    L014005?
05AF           1657   L014016?:
05AF           1658   ;        sensor_test.c:403: printf("Data interrupt occurred\n");
05AF 7460      1659            mov     a,#__str_14
05B1 C0E0      1660            push    acc
05B3 74CD      1661            mov     a,#(__str_14 >> 8)
05B5 C0E0      1662            push    acc
05B7 7480      1663            mov     a,#0x80
05B9 C0E0      1664            push    acc
05BB 120000    1665            lcall   _printf
05BE 1581      1666            dec     sp
05C0 1581      1667            dec     sp
05C2 1581      1668            dec     sp
05C4           1669   ;        sensor_test.c:405: for (idx = 0; idx < 50; idx++)
05C4 7C00      1670            mov     r4,#0x00
05C6           1671   L014006?:
05C6 C3        1672            clr     c
05C7 EC        1673            mov     a,r4
05C8 6480      1674            xrl     a,#0x80
05CA 94B2      1675            subb    a,#0xb2
05CC 5000      1676            jnc     L014005?
05CE           1677   ;        sensor_test.c:408: rslt = bmm150_read_mag_data(&mag_data, dev);
05CE 855000    1678            mov     _bmm150_read_mag_data_PARM_2,_get_data_dev_1_98
05D1 855101    1679            mov     (_bmm150_read_mag_data_PARM_2 + 1),(_get_data_dev_1_98 + 1)
05D4 750200    1680            mov     (_bmm150_read_mag_data_PARM_2 + 2),#0x00
05D7 90B640    1681            mov     dptr,#_get_data_mag_data_1_99
05DA 75F000    1682            mov     b,#0x00
05DD C004      1683            push    ar4
05DF 120000    1684            lcall   _bmm150_read_mag_data
05E2 AD82      1685            mov     r5,dpl
05E4 90B5F0    1686            mov     dptr,#_get_data_rslt_1_99
05E7 ED        1687            mov     a,r5
05E8 F0        1688            movx    @dptr,a
05E9           1689   ;        sensor_test.c:409: bmm150_error_codes_print_result("bmm150_read_mag_data", rslt);
05E9 8D40      1690            mov     _bmm150_error_codes_print_result_PARM_2,r5
05EB 90CE80    1691            mov     dptr,#__str_15
05EE 75F080    1692            mov     b,#0x80
05F1 120000    1693            lcall   _bmm150_error_codes_print_result
05F4 D004      1694            pop     ar4
05F6           1695   ;        sensor_test.c:412: printf("MAG DATA[%d]  X : %d uT   Y : %d uT   Z : %d uT\n", idx, mag_data.x, mag_data.y, mag_data.z);
05F6 90B644    1696            mov     dptr,#(_get_data_mag_data_1_99 + 0x0004)
05F9 E0        1697            movx    a,@dptr
05FA FD        1698            mov     r5,a
05FB A3        1699            inc     dptr
05FC E0        1700            movx    a,@dptr
05FD FE        1701            mov     r6,a
05FE 90B642    1702            mov     dptr,#(_get_data_mag_data_1_99 + 0x0002)
0601 E0        1703            movx    a,@dptr
0602 FF        1704            mov     r7,a
0603 A3        1705            inc     dptr
0604 E0        1706            movx    a,@dptr
0605 F8        1707            mov     r0,a
0606 90B640    1708            mov     dptr,#_get_data_mag_data_1_99
0609 E0        1709            movx    a,@dptr
060A F5A0      1710            mov     _get_data_sloc0_1_0,a
060C A3        1711            inc     dptr
060D E0        1712            movx    a,@dptr
060E F5A1      1713            mov     (_get_data_sloc0_1_0 + 1),a
0610 EC        1714            mov     a,r4
0611 FB        1715            mov     r3,a
0612 33        1716            rlc     a
0613 95E0      1717            subb    a,acc
0615 FA        1718            mov     r2,a
0616 C004      1719            push    ar4
0618 C005      1720            push    ar5
061A C006      1721            push    ar6
061C C007      1722            push    ar7
061E C000      1723            push    ar0
0620 C0A0      1724            push    _get_data_sloc0_1_0
0622 C0A1      1725            push    (_get_data_sloc0_1_0 + 1)
0624 C003      1726            push    ar3
0626 C002      1727            push    ar2
0628 74C0      1728            mov     a,#__str_16
062A C0E0      1729            push    acc
062C 74CE      1730            mov     a,#(__str_16 >> 8)
062E C0E0      1731            push    acc
0630 7480      1732            mov     a,#0x80
0632 C0E0      1733            push    acc
0634 120000    1734            lcall   _printf
0637 E581      1735            mov     a,sp
0639 24F5      1736            add     a,#0xf5
063B F581      1737            mov     sp,a
063D D004      1738            pop     ar4
063F           1739   ;        sensor_test.c:405: for (idx = 0; idx < 50; idx++)
063F 0C        1740            inc     r4
0640           1741   ;        sensor_test.c:416: break;
0640 8000      1742            sjmp    L014006?
0642           1743   L014005?:
0642           1744   ;        sensor_test.c:419: return rslt;
0642 90B5F0    1745            mov     dptr,#_get_data_rslt_1_99
0645 E0        1746            movx    a,@dptr
0646 F582      1747            mov     dpl,a
0648 22        1748            ret
0649           1749   ;------------------------------------------------------------
0649           1750   ;Allocation info for local variables in function 'main'
0649           1751   ;------------------------------------------------------------
0649           1752   ;rslt                      Allocated with name '_main_rslt_1_104'
0649           1753   ;dev                       Allocated with name '_main_dev_1_104'
0649           1754   ;------------------------------------------------------------
0649           1755   ;        sensor_test.c:423: void main (void)
0649           1756   ;        -----------------------------------------
0649           1757   ;         function main
0649           1758   ;        -----------------------------------------
0649           1759   _main:
0649           1760   ;        sensor_test.c:429: dev.delay_us = ptr_delay_us; 
0649 90B68A    1761            mov     dptr,#(_main_dev_1_104 + 0x000a)
064C 74B0      1762            mov     a,#_ptr_delay_us
064E F0        1763            movx    @dptr,a
064F A3        1764            inc     dptr
0650 7413      1765            mov     a,#(_ptr_delay_us >> 8)
0652 F0        1766            movx    @dptr,a
0653           1767   ;        sensor_test.c:431: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0653 7400      1768            mov     a,#__str_17
0655 C0E0      1769            push    acc
0657 74CF      1770            mov     a,#(__str_17 >> 8)
0659 C0E0      1771            push    acc
065B 7480      1772            mov     a,#0x80
065D C0E0      1773            push    acc
065F 120000    1774            lcall   _printf
0662 1581      1775            dec     sp
0664 1581      1776            dec     sp
0666 1581      1777            dec     sp
0668           1778   ;        sensor_test.c:436: __FILE__, __DATE__, __TIME__);
0668           1779   ;        sensor_test.c:435: "Compiled: %s, %s\n\n",
0668 7440      1780            mov     a,#__str_21
066A C0E0      1781            push    acc
066C 74CF      1782            mov     a,#(__str_21 >> 8)
066E C0E0      1783            push    acc
0670 7480      1784            mov     a,#0x80
0672 C0E0      1785            push    acc
0674 7480      1786            mov     a,#__str_20
0676 C0E0      1787            push    acc
0678 74CF      1788            mov     a,#(__str_20 >> 8)
067A C0E0      1789            push    acc
067C 7480      1790            mov     a,#0x80
067E C0E0      1791            push    acc
0680 74C0      1792            mov     a,#__str_19
0682 C0E0      1793            push    acc
0684 74CF      1794            mov     a,#(__str_19 >> 8)
0686 C0E0      1795            push    acc
0688 7480      1796            mov     a,#0x80
068A C0E0      1797            push    acc
068C 7400      1798            mov     a,#__str_18
068E C0E0      1799            push    acc
0690 74D0      1800            mov     a,#(__str_18 >> 8)
0692 C0E0      1801            push    acc
0694 7480      1802            mov     a,#0x80
0696 C0E0      1803            push    acc
0698 120000    1804            lcall   _printf
069B E581      1805            mov     a,sp
069D 24F4      1806            add     a,#0xf4
069F F581      1807            mov     sp,a
06A1           1808   ;        sensor_test.c:438: Set_Pin_Output(0x05); 
06A1 758205    1809            mov     dpl,#0x05
06A4 120000    1810            lcall   _Set_Pin_Output
06A7           1811   ;        sensor_test.c:439: CS = 1; //initialize chip select 
06A7 D285      1812            setb    _P0_5
06A9           1813   ;        sensor_test.c:441: rslt = bmm150_interface_selection(&dev, BMM150_SPI_INTF);
06A9 75E000    1814            mov     _bmm150_interface_selection_PARM_2,#0x00
06AC 90B680    1815            mov     dptr,#_main_dev_1_104
06AF 75F000    1816            mov     b,#0x00
06B2 120000    1817            lcall   _bmm150_interface_selection
06B5 AA82      1818            mov     r2,dpl
06B7           1819   ;        sensor_test.c:442: bmm150_error_codes_print_result("bmm150_interface_selection", rslt);
06B7 8A40      1820            mov     _bmm150_error_codes_print_result_PARM_2,r2
06B9 90D040    1821            mov     dptr,#__str_22
06BC 75F080    1822            mov     b,#0x80
06BF C002      1823            push    ar2
06C1 120000    1824            lcall   _bmm150_error_codes_print_result
06C4 D002      1825            pop     ar2
06C6           1826   ;        sensor_test.c:444: if (rslt == BMM150_OK)
06C6 EA        1827            mov     a,r2
06C7           1828   ;        sensor_test.c:446: rslt = bmm150_init(&dev);
06C7 7000      1829            jnz     L015007?
06C9 90B680    1830            mov     dptr,#_main_dev_1_104
06CC F5F0      1831            mov     b,a
06CE 120000    1832            lcall   _bmm150_init
06D1 AA82      1833            mov     r2,dpl
06D3           1834   ;        sensor_test.c:447: bmm150_error_codes_print_result("bmm150_init", rslt);
06D3 8A40      1835            mov     _bmm150_error_codes_print_result_PARM_2,r2
06D5 90D100    1836            mov     dptr,#__str_23
06D8 75F080    1837            mov     b,#0x80
06DB C002      1838            push    ar2
06DD 120000    1839            lcall   _bmm150_error_codes_print_result
06E0 D002      1840            pop     ar2
06E2           1841   ;        sensor_test.c:449: if (rslt == BMM150_OK)
06E2 EA        1842            mov     a,r2
06E3 7000      1843            jnz     L015007?
06E5           1844   ;        sensor_test.c:451: rslt = set_config(&dev); 
06E5 90B680    1845            mov     dptr,#_main_dev_1_104
06E8 120000    1846            lcall   _set_config
06EB AA82      1847            mov     r2,dpl
06ED           1848   ;        sensor_test.c:452: bmm150_error_codes_print_result("set_config", rslt); 
06ED 8A40      1849            mov     _bmm150_error_codes_print_result_PARM_2,r2
06EF 90D140    1850            mov     dptr,#__str_24
06F2 75F080    1851            mov     b,#0x80
06F5 C002      1852            push    ar2
06F7 120000    1853            lcall   _bmm150_error_codes_print_result
06FA D002      1854            pop     ar2
06FC           1855   ;        sensor_test.c:454: if (rslt == BMM150_OK)
06FC EA        1856            mov     a,r2
06FD 7000      1857            jnz     L015007?
06FF           1858   ;        sensor_test.c:456: rslt = get_data(&dev); 
06FF 90B680    1859            mov     dptr,#_main_dev_1_104
0702 120000    1860            lcall   _get_data
0705 858240    1861            mov     _bmm150_error_codes_print_result_PARM_2,dpl
0708           1862   ;        sensor_test.c:457: bmm150_error_codes_print_result("get_data", rslt); 
0708 90D180    1863            mov     dptr,#__str_25
070B 75F080    1864            mov     b,#0x80
070E 020000    1865            ljmp    _bmm150_error_codes_print_result
0711           1866   L015007?:
0711 22        1867            ret
0712           1868            rseg R_CSEG
0712           1869   
0000           1870            rseg R_XINIT
0000           1871   
0000           1872            rseg R_CONST
0000           1873   __str_0:
0000 2573      1874            db '%s'
0002 09        1875            db 0x09
0003 00        1876            db 0x00
0004           1877   __str_1:
0004 4572726F  1878            db 'Error [%d] : Null pointer error.'
     72205B25
     645D203A
     204E756C
     6C20706F
     696E7465
     72206572
     726F722E
0024 00        1879            db 0x00
0025           1880   __str_2:
0025 4974206F  1881            db 'It occurs when the user tries to assign value (not address) '
     63637572
     73207768
     656E2074
     68652075
     73657220
     74726965
     7320746F
     20617373
     69676E20
     76616C75
     6520286E
     6F742061
     64647265
     73732920
0061 746F2061  1882            db 'to a pointer, which has been initialized to NULL.'
     20706F69
     6E746572
     2C207768
     69636820
     68617320
     6265656E
     20696E69
     7469616C
     697A6564
     20746F20
     4E554C4C
     2E
0092 0D        1883            db 0x0D
0093 0A        1884            db 0x0A
0094 00        1885            db 0x00
0095           1886   __str_3:
0095 4572726F  1887            db 'Error [%d] : Communication failure error.'
     72205B25
     645D203A
     20436F6D
     6D756E69
     63617469
     6F6E2066
     61696C75
     72652065
     72726F72
     2E
00BE 00        1888            db 0x00
00BF           1889   __str_4:
00BF 4974206F  1890            db 'It occurs due to read/write operation failure and also due t'
     63637572
     73206475
     6520746F
     20726561
     642F7772
     69746520
     6F706572
     6174696F
     6E206661
     696C7572
     6520616E
     6420616C
     736F2064
     75652074
00FB 6F20706F  1891            db 'o power failure during communication'
     77657220
     6661696C
     75726520
     64757269
     6E672063
     6F6D6D75
     6E696361
     74696F6E
011F 0D        1892            db 0x0D
0120 0A        1893            db 0x0A
0121 00        1894            db 0x00
0122           1895   __str_5:
0122 4572726F  1896            db 'Error [%d] : Device not found error. It occurs when the devi'
     72205B25
     645D203A
     20446576
     69636520
     6E6F7420
     666F756E
     64206572
     726F722E
     20497420
     6F636375
     72732077
     68656E20
     74686520
     64657669
015E 63652063  1897            db 'ce chip id is incorrectly read'
     68697020
     69642069
     7320696E
     636F7272
     6563746C
     79207265
     6164
017C 0D        1898            db 0x0D
017D 0A        1899            db 0x0A
017E 00        1900            db 0x00
017F           1901   __str_6:
017F 4572726F  1902            db 'Error [%d] : Invalid sensor configuration.'
     72205B25
     645D203A
     20496E76
     616C6964
     2073656E
     736F7220
     636F6E66
     69677572
     6174696F
     6E2E
01A9 00        1903            db 0x00
01AA           1904   __str_7:
01AA 20497420  1905            db ' It occurs when there is a mismatch in the requested feature'
     6F636375
     72732077
     68656E20
     74686572
     65206973
     2061206D
     69736D61
     74636820
     696E2074
     68652072
     65717565
     73746564
     20666561
     74757265
01E6 20776974  1906            db ' with the available one'
     68207468
     65206176
     61696C61
     626C6520
     6F6E65
01FD 0D        1907            db 0x0D
01FE 0A        1908            db 0x0A
01FF 00        1909            db 0x00
0200           1910   __str_8:
0200 4572726F  1911            db 'Error [%d] : Unknown error code'
     72205B25
     645D203A
     20556E6B
     6E6F776E
     20657272
     6F722063
     6F6465
021F 0D        1912            db 0x0D
0220 0A        1913            db 0x0A
0221 00        1914            db 0x00
0222           1915   __str_9:
0222 53504920  1916            db 'SPI Interface Selected'
     496E7465
     72666163
     65205365
     6C656374
     6564
0238 0A        1917            db 0x0A
0239 00        1918            db 0x00
023A           1919   __str_10:
023A 496E7661  1920            db 'Invalid Interface Selection'
     6C696420
     496E7465
     72666163
     65205365
     6C656374
     696F6E
0255 0A        1921            db 0x0A
0256 00        1922            db 0x00
0257           1923   __str_11:
0257 626D6D31  1924            db 'bmm150_set_op_mode'
     35305F73
     65745F6F
     705F6D6F
     6465
0269 00        1925            db 0x00
026A           1926   __str_12:
026A 626D6D31  1927            db 'bmm150_set_presetmode'
     35305F73
     65745F70
     72657365
     746D6F64
     65
027F 00        1928            db 0x00
0280           1929   __str_13:
0280 626D6D31  1930            db 'bmm150_set_sensor_settings'
     35305F73
     65745F73
     656E736F
     725F7365
     7474696E
     6773
029A 00        1931            db 0x00
029B           1932   __str_14:
029B 44617461  1933            db 'Data interrupt occurred'
     20696E74
     65727275
     7074206F
     63637572
     726564
02B2 0A        1934            db 0x0A
02B3 00        1935            db 0x00
02B4           1936   __str_15:
02B4 626D6D31  1937            db 'bmm150_read_mag_data'
     35305F72
     6561645F
     6D61675F
     64617461
02C8 00        1938            db 0x00
02C9           1939   __str_16:
02C9 4D414720  1940            db 'MAG DATA[%d]  X : %d uT   Y : %d uT   Z : %d uT'
     44415441
     5B25645D
     20205820
     3A202564
     20755420
     20205920
     3A202564
     20755420
     20205A20
     3A202564
     207554
02F8 0A        1941            db 0x0A
02F9 00        1942            db 0x00
02FA           1943   __str_17:
02FA 1B        1944            db 0x1B
02FB 5B324A    1945            db '[2J'
02FE 00        1946            db 0x00
02FF           1947   __str_18:
02FF 45464D38  1948            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
031E 0A        1949            db 0x0A
031F 46696C65  1950            db 'File: %s'
     3A202573
0327 0A        1951            db 0x0A
0328 436F6D70  1952            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
0338 0A        1953            db 0x0A
0339 0A        1954            db 0x0A
033A 00        1955            db 0x00
033B           1956   __str_19:
033B 73656E73  1957            db 'sensor_test.c'
     6F725F74
     6573742E
     63
0348 00        1958            db 0x00
0349           1959   __str_20:
0349 4D617220  1960            db 'Mar 22 2025'
     32322032
     303235
0354 00        1961            db 0x00
0355           1962   __str_21:
0355 30303A31  1963            db '00:16:26'
     363A3236
035D 00        1964            db 0x00
035E           1965   __str_22:
035E 626D6D31  1966            db 'bmm150_interface_selection'
     35305F69
     6E746572
     66616365
     5F73656C
     65637469
     6F6E
0378 00        1967            db 0x00
0379           1968   __str_23:
0379 626D6D31  1969            db 'bmm150_init'
     35305F69
     6E6974
0384 00        1970            db 0x00
0385           1971   __str_24:
0385 7365745F  1972            db 'set_config'
     636F6E66
     6967
038F 00        1973            db 0x00
0390           1974   __str_25:
0390 6765745F  1975            db 'get_data'
     64617461
0398 00        1976            db 0x00
0399           1977   
0003           1978            CSEG
0003           1979   
0003           1980   end
