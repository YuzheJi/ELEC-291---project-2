0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 21 14:07:43 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _servo_pick
0000             29            public _TurnLeft
0000             30            public _TurnRight
0000             31            public _MoveBackward
0000             32            public _MoveForward
0000             33            public _Timer5_ISR
0000             34            public _ADC_at_Pin
0000             35            public _InitPinADC
0000             36            public _InitADC
0000             37            public _Set_Pin_Input
0000             38            public _Set_Pin_Output
0000             39            public _ReceptionOff
0000             40            public _SendATCommand
0000             41            public _waitms_or_RI1
0000             42            public _RXU1
0000             43            public _getstr1
0000             44            public _getchar1_with_timeout
0000             45            public _getchar1
0000             46            public _sendstr1
0000             47            public _putchar1
0000             48            public _UART1_Init
0000             49            public _waitms
0000             50            public _Timer3us
0000             51            public __c51_external_startup
0000             52            public _buff
0000             53            public _getstr1_PARM_2
0000             54            public _servo_arm
0000             55            public _servo_base
0000             56            public _R_motor_dir
0000             57            public _L_motor_dir
0000             58            public _pwm_right
0000             59            public _pwm_left
0000             60            public _servo_counter
0000             61            public _pwm_counter
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADC0ASAH       DATA 0xb6
0000             67   _ADC0ASAL       DATA 0xb5
0000             68   _ADC0ASCF       DATA 0xa1
0000             69   _ADC0ASCT       DATA 0xc7
0000             70   _ADC0CF0        DATA 0xbc
0000             71   _ADC0CF1        DATA 0xb9
0000             72   _ADC0CF2        DATA 0xdf
0000             73   _ADC0CN0        DATA 0xe8
0000             74   _ADC0CN1        DATA 0xb2
0000             75   _ADC0CN2        DATA 0xb3
0000             76   _ADC0GTH        DATA 0xc4
0000             77   _ADC0GTL        DATA 0xc3
0000             78   _ADC0H          DATA 0xbe
0000             79   _ADC0L          DATA 0xbd
0000             80   _ADC0LTH        DATA 0xc6
0000             81   _ADC0LTL        DATA 0xc5
0000             82   _ADC0MX         DATA 0xbb
0000             83   _B              DATA 0xf0
0000             84   _CKCON0         DATA 0x8e
0000             85   _CKCON1         DATA 0xa6
0000             86   _CLEN0          DATA 0xc6
0000             87   _CLIE0          DATA 0xc7
0000             88   _CLIF0          DATA 0xe8
0000             89   _CLKSEL         DATA 0xa9
0000             90   _CLOUT0         DATA 0xd1
0000             91   _CLU0CF         DATA 0xb1
0000             92   _CLU0FN         DATA 0xaf
0000             93   _CLU0MX         DATA 0x84
0000             94   _CLU1CF         DATA 0xb3
0000             95   _CLU1FN         DATA 0xb2
0000             96   _CLU1MX         DATA 0x85
0000             97   _CLU2CF         DATA 0xb6
0000             98   _CLU2FN         DATA 0xb5
0000             99   _CLU2MX         DATA 0x91
0000            100   _CLU3CF         DATA 0xbf
0000            101   _CLU3FN         DATA 0xbe
0000            102   _CLU3MX         DATA 0xae
0000            103   _CMP0CN0        DATA 0x9b
0000            104   _CMP0CN1        DATA 0x99
0000            105   _CMP0MD         DATA 0x9d
0000            106   _CMP0MX         DATA 0x9f
0000            107   _CMP1CN0        DATA 0xbf
0000            108   _CMP1CN1        DATA 0xac
0000            109   _CMP1MD         DATA 0xab
0000            110   _CMP1MX         DATA 0xaa
0000            111   _CRC0CN0        DATA 0xce
0000            112   _CRC0CN1        DATA 0x86
0000            113   _CRC0CNT        DATA 0xd3
0000            114   _CRC0DAT        DATA 0xcb
0000            115   _CRC0FLIP       DATA 0xcf
0000            116   _CRC0IN         DATA 0xca
0000            117   _CRC0ST         DATA 0xd2
0000            118   _DAC0CF0        DATA 0x91
0000            119   _DAC0CF1        DATA 0x92
0000            120   _DAC0H          DATA 0x85
0000            121   _DAC0L          DATA 0x84
0000            122   _DAC1CF0        DATA 0x93
0000            123   _DAC1CF1        DATA 0x94
0000            124   _DAC1H          DATA 0x8a
0000            125   _DAC1L          DATA 0x89
0000            126   _DAC2CF0        DATA 0x95
0000            127   _DAC2CF1        DATA 0x96
0000            128   _DAC2H          DATA 0x8c
0000            129   _DAC2L          DATA 0x8b
0000            130   _DAC3CF0        DATA 0x9a
0000            131   _DAC3CF1        DATA 0x9c
0000            132   _DAC3H          DATA 0x8e
0000            133   _DAC3L          DATA 0x8d
0000            134   _DACGCF0        DATA 0x88
0000            135   _DACGCF1        DATA 0x98
0000            136   _DACGCF2        DATA 0xa2
0000            137   _DERIVID        DATA 0xad
0000            138   _DEVICEID       DATA 0xb5
0000            139   _DPH            DATA 0x83
0000            140   _DPL            DATA 0x82
0000            141   _EIE1           DATA 0xe6
0000            142   _EIE2           DATA 0xf3
0000            143   _EIP1           DATA 0xbb
0000            144   _EIP1H          DATA 0xee
0000            145   _EIP2           DATA 0xed
0000            146   _EIP2H          DATA 0xf6
0000            147   _EMI0CN         DATA 0xe7
0000            148   _FLKEY          DATA 0xb7
0000            149   _HFO0CAL        DATA 0xc7
0000            150   _HFO1CAL        DATA 0xd6
0000            151   _HFOCN          DATA 0xef
0000            152   _I2C0ADM        DATA 0xff
0000            153   _I2C0CN0        DATA 0xba
0000            154   _I2C0DIN        DATA 0xbc
0000            155   _I2C0DOUT       DATA 0xbb
0000            156   _I2C0FCN0       DATA 0xad
0000            157   _I2C0FCN1       DATA 0xab
0000            158   _I2C0FCT        DATA 0xf5
0000            159   _I2C0SLAD       DATA 0xbd
0000            160   _I2C0STAT       DATA 0xb9
0000            161   _IE             DATA 0xa8
0000            162   _IP             DATA 0xb8
0000            163   _IPH            DATA 0xf2
0000            164   _IT01CF         DATA 0xe4
0000            165   _LFO0CN         DATA 0xb1
0000            166   _P0             DATA 0x80
0000            167   _P0MASK         DATA 0xfe
0000            168   _P0MAT          DATA 0xfd
0000            169   _P0MDIN         DATA 0xf1
0000            170   _P0MDOUT        DATA 0xa4
0000            171   _P0SKIP         DATA 0xd4
0000            172   _P1             DATA 0x90
0000            173   _P1MASK         DATA 0xee
0000            174   _P1MAT          DATA 0xed
0000            175   _P1MDIN         DATA 0xf2
0000            176   _P1MDOUT        DATA 0xa5
0000            177   _P1SKIP         DATA 0xd5
0000            178   _P2             DATA 0xa0
0000            179   _P2MASK         DATA 0xfc
0000            180   _P2MAT          DATA 0xfb
0000            181   _P2MDIN         DATA 0xf3
0000            182   _P2MDOUT        DATA 0xa6
0000            183   _P2SKIP         DATA 0xcc
0000            184   _P3             DATA 0xb0
0000            185   _P3MDIN         DATA 0xf4
0000            186   _P3MDOUT        DATA 0x9c
0000            187   _PCA0CENT       DATA 0x9e
0000            188   _PCA0CLR        DATA 0x9c
0000            189   _PCA0CN0        DATA 0xd8
0000            190   _PCA0CPH0       DATA 0xfc
0000            191   _PCA0CPH1       DATA 0xea
0000            192   _PCA0CPH2       DATA 0xec
0000            193   _PCA0CPH3       DATA 0xf5
0000            194   _PCA0CPH4       DATA 0x85
0000            195   _PCA0CPH5       DATA 0xde
0000            196   _PCA0CPL0       DATA 0xfb
0000            197   _PCA0CPL1       DATA 0xe9
0000            198   _PCA0CPL2       DATA 0xeb
0000            199   _PCA0CPL3       DATA 0xf4
0000            200   _PCA0CPL4       DATA 0x84
0000            201   _PCA0CPL5       DATA 0xdd
0000            202   _PCA0CPM0       DATA 0xda
0000            203   _PCA0CPM1       DATA 0xdb
0000            204   _PCA0CPM2       DATA 0xdc
0000            205   _PCA0CPM3       DATA 0xae
0000            206   _PCA0CPM4       DATA 0xaf
0000            207   _PCA0CPM5       DATA 0xcc
0000            208   _PCA0H          DATA 0xfa
0000            209   _PCA0L          DATA 0xf9
0000            210   _PCA0MD         DATA 0xd9
0000            211   _PCA0POL        DATA 0x96
0000            212   _PCA0PWM        DATA 0xf7
0000            213   _PCON0          DATA 0x87
0000            214   _PCON1          DATA 0xcd
0000            215   _PFE0CN         DATA 0xc1
0000            216   _PRTDRV         DATA 0xf6
0000            217   _PSCTL          DATA 0x8f
0000            218   _PSTAT0         DATA 0xaa
0000            219   _PSW            DATA 0xd0
0000            220   _REF0CN         DATA 0xd1
0000            221   _REG0CN         DATA 0xc9
0000            222   _REVID          DATA 0xb6
0000            223   _RSTSRC         DATA 0xef
0000            224   _SBCON1         DATA 0x94
0000            225   _SBRLH1         DATA 0x96
0000            226   _SBRLL1         DATA 0x95
0000            227   _SBUF           DATA 0x99
0000            228   _SBUF0          DATA 0x99
0000            229   _SBUF1          DATA 0x92
0000            230   _SCON           DATA 0x98
0000            231   _SCON0          DATA 0x98
0000            232   _SCON1          DATA 0xc8
0000            233   _SFRPAGE        DATA 0xa7
0000            234   _SFRPGCN        DATA 0xbc
0000            235   _SFRSTACK       DATA 0xd7
0000            236   _SMB0ADM        DATA 0xd6
0000            237   _SMB0ADR        DATA 0xd7
0000            238   _SMB0CF         DATA 0xc1
0000            239   _SMB0CN0        DATA 0xc0
0000            240   _SMB0DAT        DATA 0xc2
0000            241   _SMB0FCN0       DATA 0xc3
0000            242   _SMB0FCN1       DATA 0xc4
0000            243   _SMB0FCT        DATA 0xef
0000            244   _SMB0RXLN       DATA 0xc5
0000            245   _SMB0TC         DATA 0xac
0000            246   _SMOD1          DATA 0x93
0000            247   _SP             DATA 0x81
0000            248   _SPI0CFG        DATA 0xa1
0000            249   _SPI0CKR        DATA 0xa2
0000            250   _SPI0CN0        DATA 0xf8
0000            251   _SPI0DAT        DATA 0xa3
0000            252   _SPI0FCN0       DATA 0x9a
0000            253   _SPI0FCN1       DATA 0x9b
0000            254   _SPI0FCT        DATA 0xf7
0000            255   _SPI0PCF        DATA 0xdf
0000            256   _TCON           DATA 0x88
0000            257   _TH0            DATA 0x8c
0000            258   _TH1            DATA 0x8d
0000            259   _TL0            DATA 0x8a
0000            260   _TL1            DATA 0x8b
0000            261   _TMOD           DATA 0x89
0000            262   _TMR2CN0        DATA 0xc8
0000            263   _TMR2CN1        DATA 0xfd
0000            264   _TMR2H          DATA 0xcf
0000            265   _TMR2L          DATA 0xce
0000            266   _TMR2RLH        DATA 0xcb
0000            267   _TMR2RLL        DATA 0xca
0000            268   _TMR3CN0        DATA 0x91
0000            269   _TMR3CN1        DATA 0xfe
0000            270   _TMR3H          DATA 0x95
0000            271   _TMR3L          DATA 0x94
0000            272   _TMR3RLH        DATA 0x93
0000            273   _TMR3RLL        DATA 0x92
0000            274   _TMR4CN0        DATA 0x98
0000            275   _TMR4CN1        DATA 0xff
0000            276   _TMR4H          DATA 0xa5
0000            277   _TMR4L          DATA 0xa4
0000            278   _TMR4RLH        DATA 0xa3
0000            279   _TMR4RLL        DATA 0xa2
0000            280   _TMR5CN0        DATA 0xc0
0000            281   _TMR5CN1        DATA 0xf1
0000            282   _TMR5H          DATA 0xd5
0000            283   _TMR5L          DATA 0xd4
0000            284   _TMR5RLH        DATA 0xd3
0000            285   _TMR5RLL        DATA 0xd2
0000            286   _UART0PCF       DATA 0xd9
0000            287   _UART1FCN0      DATA 0x9d
0000            288   _UART1FCN1      DATA 0xd8
0000            289   _UART1FCT       DATA 0xfa
0000            290   _UART1LIN       DATA 0x9e
0000            291   _UART1PCF       DATA 0xda
0000            292   _VDM0CN         DATA 0xff
0000            293   _WDTCN          DATA 0x97
0000            294   _XBR0           DATA 0xe1
0000            295   _XBR1           DATA 0xe2
0000            296   _XBR2           DATA 0xe3
0000            297   _XOSC0CN        DATA 0x86
0000            298   _DPTR           DATA 0x8382
0000            299   _TMR2RL         DATA 0xcbca
0000            300   _TMR3RL         DATA 0x9392
0000            301   _TMR4RL         DATA 0xa3a2
0000            302   _TMR5RL         DATA 0xd3d2
0000            303   _TMR0           DATA 0x8c8a
0000            304   _TMR1           DATA 0x8d8b
0000            305   _TMR2           DATA 0xcfce
0000            306   _TMR3           DATA 0x9594
0000            307   _TMR4           DATA 0xa5a4
0000            308   _TMR5           DATA 0xd5d4
0000            309   _SBRL1          DATA 0x9695
0000            310   _PCA0           DATA 0xfaf9
0000            311   _PCA0CP0        DATA 0xfcfb
0000            312   _PCA0CP1        DATA 0xeae9
0000            313   _PCA0CP2        DATA 0xeceb
0000            314   _PCA0CP3        DATA 0xf5f4
0000            315   _PCA0CP4        DATA 0x8584
0000            316   _PCA0CP5        DATA 0xdedd
0000            317   _ADC0ASA        DATA 0xb6b5
0000            318   _ADC0GT         DATA 0xc4c3
0000            319   _ADC0           DATA 0xbebd
0000            320   _ADC0LT         DATA 0xc6c5
0000            321   _DAC0           DATA 0x8584
0000            322   _DAC1           DATA 0x8a89
0000            323   _DAC2           DATA 0x8c8b
0000            324   _DAC3           DATA 0x8e8d
0000            325   ;--------------------------------------------------------
0000            326   ; special function bits
0000            327   ;--------------------------------------------------------
0000            328   _ACC_0          BIT 0xe0
0000            329   _ACC_1          BIT 0xe1
0000            330   _ACC_2          BIT 0xe2
0000            331   _ACC_3          BIT 0xe3
0000            332   _ACC_4          BIT 0xe4
0000            333   _ACC_5          BIT 0xe5
0000            334   _ACC_6          BIT 0xe6
0000            335   _ACC_7          BIT 0xe7
0000            336   _TEMPE          BIT 0xe8
0000            337   _ADGN0          BIT 0xe9
0000            338   _ADGN1          BIT 0xea
0000            339   _ADWINT         BIT 0xeb
0000            340   _ADBUSY         BIT 0xec
0000            341   _ADINT          BIT 0xed
0000            342   _IPOEN          BIT 0xee
0000            343   _ADEN           BIT 0xef
0000            344   _B_0            BIT 0xf0
0000            345   _B_1            BIT 0xf1
0000            346   _B_2            BIT 0xf2
0000            347   _B_3            BIT 0xf3
0000            348   _B_4            BIT 0xf4
0000            349   _B_5            BIT 0xf5
0000            350   _B_6            BIT 0xf6
0000            351   _B_7            BIT 0xf7
0000            352   _C0FIF          BIT 0xe8
0000            353   _C0RIF          BIT 0xe9
0000            354   _C1FIF          BIT 0xea
0000            355   _C1RIF          BIT 0xeb
0000            356   _C2FIF          BIT 0xec
0000            357   _C2RIF          BIT 0xed
0000            358   _C3FIF          BIT 0xee
0000            359   _C3RIF          BIT 0xef
0000            360   _D1SRC0         BIT 0x88
0000            361   _D1SRC1         BIT 0x89
0000            362   _D1AMEN         BIT 0x8a
0000            363   _D01REFSL       BIT 0x8b
0000            364   _D3SRC0         BIT 0x8c
0000            365   _D3SRC1         BIT 0x8d
0000            366   _D3AMEN         BIT 0x8e
0000            367   _D23REFSL       BIT 0x8f
0000            368   _D0UDIS         BIT 0x98
0000            369   _D1UDIS         BIT 0x99
0000            370   _D2UDIS         BIT 0x9a
0000            371   _D3UDIS         BIT 0x9b
0000            372   _EX0            BIT 0xa8
0000            373   _ET0            BIT 0xa9
0000            374   _EX1            BIT 0xaa
0000            375   _ET1            BIT 0xab
0000            376   _ES0            BIT 0xac
0000            377   _ET2            BIT 0xad
0000            378   _ESPI0          BIT 0xae
0000            379   _EA             BIT 0xaf
0000            380   _PX0            BIT 0xb8
0000            381   _PT0            BIT 0xb9
0000            382   _PX1            BIT 0xba
0000            383   _PT1            BIT 0xbb
0000            384   _PS0            BIT 0xbc
0000            385   _PT2            BIT 0xbd
0000            386   _PSPI0          BIT 0xbe
0000            387   _P0_0           BIT 0x80
0000            388   _P0_1           BIT 0x81
0000            389   _P0_2           BIT 0x82
0000            390   _P0_3           BIT 0x83
0000            391   _P0_4           BIT 0x84
0000            392   _P0_5           BIT 0x85
0000            393   _P0_6           BIT 0x86
0000            394   _P0_7           BIT 0x87
0000            395   _P1_0           BIT 0x90
0000            396   _P1_1           BIT 0x91
0000            397   _P1_2           BIT 0x92
0000            398   _P1_3           BIT 0x93
0000            399   _P1_4           BIT 0x94
0000            400   _P1_5           BIT 0x95
0000            401   _P1_6           BIT 0x96
0000            402   _P1_7           BIT 0x97
0000            403   _P2_0           BIT 0xa0
0000            404   _P2_1           BIT 0xa1
0000            405   _P2_2           BIT 0xa2
0000            406   _P2_3           BIT 0xa3
0000            407   _P2_4           BIT 0xa4
0000            408   _P2_5           BIT 0xa5
0000            409   _P2_6           BIT 0xa6
0000            410   _P3_0           BIT 0xb0
0000            411   _P3_1           BIT 0xb1
0000            412   _P3_2           BIT 0xb2
0000            413   _P3_3           BIT 0xb3
0000            414   _P3_4           BIT 0xb4
0000            415   _P3_7           BIT 0xb7
0000            416   _CCF0           BIT 0xd8
0000            417   _CCF1           BIT 0xd9
0000            418   _CCF2           BIT 0xda
0000            419   _CCF3           BIT 0xdb
0000            420   _CCF4           BIT 0xdc
0000            421   _CCF5           BIT 0xdd
0000            422   _CR             BIT 0xde
0000            423   _CF             BIT 0xdf
0000            424   _PARITY         BIT 0xd0
0000            425   _F1             BIT 0xd1
0000            426   _OV             BIT 0xd2
0000            427   _RS0            BIT 0xd3
0000            428   _RS1            BIT 0xd4
0000            429   _F0             BIT 0xd5
0000            430   _AC             BIT 0xd6
0000            431   _CY             BIT 0xd7
0000            432   _RI             BIT 0x98
0000            433   _TI             BIT 0x99
0000            434   _RB8            BIT 0x9a
0000            435   _TB8            BIT 0x9b
0000            436   _REN            BIT 0x9c
0000            437   _CE             BIT 0x9d
0000            438   _SMODE          BIT 0x9e
0000            439   _RI1            BIT 0xc8
0000            440   _TI1            BIT 0xc9
0000            441   _RBX1           BIT 0xca
0000            442   _TBX1           BIT 0xcb
0000            443   _REN1           BIT 0xcc
0000            444   _PERR1          BIT 0xcd
0000            445   _OVR1           BIT 0xce
0000            446   _SI             BIT 0xc0
0000            447   _ACK            BIT 0xc1
0000            448   _ARBLOST        BIT 0xc2
0000            449   _ACKRQ          BIT 0xc3
0000            450   _STO            BIT 0xc4
0000            451   _STA            BIT 0xc5
0000            452   _TXMODE         BIT 0xc6
0000            453   _MASTER         BIT 0xc7
0000            454   _SPIEN          BIT 0xf8
0000            455   _TXNF           BIT 0xf9
0000            456   _NSSMD0         BIT 0xfa
0000            457   _NSSMD1         BIT 0xfb
0000            458   _RXOVRN         BIT 0xfc
0000            459   _MODF           BIT 0xfd
0000            460   _WCOL           BIT 0xfe
0000            461   _SPIF           BIT 0xff
0000            462   _IT0            BIT 0x88
0000            463   _IE0            BIT 0x89
0000            464   _IT1            BIT 0x8a
0000            465   _IE1            BIT 0x8b
0000            466   _TR0            BIT 0x8c
0000            467   _TF0            BIT 0x8d
0000            468   _TR1            BIT 0x8e
0000            469   _TF1            BIT 0x8f
0000            470   _T2XCLK0        BIT 0xc8
0000            471   _T2XCLK1        BIT 0xc9
0000            472   _TR2            BIT 0xca
0000            473   _T2SPLIT        BIT 0xcb
0000            474   _TF2CEN         BIT 0xcc
0000            475   _TF2LEN         BIT 0xcd
0000            476   _TF2L           BIT 0xce
0000            477   _TF2H           BIT 0xcf
0000            478   _T4XCLK0        BIT 0x98
0000            479   _T4XCLK1        BIT 0x99
0000            480   _TR4            BIT 0x9a
0000            481   _T4SPLIT        BIT 0x9b
0000            482   _TF4CEN         BIT 0x9c
0000            483   _TF4LEN         BIT 0x9d
0000            484   _TF4L           BIT 0x9e
0000            485   _TF4H           BIT 0x9f
0000            486   _T5XCLK0        BIT 0xc0
0000            487   _T5XCLK1        BIT 0xc1
0000            488   _TR5            BIT 0xc2
0000            489   _T5SPLIT        BIT 0xc3
0000            490   _TF5CEN         BIT 0xc4
0000            491   _TF5LEN         BIT 0xc5
0000            492   _TF5L           BIT 0xc6
0000            493   _TF5H           BIT 0xc7
0000            494   _RIE            BIT 0xd8
0000            495   _RXTO0          BIT 0xd9
0000            496   _RXTO1          BIT 0xda
0000            497   _RFRQ           BIT 0xdb
0000            498   _TIE            BIT 0xdc
0000            499   _TXHOLD         BIT 0xdd
0000            500   _TXNF1          BIT 0xde
0000            501   _TFRQ           BIT 0xdf
0000            502   ;--------------------------------------------------------
0000            503   ; overlayable register banks
0000            504   ;--------------------------------------------------------
0000            505            rbank0 segment data overlay
0000            506   ;--------------------------------------------------------
0000            507   ; internal ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_DSEG
0000            510   _pwm_counter:
0000            511            ds 2
0002            512   _servo_counter:
0002            513            ds 2
0004            514   _pwm_left:
0004            515            ds 1
0005            516   _pwm_right:
0005            517            ds 1
0006            518   _L_motor_dir:
0006            519            ds 1
0007            520   _R_motor_dir:
0007            521            ds 1
0008            522   _servo_base:
0008            523            ds 1
0009            524   _servo_arm:
0009            525            ds 1
000A            526   _getstr1_PARM_2:
000A            527            ds 1
000B            528   _main_vx_1_134:
000B            529            ds 2
000D            530   _main_vy_1_134:
000D            531            ds 2
000F            532   _main_motor_pwm_1_134:
000F            533            ds 2
0011            534   _main_sloc0_1_0:
0011            535            ds 4
0015            536   ;--------------------------------------------------------
0015            537   ; overlayable items in internal ram 
0015            538   ;--------------------------------------------------------
0000            539            rseg    R_OSEG
0000            540            rseg    R_OSEG
0000            541            rseg    R_OSEG
0000            542            rseg    R_OSEG
0000            543            rseg    R_OSEG
0000            544            rseg    R_OSEG
0000            545   _InitPinADC_PARM_2:
0000            546            ds 1
0001            547            rseg    R_OSEG
0001            548            rseg    R_OSEG
0001            549            rseg    R_OSEG
0001            550            rseg    R_OSEG
0001            551            rseg    R_OSEG
0001            552   ;--------------------------------------------------------
0001            553   ; indirectly addressable internal ram data
0001            554   ;--------------------------------------------------------
0000            555            rseg R_ISEG
0000            556   _buff:
0000            557            ds 20
0014            558   ;--------------------------------------------------------
0014            559   ; absolute internal ram data
0014            560   ;--------------------------------------------------------
0000            561            DSEG
0000            562   ;--------------------------------------------------------
0000            563   ; bit data
0000            564   ;--------------------------------------------------------
0000            565            rseg R_BSEG
0000            566   ;--------------------------------------------------------
0000            567   ; paged external ram data
0000            568   ;--------------------------------------------------------
0000            569            rseg R_PSEG
0000            570   ;--------------------------------------------------------
0000            571   ; external ram data
0000            572   ;--------------------------------------------------------
0000            573            rseg R_XSEG
0000            574   ;--------------------------------------------------------
0000            575   ; absolute external ram data
0000            576   ;--------------------------------------------------------
0000            577            XSEG
0000            578   ;--------------------------------------------------------
0000            579   ; external initialized ram data
0000            580   ;--------------------------------------------------------
0000            581            rseg R_IXSEG
0000            582            rseg R_HOME
0000            583            rseg R_GSINIT
0000            584            rseg R_CSEG
0000            585   ;--------------------------------------------------------
0000            586   ; Reset entry point and interrupt vectors
0000            587   ;--------------------------------------------------------
0000            588            CSEG at 0x0000
0000 020000     589            ljmp    _crt0
0093            590            CSEG at 0x0093
0093 020000     591            ljmp    _Timer5_ISR
0096            592   ;--------------------------------------------------------
0096            593   ; global & static initialisations
0096            594   ;--------------------------------------------------------
0000            595            rseg R_HOME
0000            596            rseg R_GSINIT
0000            597            rseg R_GSINIT
0000            598   ;--------------------------------------------------------
0000            599   ; data variables initialization
0000            600   ;--------------------------------------------------------
0000            601            rseg R_DINIT
0000            602   ;        main.c:48: unsigned int pwm_counter = 0; 
0000 E4         603            clr     a
0001 F550       604            mov     _pwm_counter,a
0003 F551       605            mov     (_pwm_counter + 1),a
0005            606   ;        main.c:49: unsigned int servo_counter = 0; 
0005 E4         607            clr     a
0006 F510       608            mov     _servo_counter,a
0008 F511       609            mov     (_servo_counter + 1),a
000A            610   ;        main.c:50: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75D000     611            mov     _pwm_left,#0x00
000D            612   ;        main.c:50: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 759000     613            mov     _pwm_right,#0x00
0010            614   ;        main.c:51: unsigned char servo_base = 1, servo_arm = 1; 
0010 755001     615            mov     _L_motor_dir,#0x01
0013            616   ;        main.c:51: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 751001     617            mov     _R_motor_dir,#0x01
0016            618   ;        main.c:52: unsigned char servo_base = 1, servo_arm = 1; 
0016 75D001     619            mov     _servo_base,#0x01
0019            620   ;        main.c:52: 
0019 759001     621            mov     _servo_arm,#0x01
001C            622            ; The linker places a 'ret' at the end of segment R_DINIT.
001C            623   ;--------------------------------------------------------
001C            624   ; code
001C            625   ;--------------------------------------------------------
0000            626            rseg R_CSEG
0000            627   ;------------------------------------------------------------
0000            628   ;Allocation info for local variables in function '_c51_external_startup'
0000            629   ;------------------------------------------------------------
0000            630   ;------------------------------------------------------------
0000            631   ;        main.c:55: char _c51_external_startup (void)
0000            632   ;        -----------------------------------------
0000            633   ;         function _c51_external_startup
0000            634   ;        -----------------------------------------
0000            635   __c51_external_startup:
0000            636            using   0
0000            637   ;        main.c:58: SFRPAGE = 0x00;
0000 75A700     638            mov     _SFRPAGE,#0x00
0003            639   ;        main.c:59: WDTCN = 0xDE; //First key
0003 7597DE     640            mov     _WDTCN,#0xDE
0006            641   ;        main.c:60: WDTCN = 0xAD; //Second key
0006 7597AD     642            mov     _WDTCN,#0xAD
0009            643   ;        main.c:62: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     644            mov     _VDM0CN,#0x80
000C            645   ;        main.c:63: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     646            mov     _RSTSRC,#0x06
000F            647   ;        main.c:70: SFRPAGE = 0x10;
000F 75A710     648            mov     _SFRPAGE,#0x10
0012            649   ;        main.c:71: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     650            mov     _PFE0CN,#0x20
0015            651   ;        main.c:72: SFRPAGE = 0x00;
0015 75A700     652            mov     _SFRPAGE,#0x00
0018            653   ;        main.c:93: CLKSEL = 0x00;
0018 75A900     654            mov     _CLKSEL,#0x00
001B            655   ;        main.c:94: CLKSEL = 0x00;
001B 75A900     656            mov     _CLKSEL,#0x00
001E            657   ;        main.c:95: while ((CLKSEL & 0x80) == 0);
001E            658   L002001?:
001E E5A9       659            mov     a,_CLKSEL
0020 30E7A0     660            jnb     acc.7,L002001?
0023            661   ;        main.c:96: CLKSEL = 0x03;
0023 75A903     662            mov     _CLKSEL,#0x03
0026            663   ;        main.c:97: CLKSEL = 0x03;
0026 75A903     664            mov     _CLKSEL,#0x03
0029            665   ;        main.c:98: while ((CLKSEL & 0x80) == 0);
0029            666   L002004?:
0029 E5A9       667            mov     a,_CLKSEL
002B 30E720     668            jnb     acc.7,L002004?
002E            669   ;        main.c:103: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     670            orl     _P0MDOUT,#0x11
0031            671   ;        main.c:104: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     672            orl     _P2MDOUT,#0x01
0034            673   ;        main.c:105: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     674            mov     _XBR0,#0x01
0037            675   ;        main.c:106: XBR1     = 0X00;
0037 75E200     676            mov     _XBR1,#0x00
003A            677   ;        main.c:107: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     678            mov     _XBR2,#0x41
003D            679   ;        main.c:113: SCON0 = 0x10;
003D 759810     680            mov     _SCON0,#0x10
0040            681   ;        main.c:114: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     682            mov     _TH1,#0xE6
0043            683   ;        main.c:115: TL1 = TH1;      // Init Timer1
0043 858D8B     684            mov     _TL1,_TH1
0046            685   ;        main.c:116: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     686            anl     _TMOD,#0x0F
0049            687   ;        main.c:117: TMOD |=  0x20;                       
0049 438920     688            orl     _TMOD,#0x20
004C            689   ;        main.c:118: TR1 = 1; // START Timer1
004C D28E       690            setb    _TR1
004E            691   ;        main.c:119: TI = 1;  // Indicate TX0 ready
004E D299       692            setb    _TI
0050            693   ;        main.c:121: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       694            setb    _P2_0
0052            695   ;        main.c:124: SFRPAGE=0x10;
0052 75A710     696            mov     _SFRPAGE,#0x10
0055            697   ;        main.c:125: TMR5CN0=0x00;
0055 75C000     698            mov     _TMR5CN0,#0x00
0058            699   ;        main.c:126: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     700            mov     _TMR5,#0xFF
005B 75D5FF     701            mov     (_TMR5 >> 8),#0xFF
005E            702   ;        main.c:127: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     703            orl     _EIE2,#0x08
0061            704   ;        main.c:128: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       705            setb    _TR5
0063            706   ;        main.c:131: EA=1;  // Enable global interrupts
0063 D2AF       707            setb    _EA
0065            708   ;        main.c:132: SFRPAGE=0x00;
0065 75A700     709            mov     _SFRPAGE,#0x00
0068            710   ;        main.c:134: return 0;
0068 758200     711            mov     dpl,#0x00
006B 22         712            ret
006C            713   ;------------------------------------------------------------
006C            714   ;Allocation info for local variables in function 'Timer3us'
006C            715   ;------------------------------------------------------------
006C            716   ;us                        Allocated to registers r2 
006C            717   ;i                         Allocated to registers r3 
006C            718   ;------------------------------------------------------------
006C            719   ;        main.c:138: void Timer3us(unsigned char us)
006C            720   ;        -----------------------------------------
006C            721   ;         function Timer3us
006C            722   ;        -----------------------------------------
006C            723   _Timer3us:
006C AA82       724            mov     r2,dpl
006E            725   ;        main.c:143: CKCON0|=0b_0100_0000;
006E 438E40     726            orl     _CKCON0,#0x40
0071            727   ;        main.c:145: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     728            mov     _TMR3RL,#0xB8
0074 7593FF     729            mov     (_TMR3RL >> 8),#0xFF
0077            730   ;        main.c:146: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     731            mov     _TMR3,_TMR3RL
007A 859395     732            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            733   ;        main.c:148: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     734            mov     _TMR3CN0,#0x04
0080            735   ;        main.c:149: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       736            mov     r3,#0x00
0082            737   L003004?:
0082 C3         738            clr     c
0083 EB         739            mov     a,r3
0084 9A         740            subb    a,r2
0085 5000       741            jnc     L003007?
0087            742   ;        main.c:151: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            743   L003001?:
0087 E591       744            mov     a,_TMR3CN0
0089 30E720     745            jnb     acc.7,L003001?
008C            746   ;        main.c:152: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     747            anl     _TMR3CN0,#0x7F
008F            748   ;        main.c:149: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         749            inc     r3
0090 8000       750            sjmp    L003004?
0092            751   L003007?:
0092            752   ;        main.c:154: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     753            mov     _TMR3CN0,#0x00
0095 22         754            ret
0096            755   ;------------------------------------------------------------
0096            756   ;Allocation info for local variables in function 'waitms'
0096            757   ;------------------------------------------------------------
0096            758   ;ms                        Allocated to registers r2 r3 
0096            759   ;j                         Allocated to registers r4 r5 
0096            760   ;k                         Allocated to registers r6 
0096            761   ;------------------------------------------------------------
0096            762   ;        main.c:157: void waitms (unsigned int ms)
0096            763   ;        -----------------------------------------
0096            764   ;         function waitms
0096            765   ;        -----------------------------------------
0096            766   _waitms:
0096 AA82       767            mov     r2,dpl
0098 AB83       768            mov     r3,dph
009A            769   ;        main.c:161: for(j=0; j<ms; j++)
009A 7C00       770            mov     r4,#0x00
009C 7D00       771            mov     r5,#0x00
009E            772   L004005?:
009E C3         773            clr     c
009F EC         774            mov     a,r4
00A0 9A         775            subb    a,r2
00A1 ED         776            mov     a,r5
00A2 9B         777            subb    a,r3
00A3 5000       778            jnc     L004009?
00A5            779   ;        main.c:162: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       780            mov     r6,#0x00
00A7            781   L004001?:
00A7 BE0460     782            cjne    r6,#0x04,L004018?
00AA            783   L004018?:
00AA 5000       784            jnc     L004007?
00AC 7582FA     785            mov     dpl,#0xFA
00AF C002       786            push    ar2
00B1 C003       787            push    ar3
00B3 C004       788            push    ar4
00B5 C005       789            push    ar5
00B7 C006       790            push    ar6
00B9 120000     791            lcall   _Timer3us
00BC D006       792            pop     ar6
00BE D005       793            pop     ar5
00C0 D004       794            pop     ar4
00C2 D003       795            pop     ar3
00C4 D002       796            pop     ar2
00C6 0E         797            inc     r6
00C7 8000       798            sjmp    L004001?
00C9            799   L004007?:
00C9            800   ;        main.c:161: for(j=0; j<ms; j++)
00C9 0C         801            inc     r4
00CA BC00A0     802            cjne    r4,#0x00,L004005?
00CD 0D         803            inc     r5
00CE 8000       804            sjmp    L004005?
00D0            805   L004009?:
00D0 22         806            ret
00D1            807   ;------------------------------------------------------------
00D1            808   ;Allocation info for local variables in function 'UART1_Init'
00D1            809   ;------------------------------------------------------------
00D1            810   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            811   ;------------------------------------------------------------
00D1            812   ;        main.c:165: void UART1_Init (unsigned long baudrate)
00D1            813   ;        -----------------------------------------
00D1            814   ;         function UART1_Init
00D1            815   ;        -----------------------------------------
00D1            816   _UART1_Init:
00D1 AA82       817            mov     r2,dpl
00D3 AB83       818            mov     r3,dph
00D5 ACF0       819            mov     r4,b
00D7 FD         820            mov     r5,a
00D8            821   ;        main.c:167: SFRPAGE = 0x20;
00D8 75A720     822            mov     _SFRPAGE,#0x20
00DB            823   ;        main.c:168: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     824            mov     _SMOD1,#0x0C
00DE            825   ;        main.c:169: SCON1 = 0x10;
00DE 75C810     826            mov     _SCON1,#0x10
00E1            827   ;        main.c:170: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     828            mov     _SBCON1,#0x00
00E4            829   ;        main.c:171: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       830            mov     __divulong_PARM_2,r2
00E6 8B01       831            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       832            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       833            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     834            mov     dptr,#0xA200
00EF 75F04A     835            mov     b,#0x4A
00F2 7404       836            mov     a,#0x04
00F4 120000     837            lcall   __divulong
00F7 AA82       838            mov     r2,dpl
00F9 AB83       839            mov     r3,dph
00FB ACF0       840            mov     r4,b
00FD FD         841            mov     r5,a
00FE 750018     842            mov     __divulong_PARM_2,#0x18
0101 E4         843            clr     a
0102 F501       844            mov     (__divulong_PARM_2 + 1),a
0104 F502       845            mov     (__divulong_PARM_2 + 2),a
0106 F503       846            mov     (__divulong_PARM_2 + 3),a
0108 8A82       847            mov     dpl,r2
010A 8B83       848            mov     dph,r3
010C 8CF0       849            mov     b,r4
010E ED         850            mov     a,r5
010F 120000     851            lcall   __divulong
0112 AA82       852            mov     r2,dpl
0114 AB83       853            mov     r3,dph
0116 ACF0       854            mov     r4,b
0118 FD         855            mov     r5,a
0119 E4         856            clr     a
011A C3         857            clr     c
011B 9A         858            subb    a,r2
011C FA         859            mov     r2,a
011D E4         860            clr     a
011E 9B         861            subb    a,r3
011F FB         862            mov     r3,a
0120 7401       863            mov     a,#0x01
0122 9C         864            subb    a,r4
0123 E4         865            clr     a
0124 9D         866            subb    a,r5
0125 8A95       867            mov     _SBRL1,r2
0127 8B96       868            mov     (_SBRL1 >> 8),r3
0129            869   ;        main.c:172: TI1 = 1; // indicate ready for TX
0129 D2C9       870            setb    _TI1
012B            871   ;        main.c:173: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     872            orl     _SBCON1,#0x40
012E            873   ;        main.c:174: SFRPAGE = 0x00;
012E 75A700     874            mov     _SFRPAGE,#0x00
0131 22         875            ret
0132            876   ;------------------------------------------------------------
0132            877   ;Allocation info for local variables in function 'putchar1'
0132            878   ;------------------------------------------------------------
0132            879   ;c                         Allocated to registers r2 
0132            880   ;------------------------------------------------------------
0132            881   ;        main.c:177: void putchar1 (char c) 
0132            882   ;        -----------------------------------------
0132            883   ;         function putchar1
0132            884   ;        -----------------------------------------
0132            885   _putchar1:
0132 AA82       886            mov     r2,dpl
0134            887   ;        main.c:179: SFRPAGE = 0x20;
0134 75A720     888            mov     _SFRPAGE,#0x20
0137            889   ;        main.c:180: while (!TI1);
0137            890   L006001?:
0137            891   ;        main.c:181: TI1=0;
0137 10C9F0     892            jbc     _TI1,L006008?
013A 8000       893            sjmp    L006001?
013C            894   L006008?:
013C            895   ;        main.c:182: SBUF1 = c;
013C 8A92       896            mov     _SBUF1,r2
013E            897   ;        main.c:183: SFRPAGE = 0x00;
013E 75A700     898            mov     _SFRPAGE,#0x00
0141 22         899            ret
0142            900   ;------------------------------------------------------------
0142            901   ;Allocation info for local variables in function 'sendstr1'
0142            902   ;------------------------------------------------------------
0142            903   ;s                         Allocated to registers r2 r3 r4 
0142            904   ;------------------------------------------------------------
0142            905   ;        main.c:186: void sendstr1 (char * s)
0142            906   ;        -----------------------------------------
0142            907   ;         function sendstr1
0142            908   ;        -----------------------------------------
0142            909   _sendstr1:
0142 AA82       910            mov     r2,dpl
0144 AB83       911            mov     r3,dph
0146 ACF0       912            mov     r4,b
0148            913   ;        main.c:188: while(*s)
0148            914   L007001?:
0148 8A82       915            mov     dpl,r2
014A 8B83       916            mov     dph,r3
014C 8CF0       917            mov     b,r4
014E 120000     918            lcall   __gptrget
0151 FD         919            mov     r5,a
0152 6000       920            jz      L007004?
0154            921   ;        main.c:190: putchar1(*s);
0154 8D82       922            mov     dpl,r5
0156 C002       923            push    ar2
0158 C003       924            push    ar3
015A C004       925            push    ar4
015C 120000     926            lcall   _putchar1
015F D004       927            pop     ar4
0161 D003       928            pop     ar3
0163 D002       929            pop     ar2
0165            930   ;        main.c:191: s++;        
0165 0A         931            inc     r2
0166 BA0030     932            cjne    r2,#0x00,L007001?
0169 0B         933            inc     r3
016A 8000       934            sjmp    L007001?
016C            935   L007004?:
016C 22         936            ret
016D            937   ;------------------------------------------------------------
016D            938   ;Allocation info for local variables in function 'getchar1'
016D            939   ;------------------------------------------------------------
016D            940   ;c                         Allocated to registers 
016D            941   ;------------------------------------------------------------
016D            942   ;        main.c:195: char getchar1 (void)
016D            943   ;        -----------------------------------------
016D            944   ;         function getchar1
016D            945   ;        -----------------------------------------
016D            946   _getchar1:
016D            947   ;        main.c:198: SFRPAGE = 0x20;
016D 75A720     948            mov     _SFRPAGE,#0x20
0170            949   ;        main.c:199: while (!RI1);
0170            950   L008001?:
0170            951   ;        main.c:200: RI1=0;
0170 10C830     952            jbc     _RI1,L008008?
0173 8000       953            sjmp    L008001?
0175            954   L008008?:
0175            955   ;        main.c:202: SCON1&=0b_0011_1111;
0175 53C83F     956            anl     _SCON1,#0x3F
0178            957   ;        main.c:203: c = SBUF1;
0178 859282     958            mov     dpl,_SBUF1
017B            959   ;        main.c:204: SFRPAGE = 0x00;
017B 75A700     960            mov     _SFRPAGE,#0x00
017E            961   ;        main.c:205: return (c);
017E 22         962            ret
017F            963   ;------------------------------------------------------------
017F            964   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            965   ;------------------------------------------------------------
017F            966   ;c                         Allocated to registers 
017F            967   ;timeout                   Allocated to registers r2 r3 
017F            968   ;------------------------------------------------------------
017F            969   ;        main.c:208: char getchar1_with_timeout (void)
017F            970   ;        -----------------------------------------
017F            971   ;         function getchar1_with_timeout
017F            972   ;        -----------------------------------------
017F            973   _getchar1_with_timeout:
017F            974   ;        main.c:212: SFRPAGE = 0x20;
017F 75A720     975            mov     _SFRPAGE,#0x20
0182            976   ;        main.c:214: while (!RI1)
0182 7A00       977            mov     r2,#0x00
0184 7B00       978            mov     r3,#0x00
0186            979   L009003?:
0186 20C8B0     980            jb      _RI1,L009005?
0189            981   ;        main.c:216: SFRPAGE = 0x00;
0189 75A700     982            mov     _SFRPAGE,#0x00
018C            983   ;        main.c:217: Timer3us(20);
018C 758214     984            mov     dpl,#0x14
018F C002       985            push    ar2
0191 C003       986            push    ar3
0193 120000     987            lcall   _Timer3us
0196 D003       988            pop     ar3
0198 D002       989            pop     ar2
019A            990   ;        main.c:218: SFRPAGE = 0x20;
019A 75A720     991            mov     _SFRPAGE,#0x20
019D            992   ;        main.c:219: timeout++;
019D 0A         993            inc     r2
019E BA00F0     994            cjne    r2,#0x00,L009012?
01A1 0B         995            inc     r3
01A2            996   L009012?:
01A2            997   ;        main.c:220: if(timeout==25000)
01A2 BAA870     998            cjne    r2,#0xA8,L009003?
01A5 BB6170     999            cjne    r3,#0x61,L009003?
01A8           1000   ;        main.c:222: SFRPAGE = 0x00;
01A8 75A700    1001            mov     _SFRPAGE,#0x00
01AB           1002   ;        main.c:223: return ('\n'); // Timeout after half second
01AB 75820A    1003            mov     dpl,#0x0A
01AE 22        1004            ret
01AF           1005   L009005?:
01AF           1006   ;        main.c:226: RI1=0;
01AF C2C8      1007            clr     _RI1
01B1           1008   ;        main.c:228: SCON1&=0b_0011_1111;
01B1 53C83F    1009            anl     _SCON1,#0x3F
01B4           1010   ;        main.c:229: c = SBUF1;
01B4 859282    1011            mov     dpl,_SBUF1
01B7           1012   ;        main.c:230: SFRPAGE = 0x00;
01B7 75A700    1013            mov     _SFRPAGE,#0x00
01BA           1014   ;        main.c:231: return (c);
01BA 22        1015            ret
01BB           1016   ;------------------------------------------------------------
01BB           1017   ;Allocation info for local variables in function 'getstr1'
01BB           1018   ;------------------------------------------------------------
01BB           1019   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1020   ;s                         Allocated to registers r2 r3 r4 
01BB           1021   ;c                         Allocated to registers r1 
01BB           1022   ;cnt                       Allocated to registers r5 
01BB           1023   ;------------------------------------------------------------
01BB           1024   ;        main.c:234: void getstr1 (char * s, unsigned char n)
01BB           1025   ;        -----------------------------------------
01BB           1026   ;         function getstr1
01BB           1027   ;        -----------------------------------------
01BB           1028   _getstr1:
01BB AA82      1029            mov     r2,dpl
01BD AB83      1030            mov     r3,dph
01BF ACF0      1031            mov     r4,b
01C1           1032   ;        main.c:240: while(1)
01C1 7D00      1033            mov     r5,#0x00
01C3 8A06      1034            mov     ar6,r2
01C5 8B07      1035            mov     ar7,r3
01C7 8C00      1036            mov     ar0,r4
01C9           1037   L010007?:
01C9           1038   ;        main.c:242: c=getchar1_with_timeout();
01C9 C002      1039            push    ar2
01CB C003      1040            push    ar3
01CD C004      1041            push    ar4
01CF C005      1042            push    ar5
01D1 C006      1043            push    ar6
01D3 C007      1044            push    ar7
01D5 C000      1045            push    ar0
01D7 120000    1046            lcall   _getchar1_with_timeout
01DA A982      1047            mov     r1,dpl
01DC D000      1048            pop     ar0
01DE D007      1049            pop     ar7
01E0 D006      1050            pop     ar6
01E2 D005      1051            pop     ar5
01E4 D004      1052            pop     ar4
01E6 D003      1053            pop     ar3
01E8 D002      1054            pop     ar2
01EA           1055   ;        main.c:243: if(c=='\n')
01EA B90A70    1056            cjne    r1,#0x0A,L010002?
01ED           1057   ;        main.c:245: *s=0;
01ED 8A82      1058            mov     dpl,r2
01EF 8B83      1059            mov     dph,r3
01F1 8CF0      1060            mov     b,r4
01F3 E4        1061            clr     a
01F4           1062   ;        main.c:246: return;
01F4 020000    1063            ljmp    __gptrput
01F7           1064   L010002?:
01F7           1065   ;        main.c:249: if (cnt<n)
01F7 C3        1066            clr     c
01F8 ED        1067            mov     a,r5
01F9 9550      1068            subb    a,_getstr1_PARM_2
01FB 5000      1069            jnc     L010004?
01FD           1070   ;        main.c:251: cnt++;
01FD 0D        1071            inc     r5
01FE           1072   ;        main.c:252: *s=c;
01FE 8E82      1073            mov     dpl,r6
0200 8F83      1074            mov     dph,r7
0202 88F0      1075            mov     b,r0
0204 E9        1076            mov     a,r1
0205 120000    1077            lcall   __gptrput
0208 A3        1078            inc     dptr
0209 AE82      1079            mov     r6,dpl
020B AF83      1080            mov     r7,dph
020D           1081   ;        main.c:253: s++;
020D 8E02      1082            mov     ar2,r6
020F 8F03      1083            mov     ar3,r7
0211 8804      1084            mov     ar4,r0
0213 8000      1085            sjmp    L010007?
0215           1086   L010004?:
0215           1087   ;        main.c:257: *s=0;
0215 8A82      1088            mov     dpl,r2
0217 8B83      1089            mov     dph,r3
0219 8CF0      1090            mov     b,r4
021B E4        1091            clr     a
021C           1092   ;        main.c:258: return;
021C 020000    1093            ljmp    __gptrput
021F           1094   ;------------------------------------------------------------
021F           1095   ;Allocation info for local variables in function 'RXU1'
021F           1096   ;------------------------------------------------------------
021F           1097   ;------------------------------------------------------------
021F           1098   ;        main.c:264: bit RXU1 (void)
021F           1099   ;        -----------------------------------------
021F           1100   ;         function RXU1
021F           1101   ;        -----------------------------------------
021F           1102   _RXU1:
021F           1103   ;        main.c:267: SFRPAGE = 0x20;
021F 75A720    1104            mov     _SFRPAGE,#0x20
0222           1105   ;        main.c:268: mybit=RI1;
0222 A2C8      1106            mov     c,_RI1
0224           1107   ;        main.c:269: SFRPAGE = 0x00;
0224 75A700    1108            mov     _SFRPAGE,#0x00
0227           1109   ;        main.c:270: return mybit;
0227 22        1110            ret
0228           1111   ;------------------------------------------------------------
0228           1112   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1113   ;------------------------------------------------------------
0228           1114   ;ms                        Allocated to registers r2 r3 
0228           1115   ;j                         Allocated to registers r4 r5 
0228           1116   ;k                         Allocated to registers r6 
0228           1117   ;------------------------------------------------------------
0228           1118   ;        main.c:273: void waitms_or_RI1 (unsigned int ms)
0228           1119   ;        -----------------------------------------
0228           1120   ;         function waitms_or_RI1
0228           1121   ;        -----------------------------------------
0228           1122   _waitms_or_RI1:
0228 AA82      1123            mov     r2,dpl
022A AB83      1124            mov     r3,dph
022C           1125   ;        main.c:277: for(j=0; j<ms; j++)
022C 7C00      1126            mov     r4,#0x00
022E 7D00      1127            mov     r5,#0x00
0230           1128   L012007?:
0230 C3        1129            clr     c
0231 EC        1130            mov     a,r4
0232 9A        1131            subb    a,r2
0233 ED        1132            mov     a,r5
0234 9B        1133            subb    a,r3
0235 5000      1134            jnc     L012011?
0237           1135   ;        main.c:279: for (k=0; k<4; k++)
0237 7E00      1136            mov     r6,#0x00
0239           1137   L012003?:
0239 BE04F0    1138            cjne    r6,#0x04,L012019?
023C           1139   L012019?:
023C 5000      1140            jnc     L012009?
023E           1141   ;        main.c:281: if(RXU1()) return;
023E C002      1142            push    ar2
0240 C003      1143            push    ar3
0242 C004      1144            push    ar4
0244 C005      1145            push    ar5
0246 C006      1146            push    ar6
0248 120000    1147            lcall   _RXU1
024B E4        1148            clr     a
024C 33        1149            rlc     a
024D D006      1150            pop     ar6
024F D005      1151            pop     ar5
0251 D004      1152            pop     ar4
0253 D003      1153            pop     ar3
0255 D002      1154            pop     ar2
0257 6000      1155            jz      L012002?
0259 22        1156            ret
025A           1157   L012002?:
025A           1158   ;        main.c:282: Timer3us(250);
025A 7582FA    1159            mov     dpl,#0xFA
025D C002      1160            push    ar2
025F C003      1161            push    ar3
0261 C004      1162            push    ar4
0263 C005      1163            push    ar5
0265 C006      1164            push    ar6
0267 120000    1165            lcall   _Timer3us
026A D006      1166            pop     ar6
026C D005      1167            pop     ar5
026E D004      1168            pop     ar4
0270 D003      1169            pop     ar3
0272 D002      1170            pop     ar2
0274           1171   ;        main.c:279: for (k=0; k<4; k++)
0274 0E        1172            inc     r6
0275 8000      1173            sjmp    L012003?
0277           1174   L012009?:
0277           1175   ;        main.c:277: for(j=0; j<ms; j++)
0277 0C        1176            inc     r4
0278 BC0030    1177            cjne    r4,#0x00,L012007?
027B 0D        1178            inc     r5
027C 8000      1179            sjmp    L012007?
027E           1180   L012011?:
027E 22        1181            ret
027F           1182   ;------------------------------------------------------------
027F           1183   ;Allocation info for local variables in function 'SendATCommand'
027F           1184   ;------------------------------------------------------------
027F           1185   ;s                         Allocated to registers r2 r3 r4 
027F           1186   ;------------------------------------------------------------
027F           1187   ;        main.c:287: void SendATCommand (char * s)
027F           1188   ;        -----------------------------------------
027F           1189   ;         function SendATCommand
027F           1190   ;        -----------------------------------------
027F           1191   _SendATCommand:
027F AA82      1192            mov     r2,dpl
0281 AB83      1193            mov     r3,dph
0283 ACF0      1194            mov     r4,b
0285           1195   ;        main.c:289: printf("Command: %s", s);
0285 C002      1196            push    ar2
0287 C003      1197            push    ar3
0289 C004      1198            push    ar4
028B C002      1199            push    ar2
028D C003      1200            push    ar3
028F C004      1201            push    ar4
0291 74B0      1202            mov     a,#__str_0
0293 C0E0      1203            push    acc
0295 74BE      1204            mov     a,#(__str_0 >> 8)
0297 C0E0      1205            push    acc
0299 7480      1206            mov     a,#0x80
029B C0E0      1207            push    acc
029D 120000    1208            lcall   _printf
02A0 E581      1209            mov     a,sp
02A2 24FA      1210            add     a,#0xfa
02A4 F581      1211            mov     sp,a
02A6           1212   ;        main.c:290: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1213            clr     _P2_0
02A8           1214   ;        main.c:291: waitms(5);
02A8 900005    1215            mov     dptr,#0x0005
02AB 120000    1216            lcall   _waitms
02AE D004      1217            pop     ar4
02B0 D003      1218            pop     ar3
02B2 D002      1219            pop     ar2
02B4           1220   ;        main.c:292: sendstr1(s);
02B4 8A82      1221            mov     dpl,r2
02B6 8B83      1222            mov     dph,r3
02B8 8CF0      1223            mov     b,r4
02BA 120000    1224            lcall   _sendstr1
02BD           1225   ;        main.c:293: getstr1(buff, sizeof(buff)-1);
02BD 755013    1226            mov     _getstr1_PARM_2,#0x13
02C0 904510    1227            mov     dptr,#_buff
02C3 75F040    1228            mov     b,#0x40
02C6 120000    1229            lcall   _getstr1
02C9           1230   ;        main.c:294: waitms(10);
02C9 90000A    1231            mov     dptr,#0x000A
02CC 120000    1232            lcall   _waitms
02CF           1233   ;        main.c:295: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1234            setb    _P2_0
02D1           1235   ;        main.c:296: printf("Response: %s\r\n", buff);
02D1 7410      1236            mov     a,#_buff
02D3 C0E0      1237            push    acc
02D5 7445      1238            mov     a,#(_buff >> 8)
02D7 C0E0      1239            push    acc
02D9 7440      1240            mov     a,#0x40
02DB C0E0      1241            push    acc
02DD 7470      1242            mov     a,#__str_1
02DF C0E0      1243            push    acc
02E1 74BF      1244            mov     a,#(__str_1 >> 8)
02E3 C0E0      1245            push    acc
02E5 7480      1246            mov     a,#0x80
02E7 C0E0      1247            push    acc
02E9 120000    1248            lcall   _printf
02EC E581      1249            mov     a,sp
02EE 24FA      1250            add     a,#0xfa
02F0 F581      1251            mov     sp,a
02F2 22        1252            ret
02F3           1253   ;------------------------------------------------------------
02F3           1254   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1255   ;------------------------------------------------------------
02F3           1256   ;------------------------------------------------------------
02F3           1257   ;        main.c:299: void ReceptionOff (void)
02F3           1258   ;        -----------------------------------------
02F3           1259   ;         function ReceptionOff
02F3           1260   ;        -----------------------------------------
02F3           1261   _ReceptionOff:
02F3           1262   ;        main.c:301: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1263            clr     _P2_0
02F5           1264   ;        main.c:302: waitms(10);
02F5 90000A    1265            mov     dptr,#0x000A
02F8 120000    1266            lcall   _waitms
02FB           1267   ;        main.c:303: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90BFB0    1268            mov     dptr,#__str_2
02FE 75F080    1269            mov     b,#0x80
0301 120000    1270            lcall   _sendstr1
0304           1271   ;        main.c:304: waitms(10);
0304 90000A    1272            mov     dptr,#0x000A
0307 120000    1273            lcall   _waitms
030A           1274   ;        main.c:306: SCON1&=0b_0011_1111;
030A 53C83F    1275            anl     _SCON1,#0x3F
030D           1276   ;        main.c:307: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1277            setb    _P2_0
030F 22        1278            ret
0310           1279   ;------------------------------------------------------------
0310           1280   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1281   ;------------------------------------------------------------
0310           1282   ;pin                       Allocated to registers r2 
0310           1283   ;mask                      Allocated to registers r3 
0310           1284   ;------------------------------------------------------------
0310           1285   ;        main.c:310: void Set_Pin_Output (unsigned char pin)
0310           1286   ;        -----------------------------------------
0310           1287   ;         function Set_Pin_Output
0310           1288   ;        -----------------------------------------
0310           1289   _Set_Pin_Output:
0310 AA82      1290            mov     r2,dpl
0312           1291   ;        main.c:314: mask=(1<<(pin&0x7));
0312 7407      1292            mov     a,#0x07
0314 5A        1293            anl     a,r2
0315 F5F0      1294            mov     b,a
0317 05F0      1295            inc     b
0319 7401      1296            mov     a,#0x01
031B 8000      1297            sjmp    L015011?
031D           1298   L015009?:
031D 25E0      1299            add     a,acc
031F           1300   L015011?:
031F D5F030    1301            djnz    b,L015009?
0322 FB        1302            mov     r3,a
0323           1303   ;        main.c:315: switch(pin/0x10)
0323 EA        1304            mov     a,r2
0324 C4        1305            swap    a
0325 540F      1306            anl     a,#0x0f
0327 FA        1307            mov  r2,a
0328 24FC      1308            add     a,#0xff - 0x03
032A 4000      1309            jc      L015006?
032C EA        1310            mov     a,r2
032D 2A        1311            add     a,r2
032E 2A        1312            add     a,r2
032F 90C0B0    1313            mov     dptr,#L015013?
0332 73        1314            jmp     @a+dptr
0333           1315   L015013?:
0333 020000    1316            ljmp    L015001?
0336 020000    1317            ljmp    L015002?
0339 020000    1318            ljmp    L015003?
033C 020000    1319            ljmp    L015004?
033F           1320   ;        main.c:317: case 0: P0MDOUT |= mask; break;
033F           1321   L015001?:
033F EB        1322            mov     a,r3
0340 42A4      1323            orl     _P0MDOUT,a
0342           1324   ;        main.c:318: case 1: P1MDOUT |= mask; break;
0342 22        1325            ret
0343           1326   L015002?:
0343 EB        1327            mov     a,r3
0344 42A5      1328            orl     _P1MDOUT,a
0346           1329   ;        main.c:319: case 2: P2MDOUT |= mask; break; 
0346 22        1330            ret
0347           1331   L015003?:
0347 EB        1332            mov     a,r3
0348 42A6      1333            orl     _P2MDOUT,a
034A           1334   ;        main.c:320: case 3: P3MDOUT |= mask; break; 
034A 22        1335            ret
034B           1336   L015004?:
034B EB        1337            mov     a,r3
034C 429C      1338            orl     _P3MDOUT,a
034E           1339   ;        main.c:321: }   
034E           1340   L015006?:
034E 22        1341            ret
034F           1342   ;------------------------------------------------------------
034F           1343   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1344   ;------------------------------------------------------------
034F           1345   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1346   ;pin                       Allocated to registers r2 
034F           1347   ;------------------------------------------------------------
034F           1348   ;        main.c:324: void Set_Pin_Input (unsigned char pin)
034F           1349   ;        -----------------------------------------
034F           1350   ;         function Set_Pin_Input
034F           1351   ;        -----------------------------------------
034F           1352   _Set_Pin_Input:
034F AA82      1353            mov     r2,dpl
0351           1354   ;        main.c:328: mask=(1<<(pin&0x7));
0351 7407      1355            mov     a,#0x07
0353 5A        1356            anl     a,r2
0354 F5F0      1357            mov     b,a
0356 05F0      1358            inc     b
0358 7401      1359            mov     a,#0x01
035A 8000      1360            sjmp    L016011?
035C           1361   L016009?:
035C 25E0      1362            add     a,acc
035E           1363   L016011?:
035E D5F030    1364            djnz    b,L016009?
0361           1365   ;        main.c:329: mask=~mask;
0361 F4        1366            cpl     a
0362 FB        1367            mov     r3,a
0363           1368   ;        main.c:330: switch(pin/0x10)
0363 EA        1369            mov     a,r2
0364 C4        1370            swap    a
0365 540F      1371            anl     a,#0x0f
0367 FA        1372            mov  r2,a
0368 24FC      1373            add     a,#0xff - 0x03
036A 4000      1374            jc      L016006?
036C EA        1375            mov     a,r2
036D 2A        1376            add     a,r2
036E 2A        1377            add     a,r2
036F 90C2B0    1378            mov     dptr,#L016013?
0372 73        1379            jmp     @a+dptr
0373           1380   L016013?:
0373 020000    1381            ljmp    L016001?
0376 020000    1382            ljmp    L016002?
0379 020000    1383            ljmp    L016003?
037C 020000    1384            ljmp    L016004?
037F           1385   ;        main.c:332: case 0: P0MDOUT &= mask; break;
037F           1386   L016001?:
037F EB        1387            mov     a,r3
0380 52A4      1388            anl     _P0MDOUT,a
0382           1389   ;        main.c:333: case 1: P1MDOUT &= mask; break;
0382 22        1390            ret
0383           1391   L016002?:
0383 EB        1392            mov     a,r3
0384 52A5      1393            anl     _P1MDOUT,a
0386           1394   ;        main.c:334: case 2: P2MDOUT &= mask; break; 
0386 22        1395            ret
0387           1396   L016003?:
0387 EB        1397            mov     a,r3
0388 52A6      1398            anl     _P2MDOUT,a
038A           1399   ;        main.c:335: case 3: P3MDOUT &= mask; break; 
038A 22        1400            ret
038B           1401   L016004?:
038B EB        1402            mov     a,r3
038C 529C      1403            anl     _P3MDOUT,a
038E           1404   ;        main.c:336: }   
038E           1405   L016006?:
038E 22        1406            ret
038F           1407   ;------------------------------------------------------------
038F           1408   ;Allocation info for local variables in function 'InitADC'
038F           1409   ;------------------------------------------------------------
038F           1410   ;------------------------------------------------------------
038F           1411   ;        main.c:339: void InitADC (void)
038F           1412   ;        -----------------------------------------
038F           1413   ;         function InitADC
038F           1414   ;        -----------------------------------------
038F           1415   _InitADC:
038F           1416   ;        main.c:341: SFRPAGE = 0x00;
038F 75A700    1417            mov     _SFRPAGE,#0x00
0392           1418   ;        main.c:342: ADEN=0; // Disable ADC
0392 C2EF      1419            clr     _ADEN
0394           1420   ;        main.c:347: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1421            mov     _ADC0CN1,#0x80
0397           1422   ;        main.c:351: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1423            mov     _ADC0CF0,#0x20
039A           1424   ;        main.c:355: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1425            mov     _ADC0CF1,#0x1E
039D           1426   ;        main.c:364: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1427            mov     _ADC0CN0,#0x00
03A0           1428   ;        main.c:369: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1429            mov     _ADC0CF2,#0x3F
03A3           1430   ;        main.c:373: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1431            mov     _ADC0CN2,#0x00
03A6           1432   ;        main.c:375: ADEN=1; // Enable ADC
03A6 D2EF      1433            setb    _ADEN
03A8 22        1434            ret
03A9           1435   ;------------------------------------------------------------
03A9           1436   ;Allocation info for local variables in function 'InitPinADC'
03A9           1437   ;------------------------------------------------------------
03A9           1438   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1439   ;portno                    Allocated to registers r2 
03A9           1440   ;mask                      Allocated to registers r3 
03A9           1441   ;------------------------------------------------------------
03A9           1442   ;        main.c:378: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1443   ;        -----------------------------------------
03A9           1444   ;         function InitPinADC
03A9           1445   ;        -----------------------------------------
03A9           1446   _InitPinADC:
03A9 AA82      1447            mov     r2,dpl
03AB           1448   ;        main.c:382: mask=1<<pin_num;
03AB 8588F0    1449            mov     b,_InitPinADC_PARM_2
03AE 05F0      1450            inc     b
03B0 7401      1451            mov     a,#0x01
03B2 8000      1452            sjmp    L018013?
03B4           1453   L018011?:
03B4 25E0      1454            add     a,acc
03B6           1455   L018013?:
03B6 D5F030    1456            djnz    b,L018011?
03B9 FB        1457            mov     r3,a
03BA           1458   ;        main.c:384: SFRPAGE = 0x20;
03BA 75A720    1459            mov     _SFRPAGE,#0x20
03BD           1460   ;        main.c:385: switch (portno)
03BD BA0070    1461            cjne    r2,#0x00,L018014?
03C0 8000      1462            sjmp    L018001?
03C2           1463   L018014?:
03C2 BA01F0    1464            cjne    r2,#0x01,L018015?
03C5 8000      1465            sjmp    L018002?
03C7           1466   L018015?:
03C7           1467   ;        main.c:387: case 0:
03C7 BA0270    1468            cjne    r2,#0x02,L018005?
03CA 8000      1469            sjmp    L018003?
03CC           1470   L018001?:
03CC           1471   ;        main.c:388: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1472            mov     a,r3
03CD F4        1473            cpl     a
03CE FA        1474            mov     r2,a
03CF 52F1      1475            anl     _P0MDIN,a
03D1           1476   ;        main.c:389: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1477            mov     a,r3
03D2 42D4      1478            orl     _P0SKIP,a
03D4           1479   ;        main.c:390: break;
03D4           1480   ;        main.c:391: case 1:
03D4 8000      1481            sjmp    L018005?
03D6           1482   L018002?:
03D6           1483   ;        main.c:392: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1484            mov     a,r3
03D7 F4        1485            cpl     a
03D8 FA        1486            mov     r2,a
03D9 52F2      1487            anl     _P1MDIN,a
03DB           1488   ;        main.c:393: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1489            mov     a,r3
03DC 42D5      1490            orl     _P1SKIP,a
03DE           1491   ;        main.c:394: break;
03DE           1492   ;        main.c:395: case 2:
03DE 8000      1493            sjmp    L018005?
03E0           1494   L018003?:
03E0           1495   ;        main.c:396: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1496            mov     a,r3
03E1 F4        1497            cpl     a
03E2 FA        1498            mov     r2,a
03E3 52F3      1499            anl     _P2MDIN,a
03E5           1500   ;        main.c:397: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1501            mov     a,r3
03E6 42CC      1502            orl     _P2SKIP,a
03E8           1503   ;        main.c:401: }
03E8           1504   L018005?:
03E8           1505   ;        main.c:402: SFRPAGE = 0x00;
03E8 75A700    1506            mov     _SFRPAGE,#0x00
03EB 22        1507            ret
03EC           1508   ;------------------------------------------------------------
03EC           1509   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1510   ;------------------------------------------------------------
03EC           1511   ;pin                       Allocated to registers 
03EC           1512   ;------------------------------------------------------------
03EC           1513   ;        main.c:405: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1514   ;        -----------------------------------------
03EC           1515   ;         function ADC_at_Pin
03EC           1516   ;        -----------------------------------------
03EC           1517   _ADC_at_Pin:
03EC 8582BB    1518            mov     _ADC0MX,dpl
03EF           1519   ;        main.c:408: ADINT = 0;
03EF C2ED      1520            clr     _ADINT
03F1           1521   ;        main.c:409: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1522            setb    _ADBUSY
03F3           1523   ;        main.c:410: while (!ADINT); // Wait for conversion to complete
03F3           1524   L019001?:
03F3 30EDF0    1525            jnb     _ADINT,L019001?
03F6           1526   ;        main.c:411: return (ADC0);
03F6 85BD82    1527            mov     dpl,_ADC0
03F9 85BE83    1528            mov     dph,(_ADC0 >> 8)
03FC 22        1529            ret
03FD           1530   ;------------------------------------------------------------
03FD           1531   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1532   ;------------------------------------------------------------
03FD           1533   ;------------------------------------------------------------
03FD           1534   ;        main.c:414: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1535   ;        -----------------------------------------
03FD           1536   ;         function Timer5_ISR
03FD           1537   ;        -----------------------------------------
03FD           1538   _Timer5_ISR:
03FD C0E0      1539            push    acc
03FF C002      1540            push    ar2
0401 C003      1541            push    ar3
0403 C0D0      1542            push    psw
0405 75D000    1543            mov     psw,#0x00
0408           1544   ;        main.c:416: SFRPAGE=0x10;
0408 75A710    1545            mov     _SFRPAGE,#0x10
040B           1546   ;        main.c:417: TF5H = 0; // Clear Timer5 interrupt flag
040B C2C7      1547            clr     _TF5H
040D           1548   ;        main.c:418: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
040D 75D2C4    1549            mov     _TMR5RL,#0xC4
0410 75D3FF    1550            mov     (_TMR5RL >> 8),#0xFF
0413           1551   ;        main.c:420: pwm_counter++; 
0413 0550      1552            inc     _pwm_counter
0415 E4        1553            clr     a
0416 B55070    1554            cjne    a,_pwm_counter,L020031?
0419 0551      1555            inc     (_pwm_counter + 1)
041B           1556   L020031?:
041B           1557   ;        main.c:421: if (pwm_counter == 100){
041B 7464      1558            mov     a,#0x64
041D B550B0    1559            cjne    a,_pwm_counter,L020032?
0420 E4        1560            clr     a
0421 B551B0    1561            cjne    a,(_pwm_counter + 1),L020032?
0424 8000      1562            sjmp    L020033?
0426           1563   L020032?:
0426 8000      1564            sjmp    L020002?
0428           1565   L020033?:
0428           1566   ;        main.c:422: pwm_counter = 0; 
0428 E4        1567            clr     a
0429 F550      1568            mov     _pwm_counter,a
042B F551      1569            mov     (_pwm_counter + 1),a
042D           1570   L020002?:
042D           1571   ;        main.c:425: if (pwm_left > pwm_counter){
042D AAD0      1572            mov     r2,_pwm_left
042F 7B00      1573            mov     r3,#0x00
0431 C3        1574            clr     c
0432 E550      1575            mov     a,_pwm_counter
0434 9A        1576            subb    a,r2
0435 E551      1577            mov     a,(_pwm_counter + 1)
0437 9B        1578            subb    a,r3
0438 5000      1579            jnc     L020007?
043A           1580   ;        main.c:426: if(L_motor_dir){
043A E550      1581            mov     a,_L_motor_dir
043C 6000      1582            jz      L020004?
043E           1583   ;        main.c:427: L_bridge_1 = 1; 
043E D2A1      1584            setb    _P2_1
0440           1585   ;        main.c:428: L_bridge_2 = 0; 
0440 C2A2      1586            clr     _P2_2
0442 8000      1587            sjmp    L020008?
0444           1588   L020004?:
0444           1589   ;        main.c:431: L_bridge_1 = 0; 
0444 C2A1      1590            clr     _P2_1
0446           1591   ;        main.c:432: L_bridge_2 = 1; 
0446 D2A2      1592            setb    _P2_2
0448 8000      1593            sjmp    L020008?
044A           1594   L020007?:
044A           1595   ;        main.c:436: L_bridge_1 = 0; 
044A C2A1      1596            clr     _P2_1
044C           1597   ;        main.c:437: L_bridge_2 = 0; 
044C C2A2      1598            clr     _P2_2
044E           1599   L020008?:
044E           1600   ;        main.c:439: if (pwm_right > pwm_counter){
044E AA90      1601            mov     r2,_pwm_right
0450 7B00      1602            mov     r3,#0x00
0452 C3        1603            clr     c
0453 E550      1604            mov     a,_pwm_counter
0455 9A        1605            subb    a,r2
0456 E551      1606            mov     a,(_pwm_counter + 1)
0458 9B        1607            subb    a,r3
0459 5000      1608            jnc     L020013?
045B           1609   ;        main.c:440: if (R_motor_dir){
045B E510      1610            mov     a,_R_motor_dir
045D 6000      1611            jz      L020010?
045F           1612   ;        main.c:441: R_bridge_1 = 1; 
045F D2A4      1613            setb    _P2_4
0461           1614   ;        main.c:442: R_bridge_2 = 0;
0461 C2A3      1615            clr     _P2_3
0463 8000      1616            sjmp    L020014?
0465           1617   L020010?:
0465           1618   ;        main.c:445: R_bridge_1 = 0; 
0465 C2A4      1619            clr     _P2_4
0467           1620   ;        main.c:446: R_bridge_2 = 1;
0467 D2A3      1621            setb    _P2_3
0469 8000      1622            sjmp    L020014?
046B           1623   L020013?:
046B           1624   ;        main.c:450: R_bridge_1 = 0; 
046B C2A4      1625            clr     _P2_4
046D           1626   ;        main.c:451: R_bridge_2 = 0; 
046D C2A3      1627            clr     _P2_3
046F           1628   L020014?:
046F           1629   ;        main.c:454: servo_counter++;
046F 0510      1630            inc     _servo_counter
0471 E4        1631            clr     a
0472 B510F0    1632            cjne    a,_servo_counter,L020038?
0475 0511      1633            inc     (_servo_counter + 1)
0477           1634   L020038?:
0477           1635   ;        main.c:455: if(servo_counter==2000)
0477 74D0      1636            mov     a,#0xD0
0479 B51030    1637            cjne    a,_servo_counter,L020016?
047C 7407      1638            mov     a,#0x07
047E B51130    1639            cjne    a,(_servo_counter + 1),L020016?
0481           1640   ;        main.c:457: servo_counter=0;
0481 E4        1641            clr     a
0482 F510      1642            mov     _servo_counter,a
0484 F511      1643            mov     (_servo_counter + 1),a
0486           1644   ;        main.c:458: Servo_arm=1;
0486 D296      1645            setb    _P1_6
0488           1646   ;        main.c:459: Servo_base=1;
0488 D297      1647            setb    _P1_7
048A           1648   L020016?:
048A           1649   ;        main.c:461: if(servo_arm==servo_counter)
048A AA90      1650            mov     r2,_servo_arm
048C 7B00      1651            mov     r3,#0x00
048E EA        1652            mov     a,r2
048F B51070    1653            cjne    a,_servo_counter,L020018?
0492 EB        1654            mov     a,r3
0493 B51170    1655            cjne    a,(_servo_counter + 1),L020018?
0496           1656   ;        main.c:463: Servo_arm=0;
0496 C296      1657            clr     _P1_6
0498           1658   L020018?:
0498           1659   ;        main.c:465: if(servo_base==servo_counter)
0498 AAD0      1660            mov     r2,_servo_base
049A 7B00      1661            mov     r3,#0x00
049C EA        1662            mov     a,r2
049D B510B0    1663            cjne    a,_servo_counter,L020021?
04A0 EB        1664            mov     a,r3
04A1 B511B0    1665            cjne    a,(_servo_counter + 1),L020021?
04A4           1666   ;        main.c:467: Servo_base=0;
04A4 C297      1667            clr     _P1_7
04A6           1668   L020021?:
04A6 D0D0      1669            pop     psw
04A8 D003      1670            pop     ar3
04AA D002      1671            pop     ar2
04AC D0E0      1672            pop     acc
04AE 32        1673            reti
04AF           1674   ;        eliminated unneeded push/pop dpl
04AF           1675   ;        eliminated unneeded push/pop dph
04AF           1676   ;        eliminated unneeded push/pop b
04AF           1677   ;------------------------------------------------------------
04AF           1678   ;Allocation info for local variables in function 'MoveForward'
04AF           1679   ;------------------------------------------------------------
04AF           1680   ;speed                     Allocated to registers r2 r3 
04AF           1681   ;------------------------------------------------------------
04AF           1682   ;        main.c:471: void MoveForward (int speed)
04AF           1683   ;        -----------------------------------------
04AF           1684   ;         function MoveForward
04AF           1685   ;        -----------------------------------------
04AF           1686   _MoveForward:
04AF AA82      1687            mov     r2,dpl
04B1           1688   ;        main.c:473: pwm_left = speed; 
04B1 8AD0      1689            mov     _pwm_left,r2
04B3           1690   ;        main.c:474: pwm_right = speed; 
04B3 8A90      1691            mov     _pwm_right,r2
04B5           1692   ;        main.c:475: L_motor_dir = 0; 
04B5 755000    1693            mov     _L_motor_dir,#0x00
04B8           1694   ;        main.c:476: R_motor_dir = 0; 
04B8 751000    1695            mov     _R_motor_dir,#0x00
04BB 22        1696            ret
04BC           1697   ;------------------------------------------------------------
04BC           1698   ;Allocation info for local variables in function 'MoveBackward'
04BC           1699   ;------------------------------------------------------------
04BC           1700   ;speed                     Allocated to registers r2 r3 
04BC           1701   ;------------------------------------------------------------
04BC           1702   ;        main.c:479: void MoveBackward (int speed)
04BC           1703   ;        -----------------------------------------
04BC           1704   ;         function MoveBackward
04BC           1705   ;        -----------------------------------------
04BC           1706   _MoveBackward:
04BC AA82      1707            mov     r2,dpl
04BE           1708   ;        main.c:481: pwm_left = speed; 
04BE 8AD0      1709            mov     _pwm_left,r2
04C0           1710   ;        main.c:482: pwm_right = speed; 
04C0 8A90      1711            mov     _pwm_right,r2
04C2           1712   ;        main.c:483: L_motor_dir = 1; 
04C2 755001    1713            mov     _L_motor_dir,#0x01
04C5           1714   ;        main.c:484: R_motor_dir = 1;  
04C5 751001    1715            mov     _R_motor_dir,#0x01
04C8 22        1716            ret
04C9           1717   ;------------------------------------------------------------
04C9           1718   ;Allocation info for local variables in function 'TurnRight'
04C9           1719   ;------------------------------------------------------------
04C9           1720   ;speed                     Allocated to registers r2 r3 
04C9           1721   ;------------------------------------------------------------
04C9           1722   ;        main.c:487: void TurnRight (int speed)
04C9           1723   ;        -----------------------------------------
04C9           1724   ;         function TurnRight
04C9           1725   ;        -----------------------------------------
04C9           1726   _TurnRight:
04C9 AA82      1727            mov     r2,dpl
04CB           1728   ;        main.c:489: pwm_left = speed; 
04CB 8AD0      1729            mov     _pwm_left,r2
04CD           1730   ;        main.c:490: pwm_right = speed; 
04CD 8A90      1731            mov     _pwm_right,r2
04CF           1732   ;        main.c:491: L_motor_dir = 1; 
04CF 755001    1733            mov     _L_motor_dir,#0x01
04D2           1734   ;        main.c:492: R_motor_dir = 0; 
04D2 751000    1735            mov     _R_motor_dir,#0x00
04D5 22        1736            ret
04D6           1737   ;------------------------------------------------------------
04D6           1738   ;Allocation info for local variables in function 'TurnLeft'
04D6           1739   ;------------------------------------------------------------
04D6           1740   ;speed                     Allocated to registers r2 r3 
04D6           1741   ;------------------------------------------------------------
04D6           1742   ;        main.c:495: void TurnLeft (int speed)
04D6           1743   ;        -----------------------------------------
04D6           1744   ;         function TurnLeft
04D6           1745   ;        -----------------------------------------
04D6           1746   _TurnLeft:
04D6 AA82      1747            mov     r2,dpl
04D8           1748   ;        main.c:497: pwm_left = speed; 
04D8 8AD0      1749            mov     _pwm_left,r2
04DA           1750   ;        main.c:498: pwm_right = speed; 
04DA 8A90      1751            mov     _pwm_right,r2
04DC           1752   ;        main.c:499: L_motor_dir = 0; 
04DC 755000    1753            mov     _L_motor_dir,#0x00
04DF           1754   ;        main.c:500: R_motor_dir = 1; 
04DF 751001    1755            mov     _R_motor_dir,#0x01
04E2 22        1756            ret
04E3           1757   ;------------------------------------------------------------
04E3           1758   ;Allocation info for local variables in function 'servo_pick'
04E3           1759   ;------------------------------------------------------------
04E3           1760   ;------------------------------------------------------------
04E3           1761   ;        main.c:503: servo_pick(){
04E3           1762   ;        -----------------------------------------
04E3           1763   ;         function servo_pick
04E3           1764   ;        -----------------------------------------
04E3           1765   _servo_pick:
04E3           1766   ;        main.c:504: servo_arm = 1;
04E3 759001    1767            mov     _servo_arm,#0x01
04E6           1768   ;        main.c:505: servo_base = 1;
04E6 75D001    1769            mov     _servo_base,#0x01
04E9           1770   ;        main.c:506: waitms(1000);
04E9 9003E8    1771            mov     dptr,#0x03E8
04EC 120000    1772            lcall   _waitms
04EF           1773   ;        main.c:507: servo_base = 250;
04EF 75D0FA    1774            mov     _servo_base,#0xFA
04F2           1775   ;        main.c:508: waitms(1000);
04F2 9003E8    1776            mov     dptr,#0x03E8
04F5 120000    1777            lcall   _waitms
04F8           1778   ;        main.c:509: servo_arm = 250;
04F8 7590FA    1779            mov     _servo_arm,#0xFA
04FB           1780   ;        main.c:510: waitms(1000);
04FB 9003E8    1781            mov     dptr,#0x03E8
04FE 120000    1782            lcall   _waitms
0501           1783   ;        main.c:511: servo_base = 2;
0501 75D002    1784            mov     _servo_base,#0x02
0504           1785   ;        main.c:512: waitms(1000);
0504 9003E8    1786            mov     dptr,#0x03E8
0507 120000    1787            lcall   _waitms
050A           1788   ;        main.c:513: servo_arm = 2;
050A 759002    1789            mov     _servo_arm,#0x02
050D 22        1790            ret
050E           1791   ;------------------------------------------------------------
050E           1792   ;Allocation info for local variables in function 'main'
050E           1793   ;------------------------------------------------------------
050E           1794   ;cnt                       Allocated to registers 
050E           1795   ;c                         Allocated to registers r4 
050E           1796   ;vx                        Allocated with name '_main_vx_1_134'
050E           1797   ;vy                        Allocated with name '_main_vy_1_134'
050E           1798   ;threshold                 Allocated to registers 
050E           1799   ;motor_pwm                 Allocated with name '_main_motor_pwm_1_134'
050E           1800   ;sloc0                     Allocated with name '_main_sloc0_1_0'
050E           1801   ;------------------------------------------------------------
050E           1802   ;        main.c:516: void main (void)
050E           1803   ;        -----------------------------------------
050E           1804   ;         function main
050E           1805   ;        -----------------------------------------
050E           1806   _main:
050E           1807   ;        main.c:520: int vx = 0, vy = 0; 
050E E4        1808            clr     a
050F F550      1809            mov     _main_vx_1_134,a
0511 F551      1810            mov     (_main_vx_1_134 + 1),a
0513 F590      1811            mov     _main_vy_1_134,a
0515 F591      1812            mov     (_main_vy_1_134 + 1),a
0517           1813   ;        main.c:524: Set_Pin_Output(0x24);
0517 758224    1814            mov     dpl,#0x24
051A 120000    1815            lcall   _Set_Pin_Output
051D           1816   ;        main.c:525: Set_Pin_Output(0x23);
051D 758223    1817            mov     dpl,#0x23
0520 120000    1818            lcall   _Set_Pin_Output
0523           1819   ;        main.c:526: Set_Pin_Output(0x22);
0523 758222    1820            mov     dpl,#0x22
0526 120000    1821            lcall   _Set_Pin_Output
0529           1822   ;        main.c:527: Set_Pin_Output(0x21);
0529 758221    1823            mov     dpl,#0x21
052C 120000    1824            lcall   _Set_Pin_Output
052F           1825   ;        main.c:528: Set_Pin_Output(0x17);
052F 758217    1826            mov     dpl,#0x17
0532 120000    1827            lcall   _Set_Pin_Output
0535           1828   ;        main.c:529: Set_Pin_Output(0x16);
0535 758216    1829            mov     dpl,#0x16
0538 120000    1830            lcall   _Set_Pin_Output
053B           1831   ;        main.c:531: Servo_arm=0;
053B C296      1832            clr     _P1_6
053D           1833   ;        main.c:532: Servo_base=0;
053D C297      1834            clr     _P1_7
053F           1835   ;        main.c:534: waitms(500);
053F 9001F4    1836            mov     dptr,#0x01F4
0542 120000    1837            lcall   _waitms
0545           1838   ;        main.c:535: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0545 74F0      1839            mov     a,#__str_3
0547 C0E0      1840            push    acc
0549 74C9      1841            mov     a,#(__str_3 >> 8)
054B C0E0      1842            push    acc
054D 7480      1843            mov     a,#0x80
054F C0E0      1844            push    acc
0551 120000    1845            lcall   _printf
0554 1581      1846            dec     sp
0556 1581      1847            dec     sp
0558 1581      1848            dec     sp
055A           1849   ;        main.c:536: UART1_Init(9600);
055A 902580    1850            mov     dptr,#0x2580
055D E4        1851            clr     a
055E F5F0      1852            mov     b,a
0560 120000    1853            lcall   _UART1_Init
0563           1854   ;        main.c:538: ReceptionOff();
0563 120000    1855            lcall   _ReceptionOff
0566           1856   ;        main.c:539: servo_pick();
0566 120000    1857            lcall   _servo_pick
0569           1858   ;        main.c:542: SendATCommand("AT+VER\r\n");
0569 90CA30    1859            mov     dptr,#__str_4
056C 75F080    1860            mov     b,#0x80
056F 120000    1861            lcall   _SendATCommand
0572           1862   ;        main.c:543: SendATCommand("AT+BAUD\r\n");
0572 90CA70    1863            mov     dptr,#__str_5
0575 75F080    1864            mov     b,#0x80
0578 120000    1865            lcall   _SendATCommand
057B           1866   ;        main.c:544: SendATCommand("AT+RFID\r\n");
057B 90CAB0    1867            mov     dptr,#__str_6
057E 75F080    1868            mov     b,#0x80
0581 120000    1869            lcall   _SendATCommand
0584           1870   ;        main.c:545: SendATCommand("AT+DVID\r\n");
0584 90CAF0    1871            mov     dptr,#__str_7
0587 75F080    1872            mov     b,#0x80
058A 120000    1873            lcall   _SendATCommand
058D           1874   ;        main.c:546: SendATCommand("AT+RFC\r\n");
058D 90CB30    1875            mov     dptr,#__str_8
0590 75F080    1876            mov     b,#0x80
0593 120000    1877            lcall   _SendATCommand
0596           1878   ;        main.c:547: SendATCommand("AT+POWE\r\n");
0596 90CB70    1879            mov     dptr,#__str_9
0599 75F080    1880            mov     b,#0x80
059C 120000    1881            lcall   _SendATCommand
059F           1882   ;        main.c:548: SendATCommand("AT+CLSS\r\n");
059F 90CBB0    1883            mov     dptr,#__str_10
05A2 75F080    1884            mov     b,#0x80
05A5 120000    1885            lcall   _SendATCommand
05A8           1886   ;        main.c:549: SendATCommand("AT+DVIDEFEF\r\n");  
05A8 90CBF0    1887            mov     dptr,#__str_11
05AB 75F080    1888            mov     b,#0x80
05AE 120000    1889            lcall   _SendATCommand
05B1           1890   ;        main.c:552: L_bridge_1 = 0; 
05B1 C2A1      1891            clr     _P2_1
05B3           1892   ;        main.c:553: L_bridge_2 = 0; 
05B3 C2A2      1893            clr     _P2_2
05B5           1894   ;        main.c:554: R_bridge_1 = 0; 
05B5 C2A4      1895            clr     _P2_4
05B7           1896   ;        main.c:555: R_bridge_2 = 0; 
05B7 C2A3      1897            clr     _P2_3
05B9           1898   ;        main.c:558: while(1)
05B9 7A00      1899            mov     r2,#0x00
05BB 7B00      1900            mov     r3,#0x00
05BD           1901   L026022?:
05BD           1902   ;        main.c:562: if(RXU1()) // Something has arrived
05BD C002      1903            push    ar2
05BF C003      1904            push    ar3
05C1 120000    1905            lcall   _RXU1
05C4 E4        1906            clr     a
05C5 33        1907            rlc     a
05C6 D003      1908            pop     ar3
05C8 D002      1909            pop     ar2
05CA 6000      1910            jz      L026022?
05CC           1911   ;        main.c:564: c=getchar1();
05CC C002      1912            push    ar2
05CE C003      1913            push    ar3
05D0 120000    1914            lcall   _getchar1
05D3 AC82      1915            mov     r4,dpl
05D5 D003      1916            pop     ar3
05D7 D002      1917            pop     ar2
05D9           1918   ;        main.c:566: if(c=='!') // Master is sending message
05D9 BC2170    1919            cjne    r4,#0x21,L026036?
05DC 8000      1920            sjmp    L026037?
05DE           1921   L026036?:
05DE 020000    1922            ljmp    L026017?
05E1           1923   L026037?:
05E1           1924   ;        main.c:568: getstr1(buff, sizeof(buff)-1);
05E1 755013    1925            mov     _getstr1_PARM_2,#0x13
05E4 904510    1926            mov     dptr,#_buff
05E7 75F040    1927            mov     b,#0x40
05EA C002      1928            push    ar2
05EC C003      1929            push    ar3
05EE 120000    1930            lcall   _getstr1
05F1           1931   ;        main.c:569: if(strlen(buff)==7)
05F1 904510    1932            mov     dptr,#_buff
05F4 75F040    1933            mov     b,#0x40
05F7 120000    1934            lcall   _strlen
05FA AD82      1935            mov     r5,dpl
05FC AE83      1936            mov     r6,dph
05FE D003      1937            pop     ar3
0600 D002      1938            pop     ar2
0602 BD0770    1939            cjne    r5,#0x07,L026038?
0605 BE0070    1940            cjne    r6,#0x00,L026038?
0608 8000      1941            sjmp    L026039?
060A           1942   L026038?:
060A 020000    1943            ljmp    L026012?
060D           1944   L026039?:
060D           1945   ;        main.c:573: sscanf(buff, "%03d,%03d", &vx, &vy);
060D C002      1946            push    ar2
060F C003      1947            push    ar3
0611 7490      1948            mov     a,#_main_vy_1_134
0613 C0E0      1949            push    acc
0615 74B4      1950            mov     a,#(_main_vy_1_134 >> 8)
0617 C0E0      1951            push    acc
0619 7440      1952            mov     a,#0x40
061B C0E0      1953            push    acc
061D 7450      1954            mov     a,#_main_vx_1_134
061F C0E0      1955            push    acc
0621 74B4      1956            mov     a,#(_main_vx_1_134 >> 8)
0623 C0E0      1957            push    acc
0625 7440      1958            mov     a,#0x40
0627 C0E0      1959            push    acc
0629 7430      1960            mov     a,#__str_12
062B C0E0      1961            push    acc
062D 74CE      1962            mov     a,#(__str_12 >> 8)
062F C0E0      1963            push    acc
0631 7480      1964            mov     a,#0x80
0633 C0E0      1965            push    acc
0635 7410      1966            mov     a,#_buff
0637 C0E0      1967            push    acc
0639 7445      1968            mov     a,#(_buff >> 8)
063B C0E0      1969            push    acc
063D 7440      1970            mov     a,#0x40
063F C0E0      1971            push    acc
0641 120000    1972            lcall   _sscanf
0644 E581      1973            mov     a,sp
0646 24F4      1974            add     a,#0xf4
0648 F581      1975            mov     sp,a
064A           1976   ;        main.c:575: printf("Joystick Received: Vx = %03d, Vy = %03d\r\n", vx, vy);
064A C090      1977            push    _main_vy_1_134
064C C091      1978            push    (_main_vy_1_134 + 1)
064E C050      1979            push    _main_vx_1_134
0650 C051      1980            push    (_main_vx_1_134 + 1)
0652 74B0      1981            mov     a,#__str_13
0654 C0E0      1982            push    acc
0656 74CE      1983            mov     a,#(__str_13 >> 8)
0658 C0E0      1984            push    acc
065A 7480      1985            mov     a,#0x80
065C C0E0      1986            push    acc
065E 120000    1987            lcall   _printf
0661 E581      1988            mov     a,sp
0663 24F9      1989            add     a,#0xf9
0665 F581      1990            mov     sp,a
0667           1991   ;        main.c:577: if (vy > threshold){
0667 859082    1992            mov     dpl,_main_vy_1_134
066A 859183    1993            mov     dph,(_main_vy_1_134 + 1)
066D 120000    1994            lcall   ___sint2fs
0670 858220    1995            mov     _main_sloc0_1_0,dpl
0673 858321    1996            mov     (_main_sloc0_1_0 + 1),dph
0676 85F022    1997            mov     (_main_sloc0_1_0 + 2),b
0679 F523      1998            mov     (_main_sloc0_1_0 + 3),a
067B E4        1999            clr     a
067C C0E0      2000            push    acc
067E C0E0      2001            push    acc
0680 7421      2002            mov     a,#0x21
0682 C0E0      2003            push    acc
0684 7443      2004            mov     a,#0x43
0686 C0E0      2005            push    acc
0688 852082    2006            mov     dpl,_main_sloc0_1_0
068B 852183    2007            mov     dph,(_main_sloc0_1_0 + 1)
068E 8522F0    2008            mov     b,(_main_sloc0_1_0 + 2)
0691 E523      2009            mov     a,(_main_sloc0_1_0 + 3)
0693 120000    2010            lcall   ___fsgt
0696 AD82      2011            mov     r5,dpl
0698 E581      2012            mov     a,sp
069A 24FC      2013            add     a,#0xfc
069C F581      2014            mov     sp,a
069E D003      2015            pop     ar3
06A0 D002      2016            pop     ar2
06A2 ED        2017            mov     a,r5
06A3 7000      2018            jnz     L026040?
06A5 020000    2019            ljmp    L026004?
06A8           2020   L026040?:
06A8           2021   ;        main.c:578: motor_pwm = abs(vy - threshold) * 100 / threshold; 
06A8 C002      2022            push    ar2
06AA C003      2023            push    ar3
06AC C003      2024            push    ar3
06AE E4        2025            clr     a
06AF C0E0      2026            push    acc
06B1 C0E0      2027            push    acc
06B3 7421      2028            mov     a,#0x21
06B5 C0E0      2029            push    acc
06B7 7443      2030            mov     a,#0x43
06B9 C0E0      2031            push    acc
06BB 852082    2032            mov     dpl,_main_sloc0_1_0
06BE 852183    2033            mov     dph,(_main_sloc0_1_0 + 1)
06C1 8522F0    2034            mov     b,(_main_sloc0_1_0 + 2)
06C4 E523      2035            mov     a,(_main_sloc0_1_0 + 3)
06C6 120000    2036            lcall   ___fssub
06C9 AD82      2037            mov     r5,dpl
06CB AE83      2038            mov     r6,dph
06CD AFF0      2039            mov     r7,b
06CF FA        2040            mov     r2,a
06D0 E581      2041            mov     a,sp
06D2 24FC      2042            add     a,#0xfc
06D4 F581      2043            mov     sp,a
06D6 D003      2044            pop     ar3
06D8 8D82      2045            mov     dpl,r5
06DA 8E83      2046            mov     dph,r6
06DC 8FF0      2047            mov     b,r7
06DE EA        2048            mov     a,r2
06DF C002      2049            push    ar2
06E1 C003      2050            push    ar3
06E3 120000    2051            lcall   ___fs2sint
06E6 120000    2052            lcall   _abs
06E9 858200    2053            mov     __mulint_PARM_2,dpl
06EC 858301    2054            mov     (__mulint_PARM_2 + 1),dph
06EF D003      2055            pop     ar3
06F1 D002      2056            pop     ar2
06F3 900064    2057            mov     dptr,#0x0064
06F6 120000    2058            lcall   __mulint
06F9 120000    2059            lcall   ___sint2fs
06FC AA82      2060            mov     r2,dpl
06FE AB83      2061            mov     r3,dph
0700 ADF0      2062            mov     r5,b
0702 FE        2063            mov     r6,a
0703 E4        2064            clr     a
0704 C0E0      2065            push    acc
0706 C0E0      2066            push    acc
0708 7421      2067            mov     a,#0x21
070A C0E0      2068            push    acc
070C 7443      2069            mov     a,#0x43
070E C0E0      2070            push    acc
0710 8A82      2071            mov     dpl,r2
0712 8B83      2072            mov     dph,r3
0714 8DF0      2073            mov     b,r5
0716 EE        2074            mov     a,r6
0717 120000    2075            lcall   ___fsdiv
071A AA82      2076            mov     r2,dpl
071C AB83      2077            mov     r3,dph
071E ADF0      2078            mov     r5,b
0720 FE        2079            mov     r6,a
0721 E581      2080            mov     a,sp
0723 24FC      2081            add     a,#0xfc
0725 F581      2082            mov     sp,a
0727 8A82      2083            mov     dpl,r2
0729 8B83      2084            mov     dph,r3
072B 8DF0      2085            mov     b,r5
072D EE        2086            mov     a,r6
072E C002      2087            push    ar2
0730 C003      2088            push    ar3
0732 120000    2089            lcall   ___fs2sint
0735           2090   ;        main.c:579: MoveForward(motor_pwm);
0735 8582E0    2091            mov     _main_motor_pwm_1_134,dpl
0738 8583E1    2092            mov  (_main_motor_pwm_1_134 + 1),dph
073B 120000    2093            lcall   _MoveForward
073E D003      2094            pop     ar3
0740 D002      2095            pop     ar2
0742 D003      2096            pop     ar3
0744 D002      2097            pop     ar2
0746 020000    2098            ljmp    L026005?
0749           2099   L026004?:
0749           2100   ;        main.c:581: else if (vy < threshold){
0749 C002      2101            push    ar2
074B C003      2102            push    ar3
074D E4        2103            clr     a
074E C0E0      2104            push    acc
0750 C0E0      2105            push    acc
0752 7421      2106            mov     a,#0x21
0754 C0E0      2107            push    acc
0756 7443      2108            mov     a,#0x43
0758 C0E0      2109            push    acc
075A 852082    2110            mov     dpl,_main_sloc0_1_0
075D 852183    2111            mov     dph,(_main_sloc0_1_0 + 1)
0760 8522F0    2112            mov     b,(_main_sloc0_1_0 + 2)
0763 E523      2113            mov     a,(_main_sloc0_1_0 + 3)
0765 120000    2114            lcall   ___fslt
0768 AD82      2115            mov     r5,dpl
076A E581      2116            mov     a,sp
076C 24FC      2117            add     a,#0xfc
076E F581      2118            mov     sp,a
0770 D003      2119            pop     ar3
0772 D002      2120            pop     ar2
0774 ED        2121            mov     a,r5
0775 7000      2122            jnz     L026041?
0777 020000    2123            ljmp    L026005?
077A           2124   L026041?:
077A           2125   ;        main.c:582: motor_pwm = abs(threshold - vy) * 100 / threshold; 
077A C002      2126            push    ar2
077C C003      2127            push    ar3
077E C003      2128            push    ar3
0780 C020      2129            push    _main_sloc0_1_0
0782 C021      2130            push    (_main_sloc0_1_0 + 1)
0784 C022      2131            push    (_main_sloc0_1_0 + 2)
0786 C023      2132            push    (_main_sloc0_1_0 + 3)
0788 900000    2133            mov     dptr,#0x0000
078B 75F021    2134            mov     b,#0x21
078E 7443      2135            mov     a,#0x43
0790 120000    2136            lcall   ___fssub
0793 AD82      2137            mov     r5,dpl
0795 AE83      2138            mov     r6,dph
0797 AFF0      2139            mov     r7,b
0799 FA        2140            mov     r2,a
079A E581      2141            mov     a,sp
079C 24FC      2142            add     a,#0xfc
079E F581      2143            mov     sp,a
07A0 D003      2144            pop     ar3
07A2 8D82      2145            mov     dpl,r5
07A4 8E83      2146            mov     dph,r6
07A6 8FF0      2147            mov     b,r7
07A8 EA        2148            mov     a,r2
07A9 C002      2149            push    ar2
07AB C003      2150            push    ar3
07AD 120000    2151            lcall   ___fs2sint
07B0 120000    2152            lcall   _abs
07B3 858200    2153            mov     __mulint_PARM_2,dpl
07B6 858301    2154            mov     (__mulint_PARM_2 + 1),dph
07B9 D003      2155            pop     ar3
07BB D002      2156            pop     ar2
07BD 900064    2157            mov     dptr,#0x0064
07C0 120000    2158            lcall   __mulint
07C3 120000    2159            lcall   ___sint2fs
07C6 AA82      2160            mov     r2,dpl
07C8 AB83      2161            mov     r3,dph
07CA ADF0      2162            mov     r5,b
07CC FE        2163            mov     r6,a
07CD E4        2164            clr     a
07CE C0E0      2165            push    acc
07D0 C0E0      2166            push    acc
07D2 7421      2167            mov     a,#0x21
07D4 C0E0      2168            push    acc
07D6 7443      2169            mov     a,#0x43
07D8 C0E0      2170            push    acc
07DA 8A82      2171            mov     dpl,r2
07DC 8B83      2172            mov     dph,r3
07DE 8DF0      2173            mov     b,r5
07E0 EE        2174            mov     a,r6
07E1 120000    2175            lcall   ___fsdiv
07E4 AA82      2176            mov     r2,dpl
07E6 AB83      2177            mov     r3,dph
07E8 ADF0      2178            mov     r5,b
07EA FE        2179            mov     r6,a
07EB E581      2180            mov     a,sp
07ED 24FC      2181            add     a,#0xfc
07EF F581      2182            mov     sp,a
07F1 8A82      2183            mov     dpl,r2
07F3 8B83      2184            mov     dph,r3
07F5 8DF0      2185            mov     b,r5
07F7 EE        2186            mov     a,r6
07F8 C002      2187            push    ar2
07FA C003      2188            push    ar3
07FC 120000    2189            lcall   ___fs2sint
07FF           2190   ;        main.c:583: MoveBackward(motor_pwm);
07FF 8582E0    2191            mov     _main_motor_pwm_1_134,dpl
0802 8583E1    2192            mov  (_main_motor_pwm_1_134 + 1),dph
0805 120000    2193            lcall   _MoveBackward
0808 D003      2194            pop     ar3
080A D002      2195            pop     ar2
080C           2196   ;        main.c:607: sendstr1(buff);
080C D003      2197            pop     ar3
080E D002      2198            pop     ar2
0810           2199   ;        main.c:583: MoveBackward(motor_pwm);
0810           2200   L026005?:
0810           2201   ;        main.c:585: if(vx > threshold){
0810 855082    2202            mov     dpl,_main_vx_1_134
0813 855183    2203            mov     dph,(_main_vx_1_134 + 1)
0816 C002      2204            push    ar2
0818 C003      2205            push    ar3
081A 120000    2206            lcall   ___sint2fs
081D 858220    2207            mov     _main_sloc0_1_0,dpl
0820 858321    2208            mov     (_main_sloc0_1_0 + 1),dph
0823 85F022    2209            mov     (_main_sloc0_1_0 + 2),b
0826 F523      2210            mov     (_main_sloc0_1_0 + 3),a
0828 E4        2211            clr     a
0829 C0E0      2212            push    acc
082B C0E0      2213            push    acc
082D 7421      2214            mov     a,#0x21
082F C0E0      2215            push    acc
0831 7443      2216            mov     a,#0x43
0833 C0E0      2217            push    acc
0835 852082    2218            mov     dpl,_main_sloc0_1_0
0838 852183    2219            mov     dph,(_main_sloc0_1_0 + 1)
083B 8522F0    2220            mov     b,(_main_sloc0_1_0 + 2)
083E E523      2221            mov     a,(_main_sloc0_1_0 + 3)
0840 120000    2222            lcall   ___fsgt
0843 AD82      2223            mov     r5,dpl
0845 E581      2224            mov     a,sp
0847 24FC      2225            add     a,#0xfc
0849 F581      2226            mov     sp,a
084B D003      2227            pop     ar3
084D D002      2228            pop     ar2
084F ED        2229            mov     a,r5
0850 7000      2230            jnz     L026042?
0852 020000    2231            ljmp    L026009?
0855           2232   L026042?:
0855           2233   ;        main.c:586: motor_pwm = abs(vx - threshold) * 100 / threshold; 
0855 C002      2234            push    ar2
0857 C003      2235            push    ar3
0859 C003      2236            push    ar3
085B E4        2237            clr     a
085C C0E0      2238            push    acc
085E C0E0      2239            push    acc
0860 7421      2240            mov     a,#0x21
0862 C0E0      2241            push    acc
0864 7443      2242            mov     a,#0x43
0866 C0E0      2243            push    acc
0868 852082    2244            mov     dpl,_main_sloc0_1_0
086B 852183    2245            mov     dph,(_main_sloc0_1_0 + 1)
086E 8522F0    2246            mov     b,(_main_sloc0_1_0 + 2)
0871 E523      2247            mov     a,(_main_sloc0_1_0 + 3)
0873 120000    2248            lcall   ___fssub
0876 AD82      2249            mov     r5,dpl
0878 AE83      2250            mov     r6,dph
087A AFF0      2251            mov     r7,b
087C FA        2252            mov     r2,a
087D E581      2253            mov     a,sp
087F 24FC      2254            add     a,#0xfc
0881 F581      2255            mov     sp,a
0883 D003      2256            pop     ar3
0885 8D82      2257            mov     dpl,r5
0887 8E83      2258            mov     dph,r6
0889 8FF0      2259            mov     b,r7
088B EA        2260            mov     a,r2
088C C002      2261            push    ar2
088E C003      2262            push    ar3
0890 120000    2263            lcall   ___fs2sint
0893 120000    2264            lcall   _abs
0896 858200    2265            mov     __mulint_PARM_2,dpl
0899 858301    2266            mov     (__mulint_PARM_2 + 1),dph
089C D003      2267            pop     ar3
089E D002      2268            pop     ar2
08A0 900064    2269            mov     dptr,#0x0064
08A3 120000    2270            lcall   __mulint
08A6 120000    2271            lcall   ___sint2fs
08A9 AA82      2272            mov     r2,dpl
08AB AB83      2273            mov     r3,dph
08AD ADF0      2274            mov     r5,b
08AF FE        2275            mov     r6,a
08B0 E4        2276            clr     a
08B1 C0E0      2277            push    acc
08B3 C0E0      2278            push    acc
08B5 7421      2279            mov     a,#0x21
08B7 C0E0      2280            push    acc
08B9 7443      2281            mov     a,#0x43
08BB C0E0      2282            push    acc
08BD 8A82      2283            mov     dpl,r2
08BF 8B83      2284            mov     dph,r3
08C1 8DF0      2285            mov     b,r5
08C3 EE        2286            mov     a,r6
08C4 120000    2287            lcall   ___fsdiv
08C7 AA82      2288            mov     r2,dpl
08C9 AB83      2289            mov     r3,dph
08CB ADF0      2290            mov     r5,b
08CD FE        2291            mov     r6,a
08CE E581      2292            mov     a,sp
08D0 24FC      2293            add     a,#0xfc
08D2 F581      2294            mov     sp,a
08D4 8A82      2295            mov     dpl,r2
08D6 8B83      2296            mov     dph,r3
08D8 8DF0      2297            mov     b,r5
08DA EE        2298            mov     a,r6
08DB C002      2299            push    ar2
08DD C003      2300            push    ar3
08DF 120000    2301            lcall   ___fs2sint
08E2           2302   ;        main.c:587: TurnRight(motor_pwm);
08E2 8582E0    2303            mov     _main_motor_pwm_1_134,dpl
08E5 8583E1    2304            mov  (_main_motor_pwm_1_134 + 1),dph
08E8 120000    2305            lcall   _TurnRight
08EB D003      2306            pop     ar3
08ED D002      2307            pop     ar2
08EF D003      2308            pop     ar3
08F1 D002      2309            pop     ar2
08F3 020000    2310            ljmp    L026022?
08F6           2311   L026009?:
08F6           2312   ;        main.c:589: else if (vx < threshold){
08F6 C002      2313            push    ar2
08F8 C003      2314            push    ar3
08FA E4        2315            clr     a
08FB C0E0      2316            push    acc
08FD C0E0      2317            push    acc
08FF 7421      2318            mov     a,#0x21
0901 C0E0      2319            push    acc
0903 7443      2320            mov     a,#0x43
0905 C0E0      2321            push    acc
0907 852082    2322            mov     dpl,_main_sloc0_1_0
090A 852183    2323            mov     dph,(_main_sloc0_1_0 + 1)
090D 8522F0    2324            mov     b,(_main_sloc0_1_0 + 2)
0910 E523      2325            mov     a,(_main_sloc0_1_0 + 3)
0912 120000    2326            lcall   ___fslt
0915 AD82      2327            mov     r5,dpl
0917 E581      2328            mov     a,sp
0919 24FC      2329            add     a,#0xfc
091B F581      2330            mov     sp,a
091D D003      2331            pop     ar3
091F D002      2332            pop     ar2
0921 ED        2333            mov     a,r5
0922 7000      2334            jnz     L026043?
0924 020000    2335            ljmp    L026022?
0927           2336   L026043?:
0927           2337   ;        main.c:590: motor_pwm = abs(threshold - vx) * 100 / threshold; 
0927 C002      2338            push    ar2
0929 C003      2339            push    ar3
092B C003      2340            push    ar3
092D C020      2341            push    _main_sloc0_1_0
092F C021      2342            push    (_main_sloc0_1_0 + 1)
0931 C022      2343            push    (_main_sloc0_1_0 + 2)
0933 C023      2344            push    (_main_sloc0_1_0 + 3)
0935 900000    2345            mov     dptr,#0x0000
0938 75F021    2346            mov     b,#0x21
093B 7443      2347            mov     a,#0x43
093D 120000    2348            lcall   ___fssub
0940 AD82      2349            mov     r5,dpl
0942 AE83      2350            mov     r6,dph
0944 AFF0      2351            mov     r7,b
0946 FA        2352            mov     r2,a
0947 E581      2353            mov     a,sp
0949 24FC      2354            add     a,#0xfc
094B F581      2355            mov     sp,a
094D D003      2356            pop     ar3
094F 8D82      2357            mov     dpl,r5
0951 8E83      2358            mov     dph,r6
0953 8FF0      2359            mov     b,r7
0955 EA        2360            mov     a,r2
0956 C002      2361            push    ar2
0958 C003      2362            push    ar3
095A 120000    2363            lcall   ___fs2sint
095D 120000    2364            lcall   _abs
0960 858200    2365            mov     __mulint_PARM_2,dpl
0963 858301    2366            mov     (__mulint_PARM_2 + 1),dph
0966 D003      2367            pop     ar3
0968 D002      2368            pop     ar2
096A 900064    2369            mov     dptr,#0x0064
096D 120000    2370            lcall   __mulint
0970 120000    2371            lcall   ___sint2fs
0973 AA82      2372            mov     r2,dpl
0975 AB83      2373            mov     r3,dph
0977 ADF0      2374            mov     r5,b
0979 FE        2375            mov     r6,a
097A E4        2376            clr     a
097B C0E0      2377            push    acc
097D C0E0      2378            push    acc
097F 7421      2379            mov     a,#0x21
0981 C0E0      2380            push    acc
0983 7443      2381            mov     a,#0x43
0985 C0E0      2382            push    acc
0987 8A82      2383            mov     dpl,r2
0989 8B83      2384            mov     dph,r3
098B 8DF0      2385            mov     b,r5
098D EE        2386            mov     a,r6
098E 120000    2387            lcall   ___fsdiv
0991 AA82      2388            mov     r2,dpl
0993 AB83      2389            mov     r3,dph
0995 ADF0      2390            mov     r5,b
0997 FE        2391            mov     r6,a
0998 E581      2392            mov     a,sp
099A 24FC      2393            add     a,#0xfc
099C F581      2394            mov     sp,a
099E 8A82      2395            mov     dpl,r2
09A0 8B83      2396            mov     dph,r3
09A2 8DF0      2397            mov     b,r5
09A4 EE        2398            mov     a,r6
09A5 C002      2399            push    ar2
09A7 C003      2400            push    ar3
09A9 120000    2401            lcall   ___fs2sint
09AC           2402   ;        main.c:591: TurnLeft(motor_pwm);
09AC 8582E0    2403            mov     _main_motor_pwm_1_134,dpl
09AF 8583E1    2404            mov  (_main_motor_pwm_1_134 + 1),dph
09B2 120000    2405            lcall   _TurnLeft
09B5 D003      2406            pop     ar3
09B7 D002      2407            pop     ar2
09B9 D003      2408            pop     ar3
09BB D002      2409            pop     ar2
09BD 020000    2410            ljmp    L026022?
09C0           2411   L026012?:
09C0           2412   ;        main.c:596: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
09C0 904510    2413            mov     dptr,#_buff
09C3 75F040    2414            mov     b,#0x40
09C6 C002      2415            push    ar2
09C8 C003      2416            push    ar3
09CA 120000    2417            lcall   _strlen
09CD AD82      2418            mov     r5,dpl
09CF AE83      2419            mov     r6,dph
09D1 C005      2420            push    ar5
09D3 C006      2421            push    ar6
09D5 7410      2422            mov     a,#_buff
09D7 C0E0      2423            push    acc
09D9 7445      2424            mov     a,#(_buff >> 8)
09DB C0E0      2425            push    acc
09DD 7440      2426            mov     a,#0x40
09DF C0E0      2427            push    acc
09E1 74F0      2428            mov     a,#__str_14
09E3 C0E0      2429            push    acc
09E5 74D2      2430            mov     a,#(__str_14 >> 8)
09E7 C0E0      2431            push    acc
09E9 7480      2432            mov     a,#0x80
09EB C0E0      2433            push    acc
09ED 120000    2434            lcall   _printf
09F0 E581      2435            mov     a,sp
09F2 24F8      2436            add     a,#0xf8
09F4 F581      2437            mov     sp,a
09F6 D003      2438            pop     ar3
09F8 D002      2439            pop     ar2
09FA 020000    2440            ljmp    L026022?
09FD           2441   L026017?:
09FD           2442   ;        main.c:602: else if(c=='@') // Master wants slave data
09FD BC4030    2443            cjne    r4,#0x40,L026044?
0A00 8000      2444            sjmp    L026045?
0A02           2445   L026044?:
0A02 020000    2446            ljmp    L026022?
0A05           2447   L026045?:
0A05           2448   ;        main.c:604: sprintf(buff, "%05u\n", cnt);
0A05 C002      2449            push    ar2
0A07 C003      2450            push    ar3
0A09 C002      2451            push    ar2
0A0B C003      2452            push    ar3
0A0D 74B0      2453            mov     a,#__str_15
0A0F C0E0      2454            push    acc
0A11 74D3      2455            mov     a,#(__str_15 >> 8)
0A13 C0E0      2456            push    acc
0A15 7480      2457            mov     a,#0x80
0A17 C0E0      2458            push    acc
0A19 7410      2459            mov     a,#_buff
0A1B C0E0      2460            push    acc
0A1D 7445      2461            mov     a,#(_buff >> 8)
0A1F C0E0      2462            push    acc
0A21 7440      2463            mov     a,#0x40
0A23 C0E0      2464            push    acc
0A25 120000    2465            lcall   _sprintf
0A28 E581      2466            mov     a,sp
0A2A 24F8      2467            add     a,#0xf8
0A2C F581      2468            mov     sp,a
0A2E D003      2469            pop     ar3
0A30 D002      2470            pop     ar2
0A32           2471   ;        main.c:605: cnt++;
0A32 0A        2472            inc     r2
0A33 BA0030    2473            cjne    r2,#0x00,L026046?
0A36 0B        2474            inc     r3
0A37           2475   L026046?:
0A37           2476   ;        main.c:606: waitms(5); // The radio seems to need this delay...
0A37 900005    2477            mov     dptr,#0x0005
0A3A C002      2478            push    ar2
0A3C C003      2479            push    ar3
0A3E 120000    2480            lcall   _waitms
0A41           2481   ;        main.c:607: sendstr1(buff);
0A41 904510    2482            mov     dptr,#_buff
0A44 75F040    2483            mov     b,#0x40
0A47 120000    2484            lcall   _sendstr1
0A4A D003      2485            pop     ar3
0A4C D002      2486            pop     ar2
0A4E 020000    2487            ljmp    L026022?
0A51           2488            rseg R_CSEG
0A51           2489   
0000           2490            rseg R_XINIT
0000           2491   
0000           2492            rseg R_CONST
0000           2493   __str_0:
0000 436F6D6D  2494            db 'Command: %s'
     616E643A
     202573
000B 00        2495            db 0x00
000C           2496   __str_1:
000C 52657370  2497            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2498            db 0x0D
0019 0A        2499            db 0x0A
001A 00        2500            db 0x00
001B           2501   __str_2:
001B 41542B44  2502            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2503            db 0x0D
0027 0A        2504            db 0x0A
0028 00        2505            db 0x00
0029           2506   __str_3:
0029 0D        2507            db 0x0D
002A 0A        2508            db 0x0A
002B 45464D38  2509            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2510            db 0x0D
0047 0A        2511            db 0x0A
0048 00        2512            db 0x00
0049           2513   __str_4:
0049 41542B56  2514            db 'AT+VER'
     4552
004F 0D        2515            db 0x0D
0050 0A        2516            db 0x0A
0051 00        2517            db 0x00
0052           2518   __str_5:
0052 41542B42  2519            db 'AT+BAUD'
     415544
0059 0D        2520            db 0x0D
005A 0A        2521            db 0x0A
005B 00        2522            db 0x00
005C           2523   __str_6:
005C 41542B52  2524            db 'AT+RFID'
     464944
0063 0D        2525            db 0x0D
0064 0A        2526            db 0x0A
0065 00        2527            db 0x00
0066           2528   __str_7:
0066 41542B44  2529            db 'AT+DVID'
     564944
006D 0D        2530            db 0x0D
006E 0A        2531            db 0x0A
006F 00        2532            db 0x00
0070           2533   __str_8:
0070 41542B52  2534            db 'AT+RFC'
     4643
0076 0D        2535            db 0x0D
0077 0A        2536            db 0x0A
0078 00        2537            db 0x00
0079           2538   __str_9:
0079 41542B50  2539            db 'AT+POWE'
     4F5745
0080 0D        2540            db 0x0D
0081 0A        2541            db 0x0A
0082 00        2542            db 0x00
0083           2543   __str_10:
0083 41542B43  2544            db 'AT+CLSS'
     4C5353
008A 0D        2545            db 0x0D
008B 0A        2546            db 0x0A
008C 00        2547            db 0x00
008D           2548   __str_11:
008D 41542B44  2549            db 'AT+DVIDEFEF'
     56494445
     464546
0098 0D        2550            db 0x0D
0099 0A        2551            db 0x0A
009A 00        2552            db 0x00
009B           2553   __str_12:
009B 25303364  2554            db '%03d,%03d'
     2C253033
     64
00A4 00        2555            db 0x00
00A5           2556   __str_13:
00A5 4A6F7973  2557            db 'Joystick Received: Vx = %03d, Vy = %03d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     303364
00CC 0D        2558            db 0x0D
00CD 0A        2559            db 0x0A
00CE 00        2560            db 0x00
00CF           2561   __str_14:
00CF 2A2A2A20  2562            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
00EA 0D        2563            db 0x0D
00EB 0A        2564            db 0x0A
00EC 00        2565            db 0x00
00ED           2566   __str_15:
00ED 25303575  2567            db '%05u'
00F1 0A        2568            db 0x0A
00F2 00        2569            db 0x00
00F3           2570   
0096           2571            CSEG
0096           2572   
0096           2573   end
