0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 18 13:06:25 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _TurnLeft
0000             29            public _TurnRight
0000             30            public _MoveBackward
0000             31            public _MoveForward
0000             32            public _Timer5_ISR
0000             33            public _ADC_at_Pin
0000             34            public _InitPinADC
0000             35            public _InitADC
0000             36            public _Set_Pin_Output
0000             37            public _ReceptionOff
0000             38            public _SendATCommand
0000             39            public _waitms_or_RI1
0000             40            public _RXU1
0000             41            public _getstr1
0000             42            public _getchar1_with_timeout
0000             43            public _getchar1
0000             44            public _sendstr1
0000             45            public _putchar1
0000             46            public _UART1_Init
0000             47            public _waitms
0000             48            public _Timer3us
0000             49            public __c51_external_startup
0000             50            public _buff
0000             51            public _getstr1_PARM_2
0000             52            public _R_motor_dir
0000             53            public _L_motor_dir
0000             54            public _pwm_right
0000             55            public _pwm_left
0000             56            public _pwm_counter
0000             57   ;--------------------------------------------------------
0000             58   ; Special Function Registers
0000             59   ;--------------------------------------------------------
0000             60   _ACC            DATA 0xe0
0000             61   _ADC0ASAH       DATA 0xb6
0000             62   _ADC0ASAL       DATA 0xb5
0000             63   _ADC0ASCF       DATA 0xa1
0000             64   _ADC0ASCT       DATA 0xc7
0000             65   _ADC0CF0        DATA 0xbc
0000             66   _ADC0CF1        DATA 0xb9
0000             67   _ADC0CF2        DATA 0xdf
0000             68   _ADC0CN0        DATA 0xe8
0000             69   _ADC0CN1        DATA 0xb2
0000             70   _ADC0CN2        DATA 0xb3
0000             71   _ADC0GTH        DATA 0xc4
0000             72   _ADC0GTL        DATA 0xc3
0000             73   _ADC0H          DATA 0xbe
0000             74   _ADC0L          DATA 0xbd
0000             75   _ADC0LTH        DATA 0xc6
0000             76   _ADC0LTL        DATA 0xc5
0000             77   _ADC0MX         DATA 0xbb
0000             78   _B              DATA 0xf0
0000             79   _CKCON0         DATA 0x8e
0000             80   _CKCON1         DATA 0xa6
0000             81   _CLEN0          DATA 0xc6
0000             82   _CLIE0          DATA 0xc7
0000             83   _CLIF0          DATA 0xe8
0000             84   _CLKSEL         DATA 0xa9
0000             85   _CLOUT0         DATA 0xd1
0000             86   _CLU0CF         DATA 0xb1
0000             87   _CLU0FN         DATA 0xaf
0000             88   _CLU0MX         DATA 0x84
0000             89   _CLU1CF         DATA 0xb3
0000             90   _CLU1FN         DATA 0xb2
0000             91   _CLU1MX         DATA 0x85
0000             92   _CLU2CF         DATA 0xb6
0000             93   _CLU2FN         DATA 0xb5
0000             94   _CLU2MX         DATA 0x91
0000             95   _CLU3CF         DATA 0xbf
0000             96   _CLU3FN         DATA 0xbe
0000             97   _CLU3MX         DATA 0xae
0000             98   _CMP0CN0        DATA 0x9b
0000             99   _CMP0CN1        DATA 0x99
0000            100   _CMP0MD         DATA 0x9d
0000            101   _CMP0MX         DATA 0x9f
0000            102   _CMP1CN0        DATA 0xbf
0000            103   _CMP1CN1        DATA 0xac
0000            104   _CMP1MD         DATA 0xab
0000            105   _CMP1MX         DATA 0xaa
0000            106   _CRC0CN0        DATA 0xce
0000            107   _CRC0CN1        DATA 0x86
0000            108   _CRC0CNT        DATA 0xd3
0000            109   _CRC0DAT        DATA 0xcb
0000            110   _CRC0FLIP       DATA 0xcf
0000            111   _CRC0IN         DATA 0xca
0000            112   _CRC0ST         DATA 0xd2
0000            113   _DAC0CF0        DATA 0x91
0000            114   _DAC0CF1        DATA 0x92
0000            115   _DAC0H          DATA 0x85
0000            116   _DAC0L          DATA 0x84
0000            117   _DAC1CF0        DATA 0x93
0000            118   _DAC1CF1        DATA 0x94
0000            119   _DAC1H          DATA 0x8a
0000            120   _DAC1L          DATA 0x89
0000            121   _DAC2CF0        DATA 0x95
0000            122   _DAC2CF1        DATA 0x96
0000            123   _DAC2H          DATA 0x8c
0000            124   _DAC2L          DATA 0x8b
0000            125   _DAC3CF0        DATA 0x9a
0000            126   _DAC3CF1        DATA 0x9c
0000            127   _DAC3H          DATA 0x8e
0000            128   _DAC3L          DATA 0x8d
0000            129   _DACGCF0        DATA 0x88
0000            130   _DACGCF1        DATA 0x98
0000            131   _DACGCF2        DATA 0xa2
0000            132   _DERIVID        DATA 0xad
0000            133   _DEVICEID       DATA 0xb5
0000            134   _DPH            DATA 0x83
0000            135   _DPL            DATA 0x82
0000            136   _EIE1           DATA 0xe6
0000            137   _EIE2           DATA 0xf3
0000            138   _EIP1           DATA 0xbb
0000            139   _EIP1H          DATA 0xee
0000            140   _EIP2           DATA 0xed
0000            141   _EIP2H          DATA 0xf6
0000            142   _EMI0CN         DATA 0xe7
0000            143   _FLKEY          DATA 0xb7
0000            144   _HFO0CAL        DATA 0xc7
0000            145   _HFO1CAL        DATA 0xd6
0000            146   _HFOCN          DATA 0xef
0000            147   _I2C0ADM        DATA 0xff
0000            148   _I2C0CN0        DATA 0xba
0000            149   _I2C0DIN        DATA 0xbc
0000            150   _I2C0DOUT       DATA 0xbb
0000            151   _I2C0FCN0       DATA 0xad
0000            152   _I2C0FCN1       DATA 0xab
0000            153   _I2C0FCT        DATA 0xf5
0000            154   _I2C0SLAD       DATA 0xbd
0000            155   _I2C0STAT       DATA 0xb9
0000            156   _IE             DATA 0xa8
0000            157   _IP             DATA 0xb8
0000            158   _IPH            DATA 0xf2
0000            159   _IT01CF         DATA 0xe4
0000            160   _LFO0CN         DATA 0xb1
0000            161   _P0             DATA 0x80
0000            162   _P0MASK         DATA 0xfe
0000            163   _P0MAT          DATA 0xfd
0000            164   _P0MDIN         DATA 0xf1
0000            165   _P0MDOUT        DATA 0xa4
0000            166   _P0SKIP         DATA 0xd4
0000            167   _P1             DATA 0x90
0000            168   _P1MASK         DATA 0xee
0000            169   _P1MAT          DATA 0xed
0000            170   _P1MDIN         DATA 0xf2
0000            171   _P1MDOUT        DATA 0xa5
0000            172   _P1SKIP         DATA 0xd5
0000            173   _P2             DATA 0xa0
0000            174   _P2MASK         DATA 0xfc
0000            175   _P2MAT          DATA 0xfb
0000            176   _P2MDIN         DATA 0xf3
0000            177   _P2MDOUT        DATA 0xa6
0000            178   _P2SKIP         DATA 0xcc
0000            179   _P3             DATA 0xb0
0000            180   _P3MDIN         DATA 0xf4
0000            181   _P3MDOUT        DATA 0x9c
0000            182   _PCA0CENT       DATA 0x9e
0000            183   _PCA0CLR        DATA 0x9c
0000            184   _PCA0CN0        DATA 0xd8
0000            185   _PCA0CPH0       DATA 0xfc
0000            186   _PCA0CPH1       DATA 0xea
0000            187   _PCA0CPH2       DATA 0xec
0000            188   _PCA0CPH3       DATA 0xf5
0000            189   _PCA0CPH4       DATA 0x85
0000            190   _PCA0CPH5       DATA 0xde
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPL1       DATA 0xe9
0000            193   _PCA0CPL2       DATA 0xeb
0000            194   _PCA0CPL3       DATA 0xf4
0000            195   _PCA0CPL4       DATA 0x84
0000            196   _PCA0CPL5       DATA 0xdd
0000            197   _PCA0CPM0       DATA 0xda
0000            198   _PCA0CPM1       DATA 0xdb
0000            199   _PCA0CPM2       DATA 0xdc
0000            200   _PCA0CPM3       DATA 0xae
0000            201   _PCA0CPM4       DATA 0xaf
0000            202   _PCA0CPM5       DATA 0xcc
0000            203   _PCA0H          DATA 0xfa
0000            204   _PCA0L          DATA 0xf9
0000            205   _PCA0MD         DATA 0xd9
0000            206   _PCA0POL        DATA 0x96
0000            207   _PCA0PWM        DATA 0xf7
0000            208   _PCON0          DATA 0x87
0000            209   _PCON1          DATA 0xcd
0000            210   _PFE0CN         DATA 0xc1
0000            211   _PRTDRV         DATA 0xf6
0000            212   _PSCTL          DATA 0x8f
0000            213   _PSTAT0         DATA 0xaa
0000            214   _PSW            DATA 0xd0
0000            215   _REF0CN         DATA 0xd1
0000            216   _REG0CN         DATA 0xc9
0000            217   _REVID          DATA 0xb6
0000            218   _RSTSRC         DATA 0xef
0000            219   _SBCON1         DATA 0x94
0000            220   _SBRLH1         DATA 0x96
0000            221   _SBRLL1         DATA 0x95
0000            222   _SBUF           DATA 0x99
0000            223   _SBUF0          DATA 0x99
0000            224   _SBUF1          DATA 0x92
0000            225   _SCON           DATA 0x98
0000            226   _SCON0          DATA 0x98
0000            227   _SCON1          DATA 0xc8
0000            228   _SFRPAGE        DATA 0xa7
0000            229   _SFRPGCN        DATA 0xbc
0000            230   _SFRSTACK       DATA 0xd7
0000            231   _SMB0ADM        DATA 0xd6
0000            232   _SMB0ADR        DATA 0xd7
0000            233   _SMB0CF         DATA 0xc1
0000            234   _SMB0CN0        DATA 0xc0
0000            235   _SMB0DAT        DATA 0xc2
0000            236   _SMB0FCN0       DATA 0xc3
0000            237   _SMB0FCN1       DATA 0xc4
0000            238   _SMB0FCT        DATA 0xef
0000            239   _SMB0RXLN       DATA 0xc5
0000            240   _SMB0TC         DATA 0xac
0000            241   _SMOD1          DATA 0x93
0000            242   _SP             DATA 0x81
0000            243   _SPI0CFG        DATA 0xa1
0000            244   _SPI0CKR        DATA 0xa2
0000            245   _SPI0CN0        DATA 0xf8
0000            246   _SPI0DAT        DATA 0xa3
0000            247   _SPI0FCN0       DATA 0x9a
0000            248   _SPI0FCN1       DATA 0x9b
0000            249   _SPI0FCT        DATA 0xf7
0000            250   _SPI0PCF        DATA 0xdf
0000            251   _TCON           DATA 0x88
0000            252   _TH0            DATA 0x8c
0000            253   _TH1            DATA 0x8d
0000            254   _TL0            DATA 0x8a
0000            255   _TL1            DATA 0x8b
0000            256   _TMOD           DATA 0x89
0000            257   _TMR2CN0        DATA 0xc8
0000            258   _TMR2CN1        DATA 0xfd
0000            259   _TMR2H          DATA 0xcf
0000            260   _TMR2L          DATA 0xce
0000            261   _TMR2RLH        DATA 0xcb
0000            262   _TMR2RLL        DATA 0xca
0000            263   _TMR3CN0        DATA 0x91
0000            264   _TMR3CN1        DATA 0xfe
0000            265   _TMR3H          DATA 0x95
0000            266   _TMR3L          DATA 0x94
0000            267   _TMR3RLH        DATA 0x93
0000            268   _TMR3RLL        DATA 0x92
0000            269   _TMR4CN0        DATA 0x98
0000            270   _TMR4CN1        DATA 0xff
0000            271   _TMR4H          DATA 0xa5
0000            272   _TMR4L          DATA 0xa4
0000            273   _TMR4RLH        DATA 0xa3
0000            274   _TMR4RLL        DATA 0xa2
0000            275   _TMR5CN0        DATA 0xc0
0000            276   _TMR5CN1        DATA 0xf1
0000            277   _TMR5H          DATA 0xd5
0000            278   _TMR5L          DATA 0xd4
0000            279   _TMR5RLH        DATA 0xd3
0000            280   _TMR5RLL        DATA 0xd2
0000            281   _UART0PCF       DATA 0xd9
0000            282   _UART1FCN0      DATA 0x9d
0000            283   _UART1FCN1      DATA 0xd8
0000            284   _UART1FCT       DATA 0xfa
0000            285   _UART1LIN       DATA 0x9e
0000            286   _UART1PCF       DATA 0xda
0000            287   _VDM0CN         DATA 0xff
0000            288   _WDTCN          DATA 0x97
0000            289   _XBR0           DATA 0xe1
0000            290   _XBR1           DATA 0xe2
0000            291   _XBR2           DATA 0xe3
0000            292   _XOSC0CN        DATA 0x86
0000            293   _DPTR           DATA 0x8382
0000            294   _TMR2RL         DATA 0xcbca
0000            295   _TMR3RL         DATA 0x9392
0000            296   _TMR4RL         DATA 0xa3a2
0000            297   _TMR5RL         DATA 0xd3d2
0000            298   _TMR0           DATA 0x8c8a
0000            299   _TMR1           DATA 0x8d8b
0000            300   _TMR2           DATA 0xcfce
0000            301   _TMR3           DATA 0x9594
0000            302   _TMR4           DATA 0xa5a4
0000            303   _TMR5           DATA 0xd5d4
0000            304   _SBRL1          DATA 0x9695
0000            305   _PCA0           DATA 0xfaf9
0000            306   _PCA0CP0        DATA 0xfcfb
0000            307   _PCA0CP1        DATA 0xeae9
0000            308   _PCA0CP2        DATA 0xeceb
0000            309   _PCA0CP3        DATA 0xf5f4
0000            310   _PCA0CP4        DATA 0x8584
0000            311   _PCA0CP5        DATA 0xdedd
0000            312   _ADC0ASA        DATA 0xb6b5
0000            313   _ADC0GT         DATA 0xc4c3
0000            314   _ADC0           DATA 0xbebd
0000            315   _ADC0LT         DATA 0xc6c5
0000            316   _DAC0           DATA 0x8584
0000            317   _DAC1           DATA 0x8a89
0000            318   _DAC2           DATA 0x8c8b
0000            319   _DAC3           DATA 0x8e8d
0000            320   ;--------------------------------------------------------
0000            321   ; special function bits
0000            322   ;--------------------------------------------------------
0000            323   _ACC_0          BIT 0xe0
0000            324   _ACC_1          BIT 0xe1
0000            325   _ACC_2          BIT 0xe2
0000            326   _ACC_3          BIT 0xe3
0000            327   _ACC_4          BIT 0xe4
0000            328   _ACC_5          BIT 0xe5
0000            329   _ACC_6          BIT 0xe6
0000            330   _ACC_7          BIT 0xe7
0000            331   _TEMPE          BIT 0xe8
0000            332   _ADGN0          BIT 0xe9
0000            333   _ADGN1          BIT 0xea
0000            334   _ADWINT         BIT 0xeb
0000            335   _ADBUSY         BIT 0xec
0000            336   _ADINT          BIT 0xed
0000            337   _IPOEN          BIT 0xee
0000            338   _ADEN           BIT 0xef
0000            339   _B_0            BIT 0xf0
0000            340   _B_1            BIT 0xf1
0000            341   _B_2            BIT 0xf2
0000            342   _B_3            BIT 0xf3
0000            343   _B_4            BIT 0xf4
0000            344   _B_5            BIT 0xf5
0000            345   _B_6            BIT 0xf6
0000            346   _B_7            BIT 0xf7
0000            347   _C0FIF          BIT 0xe8
0000            348   _C0RIF          BIT 0xe9
0000            349   _C1FIF          BIT 0xea
0000            350   _C1RIF          BIT 0xeb
0000            351   _C2FIF          BIT 0xec
0000            352   _C2RIF          BIT 0xed
0000            353   _C3FIF          BIT 0xee
0000            354   _C3RIF          BIT 0xef
0000            355   _D1SRC0         BIT 0x88
0000            356   _D1SRC1         BIT 0x89
0000            357   _D1AMEN         BIT 0x8a
0000            358   _D01REFSL       BIT 0x8b
0000            359   _D3SRC0         BIT 0x8c
0000            360   _D3SRC1         BIT 0x8d
0000            361   _D3AMEN         BIT 0x8e
0000            362   _D23REFSL       BIT 0x8f
0000            363   _D0UDIS         BIT 0x98
0000            364   _D1UDIS         BIT 0x99
0000            365   _D2UDIS         BIT 0x9a
0000            366   _D3UDIS         BIT 0x9b
0000            367   _EX0            BIT 0xa8
0000            368   _ET0            BIT 0xa9
0000            369   _EX1            BIT 0xaa
0000            370   _ET1            BIT 0xab
0000            371   _ES0            BIT 0xac
0000            372   _ET2            BIT 0xad
0000            373   _ESPI0          BIT 0xae
0000            374   _EA             BIT 0xaf
0000            375   _PX0            BIT 0xb8
0000            376   _PT0            BIT 0xb9
0000            377   _PX1            BIT 0xba
0000            378   _PT1            BIT 0xbb
0000            379   _PS0            BIT 0xbc
0000            380   _PT2            BIT 0xbd
0000            381   _PSPI0          BIT 0xbe
0000            382   _P0_0           BIT 0x80
0000            383   _P0_1           BIT 0x81
0000            384   _P0_2           BIT 0x82
0000            385   _P0_3           BIT 0x83
0000            386   _P0_4           BIT 0x84
0000            387   _P0_5           BIT 0x85
0000            388   _P0_6           BIT 0x86
0000            389   _P0_7           BIT 0x87
0000            390   _P1_0           BIT 0x90
0000            391   _P1_1           BIT 0x91
0000            392   _P1_2           BIT 0x92
0000            393   _P1_3           BIT 0x93
0000            394   _P1_4           BIT 0x94
0000            395   _P1_5           BIT 0x95
0000            396   _P1_6           BIT 0x96
0000            397   _P1_7           BIT 0x97
0000            398   _P2_0           BIT 0xa0
0000            399   _P2_1           BIT 0xa1
0000            400   _P2_2           BIT 0xa2
0000            401   _P2_3           BIT 0xa3
0000            402   _P2_4           BIT 0xa4
0000            403   _P2_5           BIT 0xa5
0000            404   _P2_6           BIT 0xa6
0000            405   _P3_0           BIT 0xb0
0000            406   _P3_1           BIT 0xb1
0000            407   _P3_2           BIT 0xb2
0000            408   _P3_3           BIT 0xb3
0000            409   _P3_4           BIT 0xb4
0000            410   _P3_7           BIT 0xb7
0000            411   _CCF0           BIT 0xd8
0000            412   _CCF1           BIT 0xd9
0000            413   _CCF2           BIT 0xda
0000            414   _CCF3           BIT 0xdb
0000            415   _CCF4           BIT 0xdc
0000            416   _CCF5           BIT 0xdd
0000            417   _CR             BIT 0xde
0000            418   _CF             BIT 0xdf
0000            419   _PARITY         BIT 0xd0
0000            420   _F1             BIT 0xd1
0000            421   _OV             BIT 0xd2
0000            422   _RS0            BIT 0xd3
0000            423   _RS1            BIT 0xd4
0000            424   _F0             BIT 0xd5
0000            425   _AC             BIT 0xd6
0000            426   _CY             BIT 0xd7
0000            427   _RI             BIT 0x98
0000            428   _TI             BIT 0x99
0000            429   _RB8            BIT 0x9a
0000            430   _TB8            BIT 0x9b
0000            431   _REN            BIT 0x9c
0000            432   _CE             BIT 0x9d
0000            433   _SMODE          BIT 0x9e
0000            434   _RI1            BIT 0xc8
0000            435   _TI1            BIT 0xc9
0000            436   _RBX1           BIT 0xca
0000            437   _TBX1           BIT 0xcb
0000            438   _REN1           BIT 0xcc
0000            439   _PERR1          BIT 0xcd
0000            440   _OVR1           BIT 0xce
0000            441   _SI             BIT 0xc0
0000            442   _ACK            BIT 0xc1
0000            443   _ARBLOST        BIT 0xc2
0000            444   _ACKRQ          BIT 0xc3
0000            445   _STO            BIT 0xc4
0000            446   _STA            BIT 0xc5
0000            447   _TXMODE         BIT 0xc6
0000            448   _MASTER         BIT 0xc7
0000            449   _SPIEN          BIT 0xf8
0000            450   _TXNF           BIT 0xf9
0000            451   _NSSMD0         BIT 0xfa
0000            452   _NSSMD1         BIT 0xfb
0000            453   _RXOVRN         BIT 0xfc
0000            454   _MODF           BIT 0xfd
0000            455   _WCOL           BIT 0xfe
0000            456   _SPIF           BIT 0xff
0000            457   _IT0            BIT 0x88
0000            458   _IE0            BIT 0x89
0000            459   _IT1            BIT 0x8a
0000            460   _IE1            BIT 0x8b
0000            461   _TR0            BIT 0x8c
0000            462   _TF0            BIT 0x8d
0000            463   _TR1            BIT 0x8e
0000            464   _TF1            BIT 0x8f
0000            465   _T2XCLK0        BIT 0xc8
0000            466   _T2XCLK1        BIT 0xc9
0000            467   _TR2            BIT 0xca
0000            468   _T2SPLIT        BIT 0xcb
0000            469   _TF2CEN         BIT 0xcc
0000            470   _TF2LEN         BIT 0xcd
0000            471   _TF2L           BIT 0xce
0000            472   _TF2H           BIT 0xcf
0000            473   _T4XCLK0        BIT 0x98
0000            474   _T4XCLK1        BIT 0x99
0000            475   _TR4            BIT 0x9a
0000            476   _T4SPLIT        BIT 0x9b
0000            477   _TF4CEN         BIT 0x9c
0000            478   _TF4LEN         BIT 0x9d
0000            479   _TF4L           BIT 0x9e
0000            480   _TF4H           BIT 0x9f
0000            481   _T5XCLK0        BIT 0xc0
0000            482   _T5XCLK1        BIT 0xc1
0000            483   _TR5            BIT 0xc2
0000            484   _T5SPLIT        BIT 0xc3
0000            485   _TF5CEN         BIT 0xc4
0000            486   _TF5LEN         BIT 0xc5
0000            487   _TF5L           BIT 0xc6
0000            488   _TF5H           BIT 0xc7
0000            489   _RIE            BIT 0xd8
0000            490   _RXTO0          BIT 0xd9
0000            491   _RXTO1          BIT 0xda
0000            492   _RFRQ           BIT 0xdb
0000            493   _TIE            BIT 0xdc
0000            494   _TXHOLD         BIT 0xdd
0000            495   _TXNF1          BIT 0xde
0000            496   _TFRQ           BIT 0xdf
0000            497   ;--------------------------------------------------------
0000            498   ; overlayable register banks
0000            499   ;--------------------------------------------------------
0000            500            rbank0 segment data overlay
0000            501   ;--------------------------------------------------------
0000            502   ; internal ram data
0000            503   ;--------------------------------------------------------
0000            504            rseg R_DSEG
0000            505   _pwm_counter:
0000            506            ds 2
0002            507   _pwm_left:
0002            508            ds 1
0003            509   _pwm_right:
0003            510            ds 1
0004            511   _L_motor_dir:
0004            512            ds 1
0005            513   _R_motor_dir:
0005            514            ds 1
0006            515   _getstr1_PARM_2:
0006            516            ds 1
0007            517   _main_vx_1_127:
0007            518            ds 2
0009            519   _main_vy_1_127:
0009            520            ds 2
000B            521   _main_motor_pwm_1_127:
000B            522            ds 2
000D            523   _main_sloc0_1_0:
000D            524            ds 4
0011            525   ;--------------------------------------------------------
0011            526   ; overlayable items in internal ram 
0011            527   ;--------------------------------------------------------
0000            528            rseg    R_OSEG
0000            529            rseg    R_OSEG
0000            530            rseg    R_OSEG
0000            531            rseg    R_OSEG
0000            532            rseg    R_OSEG
0000            533   _InitPinADC_PARM_2:
0000            534            ds 1
0001            535            rseg    R_OSEG
0001            536            rseg    R_OSEG
0001            537            rseg    R_OSEG
0001            538            rseg    R_OSEG
0001            539            rseg    R_OSEG
0001            540   ;--------------------------------------------------------
0001            541   ; indirectly addressable internal ram data
0001            542   ;--------------------------------------------------------
0000            543            rseg R_ISEG
0000            544   _buff:
0000            545            ds 20
0014            546   ;--------------------------------------------------------
0014            547   ; absolute internal ram data
0014            548   ;--------------------------------------------------------
0000            549            DSEG
0000            550   ;--------------------------------------------------------
0000            551   ; bit data
0000            552   ;--------------------------------------------------------
0000            553            rseg R_BSEG
0000            554   ;--------------------------------------------------------
0000            555   ; paged external ram data
0000            556   ;--------------------------------------------------------
0000            557            rseg R_PSEG
0000            558   ;--------------------------------------------------------
0000            559   ; external ram data
0000            560   ;--------------------------------------------------------
0000            561            rseg R_XSEG
0000            562   ;--------------------------------------------------------
0000            563   ; absolute external ram data
0000            564   ;--------------------------------------------------------
0000            565            XSEG
0000            566   ;--------------------------------------------------------
0000            567   ; external initialized ram data
0000            568   ;--------------------------------------------------------
0000            569            rseg R_IXSEG
0000            570            rseg R_HOME
0000            571            rseg R_GSINIT
0000            572            rseg R_CSEG
0000            573   ;--------------------------------------------------------
0000            574   ; Reset entry point and interrupt vectors
0000            575   ;--------------------------------------------------------
0000            576            CSEG at 0x0000
0000 020000     577            ljmp    _crt0
0093            578            CSEG at 0x0093
0093 020000     579            ljmp    _Timer5_ISR
0096            580   ;--------------------------------------------------------
0096            581   ; global & static initialisations
0096            582   ;--------------------------------------------------------
0000            583            rseg R_HOME
0000            584            rseg R_GSINIT
0000            585            rseg R_GSINIT
0000            586   ;--------------------------------------------------------
0000            587   ; data variables initialization
0000            588   ;--------------------------------------------------------
0000            589            rseg R_DINIT
0000            590   ;        main.c:39: unsigned int pwm_counter = 0; 
0000 E4         591            clr     a
0001 F508       592            mov     _pwm_counter,a
0003 F509       593            mov     (_pwm_counter + 1),a
0005            594   ;        main.c:40: unsigned char pwm_left = 0, pwm_right = 0; 
0005 75C800     595            mov     _pwm_left,#0x00
0008            596   ;        main.c:40: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0008 758800     597            mov     _pwm_right,#0x00
000B            598   ;        main.c:41: 
000B 754801     599            mov     _L_motor_dir,#0x01
000E            600   ;        main.c:41: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000E 750801     601            mov     _R_motor_dir,#0x01
0011            602            ; The linker places a 'ret' at the end of segment R_DINIT.
0011            603   ;--------------------------------------------------------
0011            604   ; code
0011            605   ;--------------------------------------------------------
0000            606            rseg R_CSEG
0000            607   ;------------------------------------------------------------
0000            608   ;Allocation info for local variables in function '_c51_external_startup'
0000            609   ;------------------------------------------------------------
0000            610   ;------------------------------------------------------------
0000            611   ;        main.c:44: char _c51_external_startup (void)
0000            612   ;        -----------------------------------------
0000            613   ;         function _c51_external_startup
0000            614   ;        -----------------------------------------
0000            615   __c51_external_startup:
0000            616            using   0
0000            617   ;        main.c:47: SFRPAGE = 0x00;
0000 75A700     618            mov     _SFRPAGE,#0x00
0003            619   ;        main.c:48: WDTCN = 0xDE; //First key
0003 7597DE     620            mov     _WDTCN,#0xDE
0006            621   ;        main.c:49: WDTCN = 0xAD; //Second key
0006 7597AD     622            mov     _WDTCN,#0xAD
0009            623   ;        main.c:51: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     624            mov     _VDM0CN,#0x80
000C            625   ;        main.c:52: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     626            mov     _RSTSRC,#0x06
000F            627   ;        main.c:59: SFRPAGE = 0x10;
000F 75A710     628            mov     _SFRPAGE,#0x10
0012            629   ;        main.c:60: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     630            mov     _PFE0CN,#0x20
0015            631   ;        main.c:61: SFRPAGE = 0x00;
0015 75A700     632            mov     _SFRPAGE,#0x00
0018            633   ;        main.c:82: CLKSEL = 0x00;
0018 75A900     634            mov     _CLKSEL,#0x00
001B            635   ;        main.c:83: CLKSEL = 0x00;
001B 75A900     636            mov     _CLKSEL,#0x00
001E            637   ;        main.c:84: while ((CLKSEL & 0x80) == 0);
001E            638   L002001?:
001E E5A9       639            mov     a,_CLKSEL
0020 30E758     640            jnb     acc.7,L002001?
0023            641   ;        main.c:85: CLKSEL = 0x03;
0023 75A903     642            mov     _CLKSEL,#0x03
0026            643   ;        main.c:86: CLKSEL = 0x03;
0026 75A903     644            mov     _CLKSEL,#0x03
0029            645   ;        main.c:87: while ((CLKSEL & 0x80) == 0);
0029            646   L002004?:
0029 E5A9       647            mov     a,_CLKSEL
002B 30E7D8     648            jnb     acc.7,L002004?
002E            649   ;        main.c:92: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     650            orl     _P0MDOUT,#0x11
0031            651   ;        main.c:93: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     652            orl     _P2MDOUT,#0x01
0034            653   ;        main.c:94: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     654            mov     _XBR0,#0x01
0037            655   ;        main.c:95: XBR1     = 0X00;
0037 75E200     656            mov     _XBR1,#0x00
003A            657   ;        main.c:96: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     658            mov     _XBR2,#0x41
003D            659   ;        main.c:102: SCON0 = 0x10;
003D 759810     660            mov     _SCON0,#0x10
0040            661   ;        main.c:103: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     662            mov     _TH1,#0xE6
0043            663   ;        main.c:104: TL1 = TH1;      // Init Timer1
0043 858D8B     664            mov     _TL1,_TH1
0046            665   ;        main.c:105: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     666            anl     _TMOD,#0x0F
0049            667   ;        main.c:106: TMOD |=  0x20;                       
0049 438920     668            orl     _TMOD,#0x20
004C            669   ;        main.c:107: TR1 = 1; // START Timer1
004C D28E       670            setb    _TR1
004E            671   ;        main.c:108: TI = 1;  // Indicate TX0 ready
004E D299       672            setb    _TI
0050            673   ;        main.c:110: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       674            setb    _P2_0
0052            675   ;        main.c:113: SFRPAGE=0x10;
0052 75A710     676            mov     _SFRPAGE,#0x10
0055            677   ;        main.c:114: TMR5CN0=0x00;
0055 75C000     678            mov     _TMR5CN0,#0x00
0058            679   ;        main.c:115: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     680            mov     _TMR5,#0xFF
005B 75D5FF     681            mov     (_TMR5 >> 8),#0xFF
005E            682   ;        main.c:116: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     683            orl     _EIE2,#0x08
0061            684   ;        main.c:117: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       685            setb    _TR5
0063            686   ;        main.c:119: EA=1;
0063 D2AF       687            setb    _EA
0065            688   ;        main.c:121: SFRPAGE=0x00;
0065 75A700     689            mov     _SFRPAGE,#0x00
0068            690   ;        main.c:123: return 0;
0068 758200     691            mov     dpl,#0x00
006B 22         692            ret
006C            693   ;------------------------------------------------------------
006C            694   ;Allocation info for local variables in function 'Timer3us'
006C            695   ;------------------------------------------------------------
006C            696   ;us                        Allocated to registers r2 
006C            697   ;i                         Allocated to registers r3 
006C            698   ;------------------------------------------------------------
006C            699   ;        main.c:127: void Timer3us(unsigned char us)
006C            700   ;        -----------------------------------------
006C            701   ;         function Timer3us
006C            702   ;        -----------------------------------------
006C            703   _Timer3us:
006C AA82       704            mov     r2,dpl
006E            705   ;        main.c:132: CKCON0|=0b_0100_0000;
006E 438E40     706            orl     _CKCON0,#0x40
0071            707   ;        main.c:134: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     708            mov     _TMR3RL,#0xB8
0074 7593FF     709            mov     (_TMR3RL >> 8),#0xFF
0077            710   ;        main.c:135: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     711            mov     _TMR3,_TMR3RL
007A 859395     712            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            713   ;        main.c:137: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     714            mov     _TMR3CN0,#0x04
0080            715   ;        main.c:138: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       716            mov     r3,#0x00
0082            717   L003004?:
0082 C3         718            clr     c
0083 EB         719            mov     a,r3
0084 9A         720            subb    a,r2
0085 5000       721            jnc     L003007?
0087            722   ;        main.c:140: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            723   L003001?:
0087 E591       724            mov     a,_TMR3CN0
0089 30E7D8     725            jnb     acc.7,L003001?
008C            726   ;        main.c:141: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     727            anl     _TMR3CN0,#0x7F
008F            728   ;        main.c:138: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         729            inc     r3
0090 8000       730            sjmp    L003004?
0092            731   L003007?:
0092            732   ;        main.c:143: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     733            mov     _TMR3CN0,#0x00
0095 22         734            ret
0096            735   ;------------------------------------------------------------
0096            736   ;Allocation info for local variables in function 'waitms'
0096            737   ;------------------------------------------------------------
0096            738   ;ms                        Allocated to registers r2 r3 
0096            739   ;j                         Allocated to registers r4 r5 
0096            740   ;k                         Allocated to registers r6 
0096            741   ;------------------------------------------------------------
0096            742   ;        main.c:146: void waitms (unsigned int ms)
0096            743   ;        -----------------------------------------
0096            744   ;         function waitms
0096            745   ;        -----------------------------------------
0096            746   _waitms:
0096 AA82       747            mov     r2,dpl
0098 AB83       748            mov     r3,dph
009A            749   ;        main.c:150: for(j=0; j<ms; j++)
009A 7C00       750            mov     r4,#0x00
009C 7D00       751            mov     r5,#0x00
009E            752   L004005?:
009E C3         753            clr     c
009F EC         754            mov     a,r4
00A0 9A         755            subb    a,r2
00A1 ED         756            mov     a,r5
00A2 9B         757            subb    a,r3
00A3 5000       758            jnc     L004009?
00A5            759   ;        main.c:151: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       760            mov     r6,#0x00
00A7            761   L004001?:
00A7 BE0418     762            cjne    r6,#0x04,L004018?
00AA            763   L004018?:
00AA 5000       764            jnc     L004007?
00AC 7582FA     765            mov     dpl,#0xFA
00AF C002       766            push    ar2
00B1 C003       767            push    ar3
00B3 C004       768            push    ar4
00B5 C005       769            push    ar5
00B7 C006       770            push    ar6
00B9 120000     771            lcall   _Timer3us
00BC D006       772            pop     ar6
00BE D005       773            pop     ar5
00C0 D004       774            pop     ar4
00C2 D003       775            pop     ar3
00C4 D002       776            pop     ar2
00C6 0E         777            inc     r6
00C7 8000       778            sjmp    L004001?
00C9            779   L004007?:
00C9            780   ;        main.c:150: for(j=0; j<ms; j++)
00C9 0C         781            inc     r4
00CA BC0058     782            cjne    r4,#0x00,L004005?
00CD 0D         783            inc     r5
00CE 8000       784            sjmp    L004005?
00D0            785   L004009?:
00D0 22         786            ret
00D1            787   ;------------------------------------------------------------
00D1            788   ;Allocation info for local variables in function 'UART1_Init'
00D1            789   ;------------------------------------------------------------
00D1            790   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            791   ;------------------------------------------------------------
00D1            792   ;        main.c:154: void UART1_Init (unsigned long baudrate)
00D1            793   ;        -----------------------------------------
00D1            794   ;         function UART1_Init
00D1            795   ;        -----------------------------------------
00D1            796   _UART1_Init:
00D1 AA82       797            mov     r2,dpl
00D3 AB83       798            mov     r3,dph
00D5 ACF0       799            mov     r4,b
00D7 FD         800            mov     r5,a
00D8            801   ;        main.c:156: SFRPAGE = 0x20;
00D8 75A720     802            mov     _SFRPAGE,#0x20
00DB            803   ;        main.c:157: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     804            mov     _SMOD1,#0x0C
00DE            805   ;        main.c:158: SCON1 = 0x10;
00DE 75C810     806            mov     _SCON1,#0x10
00E1            807   ;        main.c:159: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     808            mov     _SBCON1,#0x00
00E4            809   ;        main.c:160: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       810            mov     __divulong_PARM_2,r2
00E6 8B01       811            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       812            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       813            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     814            mov     dptr,#0xA200
00EF 75F04A     815            mov     b,#0x4A
00F2 7404       816            mov     a,#0x04
00F4 120000     817            lcall   __divulong
00F7 AA82       818            mov     r2,dpl
00F9 AB83       819            mov     r3,dph
00FB ACF0       820            mov     r4,b
00FD FD         821            mov     r5,a
00FE 750018     822            mov     __divulong_PARM_2,#0x18
0101 E4         823            clr     a
0102 F501       824            mov     (__divulong_PARM_2 + 1),a
0104 F502       825            mov     (__divulong_PARM_2 + 2),a
0106 F503       826            mov     (__divulong_PARM_2 + 3),a
0108 8A82       827            mov     dpl,r2
010A 8B83       828            mov     dph,r3
010C 8CF0       829            mov     b,r4
010E ED         830            mov     a,r5
010F 120000     831            lcall   __divulong
0112 AA82       832            mov     r2,dpl
0114 AB83       833            mov     r3,dph
0116 ACF0       834            mov     r4,b
0118 FD         835            mov     r5,a
0119 E4         836            clr     a
011A C3         837            clr     c
011B 9A         838            subb    a,r2
011C FA         839            mov     r2,a
011D E4         840            clr     a
011E 9B         841            subb    a,r3
011F FB         842            mov     r3,a
0120 7401       843            mov     a,#0x01
0122 9C         844            subb    a,r4
0123 E4         845            clr     a
0124 9D         846            subb    a,r5
0125 8A95       847            mov     _SBRL1,r2
0127 8B96       848            mov     (_SBRL1 >> 8),r3
0129            849   ;        main.c:161: TI1 = 1; // indicate ready for TX
0129 D2C9       850            setb    _TI1
012B            851   ;        main.c:162: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     852            orl     _SBCON1,#0x40
012E            853   ;        main.c:163: SFRPAGE = 0x00;
012E 75A700     854            mov     _SFRPAGE,#0x00
0131 22         855            ret
0132            856   ;------------------------------------------------------------
0132            857   ;Allocation info for local variables in function 'putchar1'
0132            858   ;------------------------------------------------------------
0132            859   ;c                         Allocated to registers r2 
0132            860   ;------------------------------------------------------------
0132            861   ;        main.c:166: void putchar1 (char c) 
0132            862   ;        -----------------------------------------
0132            863   ;         function putchar1
0132            864   ;        -----------------------------------------
0132            865   _putchar1:
0132 AA82       866            mov     r2,dpl
0134            867   ;        main.c:168: SFRPAGE = 0x20;
0134 75A720     868            mov     _SFRPAGE,#0x20
0137            869   ;        main.c:169: while (!TI1);
0137            870   L006001?:
0137            871   ;        main.c:170: TI1=0;
0137 10C9A8     872            jbc     _TI1,L006008?
013A 8000       873            sjmp    L006001?
013C            874   L006008?:
013C            875   ;        main.c:171: SBUF1 = c;
013C 8A92       876            mov     _SBUF1,r2
013E            877   ;        main.c:172: SFRPAGE = 0x00;
013E 75A700     878            mov     _SFRPAGE,#0x00
0141 22         879            ret
0142            880   ;------------------------------------------------------------
0142            881   ;Allocation info for local variables in function 'sendstr1'
0142            882   ;------------------------------------------------------------
0142            883   ;s                         Allocated to registers r2 r3 r4 
0142            884   ;------------------------------------------------------------
0142            885   ;        main.c:175: void sendstr1 (char * s)
0142            886   ;        -----------------------------------------
0142            887   ;         function sendstr1
0142            888   ;        -----------------------------------------
0142            889   _sendstr1:
0142 AA82       890            mov     r2,dpl
0144 AB83       891            mov     r3,dph
0146 ACF0       892            mov     r4,b
0148            893   ;        main.c:177: while(*s)
0148            894   L007001?:
0148 8A82       895            mov     dpl,r2
014A 8B83       896            mov     dph,r3
014C 8CF0       897            mov     b,r4
014E 120000     898            lcall   __gptrget
0151 FD         899            mov     r5,a
0152 6000       900            jz      L007004?
0154            901   ;        main.c:179: putchar1(*s);
0154 8D82       902            mov     dpl,r5
0156 C002       903            push    ar2
0158 C003       904            push    ar3
015A C004       905            push    ar4
015C 120000     906            lcall   _putchar1
015F D004       907            pop     ar4
0161 D003       908            pop     ar3
0163 D002       909            pop     ar2
0165            910   ;        main.c:180: s++;        
0165 0A         911            inc     r2
0166 BA00E8     912            cjne    r2,#0x00,L007001?
0169 0B         913            inc     r3
016A 8000       914            sjmp    L007001?
016C            915   L007004?:
016C 22         916            ret
016D            917   ;------------------------------------------------------------
016D            918   ;Allocation info for local variables in function 'getchar1'
016D            919   ;------------------------------------------------------------
016D            920   ;c                         Allocated to registers 
016D            921   ;------------------------------------------------------------
016D            922   ;        main.c:184: char getchar1 (void)
016D            923   ;        -----------------------------------------
016D            924   ;         function getchar1
016D            925   ;        -----------------------------------------
016D            926   _getchar1:
016D            927   ;        main.c:187: SFRPAGE = 0x20;
016D 75A720     928            mov     _SFRPAGE,#0x20
0170            929   ;        main.c:188: while (!RI1);
0170            930   L008001?:
0170            931   ;        main.c:189: RI1=0;
0170 10C8E8     932            jbc     _RI1,L008008?
0173 8000       933            sjmp    L008001?
0175            934   L008008?:
0175            935   ;        main.c:191: SCON1&=0b_0011_1111;
0175 53C83F     936            anl     _SCON1,#0x3F
0178            937   ;        main.c:192: c = SBUF1;
0178 859282     938            mov     dpl,_SBUF1
017B            939   ;        main.c:193: SFRPAGE = 0x00;
017B 75A700     940            mov     _SFRPAGE,#0x00
017E            941   ;        main.c:194: return (c);
017E 22         942            ret
017F            943   ;------------------------------------------------------------
017F            944   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            945   ;------------------------------------------------------------
017F            946   ;c                         Allocated to registers 
017F            947   ;timeout                   Allocated to registers r2 r3 
017F            948   ;------------------------------------------------------------
017F            949   ;        main.c:197: char getchar1_with_timeout (void)
017F            950   ;        -----------------------------------------
017F            951   ;         function getchar1_with_timeout
017F            952   ;        -----------------------------------------
017F            953   _getchar1_with_timeout:
017F            954   ;        main.c:201: SFRPAGE = 0x20;
017F 75A720     955            mov     _SFRPAGE,#0x20
0182            956   ;        main.c:203: while (!RI1)
0182 7A00       957            mov     r2,#0x00
0184 7B00       958            mov     r3,#0x00
0186            959   L009003?:
0186 20C868     960            jb      _RI1,L009005?
0189            961   ;        main.c:205: SFRPAGE = 0x00;
0189 75A700     962            mov     _SFRPAGE,#0x00
018C            963   ;        main.c:206: Timer3us(20);
018C 758214     964            mov     dpl,#0x14
018F C002       965            push    ar2
0191 C003       966            push    ar3
0193 120000     967            lcall   _Timer3us
0196 D003       968            pop     ar3
0198 D002       969            pop     ar2
019A            970   ;        main.c:207: SFRPAGE = 0x20;
019A 75A720     971            mov     _SFRPAGE,#0x20
019D            972   ;        main.c:208: timeout++;
019D 0A         973            inc     r2
019E BA00A8     974            cjne    r2,#0x00,L009012?
01A1 0B         975            inc     r3
01A2            976   L009012?:
01A2            977   ;        main.c:209: if(timeout==25000)
01A2 BAA828     978            cjne    r2,#0xA8,L009003?
01A5 BB6128     979            cjne    r3,#0x61,L009003?
01A8            980   ;        main.c:211: SFRPAGE = 0x00;
01A8 75A700     981            mov     _SFRPAGE,#0x00
01AB            982   ;        main.c:212: return ('\n'); // Timeout after half second
01AB 75820A     983            mov     dpl,#0x0A
01AE 22         984            ret
01AF            985   L009005?:
01AF            986   ;        main.c:215: RI1=0;
01AF C2C8       987            clr     _RI1
01B1            988   ;        main.c:217: SCON1&=0b_0011_1111;
01B1 53C83F     989            anl     _SCON1,#0x3F
01B4            990   ;        main.c:218: c = SBUF1;
01B4 859282     991            mov     dpl,_SBUF1
01B7            992   ;        main.c:219: SFRPAGE = 0x00;
01B7 75A700     993            mov     _SFRPAGE,#0x00
01BA            994   ;        main.c:220: return (c);
01BA 22         995            ret
01BB            996   ;------------------------------------------------------------
01BB            997   ;Allocation info for local variables in function 'getstr1'
01BB            998   ;------------------------------------------------------------
01BB            999   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1000   ;s                         Allocated to registers r2 r3 r4 
01BB           1001   ;c                         Allocated to registers r1 
01BB           1002   ;cnt                       Allocated to registers r5 
01BB           1003   ;------------------------------------------------------------
01BB           1004   ;        main.c:223: void getstr1 (char * s, unsigned char n)
01BB           1005   ;        -----------------------------------------
01BB           1006   ;         function getstr1
01BB           1007   ;        -----------------------------------------
01BB           1008   _getstr1:
01BB AA82      1009            mov     r2,dpl
01BD AB83      1010            mov     r3,dph
01BF ACF0      1011            mov     r4,b
01C1           1012   ;        main.c:229: while(1)
01C1 7D00      1013            mov     r5,#0x00
01C3 8A06      1014            mov     ar6,r2
01C5 8B07      1015            mov     ar7,r3
01C7 8C00      1016            mov     ar0,r4
01C9           1017   L010007?:
01C9           1018   ;        main.c:231: c=getchar1_with_timeout();
01C9 C002      1019            push    ar2
01CB C003      1020            push    ar3
01CD C004      1021            push    ar4
01CF C005      1022            push    ar5
01D1 C006      1023            push    ar6
01D3 C007      1024            push    ar7
01D5 C000      1025            push    ar0
01D7 120000    1026            lcall   _getchar1_with_timeout
01DA A982      1027            mov     r1,dpl
01DC D000      1028            pop     ar0
01DE D007      1029            pop     ar7
01E0 D006      1030            pop     ar6
01E2 D005      1031            pop     ar5
01E4 D004      1032            pop     ar4
01E6 D003      1033            pop     ar3
01E8 D002      1034            pop     ar2
01EA           1035   ;        main.c:232: if(c=='\n')
01EA B90A28    1036            cjne    r1,#0x0A,L010002?
01ED           1037   ;        main.c:234: *s=0;
01ED 8A82      1038            mov     dpl,r2
01EF 8B83      1039            mov     dph,r3
01F1 8CF0      1040            mov     b,r4
01F3 E4        1041            clr     a
01F4           1042   ;        main.c:235: return;
01F4 020000    1043            ljmp    __gptrput
01F7           1044   L010002?:
01F7           1045   ;        main.c:238: if (cnt<n)
01F7 C3        1046            clr     c
01F8 ED        1047            mov     a,r5
01F9 95C8      1048            subb    a,_getstr1_PARM_2
01FB 5000      1049            jnc     L010004?
01FD           1050   ;        main.c:240: cnt++;
01FD 0D        1051            inc     r5
01FE           1052   ;        main.c:241: *s=c;
01FE 8E82      1053            mov     dpl,r6
0200 8F83      1054            mov     dph,r7
0202 88F0      1055            mov     b,r0
0204 E9        1056            mov     a,r1
0205 120000    1057            lcall   __gptrput
0208 A3        1058            inc     dptr
0209 AE82      1059            mov     r6,dpl
020B AF83      1060            mov     r7,dph
020D           1061   ;        main.c:242: s++;
020D 8E02      1062            mov     ar2,r6
020F 8F03      1063            mov     ar3,r7
0211 8804      1064            mov     ar4,r0
0213 8000      1065            sjmp    L010007?
0215           1066   L010004?:
0215           1067   ;        main.c:246: *s=0;
0215 8A82      1068            mov     dpl,r2
0217 8B83      1069            mov     dph,r3
0219 8CF0      1070            mov     b,r4
021B E4        1071            clr     a
021C           1072   ;        main.c:247: return;
021C 020000    1073            ljmp    __gptrput
021F           1074   ;------------------------------------------------------------
021F           1075   ;Allocation info for local variables in function 'RXU1'
021F           1076   ;------------------------------------------------------------
021F           1077   ;------------------------------------------------------------
021F           1078   ;        main.c:253: bit RXU1 (void)
021F           1079   ;        -----------------------------------------
021F           1080   ;         function RXU1
021F           1081   ;        -----------------------------------------
021F           1082   _RXU1:
021F           1083   ;        main.c:256: SFRPAGE = 0x20;
021F 75A720    1084            mov     _SFRPAGE,#0x20
0222           1085   ;        main.c:257: mybit=RI1;
0222 A2C8      1086            mov     c,_RI1
0224           1087   ;        main.c:258: SFRPAGE = 0x00;
0224 75A700    1088            mov     _SFRPAGE,#0x00
0227           1089   ;        main.c:259: return mybit;
0227 22        1090            ret
0228           1091   ;------------------------------------------------------------
0228           1092   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1093   ;------------------------------------------------------------
0228           1094   ;ms                        Allocated to registers r2 r3 
0228           1095   ;j                         Allocated to registers r4 r5 
0228           1096   ;k                         Allocated to registers r6 
0228           1097   ;------------------------------------------------------------
0228           1098   ;        main.c:262: void waitms_or_RI1 (unsigned int ms)
0228           1099   ;        -----------------------------------------
0228           1100   ;         function waitms_or_RI1
0228           1101   ;        -----------------------------------------
0228           1102   _waitms_or_RI1:
0228 AA82      1103            mov     r2,dpl
022A AB83      1104            mov     r3,dph
022C           1105   ;        main.c:266: for(j=0; j<ms; j++)
022C 7C00      1106            mov     r4,#0x00
022E 7D00      1107            mov     r5,#0x00
0230           1108   L012007?:
0230 C3        1109            clr     c
0231 EC        1110            mov     a,r4
0232 9A        1111            subb    a,r2
0233 ED        1112            mov     a,r5
0234 9B        1113            subb    a,r3
0235 5000      1114            jnc     L012011?
0237           1115   ;        main.c:268: for (k=0; k<4; k++)
0237 7E00      1116            mov     r6,#0x00
0239           1117   L012003?:
0239 BE04A8    1118            cjne    r6,#0x04,L012019?
023C           1119   L012019?:
023C 5000      1120            jnc     L012009?
023E           1121   ;        main.c:270: if(RXU1()) return;
023E C002      1122            push    ar2
0240 C003      1123            push    ar3
0242 C004      1124            push    ar4
0244 C005      1125            push    ar5
0246 C006      1126            push    ar6
0248 120000    1127            lcall   _RXU1
024B E4        1128            clr     a
024C 33        1129            rlc     a
024D D006      1130            pop     ar6
024F D005      1131            pop     ar5
0251 D004      1132            pop     ar4
0253 D003      1133            pop     ar3
0255 D002      1134            pop     ar2
0257 6000      1135            jz      L012002?
0259 22        1136            ret
025A           1137   L012002?:
025A           1138   ;        main.c:271: Timer3us(250);
025A 7582FA    1139            mov     dpl,#0xFA
025D C002      1140            push    ar2
025F C003      1141            push    ar3
0261 C004      1142            push    ar4
0263 C005      1143            push    ar5
0265 C006      1144            push    ar6
0267 120000    1145            lcall   _Timer3us
026A D006      1146            pop     ar6
026C D005      1147            pop     ar5
026E D004      1148            pop     ar4
0270 D003      1149            pop     ar3
0272 D002      1150            pop     ar2
0274           1151   ;        main.c:268: for (k=0; k<4; k++)
0274 0E        1152            inc     r6
0275 8000      1153            sjmp    L012003?
0277           1154   L012009?:
0277           1155   ;        main.c:266: for(j=0; j<ms; j++)
0277 0C        1156            inc     r4
0278 BC00E8    1157            cjne    r4,#0x00,L012007?
027B 0D        1158            inc     r5
027C 8000      1159            sjmp    L012007?
027E           1160   L012011?:
027E 22        1161            ret
027F           1162   ;------------------------------------------------------------
027F           1163   ;Allocation info for local variables in function 'SendATCommand'
027F           1164   ;------------------------------------------------------------
027F           1165   ;s                         Allocated to registers r2 r3 r4 
027F           1166   ;------------------------------------------------------------
027F           1167   ;        main.c:276: void SendATCommand (char * s)
027F           1168   ;        -----------------------------------------
027F           1169   ;         function SendATCommand
027F           1170   ;        -----------------------------------------
027F           1171   _SendATCommand:
027F AA82      1172            mov     r2,dpl
0281 AB83      1173            mov     r3,dph
0283 ACF0      1174            mov     r4,b
0285           1175   ;        main.c:278: printf("Command: %s", s);
0285 C002      1176            push    ar2
0287 C003      1177            push    ar3
0289 C004      1178            push    ar4
028B C002      1179            push    ar2
028D C003      1180            push    ar3
028F C004      1181            push    ar4
0291 7468      1182            mov     a,#__str_0
0293 C0E0      1183            push    acc
0295 74C0      1184            mov     a,#(__str_0 >> 8)
0297 C0E0      1185            push    acc
0299 7480      1186            mov     a,#0x80
029B C0E0      1187            push    acc
029D 120000    1188            lcall   _printf
02A0 E581      1189            mov     a,sp
02A2 24FA      1190            add     a,#0xfa
02A4 F581      1191            mov     sp,a
02A6           1192   ;        main.c:279: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1193            clr     _P2_0
02A8           1194   ;        main.c:280: waitms(5);
02A8 900005    1195            mov     dptr,#0x0005
02AB 120000    1196            lcall   _waitms
02AE D004      1197            pop     ar4
02B0 D003      1198            pop     ar3
02B2 D002      1199            pop     ar2
02B4           1200   ;        main.c:281: sendstr1(s);
02B4 8A82      1201            mov     dpl,r2
02B6 8B83      1202            mov     dph,r3
02B8 8CF0      1203            mov     b,r4
02BA 120000    1204            lcall   _sendstr1
02BD           1205   ;        main.c:282: getstr1(buff, sizeof(buff)-1);
02BD 75C813    1206            mov     _getstr1_PARM_2,#0x13
02C0 904788    1207            mov     dptr,#_buff
02C3 75F040    1208            mov     b,#0x40
02C6 120000    1209            lcall   _getstr1
02C9           1210   ;        main.c:283: waitms(10);
02C9 90000A    1211            mov     dptr,#0x000A
02CC 120000    1212            lcall   _waitms
02CF           1213   ;        main.c:284: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1214            setb    _P2_0
02D1           1215   ;        main.c:285: printf("Response: %s\r\n", buff);
02D1 7488      1216            mov     a,#_buff
02D3 C0E0      1217            push    acc
02D5 7447      1218            mov     a,#(_buff >> 8)
02D7 C0E0      1219            push    acc
02D9 7440      1220            mov     a,#0x40
02DB C0E0      1221            push    acc
02DD 7428      1222            mov     a,#__str_1
02DF C0E0      1223            push    acc
02E1 74C1      1224            mov     a,#(__str_1 >> 8)
02E3 C0E0      1225            push    acc
02E5 7480      1226            mov     a,#0x80
02E7 C0E0      1227            push    acc
02E9 120000    1228            lcall   _printf
02EC E581      1229            mov     a,sp
02EE 24FA      1230            add     a,#0xfa
02F0 F581      1231            mov     sp,a
02F2 22        1232            ret
02F3           1233   ;------------------------------------------------------------
02F3           1234   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1235   ;------------------------------------------------------------
02F3           1236   ;------------------------------------------------------------
02F3           1237   ;        main.c:288: void ReceptionOff (void)
02F3           1238   ;        -----------------------------------------
02F3           1239   ;         function ReceptionOff
02F3           1240   ;        -----------------------------------------
02F3           1241   _ReceptionOff:
02F3           1242   ;        main.c:290: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1243            clr     _P2_0
02F5           1244   ;        main.c:291: waitms(10);
02F5 90000A    1245            mov     dptr,#0x000A
02F8 120000    1246            lcall   _waitms
02FB           1247   ;        main.c:292: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C168    1248            mov     dptr,#__str_2
02FE 75F080    1249            mov     b,#0x80
0301 120000    1250            lcall   _sendstr1
0304           1251   ;        main.c:293: waitms(10);
0304 90000A    1252            mov     dptr,#0x000A
0307 120000    1253            lcall   _waitms
030A           1254   ;        main.c:295: SCON1&=0b_0011_1111;
030A 53C83F    1255            anl     _SCON1,#0x3F
030D           1256   ;        main.c:296: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1257            setb    _P2_0
030F 22        1258            ret
0310           1259   ;------------------------------------------------------------
0310           1260   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1261   ;------------------------------------------------------------
0310           1262   ;pin                       Allocated to registers r2 
0310           1263   ;mask                      Allocated to registers r3 
0310           1264   ;------------------------------------------------------------
0310           1265   ;        main.c:299: void Set_Pin_Output (unsigned char pin)
0310           1266   ;        -----------------------------------------
0310           1267   ;         function Set_Pin_Output
0310           1268   ;        -----------------------------------------
0310           1269   _Set_Pin_Output:
0310 AA82      1270            mov     r2,dpl
0312           1271   ;        main.c:303: mask=(1<<(pin&0x7));
0312 7407      1272            mov     a,#0x07
0314 5A        1273            anl     a,r2
0315 F5F0      1274            mov     b,a
0317 05F0      1275            inc     b
0319 7401      1276            mov     a,#0x01
031B 8000      1277            sjmp    L015011?
031D           1278   L015009?:
031D 25E0      1279            add     a,acc
031F           1280   L015011?:
031F D5F0E8    1281            djnz    b,L015009?
0322 FB        1282            mov     r3,a
0323           1283   ;        main.c:304: switch(pin/0x10)
0323 EA        1284            mov     a,r2
0324 C4        1285            swap    a
0325 540F      1286            anl     a,#0x0f
0327 FA        1287            mov  r2,a
0328 24FC      1288            add     a,#0xff - 0x03
032A 4000      1289            jc      L015006?
032C EA        1290            mov     a,r2
032D 2A        1291            add     a,r2
032E 2A        1292            add     a,r2
032F 90C268    1293            mov     dptr,#L015013?
0332 73        1294            jmp     @a+dptr
0333           1295   L015013?:
0333 020000    1296            ljmp    L015001?
0336 020000    1297            ljmp    L015002?
0339 020000    1298            ljmp    L015003?
033C 020000    1299            ljmp    L015004?
033F           1300   ;        main.c:306: case 0: P0MDOUT |= mask; break;
033F           1301   L015001?:
033F EB        1302            mov     a,r3
0340 42A4      1303            orl     _P0MDOUT,a
0342           1304   ;        main.c:307: case 1: P1MDOUT |= mask; break;
0342 22        1305            ret
0343           1306   L015002?:
0343 EB        1307            mov     a,r3
0344 42A5      1308            orl     _P1MDOUT,a
0346           1309   ;        main.c:308: case 2: P2MDOUT |= mask; break; 
0346 22        1310            ret
0347           1311   L015003?:
0347 EB        1312            mov     a,r3
0348 42A6      1313            orl     _P2MDOUT,a
034A           1314   ;        main.c:309: case 3: P3MDOUT |= mask; break; 
034A 22        1315            ret
034B           1316   L015004?:
034B EB        1317            mov     a,r3
034C 429C      1318            orl     _P3MDOUT,a
034E           1319   ;        main.c:310: }   
034E           1320   L015006?:
034E 22        1321            ret
034F           1322   ;------------------------------------------------------------
034F           1323   ;Allocation info for local variables in function 'InitADC'
034F           1324   ;------------------------------------------------------------
034F           1325   ;------------------------------------------------------------
034F           1326   ;        main.c:313: void InitADC (void)
034F           1327   ;        -----------------------------------------
034F           1328   ;         function InitADC
034F           1329   ;        -----------------------------------------
034F           1330   _InitADC:
034F           1331   ;        main.c:315: SFRPAGE = 0x00;
034F 75A700    1332            mov     _SFRPAGE,#0x00
0352           1333   ;        main.c:316: ADEN=0; // Disable ADC
0352 C2EF      1334            clr     _ADEN
0354           1335   ;        main.c:321: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0354 75B280    1336            mov     _ADC0CN1,#0x80
0357           1337   ;        main.c:325: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0357 75BC20    1338            mov     _ADC0CF0,#0x20
035A           1339   ;        main.c:329: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
035A 75B91E    1340            mov     _ADC0CF1,#0x1E
035D           1341   ;        main.c:338: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
035D 75E800    1342            mov     _ADC0CN0,#0x00
0360           1343   ;        main.c:343: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0360 75DF3F    1344            mov     _ADC0CF2,#0x3F
0363           1345   ;        main.c:347: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0363 75B300    1346            mov     _ADC0CN2,#0x00
0366           1347   ;        main.c:349: ADEN=1; // Enable ADC
0366 D2EF      1348            setb    _ADEN
0368 22        1349            ret
0369           1350   ;------------------------------------------------------------
0369           1351   ;Allocation info for local variables in function 'InitPinADC'
0369           1352   ;------------------------------------------------------------
0369           1353   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0369           1354   ;portno                    Allocated to registers r2 
0369           1355   ;mask                      Allocated to registers r3 
0369           1356   ;------------------------------------------------------------
0369           1357   ;        main.c:352: void InitPinADC (unsigned char portno, unsigned char pin_num)
0369           1358   ;        -----------------------------------------
0369           1359   ;         function InitPinADC
0369           1360   ;        -----------------------------------------
0369           1361   _InitPinADC:
0369 AA82      1362            mov     r2,dpl
036B           1363   ;        main.c:356: mask=1<<pin_num;
036B 8568F0    1364            mov     b,_InitPinADC_PARM_2
036E 05F0      1365            inc     b
0370 7401      1366            mov     a,#0x01
0372 8000      1367            sjmp    L017013?
0374           1368   L017011?:
0374 25E0      1369            add     a,acc
0376           1370   L017013?:
0376 D5F0E8    1371            djnz    b,L017011?
0379 FB        1372            mov     r3,a
037A           1373   ;        main.c:358: SFRPAGE = 0x20;
037A 75A720    1374            mov     _SFRPAGE,#0x20
037D           1375   ;        main.c:359: switch (portno)
037D BA0028    1376            cjne    r2,#0x00,L017014?
0380 8000      1377            sjmp    L017001?
0382           1378   L017014?:
0382 BA01A8    1379            cjne    r2,#0x01,L017015?
0385 8000      1380            sjmp    L017002?
0387           1381   L017015?:
0387           1382   ;        main.c:361: case 0:
0387 BA0228    1383            cjne    r2,#0x02,L017005?
038A 8000      1384            sjmp    L017003?
038C           1385   L017001?:
038C           1386   ;        main.c:362: P0MDIN &= (~mask); // Set pin as analog input
038C EB        1387            mov     a,r3
038D F4        1388            cpl     a
038E FA        1389            mov     r2,a
038F 52F1      1390            anl     _P0MDIN,a
0391           1391   ;        main.c:363: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0391 EB        1392            mov     a,r3
0392 42D4      1393            orl     _P0SKIP,a
0394           1394   ;        main.c:364: break;
0394           1395   ;        main.c:365: case 1:
0394 8000      1396            sjmp    L017005?
0396           1397   L017002?:
0396           1398   ;        main.c:366: P1MDIN &= (~mask); // Set pin as analog input
0396 EB        1399            mov     a,r3
0397 F4        1400            cpl     a
0398 FA        1401            mov     r2,a
0399 52F2      1402            anl     _P1MDIN,a
039B           1403   ;        main.c:367: P1SKIP |= mask; // Skip Crossbar decoding for this pin
039B EB        1404            mov     a,r3
039C 42D5      1405            orl     _P1SKIP,a
039E           1406   ;        main.c:368: break;
039E           1407   ;        main.c:369: case 2:
039E 8000      1408            sjmp    L017005?
03A0           1409   L017003?:
03A0           1410   ;        main.c:370: P2MDIN &= (~mask); // Set pin as analog input
03A0 EB        1411            mov     a,r3
03A1 F4        1412            cpl     a
03A2 FA        1413            mov     r2,a
03A3 52F3      1414            anl     _P2MDIN,a
03A5           1415   ;        main.c:371: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03A5 EB        1416            mov     a,r3
03A6 42CC      1417            orl     _P2SKIP,a
03A8           1418   ;        main.c:375: }
03A8           1419   L017005?:
03A8           1420   ;        main.c:376: SFRPAGE = 0x00;
03A8 75A700    1421            mov     _SFRPAGE,#0x00
03AB 22        1422            ret
03AC           1423   ;------------------------------------------------------------
03AC           1424   ;Allocation info for local variables in function 'ADC_at_Pin'
03AC           1425   ;------------------------------------------------------------
03AC           1426   ;pin                       Allocated to registers 
03AC           1427   ;------------------------------------------------------------
03AC           1428   ;        main.c:379: unsigned int ADC_at_Pin(unsigned char pin)
03AC           1429   ;        -----------------------------------------
03AC           1430   ;         function ADC_at_Pin
03AC           1431   ;        -----------------------------------------
03AC           1432   _ADC_at_Pin:
03AC 8582BB    1433            mov     _ADC0MX,dpl
03AF           1434   ;        main.c:382: ADINT = 0;
03AF C2ED      1435            clr     _ADINT
03B1           1436   ;        main.c:383: ADBUSY = 1;     // Convert voltage at the pin
03B1 D2EC      1437            setb    _ADBUSY
03B3           1438   ;        main.c:384: while (!ADINT); // Wait for conversion to complete
03B3           1439   L018001?:
03B3 30EDA8    1440            jnb     _ADINT,L018001?
03B6           1441   ;        main.c:385: return (ADC0);
03B6 85BD82    1442            mov     dpl,_ADC0
03B9 85BE83    1443            mov     dph,(_ADC0 >> 8)
03BC 22        1444            ret
03BD           1445   ;------------------------------------------------------------
03BD           1446   ;Allocation info for local variables in function 'Timer5_ISR'
03BD           1447   ;------------------------------------------------------------
03BD           1448   ;------------------------------------------------------------
03BD           1449   ;        main.c:388: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03BD           1450   ;        -----------------------------------------
03BD           1451   ;         function Timer5_ISR
03BD           1452   ;        -----------------------------------------
03BD           1453   _Timer5_ISR:
03BD C0E0      1454            push    acc
03BF C002      1455            push    ar2
03C1 C003      1456            push    ar3
03C3 C0D0      1457            push    psw
03C5 75D000    1458            mov     psw,#0x00
03C8           1459   ;        main.c:390: SFRPAGE=0x10;
03C8 75A710    1460            mov     _SFRPAGE,#0x10
03CB           1461   ;        main.c:391: TF5H = 0; // Clear Timer5 interrupt flag
03CB C2C7      1462            clr     _TF5H
03CD           1463   ;        main.c:392: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
03CD 75D2C4    1464            mov     _TMR5RL,#0xC4
03D0 75D3FF    1465            mov     (_TMR5RL >> 8),#0xFF
03D3           1466   ;        main.c:394: pwm_counter++; 
03D3 0508      1467            inc     _pwm_counter
03D5 E4        1468            clr     a
03D6 B50828    1469            cjne    a,_pwm_counter,L019022?
03D9 0509      1470            inc     (_pwm_counter + 1)
03DB           1471   L019022?:
03DB           1472   ;        main.c:395: if (pwm_counter == 100){
03DB 7464      1473            mov     a,#0x64
03DD B50868    1474            cjne    a,_pwm_counter,L019023?
03E0 E4        1475            clr     a
03E1 B50968    1476            cjne    a,(_pwm_counter + 1),L019023?
03E4 8000      1477            sjmp    L019024?
03E6           1478   L019023?:
03E6 8000      1479            sjmp    L019002?
03E8           1480   L019024?:
03E8           1481   ;        main.c:396: pwm_counter = 0; 
03E8 E4        1482            clr     a
03E9 F508      1483            mov     _pwm_counter,a
03EB F509      1484            mov     (_pwm_counter + 1),a
03ED           1485   L019002?:
03ED           1486   ;        main.c:399: if (pwm_left > pwm_counter){
03ED AAC8      1487            mov     r2,_pwm_left
03EF 7B00      1488            mov     r3,#0x00
03F1 C3        1489            clr     c
03F2 E508      1490            mov     a,_pwm_counter
03F4 9A        1491            subb    a,r2
03F5 E509      1492            mov     a,(_pwm_counter + 1)
03F7 9B        1493            subb    a,r3
03F8 5000      1494            jnc     L019007?
03FA           1495   ;        main.c:400: if(L_motor_dir){
03FA E548      1496            mov     a,_L_motor_dir
03FC 6000      1497            jz      L019004?
03FE           1498   ;        main.c:401: L_bridge_1 = 1; 
03FE D2A1      1499            setb    _P2_1
0400           1500   ;        main.c:402: L_bridge_2 = 0; 
0400 C2A2      1501            clr     _P2_2
0402 8000      1502            sjmp    L019008?
0404           1503   L019004?:
0404           1504   ;        main.c:405: L_bridge_1 = 0; 
0404 C2A1      1505            clr     _P2_1
0406           1506   ;        main.c:406: L_bridge_2 = 1; 
0406 D2A2      1507            setb    _P2_2
0408 8000      1508            sjmp    L019008?
040A           1509   L019007?:
040A           1510   ;        main.c:410: L_bridge_1 = 0; 
040A C2A1      1511            clr     _P2_1
040C           1512   ;        main.c:411: L_bridge_2 = 0; 
040C C2A2      1513            clr     _P2_2
040E           1514   L019008?:
040E           1515   ;        main.c:413: if (pwm_right > pwm_counter){
040E AA88      1516            mov     r2,_pwm_right
0410 7B00      1517            mov     r3,#0x00
0412 C3        1518            clr     c
0413 E508      1519            mov     a,_pwm_counter
0415 9A        1520            subb    a,r2
0416 E509      1521            mov     a,(_pwm_counter + 1)
0418 9B        1522            subb    a,r3
0419 5000      1523            jnc     L019013?
041B           1524   ;        main.c:414: if (R_motor_dir){
041B E508      1525            mov     a,_R_motor_dir
041D 6000      1526            jz      L019010?
041F           1527   ;        main.c:415: R_bridge_1 = 1; 
041F D2A4      1528            setb    _P2_4
0421           1529   ;        main.c:416: R_bridge_2 = 0;
0421 C2A3      1530            clr     _P2_3
0423 8000      1531            sjmp    L019015?
0425           1532   L019010?:
0425           1533   ;        main.c:419: R_bridge_1 = 0; 
0425 C2A4      1534            clr     _P2_4
0427           1535   ;        main.c:420: R_bridge_2 = 1;
0427 D2A3      1536            setb    _P2_3
0429 8000      1537            sjmp    L019015?
042B           1538   L019013?:
042B           1539   ;        main.c:424: R_bridge_1 = 0; 
042B C2A4      1540            clr     _P2_4
042D           1541   ;        main.c:425: R_bridge_2 = 0; 
042D C2A3      1542            clr     _P2_3
042F           1543   L019015?:
042F D0D0      1544            pop     psw
0431 D003      1545            pop     ar3
0433 D002      1546            pop     ar2
0435 D0E0      1547            pop     acc
0437 32        1548            reti
0438           1549   ;        eliminated unneeded push/pop dpl
0438           1550   ;        eliminated unneeded push/pop dph
0438           1551   ;        eliminated unneeded push/pop b
0438           1552   ;------------------------------------------------------------
0438           1553   ;Allocation info for local variables in function 'MoveForward'
0438           1554   ;------------------------------------------------------------
0438           1555   ;speed                     Allocated to registers r2 r3 
0438           1556   ;------------------------------------------------------------
0438           1557   ;        main.c:429: void MoveForward (int speed)
0438           1558   ;        -----------------------------------------
0438           1559   ;         function MoveForward
0438           1560   ;        -----------------------------------------
0438           1561   _MoveForward:
0438 AA82      1562            mov     r2,dpl
043A           1563   ;        main.c:431: pwm_left = speed; 
043A 8AC8      1564            mov     _pwm_left,r2
043C           1565   ;        main.c:432: pwm_right = speed; 
043C 8A88      1566            mov     _pwm_right,r2
043E           1567   ;        main.c:433: L_motor_dir = 1; 
043E 754801    1568            mov     _L_motor_dir,#0x01
0441           1569   ;        main.c:434: R_motor_dir = 1; 
0441 750801    1570            mov     _R_motor_dir,#0x01
0444 22        1571            ret
0445           1572   ;------------------------------------------------------------
0445           1573   ;Allocation info for local variables in function 'MoveBackward'
0445           1574   ;------------------------------------------------------------
0445           1575   ;speed                     Allocated to registers r2 r3 
0445           1576   ;------------------------------------------------------------
0445           1577   ;        main.c:437: void MoveBackward (int speed)
0445           1578   ;        -----------------------------------------
0445           1579   ;         function MoveBackward
0445           1580   ;        -----------------------------------------
0445           1581   _MoveBackward:
0445 AA82      1582            mov     r2,dpl
0447           1583   ;        main.c:439: pwm_left = speed; 
0447 8AC8      1584            mov     _pwm_left,r2
0449           1585   ;        main.c:440: pwm_right = speed; 
0449 8A88      1586            mov     _pwm_right,r2
044B           1587   ;        main.c:441: L_motor_dir = 0; 
044B 754800    1588            mov     _L_motor_dir,#0x00
044E           1589   ;        main.c:442: R_motor_dir = 0;  
044E 750800    1590            mov     _R_motor_dir,#0x00
0451 22        1591            ret
0452           1592   ;------------------------------------------------------------
0452           1593   ;Allocation info for local variables in function 'TurnRight'
0452           1594   ;------------------------------------------------------------
0452           1595   ;speed                     Allocated to registers r2 r3 
0452           1596   ;------------------------------------------------------------
0452           1597   ;        main.c:445: void TurnRight (int speed)
0452           1598   ;        -----------------------------------------
0452           1599   ;         function TurnRight
0452           1600   ;        -----------------------------------------
0452           1601   _TurnRight:
0452 AA82      1602            mov     r2,dpl
0454           1603   ;        main.c:447: pwm_left = speed; 
0454 8AC8      1604            mov     _pwm_left,r2
0456           1605   ;        main.c:448: pwm_right = speed; 
0456 8A88      1606            mov     _pwm_right,r2
0458           1607   ;        main.c:449: L_motor_dir = 1; 
0458 754801    1608            mov     _L_motor_dir,#0x01
045B           1609   ;        main.c:450: R_motor_dir = 0; 
045B 750800    1610            mov     _R_motor_dir,#0x00
045E 22        1611            ret
045F           1612   ;------------------------------------------------------------
045F           1613   ;Allocation info for local variables in function 'TurnLeft'
045F           1614   ;------------------------------------------------------------
045F           1615   ;speed                     Allocated to registers r2 r3 
045F           1616   ;------------------------------------------------------------
045F           1617   ;        main.c:453: void TurnLeft (int speed)
045F           1618   ;        -----------------------------------------
045F           1619   ;         function TurnLeft
045F           1620   ;        -----------------------------------------
045F           1621   _TurnLeft:
045F AA82      1622            mov     r2,dpl
0461           1623   ;        main.c:455: pwm_left = speed; 
0461 8AC8      1624            mov     _pwm_left,r2
0463           1625   ;        main.c:456: pwm_right = speed; 
0463 8A88      1626            mov     _pwm_right,r2
0465           1627   ;        main.c:457: L_motor_dir = 0; 
0465 754800    1628            mov     _L_motor_dir,#0x00
0468           1629   ;        main.c:458: R_motor_dir = 1; 
0468 750801    1630            mov     _R_motor_dir,#0x01
046B 22        1631            ret
046C           1632   ;------------------------------------------------------------
046C           1633   ;Allocation info for local variables in function 'main'
046C           1634   ;------------------------------------------------------------
046C           1635   ;cnt                       Allocated to registers 
046C           1636   ;c                         Allocated to registers r4 
046C           1637   ;vx                        Allocated with name '_main_vx_1_127'
046C           1638   ;vy                        Allocated with name '_main_vy_1_127'
046C           1639   ;threshold                 Allocated to registers 
046C           1640   ;motor_pwm                 Allocated with name '_main_motor_pwm_1_127'
046C           1641   ;sloc0                     Allocated with name '_main_sloc0_1_0'
046C           1642   ;------------------------------------------------------------
046C           1643   ;        main.c:461: void main (void)
046C           1644   ;        -----------------------------------------
046C           1645   ;         function main
046C           1646   ;        -----------------------------------------
046C           1647   _main:
046C           1648   ;        main.c:465: int vx = 0, vy = 0; 
046C E4        1649            clr     a
046D F508      1650            mov     _main_vx_1_127,a
046F F509      1651            mov     (_main_vx_1_127 + 1),a
0471 F548      1652            mov     _main_vy_1_127,a
0473 F549      1653            mov     (_main_vy_1_127 + 1),a
0475           1654   ;        main.c:470: waitms(500);
0475 9001F4    1655            mov     dptr,#0x01F4
0478 120000    1656            lcall   _waitms
047B           1657   ;        main.c:471: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
047B 74A8      1658            mov     a,#__str_3
047D C0E0      1659            push    acc
047F 74C8      1660            mov     a,#(__str_3 >> 8)
0481 C0E0      1661            push    acc
0483 7480      1662            mov     a,#0x80
0485 C0E0      1663            push    acc
0487 120000    1664            lcall   _printf
048A 1581      1665            dec     sp
048C 1581      1666            dec     sp
048E 1581      1667            dec     sp
0490           1668   ;        main.c:472: UART1_Init(9600);
0490 902580    1669            mov     dptr,#0x2580
0493 E4        1670            clr     a
0494 F5F0      1671            mov     b,a
0496 120000    1672            lcall   _UART1_Init
0499           1673   ;        main.c:474: ReceptionOff();
0499 120000    1674            lcall   _ReceptionOff
049C           1675   ;        main.c:477: SendATCommand("AT+VER\r\n");
049C 90C8E8    1676            mov     dptr,#__str_4
049F 75F080    1677            mov     b,#0x80
04A2 120000    1678            lcall   _SendATCommand
04A5           1679   ;        main.c:478: SendATCommand("AT+BAUD\r\n");
04A5 90C928    1680            mov     dptr,#__str_5
04A8 75F080    1681            mov     b,#0x80
04AB 120000    1682            lcall   _SendATCommand
04AE           1683   ;        main.c:479: SendATCommand("AT+RFID\r\n");
04AE 90C968    1684            mov     dptr,#__str_6
04B1 75F080    1685            mov     b,#0x80
04B4 120000    1686            lcall   _SendATCommand
04B7           1687   ;        main.c:480: SendATCommand("AT+DVID\r\n");
04B7 90C9A8    1688            mov     dptr,#__str_7
04BA 75F080    1689            mov     b,#0x80
04BD 120000    1690            lcall   _SendATCommand
04C0           1691   ;        main.c:481: SendATCommand("AT+RFC\r\n");
04C0 90C9E8    1692            mov     dptr,#__str_8
04C3 75F080    1693            mov     b,#0x80
04C6 120000    1694            lcall   _SendATCommand
04C9           1695   ;        main.c:482: SendATCommand("AT+POWE\r\n");
04C9 90CA28    1696            mov     dptr,#__str_9
04CC 75F080    1697            mov     b,#0x80
04CF 120000    1698            lcall   _SendATCommand
04D2           1699   ;        main.c:483: SendATCommand("AT+CLSS\r\n");
04D2 90CA68    1700            mov     dptr,#__str_10
04D5 75F080    1701            mov     b,#0x80
04D8 120000    1702            lcall   _SendATCommand
04DB           1703   ;        main.c:484: SendATCommand("AT+DVIDEFEF\r\n");  
04DB 90CAA8    1704            mov     dptr,#__str_11
04DE 75F080    1705            mov     b,#0x80
04E1 120000    1706            lcall   _SendATCommand
04E4           1707   ;        main.c:487: L_bridge_1 = 0; 
04E4 C2A1      1708            clr     _P2_1
04E6           1709   ;        main.c:488: L_bridge_2 = 0; 
04E6 C2A2      1710            clr     _P2_2
04E8           1711   ;        main.c:489: R_bridge_1 = 0; 
04E8 C2A4      1712            clr     _P2_4
04EA           1713   ;        main.c:490: R_bridge_2 = 0; 
04EA C2A3      1714            clr     _P2_3
04EC           1715   ;        main.c:493: while(1)
04EC 7A00      1716            mov     r2,#0x00
04EE 7B00      1717            mov     r3,#0x00
04F0           1718   L024019?:
04F0           1719   ;        main.c:495: Set_Pin_Output(0x24);
04F0 758224    1720            mov     dpl,#0x24
04F3 C002      1721            push    ar2
04F5 C003      1722            push    ar3
04F7 120000    1723            lcall   _Set_Pin_Output
04FA           1724   ;        main.c:496: Set_Pin_Output(0x23);
04FA 758223    1725            mov     dpl,#0x23
04FD 120000    1726            lcall   _Set_Pin_Output
0500           1727   ;        main.c:497: Set_Pin_Output(0x22);
0500 758222    1728            mov     dpl,#0x22
0503 120000    1729            lcall   _Set_Pin_Output
0506           1730   ;        main.c:498: Set_Pin_Output(0x21);
0506 758221    1731            mov     dpl,#0x21
0509 120000    1732            lcall   _Set_Pin_Output
050C           1733   ;        main.c:501: if(RXU1()) // Something has arrived
050C 120000    1734            lcall   _RXU1
050F E4        1735            clr     a
0510 33        1736            rlc     a
0511 D003      1737            pop     ar3
0513 D002      1738            pop     ar2
0515 6000      1739            jz      L024019?
0517           1740   ;        main.c:503: c=getchar1();
0517 C002      1741            push    ar2
0519 C003      1742            push    ar3
051B 120000    1743            lcall   _getchar1
051E AC82      1744            mov     r4,dpl
0520 D003      1745            pop     ar3
0522 D002      1746            pop     ar2
0524           1747   ;        main.c:505: if(c=='!') // Master is sending message
0524 BC2128    1748            cjne    r4,#0x21,L024032?
0527 8000      1749            sjmp    L024033?
0529           1750   L024032?:
0529 020000    1751            ljmp    L024014?
052C           1752   L024033?:
052C           1753   ;        main.c:507: getstr1(buff, sizeof(buff)-1);
052C 75C813    1754            mov     _getstr1_PARM_2,#0x13
052F 904788    1755            mov     dptr,#_buff
0532 75F040    1756            mov     b,#0x40
0535 C002      1757            push    ar2
0537 C003      1758            push    ar3
0539 120000    1759            lcall   _getstr1
053C           1760   ;        main.c:517: sscanf(buff, "%03d,%03d", &vx, &vy);
053C 7448      1761            mov     a,#_main_vy_1_127
053E C0E0      1762            push    acc
0540 74B6      1763            mov     a,#(_main_vy_1_127 >> 8)
0542 C0E0      1764            push    acc
0544 7440      1765            mov     a,#0x40
0546 C0E0      1766            push    acc
0548 7408      1767            mov     a,#_main_vx_1_127
054A C0E0      1768            push    acc
054C 74B6      1769            mov     a,#(_main_vx_1_127 >> 8)
054E C0E0      1770            push    acc
0550 7440      1771            mov     a,#0x40
0552 C0E0      1772            push    acc
0554 74E8      1773            mov     a,#__str_12
0556 C0E0      1774            push    acc
0558 74CB      1775            mov     a,#(__str_12 >> 8)
055A C0E0      1776            push    acc
055C 7480      1777            mov     a,#0x80
055E C0E0      1778            push    acc
0560 7488      1779            mov     a,#_buff
0562 C0E0      1780            push    acc
0564 7447      1781            mov     a,#(_buff >> 8)
0566 C0E0      1782            push    acc
0568 7440      1783            mov     a,#0x40
056A C0E0      1784            push    acc
056C 120000    1785            lcall   _sscanf
056F E581      1786            mov     a,sp
0571 24F4      1787            add     a,#0xf4
0573 F581      1788            mov     sp,a
0575           1789   ;        main.c:519: printf("Joystick Received: Vx = %03d, Vy = %03d\r\n", vx, vy);
0575 C048      1790            push    _main_vy_1_127
0577 C049      1791            push    (_main_vy_1_127 + 1)
0579 C008      1792            push    _main_vx_1_127
057B C009      1793            push    (_main_vx_1_127 + 1)
057D 7468      1794            mov     a,#__str_13
057F C0E0      1795            push    acc
0581 74CC      1796            mov     a,#(__str_13 >> 8)
0583 C0E0      1797            push    acc
0585 7480      1798            mov     a,#0x80
0587 C0E0      1799            push    acc
0589 120000    1800            lcall   _printf
058C E581      1801            mov     a,sp
058E 24F9      1802            add     a,#0xf9
0590 F581      1803            mov     sp,a
0592           1804   ;        main.c:521: if (vy > threshold){
0592 854882    1805            mov     dpl,_main_vy_1_127
0595 854983    1806            mov     dph,(_main_vy_1_127 + 1)
0598 120000    1807            lcall   ___sint2fs
059B 8582D8    1808            mov     _main_sloc0_1_0,dpl
059E 8583D9    1809            mov     (_main_sloc0_1_0 + 1),dph
05A1 85F0DA    1810            mov     (_main_sloc0_1_0 + 2),b
05A4 F5DB      1811            mov     (_main_sloc0_1_0 + 3),a
05A6 E4        1812            clr     a
05A7 C0E0      1813            push    acc
05A9 C0E0      1814            push    acc
05AB 7421      1815            mov     a,#0x21
05AD C0E0      1816            push    acc
05AF 7443      1817            mov     a,#0x43
05B1 C0E0      1818            push    acc
05B3 85D882    1819            mov     dpl,_main_sloc0_1_0
05B6 85D983    1820            mov     dph,(_main_sloc0_1_0 + 1)
05B9 85DAF0    1821            mov     b,(_main_sloc0_1_0 + 2)
05BC E5DB      1822            mov     a,(_main_sloc0_1_0 + 3)
05BE 120000    1823            lcall   ___fsgt
05C1 AD82      1824            mov     r5,dpl
05C3 E581      1825            mov     a,sp
05C5 24FC      1826            add     a,#0xfc
05C7 F581      1827            mov     sp,a
05C9 D003      1828            pop     ar3
05CB D002      1829            pop     ar2
05CD ED        1830            mov     a,r5
05CE 7000      1831            jnz     L024034?
05D0 020000    1832            ljmp    L024004?
05D3           1833   L024034?:
05D3           1834   ;        main.c:522: motor_pwm = abs(vy - threshold) * 100 / threshold; 
05D3 C002      1835            push    ar2
05D5 C003      1836            push    ar3
05D7 C003      1837            push    ar3
05D9 E4        1838            clr     a
05DA C0E0      1839            push    acc
05DC C0E0      1840            push    acc
05DE 7421      1841            mov     a,#0x21
05E0 C0E0      1842            push    acc
05E2 7443      1843            mov     a,#0x43
05E4 C0E0      1844            push    acc
05E6 85D882    1845            mov     dpl,_main_sloc0_1_0
05E9 85D983    1846            mov     dph,(_main_sloc0_1_0 + 1)
05EC 85DAF0    1847            mov     b,(_main_sloc0_1_0 + 2)
05EF E5DB      1848            mov     a,(_main_sloc0_1_0 + 3)
05F1 120000    1849            lcall   ___fssub
05F4 AD82      1850            mov     r5,dpl
05F6 AE83      1851            mov     r6,dph
05F8 AFF0      1852            mov     r7,b
05FA FA        1853            mov     r2,a
05FB E581      1854            mov     a,sp
05FD 24FC      1855            add     a,#0xfc
05FF F581      1856            mov     sp,a
0601 D003      1857            pop     ar3
0603 8D82      1858            mov     dpl,r5
0605 8E83      1859            mov     dph,r6
0607 8FF0      1860            mov     b,r7
0609 EA        1861            mov     a,r2
060A C002      1862            push    ar2
060C C003      1863            push    ar3
060E 120000    1864            lcall   ___fs2sint
0611 120000    1865            lcall   _abs
0614 858200    1866            mov     __mulint_PARM_2,dpl
0617 858301    1867            mov     (__mulint_PARM_2 + 1),dph
061A D003      1868            pop     ar3
061C D002      1869            pop     ar2
061E 900064    1870            mov     dptr,#0x0064
0621 120000    1871            lcall   __mulint
0624 120000    1872            lcall   ___sint2fs
0627 AA82      1873            mov     r2,dpl
0629 AB83      1874            mov     r3,dph
062B ADF0      1875            mov     r5,b
062D FE        1876            mov     r6,a
062E E4        1877            clr     a
062F C0E0      1878            push    acc
0631 C0E0      1879            push    acc
0633 7421      1880            mov     a,#0x21
0635 C0E0      1881            push    acc
0637 7443      1882            mov     a,#0x43
0639 C0E0      1883            push    acc
063B 8A82      1884            mov     dpl,r2
063D 8B83      1885            mov     dph,r3
063F 8DF0      1886            mov     b,r5
0641 EE        1887            mov     a,r6
0642 120000    1888            lcall   ___fsdiv
0645 AA82      1889            mov     r2,dpl
0647 AB83      1890            mov     r3,dph
0649 ADF0      1891            mov     r5,b
064B FE        1892            mov     r6,a
064C E581      1893            mov     a,sp
064E 24FC      1894            add     a,#0xfc
0650 F581      1895            mov     sp,a
0652 8A82      1896            mov     dpl,r2
0654 8B83      1897            mov     dph,r3
0656 8DF0      1898            mov     b,r5
0658 EE        1899            mov     a,r6
0659 C002      1900            push    ar2
065B C003      1901            push    ar3
065D 120000    1902            lcall   ___fs2sint
0660           1903   ;        main.c:523: MoveForward(motor_pwm);
0660 858298    1904            mov     _main_motor_pwm_1_127,dpl
0663 858399    1905            mov  (_main_motor_pwm_1_127 + 1),dph
0666 120000    1906            lcall   _MoveForward
0669 D003      1907            pop     ar3
066B D002      1908            pop     ar2
066D D003      1909            pop     ar3
066F D002      1910            pop     ar2
0671 020000    1911            ljmp    L024005?
0674           1912   L024004?:
0674           1913   ;        main.c:525: else if (vy < threshold){
0674 C002      1914            push    ar2
0676 C003      1915            push    ar3
0678 E4        1916            clr     a
0679 C0E0      1917            push    acc
067B C0E0      1918            push    acc
067D 7421      1919            mov     a,#0x21
067F C0E0      1920            push    acc
0681 7443      1921            mov     a,#0x43
0683 C0E0      1922            push    acc
0685 85D882    1923            mov     dpl,_main_sloc0_1_0
0688 85D983    1924            mov     dph,(_main_sloc0_1_0 + 1)
068B 85DAF0    1925            mov     b,(_main_sloc0_1_0 + 2)
068E E5DB      1926            mov     a,(_main_sloc0_1_0 + 3)
0690 120000    1927            lcall   ___fslt
0693 AD82      1928            mov     r5,dpl
0695 E581      1929            mov     a,sp
0697 24FC      1930            add     a,#0xfc
0699 F581      1931            mov     sp,a
069B D003      1932            pop     ar3
069D D002      1933            pop     ar2
069F ED        1934            mov     a,r5
06A0 7000      1935            jnz     L024035?
06A2 020000    1936            ljmp    L024005?
06A5           1937   L024035?:
06A5           1938   ;        main.c:526: motor_pwm = abs(threshold - vy) * 100 / threshold; 
06A5 C002      1939            push    ar2
06A7 C003      1940            push    ar3
06A9 C003      1941            push    ar3
06AB C0D8      1942            push    _main_sloc0_1_0
06AD C0D9      1943            push    (_main_sloc0_1_0 + 1)
06AF C0DA      1944            push    (_main_sloc0_1_0 + 2)
06B1 C0DB      1945            push    (_main_sloc0_1_0 + 3)
06B3 900000    1946            mov     dptr,#0x0000
06B6 75F021    1947            mov     b,#0x21
06B9 7443      1948            mov     a,#0x43
06BB 120000    1949            lcall   ___fssub
06BE AD82      1950            mov     r5,dpl
06C0 AE83      1951            mov     r6,dph
06C2 AFF0      1952            mov     r7,b
06C4 FA        1953            mov     r2,a
06C5 E581      1954            mov     a,sp
06C7 24FC      1955            add     a,#0xfc
06C9 F581      1956            mov     sp,a
06CB D003      1957            pop     ar3
06CD 8D82      1958            mov     dpl,r5
06CF 8E83      1959            mov     dph,r6
06D1 8FF0      1960            mov     b,r7
06D3 EA        1961            mov     a,r2
06D4 C002      1962            push    ar2
06D6 C003      1963            push    ar3
06D8 120000    1964            lcall   ___fs2sint
06DB 120000    1965            lcall   _abs
06DE 858200    1966            mov     __mulint_PARM_2,dpl
06E1 858301    1967            mov     (__mulint_PARM_2 + 1),dph
06E4 D003      1968            pop     ar3
06E6 D002      1969            pop     ar2
06E8 900064    1970            mov     dptr,#0x0064
06EB 120000    1971            lcall   __mulint
06EE 120000    1972            lcall   ___sint2fs
06F1 AA82      1973            mov     r2,dpl
06F3 AB83      1974            mov     r3,dph
06F5 ADF0      1975            mov     r5,b
06F7 FE        1976            mov     r6,a
06F8 E4        1977            clr     a
06F9 C0E0      1978            push    acc
06FB C0E0      1979            push    acc
06FD 7421      1980            mov     a,#0x21
06FF C0E0      1981            push    acc
0701 7443      1982            mov     a,#0x43
0703 C0E0      1983            push    acc
0705 8A82      1984            mov     dpl,r2
0707 8B83      1985            mov     dph,r3
0709 8DF0      1986            mov     b,r5
070B EE        1987            mov     a,r6
070C 120000    1988            lcall   ___fsdiv
070F AA82      1989            mov     r2,dpl
0711 AB83      1990            mov     r3,dph
0713 ADF0      1991            mov     r5,b
0715 FE        1992            mov     r6,a
0716 E581      1993            mov     a,sp
0718 24FC      1994            add     a,#0xfc
071A F581      1995            mov     sp,a
071C 8A82      1996            mov     dpl,r2
071E 8B83      1997            mov     dph,r3
0720 8DF0      1998            mov     b,r5
0722 EE        1999            mov     a,r6
0723 C002      2000            push    ar2
0725 C003      2001            push    ar3
0727 120000    2002            lcall   ___fs2sint
072A           2003   ;        main.c:527: MoveBackward(motor_pwm);
072A 858298    2004            mov     _main_motor_pwm_1_127,dpl
072D 858399    2005            mov  (_main_motor_pwm_1_127 + 1),dph
0730 120000    2006            lcall   _MoveBackward
0733 D003      2007            pop     ar3
0735 D002      2008            pop     ar2
0737           2009   ;        main.c:546: sendstr1(buff);
0737 D003      2010            pop     ar3
0739 D002      2011            pop     ar2
073B           2012   ;        main.c:527: MoveBackward(motor_pwm);
073B           2013   L024005?:
073B           2014   ;        main.c:529: if(vx > threshold){
073B 850882    2015            mov     dpl,_main_vx_1_127
073E 850983    2016            mov     dph,(_main_vx_1_127 + 1)
0741 C002      2017            push    ar2
0743 C003      2018            push    ar3
0745 120000    2019            lcall   ___sint2fs
0748 8582D8    2020            mov     _main_sloc0_1_0,dpl
074B 8583D9    2021            mov     (_main_sloc0_1_0 + 1),dph
074E 85F0DA    2022            mov     (_main_sloc0_1_0 + 2),b
0751 F5DB      2023            mov     (_main_sloc0_1_0 + 3),a
0753 E4        2024            clr     a
0754 C0E0      2025            push    acc
0756 C0E0      2026            push    acc
0758 7421      2027            mov     a,#0x21
075A C0E0      2028            push    acc
075C 7443      2029            mov     a,#0x43
075E C0E0      2030            push    acc
0760 85D882    2031            mov     dpl,_main_sloc0_1_0
0763 85D983    2032            mov     dph,(_main_sloc0_1_0 + 1)
0766 85DAF0    2033            mov     b,(_main_sloc0_1_0 + 2)
0769 E5DB      2034            mov     a,(_main_sloc0_1_0 + 3)
076B 120000    2035            lcall   ___fsgt
076E AD82      2036            mov     r5,dpl
0770 E581      2037            mov     a,sp
0772 24FC      2038            add     a,#0xfc
0774 F581      2039            mov     sp,a
0776 D003      2040            pop     ar3
0778 D002      2041            pop     ar2
077A ED        2042            mov     a,r5
077B 7000      2043            jnz     L024036?
077D 020000    2044            ljmp    L024009?
0780           2045   L024036?:
0780           2046   ;        main.c:530: motor_pwm = abs(vx - threshold) * 100 / threshold; 
0780 C002      2047            push    ar2
0782 C003      2048            push    ar3
0784 C003      2049            push    ar3
0786 E4        2050            clr     a
0787 C0E0      2051            push    acc
0789 C0E0      2052            push    acc
078B 7421      2053            mov     a,#0x21
078D C0E0      2054            push    acc
078F 7443      2055            mov     a,#0x43
0791 C0E0      2056            push    acc
0793 85D882    2057            mov     dpl,_main_sloc0_1_0
0796 85D983    2058            mov     dph,(_main_sloc0_1_0 + 1)
0799 85DAF0    2059            mov     b,(_main_sloc0_1_0 + 2)
079C E5DB      2060            mov     a,(_main_sloc0_1_0 + 3)
079E 120000    2061            lcall   ___fssub
07A1 AD82      2062            mov     r5,dpl
07A3 AE83      2063            mov     r6,dph
07A5 AFF0      2064            mov     r7,b
07A7 FA        2065            mov     r2,a
07A8 E581      2066            mov     a,sp
07AA 24FC      2067            add     a,#0xfc
07AC F581      2068            mov     sp,a
07AE D003      2069            pop     ar3
07B0 8D82      2070            mov     dpl,r5
07B2 8E83      2071            mov     dph,r6
07B4 8FF0      2072            mov     b,r7
07B6 EA        2073            mov     a,r2
07B7 C002      2074            push    ar2
07B9 C003      2075            push    ar3
07BB 120000    2076            lcall   ___fs2sint
07BE 120000    2077            lcall   _abs
07C1 858200    2078            mov     __mulint_PARM_2,dpl
07C4 858301    2079            mov     (__mulint_PARM_2 + 1),dph
07C7 D003      2080            pop     ar3
07C9 D002      2081            pop     ar2
07CB 900064    2082            mov     dptr,#0x0064
07CE 120000    2083            lcall   __mulint
07D1 120000    2084            lcall   ___sint2fs
07D4 AA82      2085            mov     r2,dpl
07D6 AB83      2086            mov     r3,dph
07D8 ADF0      2087            mov     r5,b
07DA FE        2088            mov     r6,a
07DB E4        2089            clr     a
07DC C0E0      2090            push    acc
07DE C0E0      2091            push    acc
07E0 7421      2092            mov     a,#0x21
07E2 C0E0      2093            push    acc
07E4 7443      2094            mov     a,#0x43
07E6 C0E0      2095            push    acc
07E8 8A82      2096            mov     dpl,r2
07EA 8B83      2097            mov     dph,r3
07EC 8DF0      2098            mov     b,r5
07EE EE        2099            mov     a,r6
07EF 120000    2100            lcall   ___fsdiv
07F2 AA82      2101            mov     r2,dpl
07F4 AB83      2102            mov     r3,dph
07F6 ADF0      2103            mov     r5,b
07F8 FE        2104            mov     r6,a
07F9 E581      2105            mov     a,sp
07FB 24FC      2106            add     a,#0xfc
07FD F581      2107            mov     sp,a
07FF 8A82      2108            mov     dpl,r2
0801 8B83      2109            mov     dph,r3
0803 8DF0      2110            mov     b,r5
0805 EE        2111            mov     a,r6
0806 C002      2112            push    ar2
0808 C003      2113            push    ar3
080A 120000    2114            lcall   ___fs2sint
080D           2115   ;        main.c:531: TurnRight(motor_pwm);
080D 858298    2116            mov     _main_motor_pwm_1_127,dpl
0810 858399    2117            mov  (_main_motor_pwm_1_127 + 1),dph
0813 120000    2118            lcall   _TurnRight
0816 D003      2119            pop     ar3
0818 D002      2120            pop     ar2
081A D003      2121            pop     ar3
081C D002      2122            pop     ar2
081E 020000    2123            ljmp    L024019?
0821           2124   L024009?:
0821           2125   ;        main.c:533: else if (vx < threshold){
0821 C002      2126            push    ar2
0823 C003      2127            push    ar3
0825 E4        2128            clr     a
0826 C0E0      2129            push    acc
0828 C0E0      2130            push    acc
082A 7421      2131            mov     a,#0x21
082C C0E0      2132            push    acc
082E 7443      2133            mov     a,#0x43
0830 C0E0      2134            push    acc
0832 85D882    2135            mov     dpl,_main_sloc0_1_0
0835 85D983    2136            mov     dph,(_main_sloc0_1_0 + 1)
0838 85DAF0    2137            mov     b,(_main_sloc0_1_0 + 2)
083B E5DB      2138            mov     a,(_main_sloc0_1_0 + 3)
083D 120000    2139            lcall   ___fslt
0840 AD82      2140            mov     r5,dpl
0842 E581      2141            mov     a,sp
0844 24FC      2142            add     a,#0xfc
0846 F581      2143            mov     sp,a
0848 D003      2144            pop     ar3
084A D002      2145            pop     ar2
084C ED        2146            mov     a,r5
084D 7000      2147            jnz     L024037?
084F 020000    2148            ljmp    L024019?
0852           2149   L024037?:
0852           2150   ;        main.c:534: motor_pwm = abs(threshold - vx) * 100 / threshold; 
0852 C002      2151            push    ar2
0854 C003      2152            push    ar3
0856 C003      2153            push    ar3
0858 C0D8      2154            push    _main_sloc0_1_0
085A C0D9      2155            push    (_main_sloc0_1_0 + 1)
085C C0DA      2156            push    (_main_sloc0_1_0 + 2)
085E C0DB      2157            push    (_main_sloc0_1_0 + 3)
0860 900000    2158            mov     dptr,#0x0000
0863 75F021    2159            mov     b,#0x21
0866 7443      2160            mov     a,#0x43
0868 120000    2161            lcall   ___fssub
086B AD82      2162            mov     r5,dpl
086D AE83      2163            mov     r6,dph
086F AFF0      2164            mov     r7,b
0871 FA        2165            mov     r2,a
0872 E581      2166            mov     a,sp
0874 24FC      2167            add     a,#0xfc
0876 F581      2168            mov     sp,a
0878 D003      2169            pop     ar3
087A 8D82      2170            mov     dpl,r5
087C 8E83      2171            mov     dph,r6
087E 8FF0      2172            mov     b,r7
0880 EA        2173            mov     a,r2
0881 C002      2174            push    ar2
0883 C003      2175            push    ar3
0885 120000    2176            lcall   ___fs2sint
0888 120000    2177            lcall   _abs
088B 858200    2178            mov     __mulint_PARM_2,dpl
088E 858301    2179            mov     (__mulint_PARM_2 + 1),dph
0891 D003      2180            pop     ar3
0893 D002      2181            pop     ar2
0895 900064    2182            mov     dptr,#0x0064
0898 120000    2183            lcall   __mulint
089B 120000    2184            lcall   ___sint2fs
089E AA82      2185            mov     r2,dpl
08A0 AB83      2186            mov     r3,dph
08A2 ADF0      2187            mov     r5,b
08A4 FE        2188            mov     r6,a
08A5 E4        2189            clr     a
08A6 C0E0      2190            push    acc
08A8 C0E0      2191            push    acc
08AA 7421      2192            mov     a,#0x21
08AC C0E0      2193            push    acc
08AE 7443      2194            mov     a,#0x43
08B0 C0E0      2195            push    acc
08B2 8A82      2196            mov     dpl,r2
08B4 8B83      2197            mov     dph,r3
08B6 8DF0      2198            mov     b,r5
08B8 EE        2199            mov     a,r6
08B9 120000    2200            lcall   ___fsdiv
08BC AA82      2201            mov     r2,dpl
08BE AB83      2202            mov     r3,dph
08C0 ADF0      2203            mov     r5,b
08C2 FE        2204            mov     r6,a
08C3 E581      2205            mov     a,sp
08C5 24FC      2206            add     a,#0xfc
08C7 F581      2207            mov     sp,a
08C9 8A82      2208            mov     dpl,r2
08CB 8B83      2209            mov     dph,r3
08CD 8DF0      2210            mov     b,r5
08CF EE        2211            mov     a,r6
08D0 C002      2212            push    ar2
08D2 C003      2213            push    ar3
08D4 120000    2214            lcall   ___fs2sint
08D7           2215   ;        main.c:535: TurnLeft(motor_pwm);
08D7 858298    2216            mov     _main_motor_pwm_1_127,dpl
08DA 858399    2217            mov  (_main_motor_pwm_1_127 + 1),dph
08DD 120000    2218            lcall   _TurnLeft
08E0 D003      2219            pop     ar3
08E2 D002      2220            pop     ar2
08E4 D003      2221            pop     ar3
08E6 D002      2222            pop     ar2
08E8 020000    2223            ljmp    L024019?
08EB           2224   L024014?:
08EB           2225   ;        main.c:541: else if(c=='@') // Master wants slave data
08EB BC40A8    2226            cjne    r4,#0x40,L024038?
08EE 8000      2227            sjmp    L024039?
08F0           2228   L024038?:
08F0 020000    2229            ljmp    L024019?
08F3           2230   L024039?:
08F3           2231   ;        main.c:543: sprintf(buff, "%05u\n", cnt);
08F3 C002      2232            push    ar2
08F5 C003      2233            push    ar3
08F7 C002      2234            push    ar2
08F9 C003      2235            push    ar3
08FB 7428      2236            mov     a,#__str_14
08FD C0E0      2237            push    acc
08FF 74D1      2238            mov     a,#(__str_14 >> 8)
0901 C0E0      2239            push    acc
0903 7480      2240            mov     a,#0x80
0905 C0E0      2241            push    acc
0907 7488      2242            mov     a,#_buff
0909 C0E0      2243            push    acc
090B 7447      2244            mov     a,#(_buff >> 8)
090D C0E0      2245            push    acc
090F 7440      2246            mov     a,#0x40
0911 C0E0      2247            push    acc
0913 120000    2248            lcall   _sprintf
0916 E581      2249            mov     a,sp
0918 24F8      2250            add     a,#0xf8
091A F581      2251            mov     sp,a
091C D003      2252            pop     ar3
091E D002      2253            pop     ar2
0920           2254   ;        main.c:544: cnt++;
0920 0A        2255            inc     r2
0921 BA00A8    2256            cjne    r2,#0x00,L024040?
0924 0B        2257            inc     r3
0925           2258   L024040?:
0925           2259   ;        main.c:545: waitms(5); // The radio seems to need this delay...
0925 900005    2260            mov     dptr,#0x0005
0928 C002      2261            push    ar2
092A C003      2262            push    ar3
092C 120000    2263            lcall   _waitms
092F           2264   ;        main.c:546: sendstr1(buff);
092F 904788    2265            mov     dptr,#_buff
0932 75F040    2266            mov     b,#0x40
0935 120000    2267            lcall   _sendstr1
0938 D003      2268            pop     ar3
093A D002      2269            pop     ar2
093C 020000    2270            ljmp    L024019?
093F           2271            rseg R_CSEG
093F           2272   
0000           2273            rseg R_XINIT
0000           2274   
0000           2275            rseg R_CONST
0000           2276   __str_0:
0000 436F6D6D  2277            db 'Command: %s'
     616E643A
     202573
000B 00        2278            db 0x00
000C           2279   __str_1:
000C 52657370  2280            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2281            db 0x0D
0019 0A        2282            db 0x0A
001A 00        2283            db 0x00
001B           2284   __str_2:
001B 41542B44  2285            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2286            db 0x0D
0027 0A        2287            db 0x0A
0028 00        2288            db 0x00
0029           2289   __str_3:
0029 0D        2290            db 0x0D
002A 0A        2291            db 0x0A
002B 45464D38  2292            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2293            db 0x0D
0047 0A        2294            db 0x0A
0048 00        2295            db 0x00
0049           2296   __str_4:
0049 41542B56  2297            db 'AT+VER'
     4552
004F 0D        2298            db 0x0D
0050 0A        2299            db 0x0A
0051 00        2300            db 0x00
0052           2301   __str_5:
0052 41542B42  2302            db 'AT+BAUD'
     415544
0059 0D        2303            db 0x0D
005A 0A        2304            db 0x0A
005B 00        2305            db 0x00
005C           2306   __str_6:
005C 41542B52  2307            db 'AT+RFID'
     464944
0063 0D        2308            db 0x0D
0064 0A        2309            db 0x0A
0065 00        2310            db 0x00
0066           2311   __str_7:
0066 41542B44  2312            db 'AT+DVID'
     564944
006D 0D        2313            db 0x0D
006E 0A        2314            db 0x0A
006F 00        2315            db 0x00
0070           2316   __str_8:
0070 41542B52  2317            db 'AT+RFC'
     4643
0076 0D        2318            db 0x0D
0077 0A        2319            db 0x0A
0078 00        2320            db 0x00
0079           2321   __str_9:
0079 41542B50  2322            db 'AT+POWE'
     4F5745
0080 0D        2323            db 0x0D
0081 0A        2324            db 0x0A
0082 00        2325            db 0x00
0083           2326   __str_10:
0083 41542B43  2327            db 'AT+CLSS'
     4C5353
008A 0D        2328            db 0x0D
008B 0A        2329            db 0x0A
008C 00        2330            db 0x00
008D           2331   __str_11:
008D 41542B44  2332            db 'AT+DVIDEFEF'
     56494445
     464546
0098 0D        2333            db 0x0D
0099 0A        2334            db 0x0A
009A 00        2335            db 0x00
009B           2336   __str_12:
009B 25303364  2337            db '%03d,%03d'
     2C253033
     64
00A4 00        2338            db 0x00
00A5           2339   __str_13:
00A5 4A6F7973  2340            db 'Joystick Received: Vx = %03d, Vy = %03d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     303364
00CC 0D        2341            db 0x0D
00CD 0A        2342            db 0x0A
00CE 00        2343            db 0x00
00CF           2344   __str_14:
00CF 25303575  2345            db '%05u'
00D3 0A        2346            db 0x0A
00D4 00        2347            db 0x00
00D5           2348   
0096           2349            CSEG
0096           2350   
0096           2351   end
