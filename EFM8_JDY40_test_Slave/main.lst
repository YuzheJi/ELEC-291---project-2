0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 20 15:14:46 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _Calibrate_Joystick
0000             29            public _Timer5_ISR
0000             30            public _ADC_at_Pin
0000             31            public _InitPinADC
0000             32            public _InitADC
0000             33            public _Set_Pin_Input
0000             34            public _Set_Pin_Output
0000             35            public _ReceptionOff
0000             36            public _SendATCommand
0000             37            public _waitms_or_RI1
0000             38            public _RXU1
0000             39            public _getstr1
0000             40            public _getchar1_with_timeout
0000             41            public _getchar1
0000             42            public _sendstr1
0000             43            public _putchar1
0000             44            public _UART1_Init
0000             45            public _waitms
0000             46            public _Timer3us
0000             47            public __c51_external_startup
0000             48            public _buff
0000             49            public _getstr1_PARM_2
0000             50            public _vy_thres
0000             51            public _vx_thres
0000             52            public _vy
0000             53            public _vx
0000             54            public _servo_arm_pwm
0000             55            public _servo_base_pwm
0000             56            public _servo_arm
0000             57            public _servo_base
0000             58            public _R_motor_dir
0000             59            public _L_motor_dir
0000             60            public _pwm_right
0000             61            public _pwm_left
0000             62            public _servo_counter
0000             63            public _pwm_counter
0000             64   ;--------------------------------------------------------
0000             65   ; Special Function Registers
0000             66   ;--------------------------------------------------------
0000             67   _ACC            DATA 0xe0
0000             68   _ADC0ASAH       DATA 0xb6
0000             69   _ADC0ASAL       DATA 0xb5
0000             70   _ADC0ASCF       DATA 0xa1
0000             71   _ADC0ASCT       DATA 0xc7
0000             72   _ADC0CF0        DATA 0xbc
0000             73   _ADC0CF1        DATA 0xb9
0000             74   _ADC0CF2        DATA 0xdf
0000             75   _ADC0CN0        DATA 0xe8
0000             76   _ADC0CN1        DATA 0xb2
0000             77   _ADC0CN2        DATA 0xb3
0000             78   _ADC0GTH        DATA 0xc4
0000             79   _ADC0GTL        DATA 0xc3
0000             80   _ADC0H          DATA 0xbe
0000             81   _ADC0L          DATA 0xbd
0000             82   _ADC0LTH        DATA 0xc6
0000             83   _ADC0LTL        DATA 0xc5
0000             84   _ADC0MX         DATA 0xbb
0000             85   _B              DATA 0xf0
0000             86   _CKCON0         DATA 0x8e
0000             87   _CKCON1         DATA 0xa6
0000             88   _CLEN0          DATA 0xc6
0000             89   _CLIE0          DATA 0xc7
0000             90   _CLIF0          DATA 0xe8
0000             91   _CLKSEL         DATA 0xa9
0000             92   _CLOUT0         DATA 0xd1
0000             93   _CLU0CF         DATA 0xb1
0000             94   _CLU0FN         DATA 0xaf
0000             95   _CLU0MX         DATA 0x84
0000             96   _CLU1CF         DATA 0xb3
0000             97   _CLU1FN         DATA 0xb2
0000             98   _CLU1MX         DATA 0x85
0000             99   _CLU2CF         DATA 0xb6
0000            100   _CLU2FN         DATA 0xb5
0000            101   _CLU2MX         DATA 0x91
0000            102   _CLU3CF         DATA 0xbf
0000            103   _CLU3FN         DATA 0xbe
0000            104   _CLU3MX         DATA 0xae
0000            105   _CMP0CN0        DATA 0x9b
0000            106   _CMP0CN1        DATA 0x99
0000            107   _CMP0MD         DATA 0x9d
0000            108   _CMP0MX         DATA 0x9f
0000            109   _CMP1CN0        DATA 0xbf
0000            110   _CMP1CN1        DATA 0xac
0000            111   _CMP1MD         DATA 0xab
0000            112   _CMP1MX         DATA 0xaa
0000            113   _CRC0CN0        DATA 0xce
0000            114   _CRC0CN1        DATA 0x86
0000            115   _CRC0CNT        DATA 0xd3
0000            116   _CRC0DAT        DATA 0xcb
0000            117   _CRC0FLIP       DATA 0xcf
0000            118   _CRC0IN         DATA 0xca
0000            119   _CRC0ST         DATA 0xd2
0000            120   _DAC0CF0        DATA 0x91
0000            121   _DAC0CF1        DATA 0x92
0000            122   _DAC0H          DATA 0x85
0000            123   _DAC0L          DATA 0x84
0000            124   _DAC1CF0        DATA 0x93
0000            125   _DAC1CF1        DATA 0x94
0000            126   _DAC1H          DATA 0x8a
0000            127   _DAC1L          DATA 0x89
0000            128   _DAC2CF0        DATA 0x95
0000            129   _DAC2CF1        DATA 0x96
0000            130   _DAC2H          DATA 0x8c
0000            131   _DAC2L          DATA 0x8b
0000            132   _DAC3CF0        DATA 0x9a
0000            133   _DAC3CF1        DATA 0x9c
0000            134   _DAC3H          DATA 0x8e
0000            135   _DAC3L          DATA 0x8d
0000            136   _DACGCF0        DATA 0x88
0000            137   _DACGCF1        DATA 0x98
0000            138   _DACGCF2        DATA 0xa2
0000            139   _DERIVID        DATA 0xad
0000            140   _DEVICEID       DATA 0xb5
0000            141   _DPH            DATA 0x83
0000            142   _DPL            DATA 0x82
0000            143   _EIE1           DATA 0xe6
0000            144   _EIE2           DATA 0xf3
0000            145   _EIP1           DATA 0xbb
0000            146   _EIP1H          DATA 0xee
0000            147   _EIP2           DATA 0xed
0000            148   _EIP2H          DATA 0xf6
0000            149   _EMI0CN         DATA 0xe7
0000            150   _FLKEY          DATA 0xb7
0000            151   _HFO0CAL        DATA 0xc7
0000            152   _HFO1CAL        DATA 0xd6
0000            153   _HFOCN          DATA 0xef
0000            154   _I2C0ADM        DATA 0xff
0000            155   _I2C0CN0        DATA 0xba
0000            156   _I2C0DIN        DATA 0xbc
0000            157   _I2C0DOUT       DATA 0xbb
0000            158   _I2C0FCN0       DATA 0xad
0000            159   _I2C0FCN1       DATA 0xab
0000            160   _I2C0FCT        DATA 0xf5
0000            161   _I2C0SLAD       DATA 0xbd
0000            162   _I2C0STAT       DATA 0xb9
0000            163   _IE             DATA 0xa8
0000            164   _IP             DATA 0xb8
0000            165   _IPH            DATA 0xf2
0000            166   _IT01CF         DATA 0xe4
0000            167   _LFO0CN         DATA 0xb1
0000            168   _P0             DATA 0x80
0000            169   _P0MASK         DATA 0xfe
0000            170   _P0MAT          DATA 0xfd
0000            171   _P0MDIN         DATA 0xf1
0000            172   _P0MDOUT        DATA 0xa4
0000            173   _P0SKIP         DATA 0xd4
0000            174   _P1             DATA 0x90
0000            175   _P1MASK         DATA 0xee
0000            176   _P1MAT          DATA 0xed
0000            177   _P1MDIN         DATA 0xf2
0000            178   _P1MDOUT        DATA 0xa5
0000            179   _P1SKIP         DATA 0xd5
0000            180   _P2             DATA 0xa0
0000            181   _P2MASK         DATA 0xfc
0000            182   _P2MAT          DATA 0xfb
0000            183   _P2MDIN         DATA 0xf3
0000            184   _P2MDOUT        DATA 0xa6
0000            185   _P2SKIP         DATA 0xcc
0000            186   _P3             DATA 0xb0
0000            187   _P3MDIN         DATA 0xf4
0000            188   _P3MDOUT        DATA 0x9c
0000            189   _PCA0CENT       DATA 0x9e
0000            190   _PCA0CLR        DATA 0x9c
0000            191   _PCA0CN0        DATA 0xd8
0000            192   _PCA0CPH0       DATA 0xfc
0000            193   _PCA0CPH1       DATA 0xea
0000            194   _PCA0CPH2       DATA 0xec
0000            195   _PCA0CPH3       DATA 0xf5
0000            196   _PCA0CPH4       DATA 0x85
0000            197   _PCA0CPH5       DATA 0xde
0000            198   _PCA0CPL0       DATA 0xfb
0000            199   _PCA0CPL1       DATA 0xe9
0000            200   _PCA0CPL2       DATA 0xeb
0000            201   _PCA0CPL3       DATA 0xf4
0000            202   _PCA0CPL4       DATA 0x84
0000            203   _PCA0CPL5       DATA 0xdd
0000            204   _PCA0CPM0       DATA 0xda
0000            205   _PCA0CPM1       DATA 0xdb
0000            206   _PCA0CPM2       DATA 0xdc
0000            207   _PCA0CPM3       DATA 0xae
0000            208   _PCA0CPM4       DATA 0xaf
0000            209   _PCA0CPM5       DATA 0xcc
0000            210   _PCA0H          DATA 0xfa
0000            211   _PCA0L          DATA 0xf9
0000            212   _PCA0MD         DATA 0xd9
0000            213   _PCA0POL        DATA 0x96
0000            214   _PCA0PWM        DATA 0xf7
0000            215   _PCON0          DATA 0x87
0000            216   _PCON1          DATA 0xcd
0000            217   _PFE0CN         DATA 0xc1
0000            218   _PRTDRV         DATA 0xf6
0000            219   _PSCTL          DATA 0x8f
0000            220   _PSTAT0         DATA 0xaa
0000            221   _PSW            DATA 0xd0
0000            222   _REF0CN         DATA 0xd1
0000            223   _REG0CN         DATA 0xc9
0000            224   _REVID          DATA 0xb6
0000            225   _RSTSRC         DATA 0xef
0000            226   _SBCON1         DATA 0x94
0000            227   _SBRLH1         DATA 0x96
0000            228   _SBRLL1         DATA 0x95
0000            229   _SBUF           DATA 0x99
0000            230   _SBUF0          DATA 0x99
0000            231   _SBUF1          DATA 0x92
0000            232   _SCON           DATA 0x98
0000            233   _SCON0          DATA 0x98
0000            234   _SCON1          DATA 0xc8
0000            235   _SFRPAGE        DATA 0xa7
0000            236   _SFRPGCN        DATA 0xbc
0000            237   _SFRSTACK       DATA 0xd7
0000            238   _SMB0ADM        DATA 0xd6
0000            239   _SMB0ADR        DATA 0xd7
0000            240   _SMB0CF         DATA 0xc1
0000            241   _SMB0CN0        DATA 0xc0
0000            242   _SMB0DAT        DATA 0xc2
0000            243   _SMB0FCN0       DATA 0xc3
0000            244   _SMB0FCN1       DATA 0xc4
0000            245   _SMB0FCT        DATA 0xef
0000            246   _SMB0RXLN       DATA 0xc5
0000            247   _SMB0TC         DATA 0xac
0000            248   _SMOD1          DATA 0x93
0000            249   _SP             DATA 0x81
0000            250   _SPI0CFG        DATA 0xa1
0000            251   _SPI0CKR        DATA 0xa2
0000            252   _SPI0CN0        DATA 0xf8
0000            253   _SPI0DAT        DATA 0xa3
0000            254   _SPI0FCN0       DATA 0x9a
0000            255   _SPI0FCN1       DATA 0x9b
0000            256   _SPI0FCT        DATA 0xf7
0000            257   _SPI0PCF        DATA 0xdf
0000            258   _TCON           DATA 0x88
0000            259   _TH0            DATA 0x8c
0000            260   _TH1            DATA 0x8d
0000            261   _TL0            DATA 0x8a
0000            262   _TL1            DATA 0x8b
0000            263   _TMOD           DATA 0x89
0000            264   _TMR2CN0        DATA 0xc8
0000            265   _TMR2CN1        DATA 0xfd
0000            266   _TMR2H          DATA 0xcf
0000            267   _TMR2L          DATA 0xce
0000            268   _TMR2RLH        DATA 0xcb
0000            269   _TMR2RLL        DATA 0xca
0000            270   _TMR3CN0        DATA 0x91
0000            271   _TMR3CN1        DATA 0xfe
0000            272   _TMR3H          DATA 0x95
0000            273   _TMR3L          DATA 0x94
0000            274   _TMR3RLH        DATA 0x93
0000            275   _TMR3RLL        DATA 0x92
0000            276   _TMR4CN0        DATA 0x98
0000            277   _TMR4CN1        DATA 0xff
0000            278   _TMR4H          DATA 0xa5
0000            279   _TMR4L          DATA 0xa4
0000            280   _TMR4RLH        DATA 0xa3
0000            281   _TMR4RLL        DATA 0xa2
0000            282   _TMR5CN0        DATA 0xc0
0000            283   _TMR5CN1        DATA 0xf1
0000            284   _TMR5H          DATA 0xd5
0000            285   _TMR5L          DATA 0xd4
0000            286   _TMR5RLH        DATA 0xd3
0000            287   _TMR5RLL        DATA 0xd2
0000            288   _UART0PCF       DATA 0xd9
0000            289   _UART1FCN0      DATA 0x9d
0000            290   _UART1FCN1      DATA 0xd8
0000            291   _UART1FCT       DATA 0xfa
0000            292   _UART1LIN       DATA 0x9e
0000            293   _UART1PCF       DATA 0xda
0000            294   _VDM0CN         DATA 0xff
0000            295   _WDTCN          DATA 0x97
0000            296   _XBR0           DATA 0xe1
0000            297   _XBR1           DATA 0xe2
0000            298   _XBR2           DATA 0xe3
0000            299   _XOSC0CN        DATA 0x86
0000            300   _DPTR           DATA 0x8382
0000            301   _TMR2RL         DATA 0xcbca
0000            302   _TMR3RL         DATA 0x9392
0000            303   _TMR4RL         DATA 0xa3a2
0000            304   _TMR5RL         DATA 0xd3d2
0000            305   _TMR0           DATA 0x8c8a
0000            306   _TMR1           DATA 0x8d8b
0000            307   _TMR2           DATA 0xcfce
0000            308   _TMR3           DATA 0x9594
0000            309   _TMR4           DATA 0xa5a4
0000            310   _TMR5           DATA 0xd5d4
0000            311   _SBRL1          DATA 0x9695
0000            312   _PCA0           DATA 0xfaf9
0000            313   _PCA0CP0        DATA 0xfcfb
0000            314   _PCA0CP1        DATA 0xeae9
0000            315   _PCA0CP2        DATA 0xeceb
0000            316   _PCA0CP3        DATA 0xf5f4
0000            317   _PCA0CP4        DATA 0x8584
0000            318   _PCA0CP5        DATA 0xdedd
0000            319   _ADC0ASA        DATA 0xb6b5
0000            320   _ADC0GT         DATA 0xc4c3
0000            321   _ADC0           DATA 0xbebd
0000            322   _ADC0LT         DATA 0xc6c5
0000            323   _DAC0           DATA 0x8584
0000            324   _DAC1           DATA 0x8a89
0000            325   _DAC2           DATA 0x8c8b
0000            326   _DAC3           DATA 0x8e8d
0000            327   ;--------------------------------------------------------
0000            328   ; special function bits
0000            329   ;--------------------------------------------------------
0000            330   _ACC_0          BIT 0xe0
0000            331   _ACC_1          BIT 0xe1
0000            332   _ACC_2          BIT 0xe2
0000            333   _ACC_3          BIT 0xe3
0000            334   _ACC_4          BIT 0xe4
0000            335   _ACC_5          BIT 0xe5
0000            336   _ACC_6          BIT 0xe6
0000            337   _ACC_7          BIT 0xe7
0000            338   _TEMPE          BIT 0xe8
0000            339   _ADGN0          BIT 0xe9
0000            340   _ADGN1          BIT 0xea
0000            341   _ADWINT         BIT 0xeb
0000            342   _ADBUSY         BIT 0xec
0000            343   _ADINT          BIT 0xed
0000            344   _IPOEN          BIT 0xee
0000            345   _ADEN           BIT 0xef
0000            346   _B_0            BIT 0xf0
0000            347   _B_1            BIT 0xf1
0000            348   _B_2            BIT 0xf2
0000            349   _B_3            BIT 0xf3
0000            350   _B_4            BIT 0xf4
0000            351   _B_5            BIT 0xf5
0000            352   _B_6            BIT 0xf6
0000            353   _B_7            BIT 0xf7
0000            354   _C0FIF          BIT 0xe8
0000            355   _C0RIF          BIT 0xe9
0000            356   _C1FIF          BIT 0xea
0000            357   _C1RIF          BIT 0xeb
0000            358   _C2FIF          BIT 0xec
0000            359   _C2RIF          BIT 0xed
0000            360   _C3FIF          BIT 0xee
0000            361   _C3RIF          BIT 0xef
0000            362   _D1SRC0         BIT 0x88
0000            363   _D1SRC1         BIT 0x89
0000            364   _D1AMEN         BIT 0x8a
0000            365   _D01REFSL       BIT 0x8b
0000            366   _D3SRC0         BIT 0x8c
0000            367   _D3SRC1         BIT 0x8d
0000            368   _D3AMEN         BIT 0x8e
0000            369   _D23REFSL       BIT 0x8f
0000            370   _D0UDIS         BIT 0x98
0000            371   _D1UDIS         BIT 0x99
0000            372   _D2UDIS         BIT 0x9a
0000            373   _D3UDIS         BIT 0x9b
0000            374   _EX0            BIT 0xa8
0000            375   _ET0            BIT 0xa9
0000            376   _EX1            BIT 0xaa
0000            377   _ET1            BIT 0xab
0000            378   _ES0            BIT 0xac
0000            379   _ET2            BIT 0xad
0000            380   _ESPI0          BIT 0xae
0000            381   _EA             BIT 0xaf
0000            382   _PX0            BIT 0xb8
0000            383   _PT0            BIT 0xb9
0000            384   _PX1            BIT 0xba
0000            385   _PT1            BIT 0xbb
0000            386   _PS0            BIT 0xbc
0000            387   _PT2            BIT 0xbd
0000            388   _PSPI0          BIT 0xbe
0000            389   _P0_0           BIT 0x80
0000            390   _P0_1           BIT 0x81
0000            391   _P0_2           BIT 0x82
0000            392   _P0_3           BIT 0x83
0000            393   _P0_4           BIT 0x84
0000            394   _P0_5           BIT 0x85
0000            395   _P0_6           BIT 0x86
0000            396   _P0_7           BIT 0x87
0000            397   _P1_0           BIT 0x90
0000            398   _P1_1           BIT 0x91
0000            399   _P1_2           BIT 0x92
0000            400   _P1_3           BIT 0x93
0000            401   _P1_4           BIT 0x94
0000            402   _P1_5           BIT 0x95
0000            403   _P1_6           BIT 0x96
0000            404   _P1_7           BIT 0x97
0000            405   _P2_0           BIT 0xa0
0000            406   _P2_1           BIT 0xa1
0000            407   _P2_2           BIT 0xa2
0000            408   _P2_3           BIT 0xa3
0000            409   _P2_4           BIT 0xa4
0000            410   _P2_5           BIT 0xa5
0000            411   _P2_6           BIT 0xa6
0000            412   _P3_0           BIT 0xb0
0000            413   _P3_1           BIT 0xb1
0000            414   _P3_2           BIT 0xb2
0000            415   _P3_3           BIT 0xb3
0000            416   _P3_4           BIT 0xb4
0000            417   _P3_7           BIT 0xb7
0000            418   _CCF0           BIT 0xd8
0000            419   _CCF1           BIT 0xd9
0000            420   _CCF2           BIT 0xda
0000            421   _CCF3           BIT 0xdb
0000            422   _CCF4           BIT 0xdc
0000            423   _CCF5           BIT 0xdd
0000            424   _CR             BIT 0xde
0000            425   _CF             BIT 0xdf
0000            426   _PARITY         BIT 0xd0
0000            427   _F1             BIT 0xd1
0000            428   _OV             BIT 0xd2
0000            429   _RS0            BIT 0xd3
0000            430   _RS1            BIT 0xd4
0000            431   _F0             BIT 0xd5
0000            432   _AC             BIT 0xd6
0000            433   _CY             BIT 0xd7
0000            434   _RI             BIT 0x98
0000            435   _TI             BIT 0x99
0000            436   _RB8            BIT 0x9a
0000            437   _TB8            BIT 0x9b
0000            438   _REN            BIT 0x9c
0000            439   _CE             BIT 0x9d
0000            440   _SMODE          BIT 0x9e
0000            441   _RI1            BIT 0xc8
0000            442   _TI1            BIT 0xc9
0000            443   _RBX1           BIT 0xca
0000            444   _TBX1           BIT 0xcb
0000            445   _REN1           BIT 0xcc
0000            446   _PERR1          BIT 0xcd
0000            447   _OVR1           BIT 0xce
0000            448   _SI             BIT 0xc0
0000            449   _ACK            BIT 0xc1
0000            450   _ARBLOST        BIT 0xc2
0000            451   _ACKRQ          BIT 0xc3
0000            452   _STO            BIT 0xc4
0000            453   _STA            BIT 0xc5
0000            454   _TXMODE         BIT 0xc6
0000            455   _MASTER         BIT 0xc7
0000            456   _SPIEN          BIT 0xf8
0000            457   _TXNF           BIT 0xf9
0000            458   _NSSMD0         BIT 0xfa
0000            459   _NSSMD1         BIT 0xfb
0000            460   _RXOVRN         BIT 0xfc
0000            461   _MODF           BIT 0xfd
0000            462   _WCOL           BIT 0xfe
0000            463   _SPIF           BIT 0xff
0000            464   _IT0            BIT 0x88
0000            465   _IE0            BIT 0x89
0000            466   _IT1            BIT 0x8a
0000            467   _IE1            BIT 0x8b
0000            468   _TR0            BIT 0x8c
0000            469   _TF0            BIT 0x8d
0000            470   _TR1            BIT 0x8e
0000            471   _TF1            BIT 0x8f
0000            472   _T2XCLK0        BIT 0xc8
0000            473   _T2XCLK1        BIT 0xc9
0000            474   _TR2            BIT 0xca
0000            475   _T2SPLIT        BIT 0xcb
0000            476   _TF2CEN         BIT 0xcc
0000            477   _TF2LEN         BIT 0xcd
0000            478   _TF2L           BIT 0xce
0000            479   _TF2H           BIT 0xcf
0000            480   _T4XCLK0        BIT 0x98
0000            481   _T4XCLK1        BIT 0x99
0000            482   _TR4            BIT 0x9a
0000            483   _T4SPLIT        BIT 0x9b
0000            484   _TF4CEN         BIT 0x9c
0000            485   _TF4LEN         BIT 0x9d
0000            486   _TF4L           BIT 0x9e
0000            487   _TF4H           BIT 0x9f
0000            488   _T5XCLK0        BIT 0xc0
0000            489   _T5XCLK1        BIT 0xc1
0000            490   _TR5            BIT 0xc2
0000            491   _T5SPLIT        BIT 0xc3
0000            492   _TF5CEN         BIT 0xc4
0000            493   _TF5LEN         BIT 0xc5
0000            494   _TF5L           BIT 0xc6
0000            495   _TF5H           BIT 0xc7
0000            496   _RIE            BIT 0xd8
0000            497   _RXTO0          BIT 0xd9
0000            498   _RXTO1          BIT 0xda
0000            499   _RFRQ           BIT 0xdb
0000            500   _TIE            BIT 0xdc
0000            501   _TXHOLD         BIT 0xdd
0000            502   _TXNF1          BIT 0xde
0000            503   _TFRQ           BIT 0xdf
0000            504   ;--------------------------------------------------------
0000            505   ; overlayable register banks
0000            506   ;--------------------------------------------------------
0000            507            rbank0 segment data overlay
0000            508   ;--------------------------------------------------------
0000            509   ; internal ram data
0000            510   ;--------------------------------------------------------
0000            511            rseg R_DSEG
0000            512   _pwm_counter:
0000            513            ds 2
0002            514   _servo_counter:
0002            515            ds 2
0004            516   _pwm_left:
0004            517            ds 1
0005            518   _pwm_right:
0005            519            ds 1
0006            520   _L_motor_dir:
0006            521            ds 1
0007            522   _R_motor_dir:
0007            523            ds 1
0008            524   _servo_base:
0008            525            ds 1
0009            526   _servo_arm:
0009            527            ds 1
000A            528   _servo_base_pwm:
000A            529            ds 1
000B            530   _servo_arm_pwm:
000B            531            ds 1
000C            532   _vx:
000C            533            ds 2
000E            534   _vy:
000E            535            ds 2
0010            536   _vx_thres:
0010            537            ds 2
0012            538   _vy_thres:
0012            539            ds 2
0014            540   _getstr1_PARM_2:
0014            541            ds 1
0015            542   _main_vx_error_1_130:
0015            543            ds 2
0017            544   _main_vy_error_1_130:
0017            545            ds 2
0019            546   _main_vx_err_1_130:
0019            547            ds 2
001B            548   _main_vy_err_1_130:
001B            549            ds 2
001D            550   _main_vx_1_130:
001D            551            ds 2
001F            552   _main_vy_1_130:
001F            553            ds 2
0021            554   ;--------------------------------------------------------
0021            555   ; overlayable items in internal ram 
0021            556   ;--------------------------------------------------------
0000            557            rseg    R_OSEG
0000            558            rseg    R_OSEG
0000            559            rseg    R_OSEG
0000            560            rseg    R_OSEG
0000            561            rseg    R_OSEG
0000            562            rseg    R_OSEG
0000            563   _InitPinADC_PARM_2:
0000            564            ds 1
0001            565            rseg    R_OSEG
0001            566   ;--------------------------------------------------------
0001            567   ; indirectly addressable internal ram data
0001            568   ;--------------------------------------------------------
0000            569            rseg R_ISEG
0000            570   _buff:
0000            571            ds 20
0014            572   ;--------------------------------------------------------
0014            573   ; absolute internal ram data
0014            574   ;--------------------------------------------------------
0000            575            DSEG
0000            576   ;--------------------------------------------------------
0000            577   ; bit data
0000            578   ;--------------------------------------------------------
0000            579            rseg R_BSEG
0000            580   ;--------------------------------------------------------
0000            581   ; paged external ram data
0000            582   ;--------------------------------------------------------
0000            583            rseg R_PSEG
0000            584   ;--------------------------------------------------------
0000            585   ; external ram data
0000            586   ;--------------------------------------------------------
0000            587            rseg R_XSEG
0000            588   ;--------------------------------------------------------
0000            589   ; absolute external ram data
0000            590   ;--------------------------------------------------------
0000            591            XSEG
0000            592   ;--------------------------------------------------------
0000            593   ; external initialized ram data
0000            594   ;--------------------------------------------------------
0000            595            rseg R_IXSEG
0000            596            rseg R_HOME
0000            597            rseg R_GSINIT
0000            598            rseg R_CSEG
0000            599   ;--------------------------------------------------------
0000            600   ; Reset entry point and interrupt vectors
0000            601   ;--------------------------------------------------------
0000            602            CSEG at 0x0000
0000 020000     603            ljmp    _crt0
0093            604            CSEG at 0x0093
0093 020000     605            ljmp    _Timer5_ISR
0096            606   ;--------------------------------------------------------
0096            607   ; global & static initialisations
0096            608   ;--------------------------------------------------------
0000            609            rseg R_HOME
0000            610            rseg R_GSINIT
0000            611            rseg R_GSINIT
0000            612   ;--------------------------------------------------------
0000            613   ; data variables initialization
0000            614   ;--------------------------------------------------------
0000            615            rseg R_DINIT
0000            616   ;        main.c:48: unsigned int pwm_counter = 0; 
0000 E4         617            clr     a
0001 F538       618            mov     _pwm_counter,a
0003 F539       619            mov     (_pwm_counter + 1),a
0005            620   ;        main.c:49: unsigned int servo_counter = 0; 
0005 E4         621            clr     a
0006 F5F8       622            mov     _servo_counter,a
0008 F5F9       623            mov     (_servo_counter + 1),a
000A            624   ;        main.c:50: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75B800     625            mov     _pwm_left,#0x00
000D            626   ;        main.c:50: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 757800     627            mov     _pwm_right,#0x00
0010            628   ;        main.c:51: unsigned char servo_base = 100, servo_arm = 100; 
0010 753801     629            mov     _L_motor_dir,#0x01
0013            630   ;        main.c:51: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 75F801     631            mov     _R_motor_dir,#0x01
0016            632   ;        main.c:52: unsigned char servo_base = 100, servo_arm = 100; 
0016 75B864     633            mov     _servo_base,#0x64
0019            634   ;        main.c:52: unsigned char servo_base_pwm = 0, servo_arm_pwm = 0; 
0019 757864     635            mov     _servo_arm,#0x64
001C            636   ;        main.c:53: int vx = 0, vy = 0; 
001C 753800     637            mov     _servo_base_pwm,#0x00
001F            638   ;        main.c:53: unsigned char servo_base_pwm = 0, servo_arm_pwm = 0; 
001F 75F800     639            mov     _servo_arm_pwm,#0x00
0022            640   ;        main.c:54: int vx = 0, vy = 0; 
0022 E4         641            clr     a
0023 F5B8       642            mov     _vx,a
0025 F5B9       643            mov     (_vx + 1),a
0027            644   ;        main.c:54: int vx_thres = 161, vy_thres = 166; 
0027 E4         645            clr     a
0028 F578       646            mov     _vy,a
002A F579       647            mov     (_vy + 1),a
002C            648   ;        main.c:55: 
002C 7538A1     649            mov     _vx_thres,#0xA1
002F E4         650            clr     a
0030 F539       651            mov     (_vx_thres + 1),a
0032            652   ;        main.c:55: int vx_thres = 161, vy_thres = 166; 
0032 75F8A6     653            mov     _vy_thres,#0xA6
0035 E4         654            clr     a
0036 F5F9       655            mov     (_vy_thres + 1),a
0038            656            ; The linker places a 'ret' at the end of segment R_DINIT.
0038            657   ;--------------------------------------------------------
0038            658   ; code
0038            659   ;--------------------------------------------------------
0000            660            rseg R_CSEG
0000            661   ;------------------------------------------------------------
0000            662   ;Allocation info for local variables in function '_c51_external_startup'
0000            663   ;------------------------------------------------------------
0000            664   ;------------------------------------------------------------
0000            665   ;        main.c:58: char _c51_external_startup (void)
0000            666   ;        -----------------------------------------
0000            667   ;         function _c51_external_startup
0000            668   ;        -----------------------------------------
0000            669   __c51_external_startup:
0000            670            using   0
0000            671   ;        main.c:61: SFRPAGE = 0x00;
0000 75A700     672            mov     _SFRPAGE,#0x00
0003            673   ;        main.c:62: WDTCN = 0xDE; //First key
0003 7597DE     674            mov     _WDTCN,#0xDE
0006            675   ;        main.c:63: WDTCN = 0xAD; //Second key
0006 7597AD     676            mov     _WDTCN,#0xAD
0009            677   ;        main.c:65: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     678            mov     _VDM0CN,#0x80
000C            679   ;        main.c:66: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     680            mov     _RSTSRC,#0x06
000F            681   ;        main.c:73: SFRPAGE = 0x10;
000F 75A710     682            mov     _SFRPAGE,#0x10
0012            683   ;        main.c:74: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     684            mov     _PFE0CN,#0x20
0015            685   ;        main.c:75: SFRPAGE = 0x00;
0015 75A700     686            mov     _SFRPAGE,#0x00
0018            687   ;        main.c:96: CLKSEL = 0x00;
0018 75A900     688            mov     _CLKSEL,#0x00
001B            689   ;        main.c:97: CLKSEL = 0x00;
001B 75A900     690            mov     _CLKSEL,#0x00
001E            691   ;        main.c:98: while ((CLKSEL & 0x80) == 0);
001E            692   L002001?:
001E E5A9       693            mov     a,_CLKSEL
0020 30E740     694            jnb     acc.7,L002001?
0023            695   ;        main.c:99: CLKSEL = 0x03;
0023 75A903     696            mov     _CLKSEL,#0x03
0026            697   ;        main.c:100: CLKSEL = 0x03;
0026 75A903     698            mov     _CLKSEL,#0x03
0029            699   ;        main.c:101: while ((CLKSEL & 0x80) == 0);
0029            700   L002004?:
0029 E5A9       701            mov     a,_CLKSEL
002B 30E7C0     702            jnb     acc.7,L002004?
002E            703   ;        main.c:106: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     704            orl     _P0MDOUT,#0x11
0031            705   ;        main.c:107: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     706            orl     _P2MDOUT,#0x01
0034            707   ;        main.c:108: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     708            mov     _XBR0,#0x01
0037            709   ;        main.c:109: XBR1     = 0X00;
0037 75E200     710            mov     _XBR1,#0x00
003A            711   ;        main.c:110: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     712            mov     _XBR2,#0x41
003D            713   ;        main.c:116: SCON0 = 0x10;
003D 759810     714            mov     _SCON0,#0x10
0040            715   ;        main.c:117: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     716            mov     _TH1,#0xE6
0043            717   ;        main.c:118: TL1 = TH1;      // Init Timer1
0043 858D8B     718            mov     _TL1,_TH1
0046            719   ;        main.c:119: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     720            anl     _TMOD,#0x0F
0049            721   ;        main.c:120: TMOD |=  0x20;                       
0049 438920     722            orl     _TMOD,#0x20
004C            723   ;        main.c:121: TR1 = 1; // START Timer1
004C D28E       724            setb    _TR1
004E            725   ;        main.c:122: TI = 1;  // Indicate TX0 ready
004E D299       726            setb    _TI
0050            727   ;        main.c:124: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       728            setb    _P2_0
0052            729   ;        main.c:127: SFRPAGE=0x10;
0052 75A710     730            mov     _SFRPAGE,#0x10
0055            731   ;        main.c:128: TMR5CN0=0x00;
0055 75C000     732            mov     _TMR5CN0,#0x00
0058            733   ;        main.c:129: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     734            mov     _TMR5,#0xFF
005B 75D5FF     735            mov     (_TMR5 >> 8),#0xFF
005E            736   ;        main.c:130: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     737            orl     _EIE2,#0x08
0061            738   ;        main.c:131: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       739            setb    _TR5
0063            740   ;        main.c:134: EA=1;  // Enable global interrupts
0063 D2AF       741            setb    _EA
0065            742   ;        main.c:135: SFRPAGE=0x00;
0065 75A700     743            mov     _SFRPAGE,#0x00
0068            744   ;        main.c:137: return 0;
0068 758200     745            mov     dpl,#0x00
006B 22         746            ret
006C            747   ;------------------------------------------------------------
006C            748   ;Allocation info for local variables in function 'Timer3us'
006C            749   ;------------------------------------------------------------
006C            750   ;us                        Allocated to registers r2 
006C            751   ;i                         Allocated to registers r3 
006C            752   ;------------------------------------------------------------
006C            753   ;        main.c:141: void Timer3us(unsigned char us)
006C            754   ;        -----------------------------------------
006C            755   ;         function Timer3us
006C            756   ;        -----------------------------------------
006C            757   _Timer3us:
006C AA82       758            mov     r2,dpl
006E            759   ;        main.c:146: CKCON0|=0b_0100_0000;
006E 438E40     760            orl     _CKCON0,#0x40
0071            761   ;        main.c:148: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     762            mov     _TMR3RL,#0xB8
0074 7593FF     763            mov     (_TMR3RL >> 8),#0xFF
0077            764   ;        main.c:149: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     765            mov     _TMR3,_TMR3RL
007A 859395     766            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            767   ;        main.c:151: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     768            mov     _TMR3CN0,#0x04
0080            769   ;        main.c:152: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       770            mov     r3,#0x00
0082            771   L003004?:
0082 C3         772            clr     c
0083 EB         773            mov     a,r3
0084 9A         774            subb    a,r2
0085 5000       775            jnc     L003007?
0087            776   ;        main.c:154: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            777   L003001?:
0087 E591       778            mov     a,_TMR3CN0
0089 30E7C0     779            jnb     acc.7,L003001?
008C            780   ;        main.c:155: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     781            anl     _TMR3CN0,#0x7F
008F            782   ;        main.c:152: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         783            inc     r3
0090 8000       784            sjmp    L003004?
0092            785   L003007?:
0092            786   ;        main.c:157: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     787            mov     _TMR3CN0,#0x00
0095 22         788            ret
0096            789   ;------------------------------------------------------------
0096            790   ;Allocation info for local variables in function 'waitms'
0096            791   ;------------------------------------------------------------
0096            792   ;ms                        Allocated to registers r2 r3 
0096            793   ;j                         Allocated to registers r4 r5 
0096            794   ;k                         Allocated to registers r6 
0096            795   ;------------------------------------------------------------
0096            796   ;        main.c:160: void waitms (unsigned int ms)
0096            797   ;        -----------------------------------------
0096            798   ;         function waitms
0096            799   ;        -----------------------------------------
0096            800   _waitms:
0096 AA82       801            mov     r2,dpl
0098 AB83       802            mov     r3,dph
009A            803   ;        main.c:164: for(j=0; j<ms; j++)
009A 7C00       804            mov     r4,#0x00
009C 7D00       805            mov     r5,#0x00
009E            806   L004005?:
009E C3         807            clr     c
009F EC         808            mov     a,r4
00A0 9A         809            subb    a,r2
00A1 ED         810            mov     a,r5
00A2 9B         811            subb    a,r3
00A3 5000       812            jnc     L004009?
00A5            813   ;        main.c:165: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       814            mov     r6,#0x00
00A7            815   L004001?:
00A7 BE0400     816            cjne    r6,#0x04,L004018?
00AA            817   L004018?:
00AA 5000       818            jnc     L004007?
00AC 7582FA     819            mov     dpl,#0xFA
00AF C002       820            push    ar2
00B1 C003       821            push    ar3
00B3 C004       822            push    ar4
00B5 C005       823            push    ar5
00B7 C006       824            push    ar6
00B9 120000     825            lcall   _Timer3us
00BC D006       826            pop     ar6
00BE D005       827            pop     ar5
00C0 D004       828            pop     ar4
00C2 D003       829            pop     ar3
00C4 D002       830            pop     ar2
00C6 0E         831            inc     r6
00C7 8000       832            sjmp    L004001?
00C9            833   L004007?:
00C9            834   ;        main.c:164: for(j=0; j<ms; j++)
00C9 0C         835            inc     r4
00CA BC0040     836            cjne    r4,#0x00,L004005?
00CD 0D         837            inc     r5
00CE 8000       838            sjmp    L004005?
00D0            839   L004009?:
00D0 22         840            ret
00D1            841   ;------------------------------------------------------------
00D1            842   ;Allocation info for local variables in function 'UART1_Init'
00D1            843   ;------------------------------------------------------------
00D1            844   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            845   ;------------------------------------------------------------
00D1            846   ;        main.c:168: void UART1_Init (unsigned long baudrate)
00D1            847   ;        -----------------------------------------
00D1            848   ;         function UART1_Init
00D1            849   ;        -----------------------------------------
00D1            850   _UART1_Init:
00D1 AA82       851            mov     r2,dpl
00D3 AB83       852            mov     r3,dph
00D5 ACF0       853            mov     r4,b
00D7 FD         854            mov     r5,a
00D8            855   ;        main.c:170: SFRPAGE = 0x20;
00D8 75A720     856            mov     _SFRPAGE,#0x20
00DB            857   ;        main.c:171: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     858            mov     _SMOD1,#0x0C
00DE            859   ;        main.c:172: SCON1 = 0x10;
00DE 75C810     860            mov     _SCON1,#0x10
00E1            861   ;        main.c:173: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     862            mov     _SBCON1,#0x00
00E4            863   ;        main.c:174: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       864            mov     __divulong_PARM_2,r2
00E6 8B01       865            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       866            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       867            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     868            mov     dptr,#0xA200
00EF 75F04A     869            mov     b,#0x4A
00F2 7404       870            mov     a,#0x04
00F4 120000     871            lcall   __divulong
00F7 AA82       872            mov     r2,dpl
00F9 AB83       873            mov     r3,dph
00FB ACF0       874            mov     r4,b
00FD FD         875            mov     r5,a
00FE 750018     876            mov     __divulong_PARM_2,#0x18
0101 E4         877            clr     a
0102 F501       878            mov     (__divulong_PARM_2 + 1),a
0104 F502       879            mov     (__divulong_PARM_2 + 2),a
0106 F503       880            mov     (__divulong_PARM_2 + 3),a
0108 8A82       881            mov     dpl,r2
010A 8B83       882            mov     dph,r3
010C 8CF0       883            mov     b,r4
010E ED         884            mov     a,r5
010F 120000     885            lcall   __divulong
0112 AA82       886            mov     r2,dpl
0114 AB83       887            mov     r3,dph
0116 ACF0       888            mov     r4,b
0118 FD         889            mov     r5,a
0119 E4         890            clr     a
011A C3         891            clr     c
011B 9A         892            subb    a,r2
011C FA         893            mov     r2,a
011D E4         894            clr     a
011E 9B         895            subb    a,r3
011F FB         896            mov     r3,a
0120 7401       897            mov     a,#0x01
0122 9C         898            subb    a,r4
0123 E4         899            clr     a
0124 9D         900            subb    a,r5
0125 8A95       901            mov     _SBRL1,r2
0127 8B96       902            mov     (_SBRL1 >> 8),r3
0129            903   ;        main.c:175: TI1 = 1; // indicate ready for TX
0129 D2C9       904            setb    _TI1
012B            905   ;        main.c:176: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     906            orl     _SBCON1,#0x40
012E            907   ;        main.c:177: SFRPAGE = 0x00;
012E 75A700     908            mov     _SFRPAGE,#0x00
0131 22         909            ret
0132            910   ;------------------------------------------------------------
0132            911   ;Allocation info for local variables in function 'putchar1'
0132            912   ;------------------------------------------------------------
0132            913   ;c                         Allocated to registers r2 
0132            914   ;------------------------------------------------------------
0132            915   ;        main.c:180: void putchar1 (char c) 
0132            916   ;        -----------------------------------------
0132            917   ;         function putchar1
0132            918   ;        -----------------------------------------
0132            919   _putchar1:
0132 AA82       920            mov     r2,dpl
0134            921   ;        main.c:182: SFRPAGE = 0x20;
0134 75A720     922            mov     _SFRPAGE,#0x20
0137            923   ;        main.c:183: while (!TI1);
0137            924   L006001?:
0137            925   ;        main.c:184: TI1=0;
0137 10C990     926            jbc     _TI1,L006008?
013A 8000       927            sjmp    L006001?
013C            928   L006008?:
013C            929   ;        main.c:185: SBUF1 = c;
013C 8A92       930            mov     _SBUF1,r2
013E            931   ;        main.c:186: SFRPAGE = 0x00;
013E 75A700     932            mov     _SFRPAGE,#0x00
0141 22         933            ret
0142            934   ;------------------------------------------------------------
0142            935   ;Allocation info for local variables in function 'sendstr1'
0142            936   ;------------------------------------------------------------
0142            937   ;s                         Allocated to registers r2 r3 r4 
0142            938   ;------------------------------------------------------------
0142            939   ;        main.c:189: void sendstr1 (char * s)
0142            940   ;        -----------------------------------------
0142            941   ;         function sendstr1
0142            942   ;        -----------------------------------------
0142            943   _sendstr1:
0142 AA82       944            mov     r2,dpl
0144 AB83       945            mov     r3,dph
0146 ACF0       946            mov     r4,b
0148            947   ;        main.c:191: while(*s)
0148            948   L007001?:
0148 8A82       949            mov     dpl,r2
014A 8B83       950            mov     dph,r3
014C 8CF0       951            mov     b,r4
014E 120000     952            lcall   __gptrget
0151 FD         953            mov     r5,a
0152 6000       954            jz      L007004?
0154            955   ;        main.c:193: putchar1(*s);
0154 8D82       956            mov     dpl,r5
0156 C002       957            push    ar2
0158 C003       958            push    ar3
015A C004       959            push    ar4
015C 120000     960            lcall   _putchar1
015F D004       961            pop     ar4
0161 D003       962            pop     ar3
0163 D002       963            pop     ar2
0165            964   ;        main.c:194: s++;        
0165 0A         965            inc     r2
0166 BA00D0     966            cjne    r2,#0x00,L007001?
0169 0B         967            inc     r3
016A 8000       968            sjmp    L007001?
016C            969   L007004?:
016C 22         970            ret
016D            971   ;------------------------------------------------------------
016D            972   ;Allocation info for local variables in function 'getchar1'
016D            973   ;------------------------------------------------------------
016D            974   ;c                         Allocated to registers 
016D            975   ;------------------------------------------------------------
016D            976   ;        main.c:198: char getchar1 (void)
016D            977   ;        -----------------------------------------
016D            978   ;         function getchar1
016D            979   ;        -----------------------------------------
016D            980   _getchar1:
016D            981   ;        main.c:201: SFRPAGE = 0x20;
016D 75A720     982            mov     _SFRPAGE,#0x20
0170            983   ;        main.c:202: while (!RI1);
0170            984   L008001?:
0170            985   ;        main.c:203: RI1=0;
0170 10C8D0     986            jbc     _RI1,L008008?
0173 8000       987            sjmp    L008001?
0175            988   L008008?:
0175            989   ;        main.c:205: SCON1&=0b_0011_1111;
0175 53C83F     990            anl     _SCON1,#0x3F
0178            991   ;        main.c:206: c = SBUF1;
0178 859282     992            mov     dpl,_SBUF1
017B            993   ;        main.c:207: SFRPAGE = 0x00;
017B 75A700     994            mov     _SFRPAGE,#0x00
017E            995   ;        main.c:208: return (c);
017E 22         996            ret
017F            997   ;------------------------------------------------------------
017F            998   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            999   ;------------------------------------------------------------
017F           1000   ;c                         Allocated to registers 
017F           1001   ;timeout                   Allocated to registers r2 r3 
017F           1002   ;------------------------------------------------------------
017F           1003   ;        main.c:211: char getchar1_with_timeout (void)
017F           1004   ;        -----------------------------------------
017F           1005   ;         function getchar1_with_timeout
017F           1006   ;        -----------------------------------------
017F           1007   _getchar1_with_timeout:
017F           1008   ;        main.c:215: SFRPAGE = 0x20;
017F 75A720    1009            mov     _SFRPAGE,#0x20
0182           1010   ;        main.c:217: while (!RI1)
0182 7A00      1011            mov     r2,#0x00
0184 7B00      1012            mov     r3,#0x00
0186           1013   L009003?:
0186 20C850    1014            jb      _RI1,L009005?
0189           1015   ;        main.c:219: SFRPAGE = 0x00;
0189 75A700    1016            mov     _SFRPAGE,#0x00
018C           1017   ;        main.c:220: Timer3us(20);
018C 758214    1018            mov     dpl,#0x14
018F C002      1019            push    ar2
0191 C003      1020            push    ar3
0193 120000    1021            lcall   _Timer3us
0196 D003      1022            pop     ar3
0198 D002      1023            pop     ar2
019A           1024   ;        main.c:221: SFRPAGE = 0x20;
019A 75A720    1025            mov     _SFRPAGE,#0x20
019D           1026   ;        main.c:222: timeout++;
019D 0A        1027            inc     r2
019E BA0090    1028            cjne    r2,#0x00,L009012?
01A1 0B        1029            inc     r3
01A2           1030   L009012?:
01A2           1031   ;        main.c:223: if(timeout==25000)
01A2 BAA810    1032            cjne    r2,#0xA8,L009003?
01A5 BB6110    1033            cjne    r3,#0x61,L009003?
01A8           1034   ;        main.c:225: SFRPAGE = 0x00;
01A8 75A700    1035            mov     _SFRPAGE,#0x00
01AB           1036   ;        main.c:226: return ('\n'); // Timeout after half second
01AB 75820A    1037            mov     dpl,#0x0A
01AE 22        1038            ret
01AF           1039   L009005?:
01AF           1040   ;        main.c:229: RI1=0;
01AF C2C8      1041            clr     _RI1
01B1           1042   ;        main.c:231: SCON1&=0b_0011_1111;
01B1 53C83F    1043            anl     _SCON1,#0x3F
01B4           1044   ;        main.c:232: c = SBUF1;
01B4 859282    1045            mov     dpl,_SBUF1
01B7           1046   ;        main.c:233: SFRPAGE = 0x00;
01B7 75A700    1047            mov     _SFRPAGE,#0x00
01BA           1048   ;        main.c:234: return (c);
01BA 22        1049            ret
01BB           1050   ;------------------------------------------------------------
01BB           1051   ;Allocation info for local variables in function 'getstr1'
01BB           1052   ;------------------------------------------------------------
01BB           1053   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1054   ;s                         Allocated to registers r2 r3 r4 
01BB           1055   ;c                         Allocated to registers r1 
01BB           1056   ;cnt                       Allocated to registers r5 
01BB           1057   ;------------------------------------------------------------
01BB           1058   ;        main.c:237: void getstr1 (char * s, unsigned char n)
01BB           1059   ;        -----------------------------------------
01BB           1060   ;         function getstr1
01BB           1061   ;        -----------------------------------------
01BB           1062   _getstr1:
01BB AA82      1063            mov     r2,dpl
01BD AB83      1064            mov     r3,dph
01BF ACF0      1065            mov     r4,b
01C1           1066   ;        main.c:243: while(1)
01C1 7D00      1067            mov     r5,#0x00
01C3 8A06      1068            mov     ar6,r2
01C5 8B07      1069            mov     ar7,r3
01C7 8C00      1070            mov     ar0,r4
01C9           1071   L010007?:
01C9           1072   ;        main.c:245: c=getchar1_with_timeout();
01C9 C002      1073            push    ar2
01CB C003      1074            push    ar3
01CD C004      1075            push    ar4
01CF C005      1076            push    ar5
01D1 C006      1077            push    ar6
01D3 C007      1078            push    ar7
01D5 C000      1079            push    ar0
01D7 120000    1080            lcall   _getchar1_with_timeout
01DA A982      1081            mov     r1,dpl
01DC D000      1082            pop     ar0
01DE D007      1083            pop     ar7
01E0 D006      1084            pop     ar6
01E2 D005      1085            pop     ar5
01E4 D004      1086            pop     ar4
01E6 D003      1087            pop     ar3
01E8 D002      1088            pop     ar2
01EA           1089   ;        main.c:246: if(c=='\n')
01EA B90A10    1090            cjne    r1,#0x0A,L010002?
01ED           1091   ;        main.c:248: *s=0;
01ED 8A82      1092            mov     dpl,r2
01EF 8B83      1093            mov     dph,r3
01F1 8CF0      1094            mov     b,r4
01F3 E4        1095            clr     a
01F4           1096   ;        main.c:249: return;
01F4 020000    1097            ljmp    __gptrput
01F7           1098   L010002?:
01F7           1099   ;        main.c:252: if (cnt<n)
01F7 C3        1100            clr     c
01F8 ED        1101            mov     a,r5
01F9 95B8      1102            subb    a,_getstr1_PARM_2
01FB 5000      1103            jnc     L010004?
01FD           1104   ;        main.c:254: cnt++;
01FD 0D        1105            inc     r5
01FE           1106   ;        main.c:255: *s=c;
01FE 8E82      1107            mov     dpl,r6
0200 8F83      1108            mov     dph,r7
0202 88F0      1109            mov     b,r0
0204 E9        1110            mov     a,r1
0205 120000    1111            lcall   __gptrput
0208 A3        1112            inc     dptr
0209 AE82      1113            mov     r6,dpl
020B AF83      1114            mov     r7,dph
020D           1115   ;        main.c:256: s++;
020D 8E02      1116            mov     ar2,r6
020F 8F03      1117            mov     ar3,r7
0211 8804      1118            mov     ar4,r0
0213 8000      1119            sjmp    L010007?
0215           1120   L010004?:
0215           1121   ;        main.c:260: *s=0;
0215 8A82      1122            mov     dpl,r2
0217 8B83      1123            mov     dph,r3
0219 8CF0      1124            mov     b,r4
021B E4        1125            clr     a
021C           1126   ;        main.c:261: return;
021C 020000    1127            ljmp    __gptrput
021F           1128   ;------------------------------------------------------------
021F           1129   ;Allocation info for local variables in function 'RXU1'
021F           1130   ;------------------------------------------------------------
021F           1131   ;------------------------------------------------------------
021F           1132   ;        main.c:267: bit RXU1 (void)
021F           1133   ;        -----------------------------------------
021F           1134   ;         function RXU1
021F           1135   ;        -----------------------------------------
021F           1136   _RXU1:
021F           1137   ;        main.c:270: SFRPAGE = 0x20;
021F 75A720    1138            mov     _SFRPAGE,#0x20
0222           1139   ;        main.c:271: mybit=RI1;
0222 A2C8      1140            mov     c,_RI1
0224           1141   ;        main.c:272: SFRPAGE = 0x00;
0224 75A700    1142            mov     _SFRPAGE,#0x00
0227           1143   ;        main.c:273: return mybit;
0227 22        1144            ret
0228           1145   ;------------------------------------------------------------
0228           1146   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1147   ;------------------------------------------------------------
0228           1148   ;ms                        Allocated to registers r2 r3 
0228           1149   ;j                         Allocated to registers r4 r5 
0228           1150   ;k                         Allocated to registers r6 
0228           1151   ;------------------------------------------------------------
0228           1152   ;        main.c:276: void waitms_or_RI1 (unsigned int ms)
0228           1153   ;        -----------------------------------------
0228           1154   ;         function waitms_or_RI1
0228           1155   ;        -----------------------------------------
0228           1156   _waitms_or_RI1:
0228 AA82      1157            mov     r2,dpl
022A AB83      1158            mov     r3,dph
022C           1159   ;        main.c:280: for(j=0; j<ms; j++)
022C 7C00      1160            mov     r4,#0x00
022E 7D00      1161            mov     r5,#0x00
0230           1162   L012007?:
0230 C3        1163            clr     c
0231 EC        1164            mov     a,r4
0232 9A        1165            subb    a,r2
0233 ED        1166            mov     a,r5
0234 9B        1167            subb    a,r3
0235 5000      1168            jnc     L012011?
0237           1169   ;        main.c:282: for (k=0; k<4; k++)
0237 7E00      1170            mov     r6,#0x00
0239           1171   L012003?:
0239 BE0490    1172            cjne    r6,#0x04,L012019?
023C           1173   L012019?:
023C 5000      1174            jnc     L012009?
023E           1175   ;        main.c:284: if(RXU1()) return;
023E C002      1176            push    ar2
0240 C003      1177            push    ar3
0242 C004      1178            push    ar4
0244 C005      1179            push    ar5
0246 C006      1180            push    ar6
0248 120000    1181            lcall   _RXU1
024B E4        1182            clr     a
024C 33        1183            rlc     a
024D D006      1184            pop     ar6
024F D005      1185            pop     ar5
0251 D004      1186            pop     ar4
0253 D003      1187            pop     ar3
0255 D002      1188            pop     ar2
0257 6000      1189            jz      L012002?
0259 22        1190            ret
025A           1191   L012002?:
025A           1192   ;        main.c:285: Timer3us(250);
025A 7582FA    1193            mov     dpl,#0xFA
025D C002      1194            push    ar2
025F C003      1195            push    ar3
0261 C004      1196            push    ar4
0263 C005      1197            push    ar5
0265 C006      1198            push    ar6
0267 120000    1199            lcall   _Timer3us
026A D006      1200            pop     ar6
026C D005      1201            pop     ar5
026E D004      1202            pop     ar4
0270 D003      1203            pop     ar3
0272 D002      1204            pop     ar2
0274           1205   ;        main.c:282: for (k=0; k<4; k++)
0274 0E        1206            inc     r6
0275 8000      1207            sjmp    L012003?
0277           1208   L012009?:
0277           1209   ;        main.c:280: for(j=0; j<ms; j++)
0277 0C        1210            inc     r4
0278 BC00D0    1211            cjne    r4,#0x00,L012007?
027B 0D        1212            inc     r5
027C 8000      1213            sjmp    L012007?
027E           1214   L012011?:
027E 22        1215            ret
027F           1216   ;------------------------------------------------------------
027F           1217   ;Allocation info for local variables in function 'SendATCommand'
027F           1218   ;------------------------------------------------------------
027F           1219   ;s                         Allocated to registers r2 r3 r4 
027F           1220   ;------------------------------------------------------------
027F           1221   ;        main.c:290: void SendATCommand (char * s)
027F           1222   ;        -----------------------------------------
027F           1223   ;         function SendATCommand
027F           1224   ;        -----------------------------------------
027F           1225   _SendATCommand:
027F AA82      1226            mov     r2,dpl
0281 AB83      1227            mov     r3,dph
0283 ACF0      1228            mov     r4,b
0285           1229   ;        main.c:292: printf("Command: %s", s);
0285 C002      1230            push    ar2
0287 C003      1231            push    ar3
0289 C004      1232            push    ar4
028B C002      1233            push    ar2
028D C003      1234            push    ar3
028F C004      1235            push    ar4
0291 7450      1236            mov     a,#__str_0
0293 C0E0      1237            push    acc
0295 74C2      1238            mov     a,#(__str_0 >> 8)
0297 C0E0      1239            push    acc
0299 7480      1240            mov     a,#0x80
029B C0E0      1241            push    acc
029D 120000    1242            lcall   _printf
02A0 E581      1243            mov     a,sp
02A2 24FA      1244            add     a,#0xfa
02A4 F581      1245            mov     sp,a
02A6           1246   ;        main.c:293: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1247            clr     _P2_0
02A8           1248   ;        main.c:294: waitms(5);
02A8 900005    1249            mov     dptr,#0x0005
02AB 120000    1250            lcall   _waitms
02AE D004      1251            pop     ar4
02B0 D003      1252            pop     ar3
02B2 D002      1253            pop     ar2
02B4           1254   ;        main.c:295: sendstr1(s);
02B4 8A82      1255            mov     dpl,r2
02B6 8B83      1256            mov     dph,r3
02B8 8CF0      1257            mov     b,r4
02BA 120000    1258            lcall   _sendstr1
02BD           1259   ;        main.c:296: getstr1(buff, sizeof(buff)-1);
02BD 75B813    1260            mov     _getstr1_PARM_2,#0x13
02C0 904678    1261            mov     dptr,#_buff
02C3 75F040    1262            mov     b,#0x40
02C6 120000    1263            lcall   _getstr1
02C9           1264   ;        main.c:297: waitms(10);
02C9 90000A    1265            mov     dptr,#0x000A
02CC 120000    1266            lcall   _waitms
02CF           1267   ;        main.c:298: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1268            setb    _P2_0
02D1           1269   ;        main.c:299: printf("Response: %s\r\n", buff);
02D1 7478      1270            mov     a,#_buff
02D3 C0E0      1271            push    acc
02D5 7446      1272            mov     a,#(_buff >> 8)
02D7 C0E0      1273            push    acc
02D9 7440      1274            mov     a,#0x40
02DB C0E0      1275            push    acc
02DD 7410      1276            mov     a,#__str_1
02DF C0E0      1277            push    acc
02E1 74C3      1278            mov     a,#(__str_1 >> 8)
02E3 C0E0      1279            push    acc
02E5 7480      1280            mov     a,#0x80
02E7 C0E0      1281            push    acc
02E9 120000    1282            lcall   _printf
02EC E581      1283            mov     a,sp
02EE 24FA      1284            add     a,#0xfa
02F0 F581      1285            mov     sp,a
02F2 22        1286            ret
02F3           1287   ;------------------------------------------------------------
02F3           1288   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1289   ;------------------------------------------------------------
02F3           1290   ;------------------------------------------------------------
02F3           1291   ;        main.c:302: void ReceptionOff (void)
02F3           1292   ;        -----------------------------------------
02F3           1293   ;         function ReceptionOff
02F3           1294   ;        -----------------------------------------
02F3           1295   _ReceptionOff:
02F3           1296   ;        main.c:304: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1297            clr     _P2_0
02F5           1298   ;        main.c:305: waitms(10);
02F5 90000A    1299            mov     dptr,#0x000A
02F8 120000    1300            lcall   _waitms
02FB           1301   ;        main.c:306: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C350    1302            mov     dptr,#__str_2
02FE 75F080    1303            mov     b,#0x80
0301 120000    1304            lcall   _sendstr1
0304           1305   ;        main.c:307: waitms(10);
0304 90000A    1306            mov     dptr,#0x000A
0307 120000    1307            lcall   _waitms
030A           1308   ;        main.c:309: SCON1&=0b_0011_1111;
030A 53C83F    1309            anl     _SCON1,#0x3F
030D           1310   ;        main.c:310: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1311            setb    _P2_0
030F 22        1312            ret
0310           1313   ;------------------------------------------------------------
0310           1314   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1315   ;------------------------------------------------------------
0310           1316   ;pin                       Allocated to registers r2 
0310           1317   ;mask                      Allocated to registers r3 
0310           1318   ;------------------------------------------------------------
0310           1319   ;        main.c:313: void Set_Pin_Output (unsigned char pin)
0310           1320   ;        -----------------------------------------
0310           1321   ;         function Set_Pin_Output
0310           1322   ;        -----------------------------------------
0310           1323   _Set_Pin_Output:
0310 AA82      1324            mov     r2,dpl
0312           1325   ;        main.c:317: mask=(1<<(pin&0x7));
0312 7407      1326            mov     a,#0x07
0314 5A        1327            anl     a,r2
0315 F5F0      1328            mov     b,a
0317 05F0      1329            inc     b
0319 7401      1330            mov     a,#0x01
031B 8000      1331            sjmp    L015011?
031D           1332   L015009?:
031D 25E0      1333            add     a,acc
031F           1334   L015011?:
031F D5F0D0    1335            djnz    b,L015009?
0322 FB        1336            mov     r3,a
0323           1337   ;        main.c:318: switch(pin/0x10)
0323 EA        1338            mov     a,r2
0324 C4        1339            swap    a
0325 540F      1340            anl     a,#0x0f
0327 FA        1341            mov  r2,a
0328 24FC      1342            add     a,#0xff - 0x03
032A 4000      1343            jc      L015006?
032C EA        1344            mov     a,r2
032D 2A        1345            add     a,r2
032E 2A        1346            add     a,r2
032F 90C450    1347            mov     dptr,#L015013?
0332 73        1348            jmp     @a+dptr
0333           1349   L015013?:
0333 020000    1350            ljmp    L015001?
0336 020000    1351            ljmp    L015002?
0339 020000    1352            ljmp    L015003?
033C 020000    1353            ljmp    L015004?
033F           1354   ;        main.c:320: case 0: P0MDOUT |= mask; break;
033F           1355   L015001?:
033F EB        1356            mov     a,r3
0340 42A4      1357            orl     _P0MDOUT,a
0342           1358   ;        main.c:321: case 1: P1MDOUT |= mask; break;
0342 22        1359            ret
0343           1360   L015002?:
0343 EB        1361            mov     a,r3
0344 42A5      1362            orl     _P1MDOUT,a
0346           1363   ;        main.c:322: case 2: P2MDOUT |= mask; break; 
0346 22        1364            ret
0347           1365   L015003?:
0347 EB        1366            mov     a,r3
0348 42A6      1367            orl     _P2MDOUT,a
034A           1368   ;        main.c:323: case 3: P3MDOUT |= mask; break; 
034A 22        1369            ret
034B           1370   L015004?:
034B EB        1371            mov     a,r3
034C 429C      1372            orl     _P3MDOUT,a
034E           1373   ;        main.c:324: }   
034E           1374   L015006?:
034E 22        1375            ret
034F           1376   ;------------------------------------------------------------
034F           1377   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1378   ;------------------------------------------------------------
034F           1379   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1380   ;pin                       Allocated to registers r2 
034F           1381   ;------------------------------------------------------------
034F           1382   ;        main.c:327: void Set_Pin_Input (unsigned char pin)
034F           1383   ;        -----------------------------------------
034F           1384   ;         function Set_Pin_Input
034F           1385   ;        -----------------------------------------
034F           1386   _Set_Pin_Input:
034F AA82      1387            mov     r2,dpl
0351           1388   ;        main.c:331: mask=(1<<(pin&0x7));
0351 7407      1389            mov     a,#0x07
0353 5A        1390            anl     a,r2
0354 F5F0      1391            mov     b,a
0356 05F0      1392            inc     b
0358 7401      1393            mov     a,#0x01
035A 8000      1394            sjmp    L016011?
035C           1395   L016009?:
035C 25E0      1396            add     a,acc
035E           1397   L016011?:
035E D5F0D0    1398            djnz    b,L016009?
0361           1399   ;        main.c:332: mask=~mask;
0361 F4        1400            cpl     a
0362 FB        1401            mov     r3,a
0363           1402   ;        main.c:333: switch(pin/0x10)
0363 EA        1403            mov     a,r2
0364 C4        1404            swap    a
0365 540F      1405            anl     a,#0x0f
0367 FA        1406            mov  r2,a
0368 24FC      1407            add     a,#0xff - 0x03
036A 4000      1408            jc      L016006?
036C EA        1409            mov     a,r2
036D 2A        1410            add     a,r2
036E 2A        1411            add     a,r2
036F 90C650    1412            mov     dptr,#L016013?
0372 73        1413            jmp     @a+dptr
0373           1414   L016013?:
0373 020000    1415            ljmp    L016001?
0376 020000    1416            ljmp    L016002?
0379 020000    1417            ljmp    L016003?
037C 020000    1418            ljmp    L016004?
037F           1419   ;        main.c:335: case 0: P0MDOUT &= mask; break;
037F           1420   L016001?:
037F EB        1421            mov     a,r3
0380 52A4      1422            anl     _P0MDOUT,a
0382           1423   ;        main.c:336: case 1: P1MDOUT &= mask; break;
0382 22        1424            ret
0383           1425   L016002?:
0383 EB        1426            mov     a,r3
0384 52A5      1427            anl     _P1MDOUT,a
0386           1428   ;        main.c:337: case 2: P2MDOUT &= mask; break; 
0386 22        1429            ret
0387           1430   L016003?:
0387 EB        1431            mov     a,r3
0388 52A6      1432            anl     _P2MDOUT,a
038A           1433   ;        main.c:338: case 3: P3MDOUT &= mask; break; 
038A 22        1434            ret
038B           1435   L016004?:
038B EB        1436            mov     a,r3
038C 529C      1437            anl     _P3MDOUT,a
038E           1438   ;        main.c:339: }   
038E           1439   L016006?:
038E 22        1440            ret
038F           1441   ;------------------------------------------------------------
038F           1442   ;Allocation info for local variables in function 'InitADC'
038F           1443   ;------------------------------------------------------------
038F           1444   ;------------------------------------------------------------
038F           1445   ;        main.c:342: void InitADC (void)
038F           1446   ;        -----------------------------------------
038F           1447   ;         function InitADC
038F           1448   ;        -----------------------------------------
038F           1449   _InitADC:
038F           1450   ;        main.c:344: SFRPAGE = 0x00;
038F 75A700    1451            mov     _SFRPAGE,#0x00
0392           1452   ;        main.c:345: ADEN=0; // Disable ADC
0392 C2EF      1453            clr     _ADEN
0394           1454   ;        main.c:350: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1455            mov     _ADC0CN1,#0x80
0397           1456   ;        main.c:354: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1457            mov     _ADC0CF0,#0x20
039A           1458   ;        main.c:358: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1459            mov     _ADC0CF1,#0x1E
039D           1460   ;        main.c:367: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1461            mov     _ADC0CN0,#0x00
03A0           1462   ;        main.c:372: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1463            mov     _ADC0CF2,#0x3F
03A3           1464   ;        main.c:376: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1465            mov     _ADC0CN2,#0x00
03A6           1466   ;        main.c:378: ADEN=1; // Enable ADC
03A6 D2EF      1467            setb    _ADEN
03A8 22        1468            ret
03A9           1469   ;------------------------------------------------------------
03A9           1470   ;Allocation info for local variables in function 'InitPinADC'
03A9           1471   ;------------------------------------------------------------
03A9           1472   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1473   ;portno                    Allocated to registers r2 
03A9           1474   ;mask                      Allocated to registers r3 
03A9           1475   ;------------------------------------------------------------
03A9           1476   ;        main.c:381: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1477   ;        -----------------------------------------
03A9           1478   ;         function InitPinADC
03A9           1479   ;        -----------------------------------------
03A9           1480   _InitPinADC:
03A9 AA82      1481            mov     r2,dpl
03AB           1482   ;        main.c:385: mask=1<<pin_num;
03AB 85C8F0    1483            mov     b,_InitPinADC_PARM_2
03AE 05F0      1484            inc     b
03B0 7401      1485            mov     a,#0x01
03B2 8000      1486            sjmp    L018013?
03B4           1487   L018011?:
03B4 25E0      1488            add     a,acc
03B6           1489   L018013?:
03B6 D5F0D0    1490            djnz    b,L018011?
03B9 FB        1491            mov     r3,a
03BA           1492   ;        main.c:387: SFRPAGE = 0x20;
03BA 75A720    1493            mov     _SFRPAGE,#0x20
03BD           1494   ;        main.c:388: switch (portno)
03BD BA0010    1495            cjne    r2,#0x00,L018014?
03C0 8000      1496            sjmp    L018001?
03C2           1497   L018014?:
03C2 BA0190    1498            cjne    r2,#0x01,L018015?
03C5 8000      1499            sjmp    L018002?
03C7           1500   L018015?:
03C7           1501   ;        main.c:390: case 0:
03C7 BA0210    1502            cjne    r2,#0x02,L018005?
03CA 8000      1503            sjmp    L018003?
03CC           1504   L018001?:
03CC           1505   ;        main.c:391: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1506            mov     a,r3
03CD F4        1507            cpl     a
03CE FA        1508            mov     r2,a
03CF 52F1      1509            anl     _P0MDIN,a
03D1           1510   ;        main.c:392: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1511            mov     a,r3
03D2 42D4      1512            orl     _P0SKIP,a
03D4           1513   ;        main.c:393: break;
03D4           1514   ;        main.c:394: case 1:
03D4 8000      1515            sjmp    L018005?
03D6           1516   L018002?:
03D6           1517   ;        main.c:395: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1518            mov     a,r3
03D7 F4        1519            cpl     a
03D8 FA        1520            mov     r2,a
03D9 52F2      1521            anl     _P1MDIN,a
03DB           1522   ;        main.c:396: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1523            mov     a,r3
03DC 42D5      1524            orl     _P1SKIP,a
03DE           1525   ;        main.c:397: break;
03DE           1526   ;        main.c:398: case 2:
03DE 8000      1527            sjmp    L018005?
03E0           1528   L018003?:
03E0           1529   ;        main.c:399: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1530            mov     a,r3
03E1 F4        1531            cpl     a
03E2 FA        1532            mov     r2,a
03E3 52F3      1533            anl     _P2MDIN,a
03E5           1534   ;        main.c:400: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1535            mov     a,r3
03E6 42CC      1536            orl     _P2SKIP,a
03E8           1537   ;        main.c:404: }
03E8           1538   L018005?:
03E8           1539   ;        main.c:405: SFRPAGE = 0x00;
03E8 75A700    1540            mov     _SFRPAGE,#0x00
03EB 22        1541            ret
03EC           1542   ;------------------------------------------------------------
03EC           1543   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1544   ;------------------------------------------------------------
03EC           1545   ;pin                       Allocated to registers 
03EC           1546   ;------------------------------------------------------------
03EC           1547   ;        main.c:408: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1548   ;        -----------------------------------------
03EC           1549   ;         function ADC_at_Pin
03EC           1550   ;        -----------------------------------------
03EC           1551   _ADC_at_Pin:
03EC 8582BB    1552            mov     _ADC0MX,dpl
03EF           1553   ;        main.c:411: ADINT = 0;
03EF C2ED      1554            clr     _ADINT
03F1           1555   ;        main.c:412: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1556            setb    _ADBUSY
03F3           1557   ;        main.c:413: while (!ADINT); // Wait for conversion to complete
03F3           1558   L019001?:
03F3 30ED90    1559            jnb     _ADINT,L019001?
03F6           1560   ;        main.c:414: return (ADC0);
03F6 85BD82    1561            mov     dpl,_ADC0
03F9 85BE83    1562            mov     dph,(_ADC0 >> 8)
03FC 22        1563            ret
03FD           1564   ;------------------------------------------------------------
03FD           1565   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1566   ;------------------------------------------------------------
03FD           1567   ;------------------------------------------------------------
03FD           1568   ;        main.c:417: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1569   ;        -----------------------------------------
03FD           1570   ;         function Timer5_ISR
03FD           1571   ;        -----------------------------------------
03FD           1572   _Timer5_ISR:
03FD C0E0      1573            push    acc
03FF C002      1574            push    ar2
0401 C003      1575            push    ar3
0403 C0D0      1576            push    psw
0405 75D000    1577            mov     psw,#0x00
0408           1578   ;        main.c:419: SFRPAGE=0x10;
0408 75A710    1579            mov     _SFRPAGE,#0x10
040B           1580   ;        main.c:420: TF5H = 0; // Clear Timer5 interrupt flag
040B C2C7      1581            clr     _TF5H
040D           1582   ;        main.c:421: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
040D 75D2C4    1583            mov     _TMR5RL,#0xC4
0410 75D3FF    1584            mov     (_TMR5RL >> 8),#0xFF
0413           1585   ;        main.c:423: pwm_counter++; 
0413 0538      1586            inc     _pwm_counter
0415 E4        1587            clr     a
0416 B53810    1588            cjne    a,_pwm_counter,L020033?
0419 0539      1589            inc     (_pwm_counter + 1)
041B           1590   L020033?:
041B           1591   ;        main.c:424: if (pwm_counter == 100){
041B 7464      1592            mov     a,#0x64
041D B53850    1593            cjne    a,_pwm_counter,L020034?
0420 E4        1594            clr     a
0421 B53950    1595            cjne    a,(_pwm_counter + 1),L020034?
0424 8000      1596            sjmp    L020035?
0426           1597   L020034?:
0426 8000      1598            sjmp    L020002?
0428           1599   L020035?:
0428           1600   ;        main.c:425: pwm_counter = 0; 
0428 E4        1601            clr     a
0429 F538      1602            mov     _pwm_counter,a
042B F539      1603            mov     (_pwm_counter + 1),a
042D           1604   L020002?:
042D           1605   ;        main.c:428: if (pwm_right > pwm_counter){
042D AA78      1606            mov     r2,_pwm_right
042F 7B00      1607            mov     r3,#0x00
0431 C3        1608            clr     c
0432 E538      1609            mov     a,_pwm_counter
0434 9A        1610            subb    a,r2
0435 E539      1611            mov     a,(_pwm_counter + 1)
0437 9B        1612            subb    a,r3
0438 5000      1613            jnc     L020007?
043A           1614   ;        main.c:429: if(L_motor_dir){
043A E538      1615            mov     a,_L_motor_dir
043C 6000      1616            jz      L020004?
043E           1617   ;        main.c:430: L_bridge_1 = 1; 
043E D2A1      1618            setb    _P2_1
0440           1619   ;        main.c:431: L_bridge_2 = 0; 
0440 C2A2      1620            clr     _P2_2
0442 8000      1621            sjmp    L020008?
0444           1622   L020004?:
0444           1623   ;        main.c:434: L_bridge_1 = 0; 
0444 C2A1      1624            clr     _P2_1
0446           1625   ;        main.c:435: L_bridge_2 = 1; 
0446 D2A2      1626            setb    _P2_2
0448 8000      1627            sjmp    L020008?
044A           1628   L020007?:
044A           1629   ;        main.c:439: L_bridge_1 = 0; 
044A C2A1      1630            clr     _P2_1
044C           1631   ;        main.c:440: L_bridge_2 = 0; 
044C C2A2      1632            clr     _P2_2
044E           1633   L020008?:
044E           1634   ;        main.c:442: if (pwm_left > pwm_counter){
044E AAB8      1635            mov     r2,_pwm_left
0450 7B00      1636            mov     r3,#0x00
0452 C3        1637            clr     c
0453 E538      1638            mov     a,_pwm_counter
0455 9A        1639            subb    a,r2
0456 E539      1640            mov     a,(_pwm_counter + 1)
0458 9B        1641            subb    a,r3
0459 5000      1642            jnc     L020013?
045B           1643   ;        main.c:443: if (R_motor_dir){
045B E5F8      1644            mov     a,_R_motor_dir
045D 6000      1645            jz      L020010?
045F           1646   ;        main.c:444: R_bridge_1 = 1; 
045F D2A4      1647            setb    _P2_4
0461           1648   ;        main.c:445: R_bridge_2 = 0;
0461 C2A3      1649            clr     _P2_3
0463 8000      1650            sjmp    L020014?
0465           1651   L020010?:
0465           1652   ;        main.c:448: R_bridge_1 = 0; 
0465 C2A4      1653            clr     _P2_4
0467           1654   ;        main.c:449: R_bridge_2 = 1;
0467 D2A3      1655            setb    _P2_3
0469 8000      1656            sjmp    L020014?
046B           1657   L020013?:
046B           1658   ;        main.c:453: R_bridge_1 = 0; 
046B C2A4      1659            clr     _P2_4
046D           1660   ;        main.c:454: R_bridge_2 = 0; 
046D C2A3      1661            clr     _P2_3
046F           1662   L020014?:
046F           1663   ;        main.c:457: servo_counter++;
046F 05F8      1664            inc     _servo_counter
0471 E4        1665            clr     a
0472 B5F890    1666            cjne    a,_servo_counter,L020040?
0475 05F9      1667            inc     (_servo_counter + 1)
0477           1668   L020040?:
0477           1669   ;        main.c:458: if(servo_counter==2000)
0477 74D0      1670            mov     a,#0xD0
0479 B5F8D0    1671            cjne    a,_servo_counter,L020016?
047C 7407      1672            mov     a,#0x07
047E B5F9D0    1673            cjne    a,(_servo_counter + 1),L020016?
0481           1674   ;        main.c:460: servo_counter=0;
0481 E4        1675            clr     a
0482 F5F8      1676            mov     _servo_counter,a
0484 F5F9      1677            mov     (_servo_counter + 1),a
0486           1678   L020016?:
0486           1679   ;        main.c:462: if(servo_arm==servo_counter)
0486 AA78      1680            mov     r2,_servo_arm
0488 7B00      1681            mov     r3,#0x00
048A EA        1682            mov     a,r2
048B B5F810    1683            cjne    a,_servo_counter,L020018?
048E EB        1684            mov     a,r3
048F B5F910    1685            cjne    a,(_servo_counter + 1),L020018?
0492           1686   ;        main.c:464: Servo_arm=0;
0492 C297      1687            clr     _P1_7
0494 8000      1688            sjmp    L020019?
0496           1689   L020018?:
0496           1690   ;        main.c:467: Servo_base = 0;
0496 C296      1691            clr     _P1_6
0498           1692   L020019?:
0498           1693   ;        main.c:469: if (servo_arm_pwm > servo_counter)
0498 AAF8      1694            mov     r2,_servo_arm_pwm
049A 7B00      1695            mov     r3,#0x00
049C C3        1696            clr     c
049D E5F8      1697            mov     a,_servo_counter
049F 9A        1698            subb    a,r2
04A0 E5F9      1699            mov     a,(_servo_counter + 1)
04A2 9B        1700            subb    a,r3
04A3 5000      1701            jnc     L020021?
04A5           1702   ;        main.c:471: Servo_arm = 1; 
04A5 D297      1703            setb    _P1_7
04A7 8000      1704            sjmp    L020023?
04A9           1705   L020021?:
04A9           1706   ;        main.c:474: Servo_arm = 0; 
04A9 C297      1707            clr     _P1_7
04AB           1708   L020023?:
04AB D0D0      1709            pop     psw
04AD D003      1710            pop     ar3
04AF D002      1711            pop     ar2
04B1 D0E0      1712            pop     acc
04B3 32        1713            reti
04B4           1714   ;        eliminated unneeded push/pop dpl
04B4           1715   ;        eliminated unneeded push/pop dph
04B4           1716   ;        eliminated unneeded push/pop b
04B4           1717   ;------------------------------------------------------------
04B4           1718   ;Allocation info for local variables in function 'Calibrate_Joystick'
04B4           1719   ;------------------------------------------------------------
04B4           1720   ;i                         Allocated to registers r2 r3 
04B4           1721   ;------------------------------------------------------------
04B4           1722   ;        main.c:478: void Calibrate_Joystick(void)
04B4           1723   ;        -----------------------------------------
04B4           1724   ;         function Calibrate_Joystick
04B4           1725   ;        -----------------------------------------
04B4           1726   _Calibrate_Joystick:
04B4           1727   ;        main.c:481: printf("Calibration Starts\r");
04B4 7410      1728            mov     a,#__str_3
04B6 C0E0      1729            push    acc
04B8 74CE      1730            mov     a,#(__str_3 >> 8)
04BA C0E0      1731            push    acc
04BC 7480      1732            mov     a,#0x80
04BE C0E0      1733            push    acc
04C0 120000    1734            lcall   _printf
04C3 1581      1735            dec     sp
04C5 1581      1736            dec     sp
04C7 1581      1737            dec     sp
04C9           1738   ;        main.c:482: for (i = 0; (i<10) && (((155<=vx)&&(vx<=170))||((155<=vy)&&(vy<=170))); i++){
04C9 7A00      1739            mov     r2,#0x00
04CB 7B00      1740            mov     r3,#0x00
04CD           1741   L021005?:
04CD C3        1742            clr     c
04CE EA        1743            mov     a,r2
04CF 940A      1744            subb    a,#0x0A
04D1 EB        1745            mov     a,r3
04D2 6480      1746            xrl     a,#0x80
04D4 9480      1747            subb    a,#0x80
04D6 5000      1748            jnc     L021008?
04D8 C3        1749            clr     c
04D9 E5B8      1750            mov     a,_vx
04DB 949B      1751            subb    a,#0x9B
04DD E5B9      1752            mov     a,(_vx + 1)
04DF 6480      1753            xrl     a,#0x80
04E1 9480      1754            subb    a,#0x80
04E3 4000      1755            jc      L021003?
04E5 74AA      1756            mov     a,#0xAA
04E7 95B8      1757            subb    a,_vx
04E9 E4        1758            clr     a
04EA 6480      1759            xrl     a,#0x80
04EC 85B9F0    1760            mov     b,(_vx + 1)
04EF 63F080    1761            xrl     b,#0x80
04F2 95F0      1762            subb    a,b
04F4 5000      1763            jnc     L021006?
04F6           1764   L021003?:
04F6 C3        1765            clr     c
04F7 E578      1766            mov     a,_vy
04F9 949B      1767            subb    a,#0x9B
04FB E579      1768            mov     a,(_vy + 1)
04FD 6480      1769            xrl     a,#0x80
04FF 9480      1770            subb    a,#0x80
0501 4000      1771            jc      L021008?
0503 74AA      1772            mov     a,#0xAA
0505 9578      1773            subb    a,_vy
0507 E4        1774            clr     a
0508 6480      1775            xrl     a,#0x80
050A 8579F0    1776            mov     b,(_vy + 1)
050D 63F080    1777            xrl     b,#0x80
0510 95F0      1778            subb    a,b
0512 4000      1779            jc      L021008?
0514           1780   L021006?:
0514           1781   ;        main.c:483: vx_thres += vx; 
0514 E5B8      1782            mov     a,_vx
0516 2538      1783            add     a,_vx_thres
0518 F538      1784            mov     _vx_thres,a
051A E5B9      1785            mov     a,(_vx + 1)
051C 3539      1786            addc    a,(_vx_thres + 1)
051E F539      1787            mov     (_vx_thres + 1),a
0520           1788   ;        main.c:484: vy_thres += vy; 
0520 E578      1789            mov     a,_vy
0522 25F8      1790            add     a,_vy_thres
0524 F5F8      1791            mov     _vy_thres,a
0526 E579      1792            mov     a,(_vy + 1)
0528 35F9      1793            addc    a,(_vy_thres + 1)
052A F5F9      1794            mov     (_vy_thres + 1),a
052C           1795   ;        main.c:482: for (i = 0; (i<10) && (((155<=vx)&&(vx<=170))||((155<=vy)&&(vy<=170))); i++){
052C 0A        1796            inc     r2
052D BA0050    1797            cjne    r2,#0x00,L021005?
0530 0B        1798            inc     r3
0531 8000      1799            sjmp    L021005?
0533           1800   L021008?:
0533           1801   ;        main.c:486: vx_thres = vx_thres / 10; 
0533 75000A    1802            mov     __divsint_PARM_2,#0x0A
0536 E4        1803            clr     a
0537 F501      1804            mov     (__divsint_PARM_2 + 1),a
0539 853882    1805            mov     dpl,_vx_thres
053C 853983    1806            mov     dph,(_vx_thres + 1)
053F 120000    1807            lcall   __divsint
0542 858238    1808            mov     _vx_thres,dpl
0545 858339    1809            mov     (_vx_thres + 1),dph
0548           1810   ;        main.c:487: vy_thres = vy_thres / 10; 
0548 75000A    1811            mov     __divsint_PARM_2,#0x0A
054B E4        1812            clr     a
054C F501      1813            mov     (__divsint_PARM_2 + 1),a
054E 85F882    1814            mov     dpl,_vy_thres
0551 85F983    1815            mov     dph,(_vy_thres + 1)
0554 120000    1816            lcall   __divsint
0557 8582F8    1817            mov     _vy_thres,dpl
055A 8583F9    1818            mov     (_vy_thres + 1),dph
055D           1819   ;        main.c:488: waitms(10);
055D 90000A    1820            mov     dptr,#0x000A
0560 120000    1821            lcall   _waitms
0563           1822   ;        main.c:489: printf("Calibration Complete: Vx_ca = %d, Vy_ca = %d", vx_thres, vy_thres);
0563 C0F8      1823            push    _vy_thres
0565 C0F9      1824            push    (_vy_thres + 1)
0567 C038      1825            push    _vx_thres
0569 C039      1826            push    (_vx_thres + 1)
056B 74E8      1827            mov     a,#__str_4
056D C0E0      1828            push    acc
056F 74CF      1829            mov     a,#(__str_4 >> 8)
0571 C0E0      1830            push    acc
0573 7480      1831            mov     a,#0x80
0575 C0E0      1832            push    acc
0577 120000    1833            lcall   _printf
057A E581      1834            mov     a,sp
057C 24F9      1835            add     a,#0xf9
057E F581      1836            mov     sp,a
0580 22        1837            ret
0581           1838   ;------------------------------------------------------------
0581           1839   ;Allocation info for local variables in function 'main'
0581           1840   ;------------------------------------------------------------
0581           1841   ;cnt                       Allocated to registers 
0581           1842   ;c                         Allocated to registers r4 
0581           1843   ;vx_error                  Allocated with name '_main_vx_error_1_130'
0581           1844   ;vy_error                  Allocated with name '_main_vy_error_1_130'
0581           1845   ;vx_err                    Allocated with name '_main_vx_err_1_130'
0581           1846   ;vy_err                    Allocated with name '_main_vy_err_1_130'
0581           1847   ;vx                        Allocated with name '_main_vx_1_130'
0581           1848   ;vy                        Allocated with name '_main_vy_1_130'
0581           1849   ;threshold                 Allocated to registers 
0581           1850   ;motor_pwm                 Allocated to registers 
0581           1851   ;------------------------------------------------------------
0581           1852   ;        main.c:492: void main (void)
0581           1853   ;        -----------------------------------------
0581           1854   ;         function main
0581           1855   ;        -----------------------------------------
0581           1856   _main:
0581           1857   ;        main.c:497: int vx = 0, vy = 0; 
0581 E4        1858            clr     a
0582 F580      1859            mov     _main_vx_1_130,a
0584 F581      1860            mov     (_main_vx_1_130 + 1),a
0586 F5C0      1861            mov     _main_vy_1_130,a
0588 F5C1      1862            mov     (_main_vy_1_130 + 1),a
058A           1863   ;        main.c:501: Set_Pin_Output(0x24);
058A 758224    1864            mov     dpl,#0x24
058D 120000    1865            lcall   _Set_Pin_Output
0590           1866   ;        main.c:502: Set_Pin_Output(0x23);
0590 758223    1867            mov     dpl,#0x23
0593 120000    1868            lcall   _Set_Pin_Output
0596           1869   ;        main.c:503: Set_Pin_Output(0x22);
0596 758222    1870            mov     dpl,#0x22
0599 120000    1871            lcall   _Set_Pin_Output
059C           1872   ;        main.c:504: Set_Pin_Output(0x21);
059C 758221    1873            mov     dpl,#0x21
059F 120000    1874            lcall   _Set_Pin_Output
05A2           1875   ;        main.c:505: Set_Pin_Output(0x17);
05A2 758217    1876            mov     dpl,#0x17
05A5 120000    1877            lcall   _Set_Pin_Output
05A8           1878   ;        main.c:506: Set_Pin_Output(0x16);
05A8 758216    1879            mov     dpl,#0x16
05AB 120000    1880            lcall   _Set_Pin_Output
05AE           1881   ;        main.c:508: waitms(500);
05AE 9001F4    1882            mov     dptr,#0x01F4
05B1 120000    1883            lcall   _waitms
05B4           1884   ;        main.c:509: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
05B4 7428      1885            mov     a,#__str_5
05B6 C0E0      1886            push    acc
05B8 74D0      1887            mov     a,#(__str_5 >> 8)
05BA C0E0      1888            push    acc
05BC 7480      1889            mov     a,#0x80
05BE C0E0      1890            push    acc
05C0 120000    1891            lcall   _printf
05C3 1581      1892            dec     sp
05C5 1581      1893            dec     sp
05C7 1581      1894            dec     sp
05C9           1895   ;        main.c:510: UART1_Init(9600);
05C9 902580    1896            mov     dptr,#0x2580
05CC E4        1897            clr     a
05CD F5F0      1898            mov     b,a
05CF 120000    1899            lcall   _UART1_Init
05D2           1900   ;        main.c:512: ReceptionOff();
05D2 120000    1901            lcall   _ReceptionOff
05D5           1902   ;        main.c:515: SendATCommand("AT+VER\r\n");
05D5 90D068    1903            mov     dptr,#__str_6
05D8 75F080    1904            mov     b,#0x80
05DB 120000    1905            lcall   _SendATCommand
05DE           1906   ;        main.c:516: SendATCommand("AT+BAUD\r\n");
05DE 90D0A8    1907            mov     dptr,#__str_7
05E1 75F080    1908            mov     b,#0x80
05E4 120000    1909            lcall   _SendATCommand
05E7           1910   ;        main.c:517: SendATCommand("AT+RFID\r\n");
05E7 90D0E8    1911            mov     dptr,#__str_8
05EA 75F080    1912            mov     b,#0x80
05ED 120000    1913            lcall   _SendATCommand
05F0           1914   ;        main.c:518: SendATCommand("AT+DVID\r\n");
05F0 90D128    1915            mov     dptr,#__str_9
05F3 75F080    1916            mov     b,#0x80
05F6 120000    1917            lcall   _SendATCommand
05F9           1918   ;        main.c:519: SendATCommand("AT+RFC\r\n");
05F9 90D168    1919            mov     dptr,#__str_10
05FC 75F080    1920            mov     b,#0x80
05FF 120000    1921            lcall   _SendATCommand
0602           1922   ;        main.c:520: SendATCommand("AT+POWE\r\n");
0602 90D1A8    1923            mov     dptr,#__str_11
0605 75F080    1924            mov     b,#0x80
0608 120000    1925            lcall   _SendATCommand
060B           1926   ;        main.c:521: SendATCommand("AT+CLSS\r\n");
060B 90D1E8    1927            mov     dptr,#__str_12
060E 75F080    1928            mov     b,#0x80
0611 120000    1929            lcall   _SendATCommand
0614           1930   ;        main.c:522: SendATCommand("AT+DVIDEFEF\r\n");  
0614 90D228    1931            mov     dptr,#__str_13
0617 75F080    1932            mov     b,#0x80
061A 120000    1933            lcall   _SendATCommand
061D           1934   ;        main.c:525: L_bridge_1 = 0; 
061D C2A1      1935            clr     _P2_1
061F           1936   ;        main.c:526: L_bridge_2 = 0; 
061F C2A2      1937            clr     _P2_2
0621           1938   ;        main.c:527: R_bridge_1 = 0; 
0621 C2A4      1939            clr     _P2_4
0623           1940   ;        main.c:528: R_bridge_2 = 0; 
0623 C2A3      1941            clr     _P2_3
0625           1942   ;        main.c:531: while(1)
0625 7A00      1943            mov     r2,#0x00
0627 7B00      1944            mov     r3,#0x00
0629           1945   L022049?:
0629           1946   ;        main.c:534: if(RXU1()) // Something has arrived
0629 C002      1947            push    ar2
062B C003      1948            push    ar3
062D 120000    1949            lcall   _RXU1
0630 E4        1950            clr     a
0631 33        1951            rlc     a
0632 D003      1952            pop     ar3
0634 D002      1953            pop     ar2
0636 6000      1954            jz      L022049?
0638           1955   ;        main.c:536: c=getchar1();
0638 C002      1956            push    ar2
063A C003      1957            push    ar3
063C 120000    1958            lcall   _getchar1
063F AC82      1959            mov     r4,dpl
0641 D003      1960            pop     ar3
0643 D002      1961            pop     ar2
0645           1962   ;        main.c:538: if(c=='!') // Master is sending message
0645 BC21A8    1963            cjne    r4,#0x21,L022075?
0648 8000      1964            sjmp    L022076?
064A           1965   L022075?:
064A 020000    1966            ljmp    L022044?
064D           1967   L022076?:
064D           1968   ;        main.c:540: getstr1(buff, sizeof(buff)-1);
064D 75B813    1969            mov     _getstr1_PARM_2,#0x13
0650 904678    1970            mov     dptr,#_buff
0653 75F040    1971            mov     b,#0x40
0656 C002      1972            push    ar2
0658 C003      1973            push    ar3
065A 120000    1974            lcall   _getstr1
065D           1975   ;        main.c:541: if(strlen(buff)==7)
065D 904678    1976            mov     dptr,#_buff
0660 75F040    1977            mov     b,#0x40
0663 120000    1978            lcall   _strlen
0666 AD82      1979            mov     r5,dpl
0668 AE83      1980            mov     r6,dph
066A D003      1981            pop     ar3
066C D002      1982            pop     ar2
066E BD07A8    1983            cjne    r5,#0x07,L022077?
0671 BE00A8    1984            cjne    r6,#0x00,L022077?
0674 8000      1985            sjmp    L022078?
0676           1986   L022077?:
0676 020000    1987            ljmp    L022039?
0679           1988   L022078?:
0679           1989   ;        main.c:545: sscanf(buff, "%03d,%03d", &vx, &vy);
0679 C002      1990            push    ar2
067B C003      1991            push    ar3
067D 74C0      1992            mov     a,#_main_vy_1_130
067F C0E0      1993            push    acc
0681 74B8      1994            mov     a,#(_main_vy_1_130 >> 8)
0683 C0E0      1995            push    acc
0685 7440      1996            mov     a,#0x40
0687 C0E0      1997            push    acc
0689 7480      1998            mov     a,#_main_vx_1_130
068B C0E0      1999            push    acc
068D 74B8      2000            mov     a,#(_main_vx_1_130 >> 8)
068F C0E0      2001            push    acc
0691 7440      2002            mov     a,#0x40
0693 C0E0      2003            push    acc
0695 7468      2004            mov     a,#__str_14
0697 C0E0      2005            push    acc
0699 74D4      2006            mov     a,#(__str_14 >> 8)
069B C0E0      2007            push    acc
069D 7480      2008            mov     a,#0x80
069F C0E0      2009            push    acc
06A1 7478      2010            mov     a,#_buff
06A3 C0E0      2011            push    acc
06A5 7446      2012            mov     a,#(_buff >> 8)
06A7 C0E0      2013            push    acc
06A9 7440      2014            mov     a,#0x40
06AB C0E0      2015            push    acc
06AD 120000    2016            lcall   _sscanf
06B0 E581      2017            mov     a,sp
06B2 24F4      2018            add     a,#0xf4
06B4 F581      2019            mov     sp,a
06B6           2020   ;        main.c:547: printf("Joystick Received: Vx = %03d, Vy = %03d\r\n", vx, vy);
06B6 C0C0      2021            push    _main_vy_1_130
06B8 C0C1      2022            push    (_main_vy_1_130 + 1)
06BA C080      2023            push    _main_vx_1_130
06BC C081      2024            push    (_main_vx_1_130 + 1)
06BE 74E8      2025            mov     a,#__str_15
06C0 C0E0      2026            push    acc
06C2 74D4      2027            mov     a,#(__str_15 >> 8)
06C4 C0E0      2028            push    acc
06C6 7480      2029            mov     a,#0x80
06C8 C0E0      2030            push    acc
06CA 120000    2031            lcall   _printf
06CD E581      2032            mov     a,sp
06CF 24F9      2033            add     a,#0xf9
06D1 F581      2034            mov     sp,a
06D3           2035   ;        main.c:550: vx_error = abs(vx-vx_thres)*100/vx_thres; 
06D3 E580      2036            mov     a,_main_vx_1_130
06D5 C3        2037            clr     c
06D6 9538      2038            subb    a,_vx_thres
06D8 F582      2039            mov     dpl,a
06DA E581      2040            mov     a,(_main_vx_1_130 + 1)
06DC 9539      2041            subb    a,(_vx_thres + 1)
06DE F583      2042            mov     dph,a
06E0 120000    2043            lcall   _abs
06E3 858200    2044            mov     __mulint_PARM_2,dpl
06E6 858301    2045            mov     (__mulint_PARM_2 + 1),dph
06E9 900064    2046            mov     dptr,#0x0064
06EC 120000    2047            lcall   __mulint
06EF 853800    2048            mov     __divsint_PARM_2,_vx_thres
06F2 853901    2049            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
06F5 120000    2050            lcall   __divsint
06F8 858250    2051            mov     _main_vx_error_1_130,dpl
06FB 858351    2052            mov     (_main_vx_error_1_130 + 1),dph
06FE           2053   ;        main.c:551: vy_error = abs(vy-vy_thres)*100/vy_thres; 
06FE E5C0      2054            mov     a,_main_vy_1_130
0700 C3        2055            clr     c
0701 95F8      2056            subb    a,_vy_thres
0703 F582      2057            mov     dpl,a
0705 E5C1      2058            mov     a,(_main_vy_1_130 + 1)
0707 95F9      2059            subb    a,(_vy_thres + 1)
0709 F583      2060            mov     dph,a
070B 120000    2061            lcall   _abs
070E 858200    2062            mov     __mulint_PARM_2,dpl
0711 858301    2063            mov     (__mulint_PARM_2 + 1),dph
0714 900064    2064            mov     dptr,#0x0064
0717 120000    2065            lcall   __mulint
071A 85F800    2066            mov     __divsint_PARM_2,_vy_thres
071D 85F901    2067            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
0720 120000    2068            lcall   __divsint
0723 8582A0    2069            mov     _main_vy_error_1_130,dpl
0726 8583A1    2070            mov     (_main_vy_error_1_130 + 1),dph
0729 D003      2071            pop     ar3
072B D002      2072            pop     ar2
072D           2073   ;        main.c:552: vx_err = vx-vx_thres; 
072D E580      2074            mov     a,_main_vx_1_130
072F C3        2075            clr     c
0730 9538      2076            subb    a,_vx_thres
0732 F5F0      2077            mov     _main_vx_err_1_130,a
0734 E581      2078            mov     a,(_main_vx_1_130 + 1)
0736 9539      2079            subb    a,(_vx_thres + 1)
0738 F5F1      2080            mov     (_main_vx_err_1_130 + 1),a
073A           2081   ;        main.c:553: vy_err = vy-vy_thres; 
073A E5C0      2082            mov     a,_main_vy_1_130
073C C3        2083            clr     c
073D 95F8      2084            subb    a,_vy_thres
073F F540      2085            mov     _main_vy_err_1_130,a
0741 E5C1      2086            mov     a,(_main_vy_1_130 + 1)
0743 95F9      2087            subb    a,(_vy_thres + 1)
0745 F541      2088            mov     (_main_vy_err_1_130 + 1),a
0747           2089   ;        main.c:554: pwm_left = 0; 
0747 75B800    2090            mov     _pwm_left,#0x00
074A           2091   ;        main.c:555: pwm_right = 0; 
074A 757800    2092            mov     _pwm_right,#0x00
074D           2093   ;        main.c:557: if ((vy_error>5) && (vx_error<5)){
074D C3        2094            clr     c
074E 7405      2095            mov     a,#0x05
0750 95A0      2096            subb    a,_main_vy_error_1_130
0752 E4        2097            clr     a
0753 6480      2098            xrl     a,#0x80
0755 85A1F0    2099            mov     b,(_main_vy_error_1_130 + 1)
0758 63F080    2100            xrl     b,#0x80
075B 95F0      2101            subb    a,b
075D E4        2102            clr     a
075E 33        2103            rlc     a
075F FF        2104            mov     r7,a
0760 6000      2105            jz      L022005?
0762 C3        2106            clr     c
0763 E550      2107            mov     a,_main_vx_error_1_130
0765 9405      2108            subb    a,#0x05
0767 E551      2109            mov     a,(_main_vx_error_1_130 + 1)
0769 6480      2110            xrl     a,#0x80
076B 9480      2111            subb    a,#0x80
076D 5000      2112            jnc     L022005?
076F           2113   ;        main.c:558: pwm_left = vy_error; 
076F ADA0      2114            mov     r5,_main_vy_error_1_130
0771 8DB8      2115            mov     _pwm_left,r5
0773           2116   ;        main.c:559: pwm_right = vy_error; 
0773 8D78      2117            mov     _pwm_right,r5
0775           2118   ;        main.c:560: if (vy_err > 0){ //move forward
0775 C3        2119            clr     c
0776 E4        2120            clr     a
0777 9540      2121            subb    a,_main_vy_err_1_130
0779 E4        2122            clr     a
077A 6480      2123            xrl     a,#0x80
077C 8541F0    2124            mov     b,(_main_vy_err_1_130 + 1)
077F 63F080    2125            xrl     b,#0x80
0782 95F0      2126            subb    a,b
0784 5000      2127            jnc     L022002?
0786           2128   ;        main.c:561: L_motor_dir = 0; 
0786 753800    2129            mov     _L_motor_dir,#0x00
0789           2130   ;        main.c:562: R_motor_dir = 0; 
0789 75F800    2131            mov     _R_motor_dir,#0x00
078C 8000      2132            sjmp    L022005?
078E           2133   L022002?:
078E           2134   ;        main.c:565: L_motor_dir = 1; 
078E 753801    2135            mov     _L_motor_dir,#0x01
0791           2136   ;        main.c:566: R_motor_dir = 1; 
0791 75F801    2137            mov     _R_motor_dir,#0x01
0794           2138   L022005?:
0794           2139   ;        main.c:569: if ((vx_error>5)&&(vy_error<5)){
0794 C3        2140            clr     c
0795 7405      2141            mov     a,#0x05
0797 9550      2142            subb    a,_main_vx_error_1_130
0799 E4        2143            clr     a
079A 6480      2144            xrl     a,#0x80
079C 8551F0    2145            mov     b,(_main_vx_error_1_130 + 1)
079F 63F080    2146            xrl     b,#0x80
07A2 95F0      2147            subb    a,b
07A4 E4        2148            clr     a
07A5 33        2149            rlc     a
07A6 FD        2150            mov     r5,a
07A7 6000      2151            jz      L022011?
07A9 C3        2152            clr     c
07AA E5A0      2153            mov     a,_main_vy_error_1_130
07AC 9405      2154            subb    a,#0x05
07AE E5A1      2155            mov     a,(_main_vy_error_1_130 + 1)
07B0 6480      2156            xrl     a,#0x80
07B2 9480      2157            subb    a,#0x80
07B4 5000      2158            jnc     L022011?
07B6           2159   ;        main.c:570: pwm_left = vx_error; 
07B6 AE50      2160            mov     r6,_main_vx_error_1_130
07B8 8EB8      2161            mov     _pwm_left,r6
07BA           2162   ;        main.c:571: pwm_right = vx_error; 
07BA 8E78      2163            mov     _pwm_right,r6
07BC           2164   ;        main.c:572: if (vx_err > 0){ //turn right
07BC C3        2165            clr     c
07BD E4        2166            clr     a
07BE 95F0      2167            subb    a,_main_vx_err_1_130
07C0 E4        2168            clr     a
07C1 6480      2169            xrl     a,#0x80
07C3 85F1F0    2170            mov     b,(_main_vx_err_1_130 + 1)
07C6 63F080    2171            xrl     b,#0x80
07C9 95F0      2172            subb    a,b
07CB 5000      2173            jnc     L022008?
07CD           2174   ;        main.c:573: L_motor_dir = 1; 
07CD 753801    2175            mov     _L_motor_dir,#0x01
07D0           2176   ;        main.c:574: R_motor_dir = 0; 
07D0 75F800    2177            mov     _R_motor_dir,#0x00
07D3 8000      2178            sjmp    L022011?
07D5           2179   L022008?:
07D5           2180   ;        main.c:577: L_motor_dir = 0; 
07D5 753800    2181            mov     _L_motor_dir,#0x00
07D8           2182   ;        main.c:578: R_motor_dir = 1; 
07D8 75F801    2183            mov     _R_motor_dir,#0x01
07DB           2184   L022011?:
07DB           2185   ;        main.c:581: if ((vx_error>5)&&(vy_error)>5){
07DB ED        2186            mov     a,r5
07DC 7000      2187            jnz     L022085?
07DE 020000    2188            ljmp    L022049?
07E1           2189   L022085?:
07E1 EF        2190            mov     a,r7
07E2 7000      2191            jnz     L022086?
07E4 020000    2192            ljmp    L022049?
07E7           2193   L022086?:
07E7           2194   ;        main.c:583: if (vy_err>0){
07E7 C3        2195            clr     c
07E8 E4        2196            clr     a
07E9 9540      2197            subb    a,_main_vy_err_1_130
07EB E4        2198            clr     a
07EC 6480      2199            xrl     a,#0x80
07EE 8541F0    2200            mov     b,(_main_vy_err_1_130 + 1)
07F1 63F080    2201            xrl     b,#0x80
07F4 95F0      2202            subb    a,b
07F6 4000      2203            jc      L022087?
07F8 020000    2204            ljmp    L022023?
07FB           2205   L022087?:
07FB           2206   ;        main.c:584: L_motor_dir = 0; 
07FB 753800    2207            mov     _L_motor_dir,#0x00
07FE           2208   ;        main.c:585: R_motor_dir = 0; 
07FE 75F800    2209            mov     _R_motor_dir,#0x00
0801           2210   ;        main.c:587: if (vx_err>0){
0801 C3        2211            clr     c
0802 E4        2212            clr     a
0803 95F0      2213            subb    a,_main_vx_err_1_130
0805 E4        2214            clr     a
0806 6480      2215            xrl     a,#0x80
0808 85F1F0    2216            mov     b,(_main_vx_err_1_130 + 1)
080B 63F080    2217            xrl     b,#0x80
080E 95F0      2218            subb    a,b
0810 4000      2219            jc      L022088?
0812 020000    2220            ljmp    L022020?
0815           2221   L022088?:
0815           2222   ;        main.c:588: if (vy*100<=vy_thres*100/2){
0815 C002      2223            push    ar2
0817 C003      2224            push    ar3
0819 85C000    2225            mov     __mulint_PARM_2,_main_vy_1_130
081C 85C101    2226            mov     (__mulint_PARM_2 + 1),(_main_vy_1_130 + 1)
081F 900064    2227            mov     dptr,#0x0064
0822 C002      2228            push    ar2
0824 C003      2229            push    ar3
0826 120000    2230            lcall   __mulint
0829 AD82      2231            mov     r5,dpl
082B AE83      2232            mov     r6,dph
082D D003      2233            pop     ar3
082F D002      2234            pop     ar2
0831 85F800    2235            mov     __mulint_PARM_2,_vy_thres
0834 85F901    2236            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0837 900064    2237            mov     dptr,#0x0064
083A C003      2238            push    ar3
083C C005      2239            push    ar5
083E C006      2240            push    ar6
0840 120000    2241            lcall   __mulint
0843 AF82      2242            mov     r7,dpl
0845 AA83      2243            mov     r2,dph
0847 D006      2244            pop     ar6
0849 D005      2245            pop     ar5
084B D003      2246            pop     ar3
084D 750002    2247            mov     __divsint_PARM_2,#0x02
0850 E4        2248            clr     a
0851 F501      2249            mov     (__divsint_PARM_2 + 1),a
0853 8F82      2250            mov     dpl,r7
0855 8A83      2251            mov     dph,r2
0857 C005      2252            push    ar5
0859 C006      2253            push    ar6
085B 120000    2254            lcall   __divsint
085E AA82      2255            mov     r2,dpl
0860 AB83      2256            mov     r3,dph
0862 D006      2257            pop     ar6
0864 D005      2258            pop     ar5
0866 C3        2259            clr     c
0867 EA        2260            mov     a,r2
0868 9D        2261            subb    a,r5
0869 EB        2262            mov     a,r3
086A 6480      2263            xrl     a,#0x80
086C 8EF0      2264            mov     b,r6
086E 63F080    2265            xrl     b,#0x80
0871 95F0      2266            subb    a,b
0873 D003      2267            pop     ar3
0875 D002      2268            pop     ar2
0877 4000      2269            jc      L022014?
0879           2270   ;        main.c:589: pwm_left = vy_error; 
0879 85A0B8    2271            mov     _pwm_left,_main_vy_error_1_130
087C           2272   ;        main.c:590: pwm_right = vy_error*100/(vx_error+vy_error);
087C 85A000    2273            mov     __mulint_PARM_2,_main_vy_error_1_130
087F 85A101    2274            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_130 + 1)
0882 900064    2275            mov     dptr,#0x0064
0885 C002      2276            push    ar2
0887 C003      2277            push    ar3
0889 120000    2278            lcall   __mulint
088C AD82      2279            mov     r5,dpl
088E AE83      2280            mov     r6,dph
0890 E5A0      2281            mov     a,_main_vy_error_1_130
0892 2550      2282            add     a,_main_vx_error_1_130
0894 F500      2283            mov     __divsint_PARM_2,a
0896 E5A1      2284            mov     a,(_main_vy_error_1_130 + 1)
0898 3551      2285            addc    a,(_main_vx_error_1_130 + 1)
089A F501      2286            mov     (__divsint_PARM_2 + 1),a
089C 8D82      2287            mov     dpl,r5
089E 8E83      2288            mov     dph,r6
08A0 120000    2289            lcall   __divsint
08A3 AD82      2290            mov     r5,dpl
08A5 AE83      2291            mov     r6,dph
08A7 D003      2292            pop     ar3
08A9 D002      2293            pop     ar2
08AB 8D78      2294            mov     _pwm_right,r5
08AD 020000    2295            ljmp    L022023?
08B0           2296   L022014?:
08B0           2297   ;        main.c:593: pwm_left = vx_error; 
08B0 8550B8    2298            mov     _pwm_left,_main_vx_error_1_130
08B3           2299   ;        main.c:594: pwm_right = vx_error*100/(vx_error+vy_error);
08B3 855000    2300            mov     __mulint_PARM_2,_main_vx_error_1_130
08B6 855101    2301            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_130 + 1)
08B9 900064    2302            mov     dptr,#0x0064
08BC C002      2303            push    ar2
08BE C003      2304            push    ar3
08C0 120000    2305            lcall   __mulint
08C3 AD82      2306            mov     r5,dpl
08C5 AE83      2307            mov     r6,dph
08C7 E5A0      2308            mov     a,_main_vy_error_1_130
08C9 2550      2309            add     a,_main_vx_error_1_130
08CB F500      2310            mov     __divsint_PARM_2,a
08CD E5A1      2311            mov     a,(_main_vy_error_1_130 + 1)
08CF 3551      2312            addc    a,(_main_vx_error_1_130 + 1)
08D1 F501      2313            mov     (__divsint_PARM_2 + 1),a
08D3 8D82      2314            mov     dpl,r5
08D5 8E83      2315            mov     dph,r6
08D7 120000    2316            lcall   __divsint
08DA AD82      2317            mov     r5,dpl
08DC AE83      2318            mov     r6,dph
08DE D003      2319            pop     ar3
08E0 D002      2320            pop     ar2
08E2 8D78      2321            mov     _pwm_right,r5
08E4 020000    2322            ljmp    L022023?
08E7           2323   L022020?:
08E7           2324   ;        main.c:599: if (vy*100<=vy_thres*100/2){
08E7 C002      2325            push    ar2
08E9 C003      2326            push    ar3
08EB 85C000    2327            mov     __mulint_PARM_2,_main_vy_1_130
08EE 85C101    2328            mov     (__mulint_PARM_2 + 1),(_main_vy_1_130 + 1)
08F1 900064    2329            mov     dptr,#0x0064
08F4 C002      2330            push    ar2
08F6 C003      2331            push    ar3
08F8 120000    2332            lcall   __mulint
08FB AD82      2333            mov     r5,dpl
08FD AE83      2334            mov     r6,dph
08FF D003      2335            pop     ar3
0901 D002      2336            pop     ar2
0903 85F800    2337            mov     __mulint_PARM_2,_vy_thres
0906 85F901    2338            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0909 900064    2339            mov     dptr,#0x0064
090C C003      2340            push    ar3
090E C005      2341            push    ar5
0910 C006      2342            push    ar6
0912 120000    2343            lcall   __mulint
0915 AF82      2344            mov     r7,dpl
0917 AA83      2345            mov     r2,dph
0919 D006      2346            pop     ar6
091B D005      2347            pop     ar5
091D D003      2348            pop     ar3
091F 750002    2349            mov     __divsint_PARM_2,#0x02
0922 E4        2350            clr     a
0923 F501      2351            mov     (__divsint_PARM_2 + 1),a
0925 8F82      2352            mov     dpl,r7
0927 8A83      2353            mov     dph,r2
0929 C005      2354            push    ar5
092B C006      2355            push    ar6
092D 120000    2356            lcall   __divsint
0930 AA82      2357            mov     r2,dpl
0932 AB83      2358            mov     r3,dph
0934 D006      2359            pop     ar6
0936 D005      2360            pop     ar5
0938 C3        2361            clr     c
0939 EA        2362            mov     a,r2
093A 9D        2363            subb    a,r5
093B EB        2364            mov     a,r3
093C 6480      2365            xrl     a,#0x80
093E 8EF0      2366            mov     b,r6
0940 63F080    2367            xrl     b,#0x80
0943 95F0      2368            subb    a,b
0945 D003      2369            pop     ar3
0947 D002      2370            pop     ar2
0949 4000      2371            jc      L022017?
094B           2372   ;        main.c:600: pwm_left = vy_error*100/(vx_error+vy_error);
094B 85A000    2373            mov     __mulint_PARM_2,_main_vy_error_1_130
094E 85A101    2374            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_130 + 1)
0951 900064    2375            mov     dptr,#0x0064
0954 C002      2376            push    ar2
0956 C003      2377            push    ar3
0958 120000    2378            lcall   __mulint
095B AD82      2379            mov     r5,dpl
095D AE83      2380            mov     r6,dph
095F E5A0      2381            mov     a,_main_vy_error_1_130
0961 2550      2382            add     a,_main_vx_error_1_130
0963 F500      2383            mov     __divsint_PARM_2,a
0965 E5A1      2384            mov     a,(_main_vy_error_1_130 + 1)
0967 3551      2385            addc    a,(_main_vx_error_1_130 + 1)
0969 F501      2386            mov     (__divsint_PARM_2 + 1),a
096B 8D82      2387            mov     dpl,r5
096D 8E83      2388            mov     dph,r6
096F 120000    2389            lcall   __divsint
0972 AD82      2390            mov     r5,dpl
0974 AE83      2391            mov     r6,dph
0976 D003      2392            pop     ar3
0978 D002      2393            pop     ar2
097A 8DB8      2394            mov     _pwm_left,r5
097C           2395   ;        main.c:601: pwm_right = vy_error; 
097C 85A078    2396            mov     _pwm_right,_main_vy_error_1_130
097F 8000      2397            sjmp    L022023?
0981           2398   L022017?:
0981           2399   ;        main.c:604: pwm_left = vx_error*100/(vx_error+vy_error);
0981 855000    2400            mov     __mulint_PARM_2,_main_vx_error_1_130
0984 855101    2401            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_130 + 1)
0987 900064    2402            mov     dptr,#0x0064
098A C002      2403            push    ar2
098C C003      2404            push    ar3
098E 120000    2405            lcall   __mulint
0991 AD82      2406            mov     r5,dpl
0993 AE83      2407            mov     r6,dph
0995 E5A0      2408            mov     a,_main_vy_error_1_130
0997 2550      2409            add     a,_main_vx_error_1_130
0999 F500      2410            mov     __divsint_PARM_2,a
099B E5A1      2411            mov     a,(_main_vy_error_1_130 + 1)
099D 3551      2412            addc    a,(_main_vx_error_1_130 + 1)
099F F501      2413            mov     (__divsint_PARM_2 + 1),a
09A1 8D82      2414            mov     dpl,r5
09A3 8E83      2415            mov     dph,r6
09A5 120000    2416            lcall   __divsint
09A8 AD82      2417            mov     r5,dpl
09AA AE83      2418            mov     r6,dph
09AC D003      2419            pop     ar3
09AE D002      2420            pop     ar2
09B0 8DB8      2421            mov     _pwm_left,r5
09B2           2422   ;        main.c:605: pwm_right = vx_error; 
09B2 855078    2423            mov     _pwm_right,_main_vx_error_1_130
09B5           2424   L022023?:
09B5           2425   ;        main.c:610: if (vy_err<0){
09B5 E541      2426            mov     a,(_main_vy_err_1_130 + 1)
09B7 20E7E8    2427            jb      acc.7,L022091?
09BA 020000    2428            ljmp    L022049?
09BD           2429   L022091?:
09BD           2430   ;        main.c:611: L_motor_dir = 1; 
09BD 753801    2431            mov     _L_motor_dir,#0x01
09C0           2432   ;        main.c:612: R_motor_dir = 1; 
09C0 75F801    2433            mov     _R_motor_dir,#0x01
09C3           2434   ;        main.c:614: if (vx_err>0){
09C3 C3        2435            clr     c
09C4 E4        2436            clr     a
09C5 95F0      2437            subb    a,_main_vx_err_1_130
09C7 E4        2438            clr     a
09C8 6480      2439            xrl     a,#0x80
09CA 85F1F0    2440            mov     b,(_main_vx_err_1_130 + 1)
09CD 63F080    2441            xrl     b,#0x80
09D0 95F0      2442            subb    a,b
09D2 4000      2443            jc      L022092?
09D4 020000    2444            ljmp    L022031?
09D7           2445   L022092?:
09D7           2446   ;        main.c:615: if (vy*100<=vy_thres*100/2){
09D7 C002      2447            push    ar2
09D9 C003      2448            push    ar3
09DB 85C000    2449            mov     __mulint_PARM_2,_main_vy_1_130
09DE 85C101    2450            mov     (__mulint_PARM_2 + 1),(_main_vy_1_130 + 1)
09E1 900064    2451            mov     dptr,#0x0064
09E4 C002      2452            push    ar2
09E6 C003      2453            push    ar3
09E8 120000    2454            lcall   __mulint
09EB AD82      2455            mov     r5,dpl
09ED AE83      2456            mov     r6,dph
09EF D003      2457            pop     ar3
09F1 D002      2458            pop     ar2
09F3 85F800    2459            mov     __mulint_PARM_2,_vy_thres
09F6 85F901    2460            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
09F9 900064    2461            mov     dptr,#0x0064
09FC C003      2462            push    ar3
09FE C005      2463            push    ar5
0A00 C006      2464            push    ar6
0A02 120000    2465            lcall   __mulint
0A05 AF82      2466            mov     r7,dpl
0A07 AA83      2467            mov     r2,dph
0A09 D006      2468            pop     ar6
0A0B D005      2469            pop     ar5
0A0D D003      2470            pop     ar3
0A0F 750002    2471            mov     __divsint_PARM_2,#0x02
0A12 E4        2472            clr     a
0A13 F501      2473            mov     (__divsint_PARM_2 + 1),a
0A15 8F82      2474            mov     dpl,r7
0A17 8A83      2475            mov     dph,r2
0A19 C005      2476            push    ar5
0A1B C006      2477            push    ar6
0A1D 120000    2478            lcall   __divsint
0A20 AA82      2479            mov     r2,dpl
0A22 AB83      2480            mov     r3,dph
0A24 D006      2481            pop     ar6
0A26 D005      2482            pop     ar5
0A28 C3        2483            clr     c
0A29 EA        2484            mov     a,r2
0A2A 9D        2485            subb    a,r5
0A2B EB        2486            mov     a,r3
0A2C 6480      2487            xrl     a,#0x80
0A2E 8EF0      2488            mov     b,r6
0A30 63F080    2489            xrl     b,#0x80
0A33 95F0      2490            subb    a,b
0A35 D003      2491            pop     ar3
0A37 D002      2492            pop     ar2
0A39 4000      2493            jc      L022025?
0A3B           2494   ;        main.c:616: pwm_left = vy_error; 
0A3B 85A0B8    2495            mov     _pwm_left,_main_vy_error_1_130
0A3E           2496   ;        main.c:617: pwm_right = vy_error*100/(vx_error+vy_error);
0A3E 85A000    2497            mov     __mulint_PARM_2,_main_vy_error_1_130
0A41 85A101    2498            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_130 + 1)
0A44 900064    2499            mov     dptr,#0x0064
0A47 C002      2500            push    ar2
0A49 C003      2501            push    ar3
0A4B 120000    2502            lcall   __mulint
0A4E AD82      2503            mov     r5,dpl
0A50 AE83      2504            mov     r6,dph
0A52 E5A0      2505            mov     a,_main_vy_error_1_130
0A54 2550      2506            add     a,_main_vx_error_1_130
0A56 F500      2507            mov     __divsint_PARM_2,a
0A58 E5A1      2508            mov     a,(_main_vy_error_1_130 + 1)
0A5A 3551      2509            addc    a,(_main_vx_error_1_130 + 1)
0A5C F501      2510            mov     (__divsint_PARM_2 + 1),a
0A5E 8D82      2511            mov     dpl,r5
0A60 8E83      2512            mov     dph,r6
0A62 120000    2513            lcall   __divsint
0A65 AD82      2514            mov     r5,dpl
0A67 AE83      2515            mov     r6,dph
0A69 D003      2516            pop     ar3
0A6B D002      2517            pop     ar2
0A6D 8D78      2518            mov     _pwm_right,r5
0A6F 020000    2519            ljmp    L022049?
0A72           2520   L022025?:
0A72           2521   ;        main.c:620: pwm_left = vx_error; 
0A72 8550B8    2522            mov     _pwm_left,_main_vx_error_1_130
0A75           2523   ;        main.c:621: pwm_right = vx_error*100/(vx_error+vy_error);
0A75 855000    2524            mov     __mulint_PARM_2,_main_vx_error_1_130
0A78 855101    2525            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_130 + 1)
0A7B 900064    2526            mov     dptr,#0x0064
0A7E C002      2527            push    ar2
0A80 C003      2528            push    ar3
0A82 120000    2529            lcall   __mulint
0A85 AD82      2530            mov     r5,dpl
0A87 AE83      2531            mov     r6,dph
0A89 E5A0      2532            mov     a,_main_vy_error_1_130
0A8B 2550      2533            add     a,_main_vx_error_1_130
0A8D F500      2534            mov     __divsint_PARM_2,a
0A8F E5A1      2535            mov     a,(_main_vy_error_1_130 + 1)
0A91 3551      2536            addc    a,(_main_vx_error_1_130 + 1)
0A93 F501      2537            mov     (__divsint_PARM_2 + 1),a
0A95 8D82      2538            mov     dpl,r5
0A97 8E83      2539            mov     dph,r6
0A99 120000    2540            lcall   __divsint
0A9C AD82      2541            mov     r5,dpl
0A9E AE83      2542            mov     r6,dph
0AA0 D003      2543            pop     ar3
0AA2 D002      2544            pop     ar2
0AA4 8D78      2545            mov     _pwm_right,r5
0AA6 020000    2546            ljmp    L022049?
0AA9           2547   L022031?:
0AA9           2548   ;        main.c:626: if (vy*100<=vy_thres*100/2){
0AA9 C002      2549            push    ar2
0AAB C003      2550            push    ar3
0AAD 85C000    2551            mov     __mulint_PARM_2,_main_vy_1_130
0AB0 85C101    2552            mov     (__mulint_PARM_2 + 1),(_main_vy_1_130 + 1)
0AB3 900064    2553            mov     dptr,#0x0064
0AB6 C002      2554            push    ar2
0AB8 C003      2555            push    ar3
0ABA 120000    2556            lcall   __mulint
0ABD AD82      2557            mov     r5,dpl
0ABF AE83      2558            mov     r6,dph
0AC1 D003      2559            pop     ar3
0AC3 D002      2560            pop     ar2
0AC5 85F800    2561            mov     __mulint_PARM_2,_vy_thres
0AC8 85F901    2562            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0ACB 900064    2563            mov     dptr,#0x0064
0ACE C003      2564            push    ar3
0AD0 C005      2565            push    ar5
0AD2 C006      2566            push    ar6
0AD4 120000    2567            lcall   __mulint
0AD7 AF82      2568            mov     r7,dpl
0AD9 AA83      2569            mov     r2,dph
0ADB D006      2570            pop     ar6
0ADD D005      2571            pop     ar5
0ADF D003      2572            pop     ar3
0AE1 750002    2573            mov     __divsint_PARM_2,#0x02
0AE4 E4        2574            clr     a
0AE5 F501      2575            mov     (__divsint_PARM_2 + 1),a
0AE7 8F82      2576            mov     dpl,r7
0AE9 8A83      2577            mov     dph,r2
0AEB C005      2578            push    ar5
0AED C006      2579            push    ar6
0AEF 120000    2580            lcall   __divsint
0AF2 AA82      2581            mov     r2,dpl
0AF4 AB83      2582            mov     r3,dph
0AF6 D006      2583            pop     ar6
0AF8 D005      2584            pop     ar5
0AFA C3        2585            clr     c
0AFB EA        2586            mov     a,r2
0AFC 9D        2587            subb    a,r5
0AFD EB        2588            mov     a,r3
0AFE 6480      2589            xrl     a,#0x80
0B00 8EF0      2590            mov     b,r6
0B02 63F080    2591            xrl     b,#0x80
0B05 95F0      2592            subb    a,b
0B07 D003      2593            pop     ar3
0B09 D002      2594            pop     ar2
0B0B 4000      2595            jc      L022028?
0B0D           2596   ;        main.c:627: pwm_left = vy_error*100/(vx_error+vy_error);
0B0D 85A000    2597            mov     __mulint_PARM_2,_main_vy_error_1_130
0B10 85A101    2598            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_130 + 1)
0B13 900064    2599            mov     dptr,#0x0064
0B16 C002      2600            push    ar2
0B18 C003      2601            push    ar3
0B1A 120000    2602            lcall   __mulint
0B1D AD82      2603            mov     r5,dpl
0B1F AE83      2604            mov     r6,dph
0B21 E5A0      2605            mov     a,_main_vy_error_1_130
0B23 2550      2606            add     a,_main_vx_error_1_130
0B25 F500      2607            mov     __divsint_PARM_2,a
0B27 E5A1      2608            mov     a,(_main_vy_error_1_130 + 1)
0B29 3551      2609            addc    a,(_main_vx_error_1_130 + 1)
0B2B F501      2610            mov     (__divsint_PARM_2 + 1),a
0B2D 8D82      2611            mov     dpl,r5
0B2F 8E83      2612            mov     dph,r6
0B31 120000    2613            lcall   __divsint
0B34 AD82      2614            mov     r5,dpl
0B36 AE83      2615            mov     r6,dph
0B38 D003      2616            pop     ar3
0B3A D002      2617            pop     ar2
0B3C 8DB8      2618            mov     _pwm_left,r5
0B3E           2619   ;        main.c:628: pwm_right = vy_error; 
0B3E 85A078    2620            mov     _pwm_right,_main_vy_error_1_130
0B41 020000    2621            ljmp    L022049?
0B44           2622   L022028?:
0B44           2623   ;        main.c:631: pwm_left = vx_error*100/(vx_error+vy_error);
0B44 855000    2624            mov     __mulint_PARM_2,_main_vx_error_1_130
0B47 855101    2625            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_130 + 1)
0B4A 900064    2626            mov     dptr,#0x0064
0B4D C002      2627            push    ar2
0B4F C003      2628            push    ar3
0B51 120000    2629            lcall   __mulint
0B54 AD82      2630            mov     r5,dpl
0B56 AE83      2631            mov     r6,dph
0B58 E5A0      2632            mov     a,_main_vy_error_1_130
0B5A 2550      2633            add     a,_main_vx_error_1_130
0B5C F500      2634            mov     __divsint_PARM_2,a
0B5E E5A1      2635            mov     a,(_main_vy_error_1_130 + 1)
0B60 3551      2636            addc    a,(_main_vx_error_1_130 + 1)
0B62 F501      2637            mov     (__divsint_PARM_2 + 1),a
0B64 8D82      2638            mov     dpl,r5
0B66 8E83      2639            mov     dph,r6
0B68 120000    2640            lcall   __divsint
0B6B AD82      2641            mov     r5,dpl
0B6D AE83      2642            mov     r6,dph
0B6F D003      2643            pop     ar3
0B71 D002      2644            pop     ar2
0B73 8DB8      2645            mov     _pwm_left,r5
0B75           2646   ;        main.c:632: pwm_right = vx_error; 
0B75 855078    2647            mov     _pwm_right,_main_vx_error_1_130
0B78 020000    2648            ljmp    L022049?
0B7B           2649   L022039?:
0B7B           2650   ;        main.c:641: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0B7B 904678    2651            mov     dptr,#_buff
0B7E 75F040    2652            mov     b,#0x40
0B81 C002      2653            push    ar2
0B83 C003      2654            push    ar3
0B85 120000    2655            lcall   _strlen
0B88 AD82      2656            mov     r5,dpl
0B8A AE83      2657            mov     r6,dph
0B8C C005      2658            push    ar5
0B8E C006      2659            push    ar6
0B90 7478      2660            mov     a,#_buff
0B92 C0E0      2661            push    acc
0B94 7446      2662            mov     a,#(_buff >> 8)
0B96 C0E0      2663            push    acc
0B98 7440      2664            mov     a,#0x40
0B9A C0E0      2665            push    acc
0B9C 7428      2666            mov     a,#__str_16
0B9E C0E0      2667            push    acc
0BA0 74DA      2668            mov     a,#(__str_16 >> 8)
0BA2 C0E0      2669            push    acc
0BA4 7480      2670            mov     a,#0x80
0BA6 C0E0      2671            push    acc
0BA8 120000    2672            lcall   _printf
0BAB E581      2673            mov     a,sp
0BAD 24F8      2674            add     a,#0xf8
0BAF F581      2675            mov     sp,a
0BB1 D003      2676            pop     ar3
0BB3 D002      2677            pop     ar2
0BB5 020000    2678            ljmp    L022049?
0BB8           2679   L022044?:
0BB8           2680   ;        main.c:647: else if(c=='@') // Master wants slave data
0BB8 BC4068    2681            cjne    r4,#0x40,L022095?
0BBB 8000      2682            sjmp    L022096?
0BBD           2683   L022095?:
0BBD 020000    2684            ljmp    L022049?
0BC0           2685   L022096?:
0BC0           2686   ;        main.c:649: sprintf(buff, "%05u\n", cnt);
0BC0 C002      2687            push    ar2
0BC2 C003      2688            push    ar3
0BC4 C002      2689            push    ar2
0BC6 C003      2690            push    ar3
0BC8 74E8      2691            mov     a,#__str_17
0BCA C0E0      2692            push    acc
0BCC 74DA      2693            mov     a,#(__str_17 >> 8)
0BCE C0E0      2694            push    acc
0BD0 7480      2695            mov     a,#0x80
0BD2 C0E0      2696            push    acc
0BD4 7478      2697            mov     a,#_buff
0BD6 C0E0      2698            push    acc
0BD8 7446      2699            mov     a,#(_buff >> 8)
0BDA C0E0      2700            push    acc
0BDC 7440      2701            mov     a,#0x40
0BDE C0E0      2702            push    acc
0BE0 120000    2703            lcall   _sprintf
0BE3 E581      2704            mov     a,sp
0BE5 24F8      2705            add     a,#0xf8
0BE7 F581      2706            mov     sp,a
0BE9 D003      2707            pop     ar3
0BEB D002      2708            pop     ar2
0BED           2709   ;        main.c:650: cnt++;
0BED 0A        2710            inc     r2
0BEE BA0068    2711            cjne    r2,#0x00,L022097?
0BF1 0B        2712            inc     r3
0BF2           2713   L022097?:
0BF2           2714   ;        main.c:651: waitms(5); // The radio seems to need this delay...
0BF2 900005    2715            mov     dptr,#0x0005
0BF5 C002      2716            push    ar2
0BF7 C003      2717            push    ar3
0BF9 120000    2718            lcall   _waitms
0BFC           2719   ;        main.c:652: sendstr1(buff);
0BFC 904678    2720            mov     dptr,#_buff
0BFF 75F040    2721            mov     b,#0x40
0C02 120000    2722            lcall   _sendstr1
0C05 D003      2723            pop     ar3
0C07 D002      2724            pop     ar2
0C09 020000    2725            ljmp    L022049?
0C0C           2726            rseg R_CSEG
0C0C           2727   
0000           2728            rseg R_XINIT
0000           2729   
0000           2730            rseg R_CONST
0000           2731   __str_0:
0000 436F6D6D  2732            db 'Command: %s'
     616E643A
     202573
000B 00        2733            db 0x00
000C           2734   __str_1:
000C 52657370  2735            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2736            db 0x0D
0019 0A        2737            db 0x0A
001A 00        2738            db 0x00
001B           2739   __str_2:
001B 41542B44  2740            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2741            db 0x0D
0027 0A        2742            db 0x0A
0028 00        2743            db 0x00
0029           2744   __str_3:
0029 43616C69  2745            db 'Calibration Starts'
     62726174
     696F6E20
     53746172
     7473
003B 0D        2746            db 0x0D
003C 00        2747            db 0x00
003D           2748   __str_4:
003D 43616C69  2749            db 'Calibration Complete: Vx_ca = %d, Vy_ca = %d'
     62726174
     696F6E20
     436F6D70
     6C657465
     3A205678
     5F636120
     3D202564
     2C205679
     5F636120
     3D202564
0069 00        2750            db 0x00
006A           2751   __str_5:
006A 0D        2752            db 0x0D
006B 0A        2753            db 0x0A
006C 45464D38  2754            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0087 0D        2755            db 0x0D
0088 0A        2756            db 0x0A
0089 00        2757            db 0x00
008A           2758   __str_6:
008A 41542B56  2759            db 'AT+VER'
     4552
0090 0D        2760            db 0x0D
0091 0A        2761            db 0x0A
0092 00        2762            db 0x00
0093           2763   __str_7:
0093 41542B42  2764            db 'AT+BAUD'
     415544
009A 0D        2765            db 0x0D
009B 0A        2766            db 0x0A
009C 00        2767            db 0x00
009D           2768   __str_8:
009D 41542B52  2769            db 'AT+RFID'
     464944
00A4 0D        2770            db 0x0D
00A5 0A        2771            db 0x0A
00A6 00        2772            db 0x00
00A7           2773   __str_9:
00A7 41542B44  2774            db 'AT+DVID'
     564944
00AE 0D        2775            db 0x0D
00AF 0A        2776            db 0x0A
00B0 00        2777            db 0x00
00B1           2778   __str_10:
00B1 41542B52  2779            db 'AT+RFC'
     4643
00B7 0D        2780            db 0x0D
00B8 0A        2781            db 0x0A
00B9 00        2782            db 0x00
00BA           2783   __str_11:
00BA 41542B50  2784            db 'AT+POWE'
     4F5745
00C1 0D        2785            db 0x0D
00C2 0A        2786            db 0x0A
00C3 00        2787            db 0x00
00C4           2788   __str_12:
00C4 41542B43  2789            db 'AT+CLSS'
     4C5353
00CB 0D        2790            db 0x0D
00CC 0A        2791            db 0x0A
00CD 00        2792            db 0x00
00CE           2793   __str_13:
00CE 41542B44  2794            db 'AT+DVIDEFEF'
     56494445
     464546
00D9 0D        2795            db 0x0D
00DA 0A        2796            db 0x0A
00DB 00        2797            db 0x00
00DC           2798   __str_14:
00DC 25303364  2799            db '%03d,%03d'
     2C253033
     64
00E5 00        2800            db 0x00
00E6           2801   __str_15:
00E6 4A6F7973  2802            db 'Joystick Received: Vx = %03d, Vy = %03d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     303364
010D 0D        2803            db 0x0D
010E 0A        2804            db 0x0A
010F 00        2805            db 0x00
0110           2806   __str_16:
0110 2A2A2A20  2807            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
012B 0D        2808            db 0x0D
012C 0A        2809            db 0x0A
012D 00        2810            db 0x00
012E           2811   __str_17:
012E 25303575  2812            db '%05u'
0132 0A        2813            db 0x0A
0133 00        2814            db 0x00
0134           2815   
0096           2816            CSEG
0096           2817   
0096           2818   end
