0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 18 16:13:09 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _TurnLeft
0000             29            public _TurnRight
0000             30            public _MoveBackward
0000             31            public _MoveForward
0000             32            public _Timer0_ISR
0000             33            public _Timer5_ISR
0000             34            public _ADC_at_Pin
0000             35            public _InitPinADC
0000             36            public _InitADC
0000             37            public _Set_Pin_Input
0000             38            public _Set_Pin_Output
0000             39            public _ReceptionOff
0000             40            public _SendATCommand
0000             41            public _waitms_or_RI1
0000             42            public _RXU1
0000             43            public _getstr1
0000             44            public _getchar1_with_timeout
0000             45            public _getchar1
0000             46            public _sendstr1
0000             47            public _putchar1
0000             48            public _UART1_Init
0000             49            public _waitms
0000             50            public _Timer3us
0000             51            public __c51_external_startup
0000             52            public _buff
0000             53            public _getstr1_PARM_2
0000             54            public _servo_arm_pwm
0000             55            public _servo_base_pwm
0000             56            public _R_motor_dir
0000             57            public _L_motor_dir
0000             58            public _pwm_right
0000             59            public _pwm_left
0000             60            public _servo_counter
0000             61            public _pwm_counter
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADC0ASAH       DATA 0xb6
0000             67   _ADC0ASAL       DATA 0xb5
0000             68   _ADC0ASCF       DATA 0xa1
0000             69   _ADC0ASCT       DATA 0xc7
0000             70   _ADC0CF0        DATA 0xbc
0000             71   _ADC0CF1        DATA 0xb9
0000             72   _ADC0CF2        DATA 0xdf
0000             73   _ADC0CN0        DATA 0xe8
0000             74   _ADC0CN1        DATA 0xb2
0000             75   _ADC0CN2        DATA 0xb3
0000             76   _ADC0GTH        DATA 0xc4
0000             77   _ADC0GTL        DATA 0xc3
0000             78   _ADC0H          DATA 0xbe
0000             79   _ADC0L          DATA 0xbd
0000             80   _ADC0LTH        DATA 0xc6
0000             81   _ADC0LTL        DATA 0xc5
0000             82   _ADC0MX         DATA 0xbb
0000             83   _B              DATA 0xf0
0000             84   _CKCON0         DATA 0x8e
0000             85   _CKCON1         DATA 0xa6
0000             86   _CLEN0          DATA 0xc6
0000             87   _CLIE0          DATA 0xc7
0000             88   _CLIF0          DATA 0xe8
0000             89   _CLKSEL         DATA 0xa9
0000             90   _CLOUT0         DATA 0xd1
0000             91   _CLU0CF         DATA 0xb1
0000             92   _CLU0FN         DATA 0xaf
0000             93   _CLU0MX         DATA 0x84
0000             94   _CLU1CF         DATA 0xb3
0000             95   _CLU1FN         DATA 0xb2
0000             96   _CLU1MX         DATA 0x85
0000             97   _CLU2CF         DATA 0xb6
0000             98   _CLU2FN         DATA 0xb5
0000             99   _CLU2MX         DATA 0x91
0000            100   _CLU3CF         DATA 0xbf
0000            101   _CLU3FN         DATA 0xbe
0000            102   _CLU3MX         DATA 0xae
0000            103   _CMP0CN0        DATA 0x9b
0000            104   _CMP0CN1        DATA 0x99
0000            105   _CMP0MD         DATA 0x9d
0000            106   _CMP0MX         DATA 0x9f
0000            107   _CMP1CN0        DATA 0xbf
0000            108   _CMP1CN1        DATA 0xac
0000            109   _CMP1MD         DATA 0xab
0000            110   _CMP1MX         DATA 0xaa
0000            111   _CRC0CN0        DATA 0xce
0000            112   _CRC0CN1        DATA 0x86
0000            113   _CRC0CNT        DATA 0xd3
0000            114   _CRC0DAT        DATA 0xcb
0000            115   _CRC0FLIP       DATA 0xcf
0000            116   _CRC0IN         DATA 0xca
0000            117   _CRC0ST         DATA 0xd2
0000            118   _DAC0CF0        DATA 0x91
0000            119   _DAC0CF1        DATA 0x92
0000            120   _DAC0H          DATA 0x85
0000            121   _DAC0L          DATA 0x84
0000            122   _DAC1CF0        DATA 0x93
0000            123   _DAC1CF1        DATA 0x94
0000            124   _DAC1H          DATA 0x8a
0000            125   _DAC1L          DATA 0x89
0000            126   _DAC2CF0        DATA 0x95
0000            127   _DAC2CF1        DATA 0x96
0000            128   _DAC2H          DATA 0x8c
0000            129   _DAC2L          DATA 0x8b
0000            130   _DAC3CF0        DATA 0x9a
0000            131   _DAC3CF1        DATA 0x9c
0000            132   _DAC3H          DATA 0x8e
0000            133   _DAC3L          DATA 0x8d
0000            134   _DACGCF0        DATA 0x88
0000            135   _DACGCF1        DATA 0x98
0000            136   _DACGCF2        DATA 0xa2
0000            137   _DERIVID        DATA 0xad
0000            138   _DEVICEID       DATA 0xb5
0000            139   _DPH            DATA 0x83
0000            140   _DPL            DATA 0x82
0000            141   _EIE1           DATA 0xe6
0000            142   _EIE2           DATA 0xf3
0000            143   _EIP1           DATA 0xbb
0000            144   _EIP1H          DATA 0xee
0000            145   _EIP2           DATA 0xed
0000            146   _EIP2H          DATA 0xf6
0000            147   _EMI0CN         DATA 0xe7
0000            148   _FLKEY          DATA 0xb7
0000            149   _HFO0CAL        DATA 0xc7
0000            150   _HFO1CAL        DATA 0xd6
0000            151   _HFOCN          DATA 0xef
0000            152   _I2C0ADM        DATA 0xff
0000            153   _I2C0CN0        DATA 0xba
0000            154   _I2C0DIN        DATA 0xbc
0000            155   _I2C0DOUT       DATA 0xbb
0000            156   _I2C0FCN0       DATA 0xad
0000            157   _I2C0FCN1       DATA 0xab
0000            158   _I2C0FCT        DATA 0xf5
0000            159   _I2C0SLAD       DATA 0xbd
0000            160   _I2C0STAT       DATA 0xb9
0000            161   _IE             DATA 0xa8
0000            162   _IP             DATA 0xb8
0000            163   _IPH            DATA 0xf2
0000            164   _IT01CF         DATA 0xe4
0000            165   _LFO0CN         DATA 0xb1
0000            166   _P0             DATA 0x80
0000            167   _P0MASK         DATA 0xfe
0000            168   _P0MAT          DATA 0xfd
0000            169   _P0MDIN         DATA 0xf1
0000            170   _P0MDOUT        DATA 0xa4
0000            171   _P0SKIP         DATA 0xd4
0000            172   _P1             DATA 0x90
0000            173   _P1MASK         DATA 0xee
0000            174   _P1MAT          DATA 0xed
0000            175   _P1MDIN         DATA 0xf2
0000            176   _P1MDOUT        DATA 0xa5
0000            177   _P1SKIP         DATA 0xd5
0000            178   _P2             DATA 0xa0
0000            179   _P2MASK         DATA 0xfc
0000            180   _P2MAT          DATA 0xfb
0000            181   _P2MDIN         DATA 0xf3
0000            182   _P2MDOUT        DATA 0xa6
0000            183   _P2SKIP         DATA 0xcc
0000            184   _P3             DATA 0xb0
0000            185   _P3MDIN         DATA 0xf4
0000            186   _P3MDOUT        DATA 0x9c
0000            187   _PCA0CENT       DATA 0x9e
0000            188   _PCA0CLR        DATA 0x9c
0000            189   _PCA0CN0        DATA 0xd8
0000            190   _PCA0CPH0       DATA 0xfc
0000            191   _PCA0CPH1       DATA 0xea
0000            192   _PCA0CPH2       DATA 0xec
0000            193   _PCA0CPH3       DATA 0xf5
0000            194   _PCA0CPH4       DATA 0x85
0000            195   _PCA0CPH5       DATA 0xde
0000            196   _PCA0CPL0       DATA 0xfb
0000            197   _PCA0CPL1       DATA 0xe9
0000            198   _PCA0CPL2       DATA 0xeb
0000            199   _PCA0CPL3       DATA 0xf4
0000            200   _PCA0CPL4       DATA 0x84
0000            201   _PCA0CPL5       DATA 0xdd
0000            202   _PCA0CPM0       DATA 0xda
0000            203   _PCA0CPM1       DATA 0xdb
0000            204   _PCA0CPM2       DATA 0xdc
0000            205   _PCA0CPM3       DATA 0xae
0000            206   _PCA0CPM4       DATA 0xaf
0000            207   _PCA0CPM5       DATA 0xcc
0000            208   _PCA0H          DATA 0xfa
0000            209   _PCA0L          DATA 0xf9
0000            210   _PCA0MD         DATA 0xd9
0000            211   _PCA0POL        DATA 0x96
0000            212   _PCA0PWM        DATA 0xf7
0000            213   _PCON0          DATA 0x87
0000            214   _PCON1          DATA 0xcd
0000            215   _PFE0CN         DATA 0xc1
0000            216   _PRTDRV         DATA 0xf6
0000            217   _PSCTL          DATA 0x8f
0000            218   _PSTAT0         DATA 0xaa
0000            219   _PSW            DATA 0xd0
0000            220   _REF0CN         DATA 0xd1
0000            221   _REG0CN         DATA 0xc9
0000            222   _REVID          DATA 0xb6
0000            223   _RSTSRC         DATA 0xef
0000            224   _SBCON1         DATA 0x94
0000            225   _SBRLH1         DATA 0x96
0000            226   _SBRLL1         DATA 0x95
0000            227   _SBUF           DATA 0x99
0000            228   _SBUF0          DATA 0x99
0000            229   _SBUF1          DATA 0x92
0000            230   _SCON           DATA 0x98
0000            231   _SCON0          DATA 0x98
0000            232   _SCON1          DATA 0xc8
0000            233   _SFRPAGE        DATA 0xa7
0000            234   _SFRPGCN        DATA 0xbc
0000            235   _SFRSTACK       DATA 0xd7
0000            236   _SMB0ADM        DATA 0xd6
0000            237   _SMB0ADR        DATA 0xd7
0000            238   _SMB0CF         DATA 0xc1
0000            239   _SMB0CN0        DATA 0xc0
0000            240   _SMB0DAT        DATA 0xc2
0000            241   _SMB0FCN0       DATA 0xc3
0000            242   _SMB0FCN1       DATA 0xc4
0000            243   _SMB0FCT        DATA 0xef
0000            244   _SMB0RXLN       DATA 0xc5
0000            245   _SMB0TC         DATA 0xac
0000            246   _SMOD1          DATA 0x93
0000            247   _SP             DATA 0x81
0000            248   _SPI0CFG        DATA 0xa1
0000            249   _SPI0CKR        DATA 0xa2
0000            250   _SPI0CN0        DATA 0xf8
0000            251   _SPI0DAT        DATA 0xa3
0000            252   _SPI0FCN0       DATA 0x9a
0000            253   _SPI0FCN1       DATA 0x9b
0000            254   _SPI0FCT        DATA 0xf7
0000            255   _SPI0PCF        DATA 0xdf
0000            256   _TCON           DATA 0x88
0000            257   _TH0            DATA 0x8c
0000            258   _TH1            DATA 0x8d
0000            259   _TL0            DATA 0x8a
0000            260   _TL1            DATA 0x8b
0000            261   _TMOD           DATA 0x89
0000            262   _TMR2CN0        DATA 0xc8
0000            263   _TMR2CN1        DATA 0xfd
0000            264   _TMR2H          DATA 0xcf
0000            265   _TMR2L          DATA 0xce
0000            266   _TMR2RLH        DATA 0xcb
0000            267   _TMR2RLL        DATA 0xca
0000            268   _TMR3CN0        DATA 0x91
0000            269   _TMR3CN1        DATA 0xfe
0000            270   _TMR3H          DATA 0x95
0000            271   _TMR3L          DATA 0x94
0000            272   _TMR3RLH        DATA 0x93
0000            273   _TMR3RLL        DATA 0x92
0000            274   _TMR4CN0        DATA 0x98
0000            275   _TMR4CN1        DATA 0xff
0000            276   _TMR4H          DATA 0xa5
0000            277   _TMR4L          DATA 0xa4
0000            278   _TMR4RLH        DATA 0xa3
0000            279   _TMR4RLL        DATA 0xa2
0000            280   _TMR5CN0        DATA 0xc0
0000            281   _TMR5CN1        DATA 0xf1
0000            282   _TMR5H          DATA 0xd5
0000            283   _TMR5L          DATA 0xd4
0000            284   _TMR5RLH        DATA 0xd3
0000            285   _TMR5RLL        DATA 0xd2
0000            286   _UART0PCF       DATA 0xd9
0000            287   _UART1FCN0      DATA 0x9d
0000            288   _UART1FCN1      DATA 0xd8
0000            289   _UART1FCT       DATA 0xfa
0000            290   _UART1LIN       DATA 0x9e
0000            291   _UART1PCF       DATA 0xda
0000            292   _VDM0CN         DATA 0xff
0000            293   _WDTCN          DATA 0x97
0000            294   _XBR0           DATA 0xe1
0000            295   _XBR1           DATA 0xe2
0000            296   _XBR2           DATA 0xe3
0000            297   _XOSC0CN        DATA 0x86
0000            298   _DPTR           DATA 0x8382
0000            299   _TMR2RL         DATA 0xcbca
0000            300   _TMR3RL         DATA 0x9392
0000            301   _TMR4RL         DATA 0xa3a2
0000            302   _TMR5RL         DATA 0xd3d2
0000            303   _TMR0           DATA 0x8c8a
0000            304   _TMR1           DATA 0x8d8b
0000            305   _TMR2           DATA 0xcfce
0000            306   _TMR3           DATA 0x9594
0000            307   _TMR4           DATA 0xa5a4
0000            308   _TMR5           DATA 0xd5d4
0000            309   _SBRL1          DATA 0x9695
0000            310   _PCA0           DATA 0xfaf9
0000            311   _PCA0CP0        DATA 0xfcfb
0000            312   _PCA0CP1        DATA 0xeae9
0000            313   _PCA0CP2        DATA 0xeceb
0000            314   _PCA0CP3        DATA 0xf5f4
0000            315   _PCA0CP4        DATA 0x8584
0000            316   _PCA0CP5        DATA 0xdedd
0000            317   _ADC0ASA        DATA 0xb6b5
0000            318   _ADC0GT         DATA 0xc4c3
0000            319   _ADC0           DATA 0xbebd
0000            320   _ADC0LT         DATA 0xc6c5
0000            321   _DAC0           DATA 0x8584
0000            322   _DAC1           DATA 0x8a89
0000            323   _DAC2           DATA 0x8c8b
0000            324   _DAC3           DATA 0x8e8d
0000            325   ;--------------------------------------------------------
0000            326   ; special function bits
0000            327   ;--------------------------------------------------------
0000            328   _ACC_0          BIT 0xe0
0000            329   _ACC_1          BIT 0xe1
0000            330   _ACC_2          BIT 0xe2
0000            331   _ACC_3          BIT 0xe3
0000            332   _ACC_4          BIT 0xe4
0000            333   _ACC_5          BIT 0xe5
0000            334   _ACC_6          BIT 0xe6
0000            335   _ACC_7          BIT 0xe7
0000            336   _TEMPE          BIT 0xe8
0000            337   _ADGN0          BIT 0xe9
0000            338   _ADGN1          BIT 0xea
0000            339   _ADWINT         BIT 0xeb
0000            340   _ADBUSY         BIT 0xec
0000            341   _ADINT          BIT 0xed
0000            342   _IPOEN          BIT 0xee
0000            343   _ADEN           BIT 0xef
0000            344   _B_0            BIT 0xf0
0000            345   _B_1            BIT 0xf1
0000            346   _B_2            BIT 0xf2
0000            347   _B_3            BIT 0xf3
0000            348   _B_4            BIT 0xf4
0000            349   _B_5            BIT 0xf5
0000            350   _B_6            BIT 0xf6
0000            351   _B_7            BIT 0xf7
0000            352   _C0FIF          BIT 0xe8
0000            353   _C0RIF          BIT 0xe9
0000            354   _C1FIF          BIT 0xea
0000            355   _C1RIF          BIT 0xeb
0000            356   _C2FIF          BIT 0xec
0000            357   _C2RIF          BIT 0xed
0000            358   _C3FIF          BIT 0xee
0000            359   _C3RIF          BIT 0xef
0000            360   _D1SRC0         BIT 0x88
0000            361   _D1SRC1         BIT 0x89
0000            362   _D1AMEN         BIT 0x8a
0000            363   _D01REFSL       BIT 0x8b
0000            364   _D3SRC0         BIT 0x8c
0000            365   _D3SRC1         BIT 0x8d
0000            366   _D3AMEN         BIT 0x8e
0000            367   _D23REFSL       BIT 0x8f
0000            368   _D0UDIS         BIT 0x98
0000            369   _D1UDIS         BIT 0x99
0000            370   _D2UDIS         BIT 0x9a
0000            371   _D3UDIS         BIT 0x9b
0000            372   _EX0            BIT 0xa8
0000            373   _ET0            BIT 0xa9
0000            374   _EX1            BIT 0xaa
0000            375   _ET1            BIT 0xab
0000            376   _ES0            BIT 0xac
0000            377   _ET2            BIT 0xad
0000            378   _ESPI0          BIT 0xae
0000            379   _EA             BIT 0xaf
0000            380   _PX0            BIT 0xb8
0000            381   _PT0            BIT 0xb9
0000            382   _PX1            BIT 0xba
0000            383   _PT1            BIT 0xbb
0000            384   _PS0            BIT 0xbc
0000            385   _PT2            BIT 0xbd
0000            386   _PSPI0          BIT 0xbe
0000            387   _P0_0           BIT 0x80
0000            388   _P0_1           BIT 0x81
0000            389   _P0_2           BIT 0x82
0000            390   _P0_3           BIT 0x83
0000            391   _P0_4           BIT 0x84
0000            392   _P0_5           BIT 0x85
0000            393   _P0_6           BIT 0x86
0000            394   _P0_7           BIT 0x87
0000            395   _P1_0           BIT 0x90
0000            396   _P1_1           BIT 0x91
0000            397   _P1_2           BIT 0x92
0000            398   _P1_3           BIT 0x93
0000            399   _P1_4           BIT 0x94
0000            400   _P1_5           BIT 0x95
0000            401   _P1_6           BIT 0x96
0000            402   _P1_7           BIT 0x97
0000            403   _P2_0           BIT 0xa0
0000            404   _P2_1           BIT 0xa1
0000            405   _P2_2           BIT 0xa2
0000            406   _P2_3           BIT 0xa3
0000            407   _P2_4           BIT 0xa4
0000            408   _P2_5           BIT 0xa5
0000            409   _P2_6           BIT 0xa6
0000            410   _P3_0           BIT 0xb0
0000            411   _P3_1           BIT 0xb1
0000            412   _P3_2           BIT 0xb2
0000            413   _P3_3           BIT 0xb3
0000            414   _P3_4           BIT 0xb4
0000            415   _P3_7           BIT 0xb7
0000            416   _CCF0           BIT 0xd8
0000            417   _CCF1           BIT 0xd9
0000            418   _CCF2           BIT 0xda
0000            419   _CCF3           BIT 0xdb
0000            420   _CCF4           BIT 0xdc
0000            421   _CCF5           BIT 0xdd
0000            422   _CR             BIT 0xde
0000            423   _CF             BIT 0xdf
0000            424   _PARITY         BIT 0xd0
0000            425   _F1             BIT 0xd1
0000            426   _OV             BIT 0xd2
0000            427   _RS0            BIT 0xd3
0000            428   _RS1            BIT 0xd4
0000            429   _F0             BIT 0xd5
0000            430   _AC             BIT 0xd6
0000            431   _CY             BIT 0xd7
0000            432   _RI             BIT 0x98
0000            433   _TI             BIT 0x99
0000            434   _RB8            BIT 0x9a
0000            435   _TB8            BIT 0x9b
0000            436   _REN            BIT 0x9c
0000            437   _CE             BIT 0x9d
0000            438   _SMODE          BIT 0x9e
0000            439   _RI1            BIT 0xc8
0000            440   _TI1            BIT 0xc9
0000            441   _RBX1           BIT 0xca
0000            442   _TBX1           BIT 0xcb
0000            443   _REN1           BIT 0xcc
0000            444   _PERR1          BIT 0xcd
0000            445   _OVR1           BIT 0xce
0000            446   _SI             BIT 0xc0
0000            447   _ACK            BIT 0xc1
0000            448   _ARBLOST        BIT 0xc2
0000            449   _ACKRQ          BIT 0xc3
0000            450   _STO            BIT 0xc4
0000            451   _STA            BIT 0xc5
0000            452   _TXMODE         BIT 0xc6
0000            453   _MASTER         BIT 0xc7
0000            454   _SPIEN          BIT 0xf8
0000            455   _TXNF           BIT 0xf9
0000            456   _NSSMD0         BIT 0xfa
0000            457   _NSSMD1         BIT 0xfb
0000            458   _RXOVRN         BIT 0xfc
0000            459   _MODF           BIT 0xfd
0000            460   _WCOL           BIT 0xfe
0000            461   _SPIF           BIT 0xff
0000            462   _IT0            BIT 0x88
0000            463   _IE0            BIT 0x89
0000            464   _IT1            BIT 0x8a
0000            465   _IE1            BIT 0x8b
0000            466   _TR0            BIT 0x8c
0000            467   _TF0            BIT 0x8d
0000            468   _TR1            BIT 0x8e
0000            469   _TF1            BIT 0x8f
0000            470   _T2XCLK0        BIT 0xc8
0000            471   _T2XCLK1        BIT 0xc9
0000            472   _TR2            BIT 0xca
0000            473   _T2SPLIT        BIT 0xcb
0000            474   _TF2CEN         BIT 0xcc
0000            475   _TF2LEN         BIT 0xcd
0000            476   _TF2L           BIT 0xce
0000            477   _TF2H           BIT 0xcf
0000            478   _T4XCLK0        BIT 0x98
0000            479   _T4XCLK1        BIT 0x99
0000            480   _TR4            BIT 0x9a
0000            481   _T4SPLIT        BIT 0x9b
0000            482   _TF4CEN         BIT 0x9c
0000            483   _TF4LEN         BIT 0x9d
0000            484   _TF4L           BIT 0x9e
0000            485   _TF4H           BIT 0x9f
0000            486   _T5XCLK0        BIT 0xc0
0000            487   _T5XCLK1        BIT 0xc1
0000            488   _TR5            BIT 0xc2
0000            489   _T5SPLIT        BIT 0xc3
0000            490   _TF5CEN         BIT 0xc4
0000            491   _TF5LEN         BIT 0xc5
0000            492   _TF5L           BIT 0xc6
0000            493   _TF5H           BIT 0xc7
0000            494   _RIE            BIT 0xd8
0000            495   _RXTO0          BIT 0xd9
0000            496   _RXTO1          BIT 0xda
0000            497   _RFRQ           BIT 0xdb
0000            498   _TIE            BIT 0xdc
0000            499   _TXHOLD         BIT 0xdd
0000            500   _TXNF1          BIT 0xde
0000            501   _TFRQ           BIT 0xdf
0000            502   ;--------------------------------------------------------
0000            503   ; overlayable register banks
0000            504   ;--------------------------------------------------------
0000            505            rbank0 segment data overlay
0000            506   ;--------------------------------------------------------
0000            507   ; internal ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_DSEG
0000            510   _pwm_counter:
0000            511            ds 2
0002            512   _servo_counter:
0002            513            ds 2
0004            514   _pwm_left:
0004            515            ds 1
0005            516   _pwm_right:
0005            517            ds 1
0006            518   _L_motor_dir:
0006            519            ds 1
0007            520   _R_motor_dir:
0007            521            ds 1
0008            522   _servo_base_pwm:
0008            523            ds 1
0009            524   _servo_arm_pwm:
0009            525            ds 1
000A            526   _getstr1_PARM_2:
000A            527            ds 1
000B            528   _main_vx_1_137:
000B            529            ds 2
000D            530   _main_vy_1_137:
000D            531            ds 2
000F            532   _main_motor_pwm_1_137:
000F            533            ds 2
0011            534   _main_sloc0_1_0:
0011            535            ds 4
0015            536   ;--------------------------------------------------------
0015            537   ; overlayable items in internal ram 
0015            538   ;--------------------------------------------------------
0000            539            rseg    R_OSEG
0000            540            rseg    R_OSEG
0000            541            rseg    R_OSEG
0000            542            rseg    R_OSEG
0000            543            rseg    R_OSEG
0000            544            rseg    R_OSEG
0000            545   _InitPinADC_PARM_2:
0000            546            ds 1
0001            547            rseg    R_OSEG
0001            548            rseg    R_OSEG
0001            549            rseg    R_OSEG
0001            550            rseg    R_OSEG
0001            551            rseg    R_OSEG
0001            552   ;--------------------------------------------------------
0001            553   ; indirectly addressable internal ram data
0001            554   ;--------------------------------------------------------
0000            555            rseg R_ISEG
0000            556   _buff:
0000            557            ds 20
0014            558   ;--------------------------------------------------------
0014            559   ; absolute internal ram data
0014            560   ;--------------------------------------------------------
0000            561            DSEG
0000            562   ;--------------------------------------------------------
0000            563   ; bit data
0000            564   ;--------------------------------------------------------
0000            565            rseg R_BSEG
0000            566   ;--------------------------------------------------------
0000            567   ; paged external ram data
0000            568   ;--------------------------------------------------------
0000            569            rseg R_PSEG
0000            570   ;--------------------------------------------------------
0000            571   ; external ram data
0000            572   ;--------------------------------------------------------
0000            573            rseg R_XSEG
0000            574   ;--------------------------------------------------------
0000            575   ; absolute external ram data
0000            576   ;--------------------------------------------------------
0000            577            XSEG
0000            578   ;--------------------------------------------------------
0000            579   ; external initialized ram data
0000            580   ;--------------------------------------------------------
0000            581            rseg R_IXSEG
0000            582            rseg R_HOME
0000            583            rseg R_GSINIT
0000            584            rseg R_CSEG
0000            585   ;--------------------------------------------------------
0000            586   ; Reset entry point and interrupt vectors
0000            587   ;--------------------------------------------------------
0000            588            CSEG at 0x0000
0000 020000     589            ljmp    _crt0
000B            590            CSEG at 0x000b
000B 020000     591            ljmp    _Timer0_ISR
0093            592            CSEG at 0x0093
0093 020000     593            ljmp    _Timer5_ISR
0096            594   ;--------------------------------------------------------
0096            595   ; global & static initialisations
0096            596   ;--------------------------------------------------------
0000            597            rseg R_HOME
0000            598            rseg R_GSINIT
0000            599            rseg R_GSINIT
0000            600   ;--------------------------------------------------------
0000            601   ; data variables initialization
0000            602   ;--------------------------------------------------------
0000            603            rseg R_DINIT
0000            604   ;        main.c:48: unsigned int pwm_counter = 0; 
0000 E4         605            clr     a
0001 F5B8       606            mov     _pwm_counter,a
0003 F5B9       607            mov     (_pwm_counter + 1),a
0005            608   ;        main.c:49: unsigned int servo_counter = 0; 
0005 E4         609            clr     a
0006 F578       610            mov     _servo_counter,a
0008 F579       611            mov     (_servo_counter + 1),a
000A            612   ;        main.c:50: unsigned char pwm_left = 0, pwm_right = 0; 
000A 753800     613            mov     _pwm_left,#0x00
000D            614   ;        main.c:50: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 75F800     615            mov     _pwm_right,#0x00
0010            616   ;        main.c:51: unsigned char servo_base_pwm = 0, servo_arm_pwm = 0; 
0010 75B801     617            mov     _L_motor_dir,#0x01
0013            618   ;        main.c:51: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 757801     619            mov     _R_motor_dir,#0x01
0016            620   ;        main.c:52: unsigned char servo_base_pwm = 0, servo_arm_pwm = 0; 
0016 753800     621            mov     _servo_base_pwm,#0x00
0019            622   ;        main.c:52: 
0019 75F800     623            mov     _servo_arm_pwm,#0x00
001C            624            ; The linker places a 'ret' at the end of segment R_DINIT.
001C            625   ;--------------------------------------------------------
001C            626   ; code
001C            627   ;--------------------------------------------------------
0000            628            rseg R_CSEG
0000            629   ;------------------------------------------------------------
0000            630   ;Allocation info for local variables in function '_c51_external_startup'
0000            631   ;------------------------------------------------------------
0000            632   ;------------------------------------------------------------
0000            633   ;        main.c:55: char _c51_external_startup (void)
0000            634   ;        -----------------------------------------
0000            635   ;         function _c51_external_startup
0000            636   ;        -----------------------------------------
0000            637   __c51_external_startup:
0000            638            using   0
0000            639   ;        main.c:58: SFRPAGE = 0x00;
0000 75A700     640            mov     _SFRPAGE,#0x00
0003            641   ;        main.c:59: WDTCN = 0xDE; //First key
0003 7597DE     642            mov     _WDTCN,#0xDE
0006            643   ;        main.c:60: WDTCN = 0xAD; //Second key
0006 7597AD     644            mov     _WDTCN,#0xAD
0009            645   ;        main.c:62: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     646            mov     _VDM0CN,#0x80
000C            647   ;        main.c:63: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     648            mov     _RSTSRC,#0x06
000F            649   ;        main.c:70: SFRPAGE = 0x10;
000F 75A710     650            mov     _SFRPAGE,#0x10
0012            651   ;        main.c:71: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     652            mov     _PFE0CN,#0x20
0015            653   ;        main.c:72: SFRPAGE = 0x00;
0015 75A700     654            mov     _SFRPAGE,#0x00
0018            655   ;        main.c:93: CLKSEL = 0x00;
0018 75A900     656            mov     _CLKSEL,#0x00
001B            657   ;        main.c:94: CLKSEL = 0x00;
001B 75A900     658            mov     _CLKSEL,#0x00
001E            659   ;        main.c:95: while ((CLKSEL & 0x80) == 0);
001E            660   L002001?:
001E E5A9       661            mov     a,_CLKSEL
0020 30E710     662            jnb     acc.7,L002001?
0023            663   ;        main.c:96: CLKSEL = 0x03;
0023 75A903     664            mov     _CLKSEL,#0x03
0026            665   ;        main.c:97: CLKSEL = 0x03;
0026 75A903     666            mov     _CLKSEL,#0x03
0029            667   ;        main.c:98: while ((CLKSEL & 0x80) == 0);
0029            668   L002004?:
0029 E5A9       669            mov     a,_CLKSEL
002B 30E790     670            jnb     acc.7,L002004?
002E            671   ;        main.c:103: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     672            orl     _P0MDOUT,#0x11
0031            673   ;        main.c:104: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     674            orl     _P2MDOUT,#0x01
0034            675   ;        main.c:105: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     676            mov     _XBR0,#0x01
0037            677   ;        main.c:106: XBR1     = 0X00;
0037 75E200     678            mov     _XBR1,#0x00
003A            679   ;        main.c:107: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     680            mov     _XBR2,#0x41
003D            681   ;        main.c:113: SCON0 = 0x10;
003D 759810     682            mov     _SCON0,#0x10
0040            683   ;        main.c:114: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     684            mov     _TH1,#0xE6
0043            685   ;        main.c:115: TL1 = TH1;      // Init Timer1
0043 858D8B     686            mov     _TL1,_TH1
0046            687   ;        main.c:116: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     688            anl     _TMOD,#0x0F
0049            689   ;        main.c:117: TMOD |=  0x20;                       
0049 438920     690            orl     _TMOD,#0x20
004C            691   ;        main.c:118: TR1 = 1; // START Timer1
004C D28E       692            setb    _TR1
004E            693   ;        main.c:119: TI = 1;  // Indicate TX0 ready
004E D299       694            setb    _TI
0050            695   ;        main.c:121: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       696            setb    _P2_0
0052            697   ;        main.c:124: SFRPAGE=0x10;
0052 75A710     698            mov     _SFRPAGE,#0x10
0055            699   ;        main.c:125: TMR5CN0=0x00;
0055 75C000     700            mov     _TMR5CN0,#0x00
0058            701   ;        main.c:126: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     702            mov     _TMR5,#0xFF
005B 75D5FF     703            mov     (_TMR5 >> 8),#0xFF
005E            704   ;        main.c:127: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     705            orl     _EIE2,#0x08
0061            706   ;        main.c:128: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       707            setb    _TR5
0063            708   ;        main.c:131: TR0=0;
0063 C28C       709            clr     _TR0
0065            710   ;        main.c:132: TF0=0;
0065 C28D       711            clr     _TF0
0067            712   ;        main.c:133: CKCON0|=0b_0000_0100; // Timer 0 uses the system clock
0067 438E04     713            orl     _CKCON0,#0x04
006A            714   ;        main.c:134: TMOD&=0xf0;
006A 5389F0     715            anl     _TMOD,#0xF0
006D            716   ;        main.c:135: TMOD|=0x01; // Timer 0 in mode 1: 16-bit timer
006D 438901     717            orl     _TMOD,#0x01
0070            718   ;        main.c:139: TMR0=0x10000L-(SYSCLK/(TIMER_0_FREQ)); // Initialize reload value
0070 758A60     719            mov     _TMR0,#0x60
0073 758C73     720            mov     (_TMR0 >> 8),#0x73
0076            721   ;        main.c:140: ET0=1; // Enable Timer0 interrupts
0076 D2A9       722            setb    _ET0
0078            723   ;        main.c:141: TR0=1; // Start Timer0
0078 D28C       724            setb    _TR0
007A            725   ;        main.c:144: EA=1;  // Enable global interrupts
007A D2AF       726            setb    _EA
007C            727   ;        main.c:145: SFRPAGE=0x00;
007C 75A700     728            mov     _SFRPAGE,#0x00
007F            729   ;        main.c:147: return 0;
007F 758200     730            mov     dpl,#0x00
0082 22         731            ret
0083            732   ;------------------------------------------------------------
0083            733   ;Allocation info for local variables in function 'Timer3us'
0083            734   ;------------------------------------------------------------
0083            735   ;us                        Allocated to registers r2 
0083            736   ;i                         Allocated to registers r3 
0083            737   ;------------------------------------------------------------
0083            738   ;        main.c:151: void Timer3us(unsigned char us)
0083            739   ;        -----------------------------------------
0083            740   ;         function Timer3us
0083            741   ;        -----------------------------------------
0083            742   _Timer3us:
0083 AA82       743            mov     r2,dpl
0085            744   ;        main.c:156: CKCON0|=0b_0100_0000;
0085 438E40     745            orl     _CKCON0,#0x40
0088            746   ;        main.c:158: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0088 7592B8     747            mov     _TMR3RL,#0xB8
008B 7593FF     748            mov     (_TMR3RL >> 8),#0xFF
008E            749   ;        main.c:159: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
008E 859294     750            mov     _TMR3,_TMR3RL
0091 859395     751            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0094            752   ;        main.c:161: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0094 759104     753            mov     _TMR3CN0,#0x04
0097            754   ;        main.c:162: for (i = 0; i < us; i++)       // Count <us> overflows
0097 7B00       755            mov     r3,#0x00
0099            756   L003004?:
0099 C3         757            clr     c
009A EB         758            mov     a,r3
009B 9A         759            subb    a,r2
009C 5000       760            jnc     L003007?
009E            761   ;        main.c:164: while (!(TMR3CN0 & 0x80));  // Wait for overflow
009E            762   L003001?:
009E E591       763            mov     a,_TMR3CN0
00A0 30E790     764            jnb     acc.7,L003001?
00A3            765   ;        main.c:165: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00A3 53917F     766            anl     _TMR3CN0,#0x7F
00A6            767   ;        main.c:162: for (i = 0; i < us; i++)       // Count <us> overflows
00A6 0B         768            inc     r3
00A7 8000       769            sjmp    L003004?
00A9            770   L003007?:
00A9            771   ;        main.c:167: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A9 759100     772            mov     _TMR3CN0,#0x00
00AC 22         773            ret
00AD            774   ;------------------------------------------------------------
00AD            775   ;Allocation info for local variables in function 'waitms'
00AD            776   ;------------------------------------------------------------
00AD            777   ;ms                        Allocated to registers r2 r3 
00AD            778   ;j                         Allocated to registers r4 r5 
00AD            779   ;k                         Allocated to registers r6 
00AD            780   ;------------------------------------------------------------
00AD            781   ;        main.c:170: void waitms (unsigned int ms)
00AD            782   ;        -----------------------------------------
00AD            783   ;         function waitms
00AD            784   ;        -----------------------------------------
00AD            785   _waitms:
00AD AA82       786            mov     r2,dpl
00AF AB83       787            mov     r3,dph
00B1            788   ;        main.c:174: for(j=0; j<ms; j++)
00B1 7C00       789            mov     r4,#0x00
00B3 7D00       790            mov     r5,#0x00
00B5            791   L004005?:
00B5 C3         792            clr     c
00B6 EC         793            mov     a,r4
00B7 9A         794            subb    a,r2
00B8 ED         795            mov     a,r5
00B9 9B         796            subb    a,r3
00BA 5000       797            jnc     L004009?
00BC            798   ;        main.c:175: for (k=0; k<4; k++) Timer3us(250);
00BC 7E00       799            mov     r6,#0x00
00BE            800   L004001?:
00BE BE04D0     801            cjne    r6,#0x04,L004018?
00C1            802   L004018?:
00C1 5000       803            jnc     L004007?
00C3 7582FA     804            mov     dpl,#0xFA
00C6 C002       805            push    ar2
00C8 C003       806            push    ar3
00CA C004       807            push    ar4
00CC C005       808            push    ar5
00CE C006       809            push    ar6
00D0 120000     810            lcall   _Timer3us
00D3 D006       811            pop     ar6
00D5 D005       812            pop     ar5
00D7 D004       813            pop     ar4
00D9 D003       814            pop     ar3
00DB D002       815            pop     ar2
00DD 0E         816            inc     r6
00DE 8000       817            sjmp    L004001?
00E0            818   L004007?:
00E0            819   ;        main.c:174: for(j=0; j<ms; j++)
00E0 0C         820            inc     r4
00E1 BC0010     821            cjne    r4,#0x00,L004005?
00E4 0D         822            inc     r5
00E5 8000       823            sjmp    L004005?
00E7            824   L004009?:
00E7 22         825            ret
00E8            826   ;------------------------------------------------------------
00E8            827   ;Allocation info for local variables in function 'UART1_Init'
00E8            828   ;------------------------------------------------------------
00E8            829   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00E8            830   ;------------------------------------------------------------
00E8            831   ;        main.c:178: void UART1_Init (unsigned long baudrate)
00E8            832   ;        -----------------------------------------
00E8            833   ;         function UART1_Init
00E8            834   ;        -----------------------------------------
00E8            835   _UART1_Init:
00E8 AA82       836            mov     r2,dpl
00EA AB83       837            mov     r3,dph
00EC ACF0       838            mov     r4,b
00EE FD         839            mov     r5,a
00EF            840   ;        main.c:180: SFRPAGE = 0x20;
00EF 75A720     841            mov     _SFRPAGE,#0x20
00F2            842   ;        main.c:181: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00F2 75930C     843            mov     _SMOD1,#0x0C
00F5            844   ;        main.c:182: SCON1 = 0x10;
00F5 75C810     845            mov     _SCON1,#0x10
00F8            846   ;        main.c:183: SBCON1 =0x00;   // disable baud rate generator
00F8 759400     847            mov     _SBCON1,#0x00
00FB            848   ;        main.c:184: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00FB 8A00       849            mov     __divulong_PARM_2,r2
00FD 8B01       850            mov     (__divulong_PARM_2 + 1),r3
00FF 8C02       851            mov     (__divulong_PARM_2 + 2),r4
0101 8D03       852            mov     (__divulong_PARM_2 + 3),r5
0103 90A200     853            mov     dptr,#0xA200
0106 75F04A     854            mov     b,#0x4A
0109 7404       855            mov     a,#0x04
010B 120000     856            lcall   __divulong
010E AA82       857            mov     r2,dpl
0110 AB83       858            mov     r3,dph
0112 ACF0       859            mov     r4,b
0114 FD         860            mov     r5,a
0115 750018     861            mov     __divulong_PARM_2,#0x18
0118 E4         862            clr     a
0119 F501       863            mov     (__divulong_PARM_2 + 1),a
011B F502       864            mov     (__divulong_PARM_2 + 2),a
011D F503       865            mov     (__divulong_PARM_2 + 3),a
011F 8A82       866            mov     dpl,r2
0121 8B83       867            mov     dph,r3
0123 8CF0       868            mov     b,r4
0125 ED         869            mov     a,r5
0126 120000     870            lcall   __divulong
0129 AA82       871            mov     r2,dpl
012B AB83       872            mov     r3,dph
012D ACF0       873            mov     r4,b
012F FD         874            mov     r5,a
0130 E4         875            clr     a
0131 C3         876            clr     c
0132 9A         877            subb    a,r2
0133 FA         878            mov     r2,a
0134 E4         879            clr     a
0135 9B         880            subb    a,r3
0136 FB         881            mov     r3,a
0137 7401       882            mov     a,#0x01
0139 9C         883            subb    a,r4
013A E4         884            clr     a
013B 9D         885            subb    a,r5
013C 8A95       886            mov     _SBRL1,r2
013E 8B96       887            mov     (_SBRL1 >> 8),r3
0140            888   ;        main.c:185: TI1 = 1; // indicate ready for TX
0140 D2C9       889            setb    _TI1
0142            890   ;        main.c:186: SBCON1 |= 0x40;   // enable baud rate generator
0142 439440     891            orl     _SBCON1,#0x40
0145            892   ;        main.c:187: SFRPAGE = 0x00;
0145 75A700     893            mov     _SFRPAGE,#0x00
0148 22         894            ret
0149            895   ;------------------------------------------------------------
0149            896   ;Allocation info for local variables in function 'putchar1'
0149            897   ;------------------------------------------------------------
0149            898   ;c                         Allocated to registers r2 
0149            899   ;------------------------------------------------------------
0149            900   ;        main.c:190: void putchar1 (char c) 
0149            901   ;        -----------------------------------------
0149            902   ;         function putchar1
0149            903   ;        -----------------------------------------
0149            904   _putchar1:
0149 AA82       905            mov     r2,dpl
014B            906   ;        main.c:192: SFRPAGE = 0x20;
014B 75A720     907            mov     _SFRPAGE,#0x20
014E            908   ;        main.c:193: while (!TI1);
014E            909   L006001?:
014E            910   ;        main.c:194: TI1=0;
014E 10C960     911            jbc     _TI1,L006008?
0151 8000       912            sjmp    L006001?
0153            913   L006008?:
0153            914   ;        main.c:195: SBUF1 = c;
0153 8A92       915            mov     _SBUF1,r2
0155            916   ;        main.c:196: SFRPAGE = 0x00;
0155 75A700     917            mov     _SFRPAGE,#0x00
0158 22         918            ret
0159            919   ;------------------------------------------------------------
0159            920   ;Allocation info for local variables in function 'sendstr1'
0159            921   ;------------------------------------------------------------
0159            922   ;s                         Allocated to registers r2 r3 r4 
0159            923   ;------------------------------------------------------------
0159            924   ;        main.c:199: void sendstr1 (char * s)
0159            925   ;        -----------------------------------------
0159            926   ;         function sendstr1
0159            927   ;        -----------------------------------------
0159            928   _sendstr1:
0159 AA82       929            mov     r2,dpl
015B AB83       930            mov     r3,dph
015D ACF0       931            mov     r4,b
015F            932   ;        main.c:201: while(*s)
015F            933   L007001?:
015F 8A82       934            mov     dpl,r2
0161 8B83       935            mov     dph,r3
0163 8CF0       936            mov     b,r4
0165 120000     937            lcall   __gptrget
0168 FD         938            mov     r5,a
0169 6000       939            jz      L007004?
016B            940   ;        main.c:203: putchar1(*s);
016B 8D82       941            mov     dpl,r5
016D C002       942            push    ar2
016F C003       943            push    ar3
0171 C004       944            push    ar4
0173 120000     945            lcall   _putchar1
0176 D004       946            pop     ar4
0178 D003       947            pop     ar3
017A D002       948            pop     ar2
017C            949   ;        main.c:204: s++;        
017C 0A         950            inc     r2
017D BA00A0     951            cjne    r2,#0x00,L007001?
0180 0B         952            inc     r3
0181 8000       953            sjmp    L007001?
0183            954   L007004?:
0183 22         955            ret
0184            956   ;------------------------------------------------------------
0184            957   ;Allocation info for local variables in function 'getchar1'
0184            958   ;------------------------------------------------------------
0184            959   ;c                         Allocated to registers 
0184            960   ;------------------------------------------------------------
0184            961   ;        main.c:208: char getchar1 (void)
0184            962   ;        -----------------------------------------
0184            963   ;         function getchar1
0184            964   ;        -----------------------------------------
0184            965   _getchar1:
0184            966   ;        main.c:211: SFRPAGE = 0x20;
0184 75A720     967            mov     _SFRPAGE,#0x20
0187            968   ;        main.c:212: while (!RI1);
0187            969   L008001?:
0187            970   ;        main.c:213: RI1=0;
0187 10C8A0     971            jbc     _RI1,L008008?
018A 8000       972            sjmp    L008001?
018C            973   L008008?:
018C            974   ;        main.c:215: SCON1&=0b_0011_1111;
018C 53C83F     975            anl     _SCON1,#0x3F
018F            976   ;        main.c:216: c = SBUF1;
018F 859282     977            mov     dpl,_SBUF1
0192            978   ;        main.c:217: SFRPAGE = 0x00;
0192 75A700     979            mov     _SFRPAGE,#0x00
0195            980   ;        main.c:218: return (c);
0195 22         981            ret
0196            982   ;------------------------------------------------------------
0196            983   ;Allocation info for local variables in function 'getchar1_with_timeout'
0196            984   ;------------------------------------------------------------
0196            985   ;c                         Allocated to registers 
0196            986   ;timeout                   Allocated to registers r2 r3 
0196            987   ;------------------------------------------------------------
0196            988   ;        main.c:221: char getchar1_with_timeout (void)
0196            989   ;        -----------------------------------------
0196            990   ;         function getchar1_with_timeout
0196            991   ;        -----------------------------------------
0196            992   _getchar1_with_timeout:
0196            993   ;        main.c:225: SFRPAGE = 0x20;
0196 75A720     994            mov     _SFRPAGE,#0x20
0199            995   ;        main.c:227: while (!RI1)
0199 7A00       996            mov     r2,#0x00
019B 7B00       997            mov     r3,#0x00
019D            998   L009003?:
019D 20C820     999            jb      _RI1,L009005?
01A0           1000   ;        main.c:229: SFRPAGE = 0x00;
01A0 75A700    1001            mov     _SFRPAGE,#0x00
01A3           1002   ;        main.c:230: Timer3us(20);
01A3 758214    1003            mov     dpl,#0x14
01A6 C002      1004            push    ar2
01A8 C003      1005            push    ar3
01AA 120000    1006            lcall   _Timer3us
01AD D003      1007            pop     ar3
01AF D002      1008            pop     ar2
01B1           1009   ;        main.c:231: SFRPAGE = 0x20;
01B1 75A720    1010            mov     _SFRPAGE,#0x20
01B4           1011   ;        main.c:232: timeout++;
01B4 0A        1012            inc     r2
01B5 BA0060    1013            cjne    r2,#0x00,L009012?
01B8 0B        1014            inc     r3
01B9           1015   L009012?:
01B9           1016   ;        main.c:233: if(timeout==25000)
01B9 BAA8E0    1017            cjne    r2,#0xA8,L009003?
01BC BB61E0    1018            cjne    r3,#0x61,L009003?
01BF           1019   ;        main.c:235: SFRPAGE = 0x00;
01BF 75A700    1020            mov     _SFRPAGE,#0x00
01C2           1021   ;        main.c:236: return ('\n'); // Timeout after half second
01C2 75820A    1022            mov     dpl,#0x0A
01C5 22        1023            ret
01C6           1024   L009005?:
01C6           1025   ;        main.c:239: RI1=0;
01C6 C2C8      1026            clr     _RI1
01C8           1027   ;        main.c:241: SCON1&=0b_0011_1111;
01C8 53C83F    1028            anl     _SCON1,#0x3F
01CB           1029   ;        main.c:242: c = SBUF1;
01CB 859282    1030            mov     dpl,_SBUF1
01CE           1031   ;        main.c:243: SFRPAGE = 0x00;
01CE 75A700    1032            mov     _SFRPAGE,#0x00
01D1           1033   ;        main.c:244: return (c);
01D1 22        1034            ret
01D2           1035   ;------------------------------------------------------------
01D2           1036   ;Allocation info for local variables in function 'getstr1'
01D2           1037   ;------------------------------------------------------------
01D2           1038   ;n                         Allocated with name '_getstr1_PARM_2'
01D2           1039   ;s                         Allocated to registers r2 r3 r4 
01D2           1040   ;c                         Allocated to registers r1 
01D2           1041   ;cnt                       Allocated to registers r5 
01D2           1042   ;------------------------------------------------------------
01D2           1043   ;        main.c:247: void getstr1 (char * s, unsigned char n)
01D2           1044   ;        -----------------------------------------
01D2           1045   ;         function getstr1
01D2           1046   ;        -----------------------------------------
01D2           1047   _getstr1:
01D2 AA82      1048            mov     r2,dpl
01D4 AB83      1049            mov     r3,dph
01D6 ACF0      1050            mov     r4,b
01D8           1051   ;        main.c:253: while(1)
01D8 7D00      1052            mov     r5,#0x00
01DA 8A06      1053            mov     ar6,r2
01DC 8B07      1054            mov     ar7,r3
01DE 8C00      1055            mov     ar0,r4
01E0           1056   L010007?:
01E0           1057   ;        main.c:255: c=getchar1_with_timeout();
01E0 C002      1058            push    ar2
01E2 C003      1059            push    ar3
01E4 C004      1060            push    ar4
01E6 C005      1061            push    ar5
01E8 C006      1062            push    ar6
01EA C007      1063            push    ar7
01EC C000      1064            push    ar0
01EE 120000    1065            lcall   _getchar1_with_timeout
01F1 A982      1066            mov     r1,dpl
01F3 D000      1067            pop     ar0
01F5 D007      1068            pop     ar7
01F7 D006      1069            pop     ar6
01F9 D005      1070            pop     ar5
01FB D004      1071            pop     ar4
01FD D003      1072            pop     ar3
01FF D002      1073            pop     ar2
0201           1074   ;        main.c:256: if(c=='\n')
0201 B90AE0    1075            cjne    r1,#0x0A,L010002?
0204           1076   ;        main.c:258: *s=0;
0204 8A82      1077            mov     dpl,r2
0206 8B83      1078            mov     dph,r3
0208 8CF0      1079            mov     b,r4
020A E4        1080            clr     a
020B           1081   ;        main.c:259: return;
020B 020000    1082            ljmp    __gptrput
020E           1083   L010002?:
020E           1084   ;        main.c:262: if (cnt<n)
020E C3        1085            clr     c
020F ED        1086            mov     a,r5
0210 95B8      1087            subb    a,_getstr1_PARM_2
0212 5000      1088            jnc     L010004?
0214           1089   ;        main.c:264: cnt++;
0214 0D        1090            inc     r5
0215           1091   ;        main.c:265: *s=c;
0215 8E82      1092            mov     dpl,r6
0217 8F83      1093            mov     dph,r7
0219 88F0      1094            mov     b,r0
021B E9        1095            mov     a,r1
021C 120000    1096            lcall   __gptrput
021F A3        1097            inc     dptr
0220 AE82      1098            mov     r6,dpl
0222 AF83      1099            mov     r7,dph
0224           1100   ;        main.c:266: s++;
0224 8E02      1101            mov     ar2,r6
0226 8F03      1102            mov     ar3,r7
0228 8804      1103            mov     ar4,r0
022A 8000      1104            sjmp    L010007?
022C           1105   L010004?:
022C           1106   ;        main.c:270: *s=0;
022C 8A82      1107            mov     dpl,r2
022E 8B83      1108            mov     dph,r3
0230 8CF0      1109            mov     b,r4
0232 E4        1110            clr     a
0233           1111   ;        main.c:271: return;
0233 020000    1112            ljmp    __gptrput
0236           1113   ;------------------------------------------------------------
0236           1114   ;Allocation info for local variables in function 'RXU1'
0236           1115   ;------------------------------------------------------------
0236           1116   ;------------------------------------------------------------
0236           1117   ;        main.c:277: bit RXU1 (void)
0236           1118   ;        -----------------------------------------
0236           1119   ;         function RXU1
0236           1120   ;        -----------------------------------------
0236           1121   _RXU1:
0236           1122   ;        main.c:280: SFRPAGE = 0x20;
0236 75A720    1123            mov     _SFRPAGE,#0x20
0239           1124   ;        main.c:281: mybit=RI1;
0239 A2C8      1125            mov     c,_RI1
023B           1126   ;        main.c:282: SFRPAGE = 0x00;
023B 75A700    1127            mov     _SFRPAGE,#0x00
023E           1128   ;        main.c:283: return mybit;
023E 22        1129            ret
023F           1130   ;------------------------------------------------------------
023F           1131   ;Allocation info for local variables in function 'waitms_or_RI1'
023F           1132   ;------------------------------------------------------------
023F           1133   ;ms                        Allocated to registers r2 r3 
023F           1134   ;j                         Allocated to registers r4 r5 
023F           1135   ;k                         Allocated to registers r6 
023F           1136   ;------------------------------------------------------------
023F           1137   ;        main.c:286: void waitms_or_RI1 (unsigned int ms)
023F           1138   ;        -----------------------------------------
023F           1139   ;         function waitms_or_RI1
023F           1140   ;        -----------------------------------------
023F           1141   _waitms_or_RI1:
023F AA82      1142            mov     r2,dpl
0241 AB83      1143            mov     r3,dph
0243           1144   ;        main.c:290: for(j=0; j<ms; j++)
0243 7C00      1145            mov     r4,#0x00
0245 7D00      1146            mov     r5,#0x00
0247           1147   L012007?:
0247 C3        1148            clr     c
0248 EC        1149            mov     a,r4
0249 9A        1150            subb    a,r2
024A ED        1151            mov     a,r5
024B 9B        1152            subb    a,r3
024C 5000      1153            jnc     L012011?
024E           1154   ;        main.c:292: for (k=0; k<4; k++)
024E 7E00      1155            mov     r6,#0x00
0250           1156   L012003?:
0250 BE0460    1157            cjne    r6,#0x04,L012019?
0253           1158   L012019?:
0253 5000      1159            jnc     L012009?
0255           1160   ;        main.c:294: if(RXU1()) return;
0255 C002      1161            push    ar2
0257 C003      1162            push    ar3
0259 C004      1163            push    ar4
025B C005      1164            push    ar5
025D C006      1165            push    ar6
025F 120000    1166            lcall   _RXU1
0262 E4        1167            clr     a
0263 33        1168            rlc     a
0264 D006      1169            pop     ar6
0266 D005      1170            pop     ar5
0268 D004      1171            pop     ar4
026A D003      1172            pop     ar3
026C D002      1173            pop     ar2
026E 6000      1174            jz      L012002?
0270 22        1175            ret
0271           1176   L012002?:
0271           1177   ;        main.c:295: Timer3us(250);
0271 7582FA    1178            mov     dpl,#0xFA
0274 C002      1179            push    ar2
0276 C003      1180            push    ar3
0278 C004      1181            push    ar4
027A C005      1182            push    ar5
027C C006      1183            push    ar6
027E 120000    1184            lcall   _Timer3us
0281 D006      1185            pop     ar6
0283 D005      1186            pop     ar5
0285 D004      1187            pop     ar4
0287 D003      1188            pop     ar3
0289 D002      1189            pop     ar2
028B           1190   ;        main.c:292: for (k=0; k<4; k++)
028B 0E        1191            inc     r6
028C 8000      1192            sjmp    L012003?
028E           1193   L012009?:
028E           1194   ;        main.c:290: for(j=0; j<ms; j++)
028E 0C        1195            inc     r4
028F BC00A0    1196            cjne    r4,#0x00,L012007?
0292 0D        1197            inc     r5
0293 8000      1198            sjmp    L012007?
0295           1199   L012011?:
0295 22        1200            ret
0296           1201   ;------------------------------------------------------------
0296           1202   ;Allocation info for local variables in function 'SendATCommand'
0296           1203   ;------------------------------------------------------------
0296           1204   ;s                         Allocated to registers r2 r3 r4 
0296           1205   ;------------------------------------------------------------
0296           1206   ;        main.c:300: void SendATCommand (char * s)
0296           1207   ;        -----------------------------------------
0296           1208   ;         function SendATCommand
0296           1209   ;        -----------------------------------------
0296           1210   _SendATCommand:
0296 AA82      1211            mov     r2,dpl
0298 AB83      1212            mov     r3,dph
029A ACF0      1213            mov     r4,b
029C           1214   ;        main.c:302: printf("Command: %s", s);
029C C002      1215            push    ar2
029E C003      1216            push    ar3
02A0 C004      1217            push    ar4
02A2 C002      1218            push    ar2
02A4 C003      1219            push    ar3
02A6 C004      1220            push    ar4
02A8 7420      1221            mov     a,#__str_0
02AA C0E0      1222            push    acc
02AC 74BE      1223            mov     a,#(__str_0 >> 8)
02AE C0E0      1224            push    acc
02B0 7480      1225            mov     a,#0x80
02B2 C0E0      1226            push    acc
02B4 120000    1227            lcall   _printf
02B7 E581      1228            mov     a,sp
02B9 24FA      1229            add     a,#0xfa
02BB F581      1230            mov     sp,a
02BD           1231   ;        main.c:303: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02BD C2A0      1232            clr     _P2_0
02BF           1233   ;        main.c:304: waitms(5);
02BF 900005    1234            mov     dptr,#0x0005
02C2 120000    1235            lcall   _waitms
02C5 D004      1236            pop     ar4
02C7 D003      1237            pop     ar3
02C9 D002      1238            pop     ar2
02CB           1239   ;        main.c:305: sendstr1(s);
02CB 8A82      1240            mov     dpl,r2
02CD 8B83      1241            mov     dph,r3
02CF 8CF0      1242            mov     b,r4
02D1 120000    1243            lcall   _sendstr1
02D4           1244   ;        main.c:306: getstr1(buff, sizeof(buff)-1);
02D4 75B813    1245            mov     _getstr1_PARM_2,#0x13
02D7 904478    1246            mov     dptr,#_buff
02DA 75F040    1247            mov     b,#0x40
02DD 120000    1248            lcall   _getstr1
02E0           1249   ;        main.c:307: waitms(10);
02E0 90000A    1250            mov     dptr,#0x000A
02E3 120000    1251            lcall   _waitms
02E6           1252   ;        main.c:308: P2_0=1; // 'set' pin to 1 is normal operation mode.
02E6 D2A0      1253            setb    _P2_0
02E8           1254   ;        main.c:309: printf("Response: %s\r\n", buff);
02E8 7478      1255            mov     a,#_buff
02EA C0E0      1256            push    acc
02EC 7444      1257            mov     a,#(_buff >> 8)
02EE C0E0      1258            push    acc
02F0 7440      1259            mov     a,#0x40
02F2 C0E0      1260            push    acc
02F4 74E0      1261            mov     a,#__str_1
02F6 C0E0      1262            push    acc
02F8 74BE      1263            mov     a,#(__str_1 >> 8)
02FA C0E0      1264            push    acc
02FC 7480      1265            mov     a,#0x80
02FE C0E0      1266            push    acc
0300 120000    1267            lcall   _printf
0303 E581      1268            mov     a,sp
0305 24FA      1269            add     a,#0xfa
0307 F581      1270            mov     sp,a
0309 22        1271            ret
030A           1272   ;------------------------------------------------------------
030A           1273   ;Allocation info for local variables in function 'ReceptionOff'
030A           1274   ;------------------------------------------------------------
030A           1275   ;------------------------------------------------------------
030A           1276   ;        main.c:312: void ReceptionOff (void)
030A           1277   ;        -----------------------------------------
030A           1278   ;         function ReceptionOff
030A           1279   ;        -----------------------------------------
030A           1280   _ReceptionOff:
030A           1281   ;        main.c:314: P2_0=0; // 'set' pin to 0 is 'AT' mode.
030A C2A0      1282            clr     _P2_0
030C           1283   ;        main.c:315: waitms(10);
030C 90000A    1284            mov     dptr,#0x000A
030F 120000    1285            lcall   _waitms
0312           1286   ;        main.c:316: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0312 90BF20    1287            mov     dptr,#__str_2
0315 75F080    1288            mov     b,#0x80
0318 120000    1289            lcall   _sendstr1
031B           1290   ;        main.c:317: waitms(10);
031B 90000A    1291            mov     dptr,#0x000A
031E 120000    1292            lcall   _waitms
0321           1293   ;        main.c:319: SCON1&=0b_0011_1111;
0321 53C83F    1294            anl     _SCON1,#0x3F
0324           1295   ;        main.c:320: P2_0=1; // 'set' pin to 1 is normal operation mode.
0324 D2A0      1296            setb    _P2_0
0326 22        1297            ret
0327           1298   ;------------------------------------------------------------
0327           1299   ;Allocation info for local variables in function 'Set_Pin_Output'
0327           1300   ;------------------------------------------------------------
0327           1301   ;pin                       Allocated to registers r2 
0327           1302   ;mask                      Allocated to registers r3 
0327           1303   ;------------------------------------------------------------
0327           1304   ;        main.c:323: void Set_Pin_Output (unsigned char pin)
0327           1305   ;        -----------------------------------------
0327           1306   ;         function Set_Pin_Output
0327           1307   ;        -----------------------------------------
0327           1308   _Set_Pin_Output:
0327 AA82      1309            mov     r2,dpl
0329           1310   ;        main.c:327: mask=(1<<(pin&0x7));
0329 7407      1311            mov     a,#0x07
032B 5A        1312            anl     a,r2
032C F5F0      1313            mov     b,a
032E 05F0      1314            inc     b
0330 7401      1315            mov     a,#0x01
0332 8000      1316            sjmp    L015011?
0334           1317   L015009?:
0334 25E0      1318            add     a,acc
0336           1319   L015011?:
0336 D5F0A0    1320            djnz    b,L015009?
0339 FB        1321            mov     r3,a
033A           1322   ;        main.c:328: switch(pin/0x10)
033A EA        1323            mov     a,r2
033B C4        1324            swap    a
033C 540F      1325            anl     a,#0x0f
033E FA        1326            mov  r2,a
033F 24FC      1327            add     a,#0xff - 0x03
0341 4000      1328            jc      L015006?
0343 EA        1329            mov     a,r2
0344 2A        1330            add     a,r2
0345 2A        1331            add     a,r2
0346 90C028    1332            mov     dptr,#L015013?
0349 73        1333            jmp     @a+dptr
034A           1334   L015013?:
034A 020000    1335            ljmp    L015001?
034D 020000    1336            ljmp    L015002?
0350 020000    1337            ljmp    L015003?
0353 020000    1338            ljmp    L015004?
0356           1339   ;        main.c:330: case 0: P0MDOUT |= mask; break;
0356           1340   L015001?:
0356 EB        1341            mov     a,r3
0357 42A4      1342            orl     _P0MDOUT,a
0359           1343   ;        main.c:331: case 1: P1MDOUT |= mask; break;
0359 22        1344            ret
035A           1345   L015002?:
035A EB        1346            mov     a,r3
035B 42A5      1347            orl     _P1MDOUT,a
035D           1348   ;        main.c:332: case 2: P2MDOUT |= mask; break; 
035D 22        1349            ret
035E           1350   L015003?:
035E EB        1351            mov     a,r3
035F 42A6      1352            orl     _P2MDOUT,a
0361           1353   ;        main.c:333: case 3: P3MDOUT |= mask; break; 
0361 22        1354            ret
0362           1355   L015004?:
0362 EB        1356            mov     a,r3
0363 429C      1357            orl     _P3MDOUT,a
0365           1358   ;        main.c:334: }   
0365           1359   L015006?:
0365 22        1360            ret
0366           1361   ;------------------------------------------------------------
0366           1362   ;Allocation info for local variables in function 'Set_Pin_Input'
0366           1363   ;------------------------------------------------------------
0366           1364   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
0366           1365   ;pin                       Allocated to registers r2 
0366           1366   ;------------------------------------------------------------
0366           1367   ;        main.c:337: void Set_Pin_Input (unsigned char pin)
0366           1368   ;        -----------------------------------------
0366           1369   ;         function Set_Pin_Input
0366           1370   ;        -----------------------------------------
0366           1371   _Set_Pin_Input:
0366 AA82      1372            mov     r2,dpl
0368           1373   ;        main.c:341: mask=(1<<(pin&0x7));
0368 7407      1374            mov     a,#0x07
036A 5A        1375            anl     a,r2
036B F5F0      1376            mov     b,a
036D 05F0      1377            inc     b
036F 7401      1378            mov     a,#0x01
0371 8000      1379            sjmp    L016011?
0373           1380   L016009?:
0373 25E0      1381            add     a,acc
0375           1382   L016011?:
0375 D5F0A8    1383            djnz    b,L016009?
0378           1384   ;        main.c:342: mask=~mask;
0378 F4        1385            cpl     a
0379 FB        1386            mov     r3,a
037A           1387   ;        main.c:343: switch(pin/0x10)
037A EA        1388            mov     a,r2
037B C4        1389            swap    a
037C 540F      1390            anl     a,#0x0f
037E FA        1391            mov  r2,a
037F 24FC      1392            add     a,#0xff - 0x03
0381 4000      1393            jc      L016006?
0383 EA        1394            mov     a,r2
0384 2A        1395            add     a,r2
0385 2A        1396            add     a,r2
0386 90C228    1397            mov     dptr,#L016013?
0389 73        1398            jmp     @a+dptr
038A           1399   L016013?:
038A 020000    1400            ljmp    L016001?
038D 020000    1401            ljmp    L016002?
0390 020000    1402            ljmp    L016003?
0393 020000    1403            ljmp    L016004?
0396           1404   ;        main.c:345: case 0: P0MDOUT &= mask; break;
0396           1405   L016001?:
0396 EB        1406            mov     a,r3
0397 52A4      1407            anl     _P0MDOUT,a
0399           1408   ;        main.c:346: case 1: P1MDOUT &= mask; break;
0399 22        1409            ret
039A           1410   L016002?:
039A EB        1411            mov     a,r3
039B 52A5      1412            anl     _P1MDOUT,a
039D           1413   ;        main.c:347: case 2: P2MDOUT &= mask; break; 
039D 22        1414            ret
039E           1415   L016003?:
039E EB        1416            mov     a,r3
039F 52A6      1417            anl     _P2MDOUT,a
03A1           1418   ;        main.c:348: case 3: P3MDOUT &= mask; break; 
03A1 22        1419            ret
03A2           1420   L016004?:
03A2 EB        1421            mov     a,r3
03A3 529C      1422            anl     _P3MDOUT,a
03A5           1423   ;        main.c:349: }   
03A5           1424   L016006?:
03A5 22        1425            ret
03A6           1426   ;------------------------------------------------------------
03A6           1427   ;Allocation info for local variables in function 'InitADC'
03A6           1428   ;------------------------------------------------------------
03A6           1429   ;------------------------------------------------------------
03A6           1430   ;        main.c:352: void InitADC (void)
03A6           1431   ;        -----------------------------------------
03A6           1432   ;         function InitADC
03A6           1433   ;        -----------------------------------------
03A6           1434   _InitADC:
03A6           1435   ;        main.c:354: SFRPAGE = 0x00;
03A6 75A700    1436            mov     _SFRPAGE,#0x00
03A9           1437   ;        main.c:355: ADEN=0; // Disable ADC
03A9 C2EF      1438            clr     _ADEN
03AB           1439   ;        main.c:360: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03AB 75B280    1440            mov     _ADC0CN1,#0x80
03AE           1441   ;        main.c:364: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03AE 75BC20    1442            mov     _ADC0CF0,#0x20
03B1           1443   ;        main.c:368: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03B1 75B91E    1444            mov     _ADC0CF1,#0x1E
03B4           1445   ;        main.c:377: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03B4 75E800    1446            mov     _ADC0CN0,#0x00
03B7           1447   ;        main.c:382: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03B7 75DF3F    1448            mov     _ADC0CF2,#0x3F
03BA           1449   ;        main.c:386: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03BA 75B300    1450            mov     _ADC0CN2,#0x00
03BD           1451   ;        main.c:388: ADEN=1; // Enable ADC
03BD D2EF      1452            setb    _ADEN
03BF 22        1453            ret
03C0           1454   ;------------------------------------------------------------
03C0           1455   ;Allocation info for local variables in function 'InitPinADC'
03C0           1456   ;------------------------------------------------------------
03C0           1457   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03C0           1458   ;portno                    Allocated to registers r2 
03C0           1459   ;mask                      Allocated to registers r3 
03C0           1460   ;------------------------------------------------------------
03C0           1461   ;        main.c:391: void InitPinADC (unsigned char portno, unsigned char pin_num)
03C0           1462   ;        -----------------------------------------
03C0           1463   ;         function InitPinADC
03C0           1464   ;        -----------------------------------------
03C0           1465   _InitPinADC:
03C0 AA82      1466            mov     r2,dpl
03C2           1467   ;        main.c:395: mask=1<<pin_num;
03C2 85B0F0    1468            mov     b,_InitPinADC_PARM_2
03C5 05F0      1469            inc     b
03C7 7401      1470            mov     a,#0x01
03C9 8000      1471            sjmp    L018013?
03CB           1472   L018011?:
03CB 25E0      1473            add     a,acc
03CD           1474   L018013?:
03CD D5F0A8    1475            djnz    b,L018011?
03D0 FB        1476            mov     r3,a
03D1           1477   ;        main.c:397: SFRPAGE = 0x20;
03D1 75A720    1478            mov     _SFRPAGE,#0x20
03D4           1479   ;        main.c:398: switch (portno)
03D4 BA00E8    1480            cjne    r2,#0x00,L018014?
03D7 8000      1481            sjmp    L018001?
03D9           1482   L018014?:
03D9 BA0168    1483            cjne    r2,#0x01,L018015?
03DC 8000      1484            sjmp    L018002?
03DE           1485   L018015?:
03DE           1486   ;        main.c:400: case 0:
03DE BA02E8    1487            cjne    r2,#0x02,L018005?
03E1 8000      1488            sjmp    L018003?
03E3           1489   L018001?:
03E3           1490   ;        main.c:401: P0MDIN &= (~mask); // Set pin as analog input
03E3 EB        1491            mov     a,r3
03E4 F4        1492            cpl     a
03E5 FA        1493            mov     r2,a
03E6 52F1      1494            anl     _P0MDIN,a
03E8           1495   ;        main.c:402: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03E8 EB        1496            mov     a,r3
03E9 42D4      1497            orl     _P0SKIP,a
03EB           1498   ;        main.c:403: break;
03EB           1499   ;        main.c:404: case 1:
03EB 8000      1500            sjmp    L018005?
03ED           1501   L018002?:
03ED           1502   ;        main.c:405: P1MDIN &= (~mask); // Set pin as analog input
03ED EB        1503            mov     a,r3
03EE F4        1504            cpl     a
03EF FA        1505            mov     r2,a
03F0 52F2      1506            anl     _P1MDIN,a
03F2           1507   ;        main.c:406: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03F2 EB        1508            mov     a,r3
03F3 42D5      1509            orl     _P1SKIP,a
03F5           1510   ;        main.c:407: break;
03F5           1511   ;        main.c:408: case 2:
03F5 8000      1512            sjmp    L018005?
03F7           1513   L018003?:
03F7           1514   ;        main.c:409: P2MDIN &= (~mask); // Set pin as analog input
03F7 EB        1515            mov     a,r3
03F8 F4        1516            cpl     a
03F9 FA        1517            mov     r2,a
03FA 52F3      1518            anl     _P2MDIN,a
03FC           1519   ;        main.c:410: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03FC EB        1520            mov     a,r3
03FD 42CC      1521            orl     _P2SKIP,a
03FF           1522   ;        main.c:414: }
03FF           1523   L018005?:
03FF           1524   ;        main.c:415: SFRPAGE = 0x00;
03FF 75A700    1525            mov     _SFRPAGE,#0x00
0402 22        1526            ret
0403           1527   ;------------------------------------------------------------
0403           1528   ;Allocation info for local variables in function 'ADC_at_Pin'
0403           1529   ;------------------------------------------------------------
0403           1530   ;pin                       Allocated to registers 
0403           1531   ;------------------------------------------------------------
0403           1532   ;        main.c:418: unsigned int ADC_at_Pin(unsigned char pin)
0403           1533   ;        -----------------------------------------
0403           1534   ;         function ADC_at_Pin
0403           1535   ;        -----------------------------------------
0403           1536   _ADC_at_Pin:
0403 8582BB    1537            mov     _ADC0MX,dpl
0406           1538   ;        main.c:421: ADINT = 0;
0406 C2ED      1539            clr     _ADINT
0408           1540   ;        main.c:422: ADBUSY = 1;     // Convert voltage at the pin
0408 D2EC      1541            setb    _ADBUSY
040A           1542   ;        main.c:423: while (!ADINT); // Wait for conversion to complete
040A           1543   L019001?:
040A 30ED68    1544            jnb     _ADINT,L019001?
040D           1545   ;        main.c:424: return (ADC0);
040D 85BD82    1546            mov     dpl,_ADC0
0410 85BE83    1547            mov     dph,(_ADC0 >> 8)
0413 22        1548            ret
0414           1549   ;------------------------------------------------------------
0414           1550   ;Allocation info for local variables in function 'Timer5_ISR'
0414           1551   ;------------------------------------------------------------
0414           1552   ;------------------------------------------------------------
0414           1553   ;        main.c:427: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0414           1554   ;        -----------------------------------------
0414           1555   ;         function Timer5_ISR
0414           1556   ;        -----------------------------------------
0414           1557   _Timer5_ISR:
0414 C0E0      1558            push    acc
0416 C002      1559            push    ar2
0418 C003      1560            push    ar3
041A C0D0      1561            push    psw
041C 75D000    1562            mov     psw,#0x00
041F           1563   ;        main.c:429: SFRPAGE=0x10;
041F 75A710    1564            mov     _SFRPAGE,#0x10
0422           1565   ;        main.c:430: TF5H = 0; // Clear Timer5 interrupt flag
0422 C2C7      1566            clr     _TF5H
0424           1567   ;        main.c:431: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0424 75D2C4    1568            mov     _TMR5RL,#0xC4
0427 75D3FF    1569            mov     (_TMR5RL >> 8),#0xFF
042A           1570   ;        main.c:433: pwm_counter++; 
042A 05B8      1571            inc     _pwm_counter
042C E4        1572            clr     a
042D B5B8E8    1573            cjne    a,_pwm_counter,L020022?
0430 05B9      1574            inc     (_pwm_counter + 1)
0432           1575   L020022?:
0432           1576   ;        main.c:434: if (pwm_counter == 100){
0432 7464      1577            mov     a,#0x64
0434 B5B828    1578            cjne    a,_pwm_counter,L020023?
0437 E4        1579            clr     a
0438 B5B928    1580            cjne    a,(_pwm_counter + 1),L020023?
043B 8000      1581            sjmp    L020024?
043D           1582   L020023?:
043D 8000      1583            sjmp    L020002?
043F           1584   L020024?:
043F           1585   ;        main.c:435: pwm_counter = 0; 
043F E4        1586            clr     a
0440 F5B8      1587            mov     _pwm_counter,a
0442 F5B9      1588            mov     (_pwm_counter + 1),a
0444           1589   L020002?:
0444           1590   ;        main.c:438: if (pwm_left > pwm_counter){
0444 AA38      1591            mov     r2,_pwm_left
0446 7B00      1592            mov     r3,#0x00
0448 C3        1593            clr     c
0449 E5B8      1594            mov     a,_pwm_counter
044B 9A        1595            subb    a,r2
044C E5B9      1596            mov     a,(_pwm_counter + 1)
044E 9B        1597            subb    a,r3
044F 5000      1598            jnc     L020007?
0451           1599   ;        main.c:439: if(L_motor_dir){
0451 E5B8      1600            mov     a,_L_motor_dir
0453 6000      1601            jz      L020004?
0455           1602   ;        main.c:440: L_bridge_1 = 1; 
0455 D2A1      1603            setb    _P2_1
0457           1604   ;        main.c:441: L_bridge_2 = 0; 
0457 C2A2      1605            clr     _P2_2
0459 8000      1606            sjmp    L020008?
045B           1607   L020004?:
045B           1608   ;        main.c:444: L_bridge_1 = 0; 
045B C2A1      1609            clr     _P2_1
045D           1610   ;        main.c:445: L_bridge_2 = 1; 
045D D2A2      1611            setb    _P2_2
045F 8000      1612            sjmp    L020008?
0461           1613   L020007?:
0461           1614   ;        main.c:449: L_bridge_1 = 0; 
0461 C2A1      1615            clr     _P2_1
0463           1616   ;        main.c:450: L_bridge_2 = 0; 
0463 C2A2      1617            clr     _P2_2
0465           1618   L020008?:
0465           1619   ;        main.c:452: if (pwm_right > pwm_counter){
0465 AAF8      1620            mov     r2,_pwm_right
0467 7B00      1621            mov     r3,#0x00
0469 C3        1622            clr     c
046A E5B8      1623            mov     a,_pwm_counter
046C 9A        1624            subb    a,r2
046D E5B9      1625            mov     a,(_pwm_counter + 1)
046F 9B        1626            subb    a,r3
0470 5000      1627            jnc     L020013?
0472           1628   ;        main.c:453: if (R_motor_dir){
0472 E578      1629            mov     a,_R_motor_dir
0474 6000      1630            jz      L020010?
0476           1631   ;        main.c:454: R_bridge_1 = 1; 
0476 D2A4      1632            setb    _P2_4
0478           1633   ;        main.c:455: R_bridge_2 = 0;
0478 C2A3      1634            clr     _P2_3
047A 8000      1635            sjmp    L020015?
047C           1636   L020010?:
047C           1637   ;        main.c:458: R_bridge_1 = 0; 
047C C2A4      1638            clr     _P2_4
047E           1639   ;        main.c:459: R_bridge_2 = 1;
047E D2A3      1640            setb    _P2_3
0480 8000      1641            sjmp    L020015?
0482           1642   L020013?:
0482           1643   ;        main.c:463: R_bridge_1 = 0; 
0482 C2A4      1644            clr     _P2_4
0484           1645   ;        main.c:464: R_bridge_2 = 0; 
0484 C2A3      1646            clr     _P2_3
0486           1647   L020015?:
0486 D0D0      1648            pop     psw
0488 D003      1649            pop     ar3
048A D002      1650            pop     ar2
048C D0E0      1651            pop     acc
048E 32        1652            reti
048F           1653   ;        eliminated unneeded push/pop dpl
048F           1654   ;        eliminated unneeded push/pop dph
048F           1655   ;        eliminated unneeded push/pop b
048F           1656   ;------------------------------------------------------------
048F           1657   ;Allocation info for local variables in function 'Timer0_ISR'
048F           1658   ;------------------------------------------------------------
048F           1659   ;------------------------------------------------------------
048F           1660   ;        main.c:468: void Timer0_ISR (void) interrupt INTERRUPT_TIMER0
048F           1661   ;        -----------------------------------------
048F           1662   ;         function Timer0_ISR
048F           1663   ;        -----------------------------------------
048F           1664   _Timer0_ISR:
048F C0E0      1665            push    acc
0491 C002      1666            push    ar2
0493 C003      1667            push    ar3
0495 C0D0      1668            push    psw
0497 75D000    1669            mov     psw,#0x00
049A           1670   ;        main.c:470: SFRPAGE=0x0;
049A 75A700    1671            mov     _SFRPAGE,#0x00
049D           1672   ;        main.c:472: TMR0 = 0x10000L-(SYSCLK/(TIMER_0_FREQ));
049D 758A60    1673            mov     _TMR0,#0x60
04A0 758C73    1674            mov     (_TMR0 >> 8),#0x73
04A3           1675   ;        main.c:474: servo_counter++;
04A3 0578      1676            inc     _servo_counter
04A5 E4        1677            clr     a
04A6 B57868    1678            cjne    a,_servo_counter,L021014?
04A9 0579      1679            inc     (_servo_counter + 1)
04AB           1680   L021014?:
04AB           1681   ;        main.c:475: if(servo_counter==1000)
04AB 74E8      1682            mov     a,#0xE8
04AD B578A8    1683            cjne    a,_servo_counter,L021002?
04B0 7403      1684            mov     a,#0x03
04B2 B579A8    1685            cjne    a,(_servo_counter + 1),L021002?
04B5           1686   ;        main.c:477: servo_counter=0;
04B5 E4        1687            clr     a
04B6 F578      1688            mov     _servo_counter,a
04B8 F579      1689            mov     (_servo_counter + 1),a
04BA           1690   L021002?:
04BA           1691   ;        main.c:479: if (servo_base_pwm > servo_counter)
04BA AA38      1692            mov     r2,_servo_base_pwm
04BC 7B00      1693            mov     r3,#0x00
04BE C3        1694            clr     c
04BF E578      1695            mov     a,_servo_counter
04C1 9A        1696            subb    a,r2
04C2 E579      1697            mov     a,(_servo_counter + 1)
04C4 9B        1698            subb    a,r3
04C5 5000      1699            jnc     L021004?
04C7           1700   ;        main.c:481: Servo_base = 1; 
04C7 D282      1701            setb    _P0_2
04C9 8000      1702            sjmp    L021005?
04CB           1703   L021004?:
04CB           1704   ;        main.c:484: Servo_base = 0;
04CB C282      1705            clr     _P0_2
04CD           1706   L021005?:
04CD           1707   ;        main.c:486: if (servo_arm_pwm > servo_counter)
04CD AAF8      1708            mov     r2,_servo_arm_pwm
04CF 7B00      1709            mov     r3,#0x00
04D1 C3        1710            clr     c
04D2 E578      1711            mov     a,_servo_counter
04D4 9A        1712            subb    a,r2
04D5 E579      1713            mov     a,(_servo_counter + 1)
04D7 9B        1714            subb    a,r3
04D8 5000      1715            jnc     L021007?
04DA           1716   ;        main.c:488: Servo_arm = 1; 
04DA D283      1717            setb    _P0_3
04DC 8000      1718            sjmp    L021009?
04DE           1719   L021007?:
04DE           1720   ;        main.c:491: Servo_arm = 0; 
04DE C283      1721            clr     _P0_3
04E0           1722   L021009?:
04E0 D0D0      1723            pop     psw
04E2 D003      1724            pop     ar3
04E4 D002      1725            pop     ar2
04E6 D0E0      1726            pop     acc
04E8 32        1727            reti
04E9           1728   ;        eliminated unneeded push/pop dpl
04E9           1729   ;        eliminated unneeded push/pop dph
04E9           1730   ;        eliminated unneeded push/pop b
04E9           1731   ;------------------------------------------------------------
04E9           1732   ;Allocation info for local variables in function 'MoveForward'
04E9           1733   ;------------------------------------------------------------
04E9           1734   ;speed                     Allocated to registers r2 r3 
04E9           1735   ;------------------------------------------------------------
04E9           1736   ;        main.c:496: void MoveForward (int speed)
04E9           1737   ;        -----------------------------------------
04E9           1738   ;         function MoveForward
04E9           1739   ;        -----------------------------------------
04E9           1740   _MoveForward:
04E9 AA82      1741            mov     r2,dpl
04EB           1742   ;        main.c:498: pwm_left = speed; 
04EB 8A38      1743            mov     _pwm_left,r2
04ED           1744   ;        main.c:499: pwm_right = speed; 
04ED 8AF8      1745            mov     _pwm_right,r2
04EF           1746   ;        main.c:500: L_motor_dir = 0; 
04EF 75B800    1747            mov     _L_motor_dir,#0x00
04F2           1748   ;        main.c:501: R_motor_dir = 0; 
04F2 757800    1749            mov     _R_motor_dir,#0x00
04F5 22        1750            ret
04F6           1751   ;------------------------------------------------------------
04F6           1752   ;Allocation info for local variables in function 'MoveBackward'
04F6           1753   ;------------------------------------------------------------
04F6           1754   ;speed                     Allocated to registers r2 r3 
04F6           1755   ;------------------------------------------------------------
04F6           1756   ;        main.c:504: void MoveBackward (int speed)
04F6           1757   ;        -----------------------------------------
04F6           1758   ;         function MoveBackward
04F6           1759   ;        -----------------------------------------
04F6           1760   _MoveBackward:
04F6 AA82      1761            mov     r2,dpl
04F8           1762   ;        main.c:506: pwm_left = speed; 
04F8 8A38      1763            mov     _pwm_left,r2
04FA           1764   ;        main.c:507: pwm_right = speed; 
04FA 8AF8      1765            mov     _pwm_right,r2
04FC           1766   ;        main.c:508: L_motor_dir = 1; 
04FC 75B801    1767            mov     _L_motor_dir,#0x01
04FF           1768   ;        main.c:509: R_motor_dir = 1;  
04FF 757801    1769            mov     _R_motor_dir,#0x01
0502 22        1770            ret
0503           1771   ;------------------------------------------------------------
0503           1772   ;Allocation info for local variables in function 'TurnRight'
0503           1773   ;------------------------------------------------------------
0503           1774   ;speed                     Allocated to registers r2 r3 
0503           1775   ;------------------------------------------------------------
0503           1776   ;        main.c:512: void TurnRight (int speed)
0503           1777   ;        -----------------------------------------
0503           1778   ;         function TurnRight
0503           1779   ;        -----------------------------------------
0503           1780   _TurnRight:
0503 AA82      1781            mov     r2,dpl
0505           1782   ;        main.c:514: pwm_left = speed; 
0505 8A38      1783            mov     _pwm_left,r2
0507           1784   ;        main.c:515: pwm_right = speed; 
0507 8AF8      1785            mov     _pwm_right,r2
0509           1786   ;        main.c:516: L_motor_dir = 1; 
0509 75B801    1787            mov     _L_motor_dir,#0x01
050C           1788   ;        main.c:517: R_motor_dir = 0; 
050C 757800    1789            mov     _R_motor_dir,#0x00
050F 22        1790            ret
0510           1791   ;------------------------------------------------------------
0510           1792   ;Allocation info for local variables in function 'TurnLeft'
0510           1793   ;------------------------------------------------------------
0510           1794   ;speed                     Allocated to registers r2 r3 
0510           1795   ;------------------------------------------------------------
0510           1796   ;        main.c:520: void TurnLeft (int speed)
0510           1797   ;        -----------------------------------------
0510           1798   ;         function TurnLeft
0510           1799   ;        -----------------------------------------
0510           1800   _TurnLeft:
0510 AA82      1801            mov     r2,dpl
0512           1802   ;        main.c:522: pwm_left = speed; 
0512 8A38      1803            mov     _pwm_left,r2
0514           1804   ;        main.c:523: pwm_right = speed; 
0514 8AF8      1805            mov     _pwm_right,r2
0516           1806   ;        main.c:524: L_motor_dir = 0; 
0516 75B800    1807            mov     _L_motor_dir,#0x00
0519           1808   ;        main.c:525: R_motor_dir = 1; 
0519 757801    1809            mov     _R_motor_dir,#0x01
051C 22        1810            ret
051D           1811   ;------------------------------------------------------------
051D           1812   ;Allocation info for local variables in function 'main'
051D           1813   ;------------------------------------------------------------
051D           1814   ;cnt                       Allocated to registers 
051D           1815   ;c                         Allocated to registers r4 
051D           1816   ;vx                        Allocated with name '_main_vx_1_137'
051D           1817   ;vy                        Allocated with name '_main_vy_1_137'
051D           1818   ;threshold                 Allocated to registers 
051D           1819   ;motor_pwm                 Allocated with name '_main_motor_pwm_1_137'
051D           1820   ;sloc0                     Allocated with name '_main_sloc0_1_0'
051D           1821   ;------------------------------------------------------------
051D           1822   ;        main.c:528: void main (void)
051D           1823   ;        -----------------------------------------
051D           1824   ;         function main
051D           1825   ;        -----------------------------------------
051D           1826   _main:
051D           1827   ;        main.c:532: int vx = 0, vy = 0; 
051D E4        1828            clr     a
051E F5C0      1829            mov     _main_vx_1_137,a
0520 F5C1      1830            mov     (_main_vx_1_137 + 1),a
0522 F500      1831            mov     _main_vy_1_137,a
0524 F501      1832            mov     (_main_vy_1_137 + 1),a
0526           1833   ;        main.c:538: waitms(500);
0526 9001F4    1834            mov     dptr,#0x01F4
0529 120000    1835            lcall   _waitms
052C           1836   ;        main.c:539: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
052C 74E8      1837            mov     a,#__str_3
052E C0E0      1838            push    acc
0530 74C9      1839            mov     a,#(__str_3 >> 8)
0532 C0E0      1840            push    acc
0534 7480      1841            mov     a,#0x80
0536 C0E0      1842            push    acc
0538 120000    1843            lcall   _printf
053B 1581      1844            dec     sp
053D 1581      1845            dec     sp
053F 1581      1846            dec     sp
0541           1847   ;        main.c:540: UART1_Init(9600);
0541 902580    1848            mov     dptr,#0x2580
0544 E4        1849            clr     a
0545 F5F0      1850            mov     b,a
0547 120000    1851            lcall   _UART1_Init
054A           1852   ;        main.c:542: ReceptionOff();
054A 120000    1853            lcall   _ReceptionOff
054D           1854   ;        main.c:545: SendATCommand("AT+VER\r\n");
054D 90CA28    1855            mov     dptr,#__str_4
0550 75F080    1856            mov     b,#0x80
0553 120000    1857            lcall   _SendATCommand
0556           1858   ;        main.c:546: SendATCommand("AT+BAUD\r\n");
0556 90CA68    1859            mov     dptr,#__str_5
0559 75F080    1860            mov     b,#0x80
055C 120000    1861            lcall   _SendATCommand
055F           1862   ;        main.c:547: SendATCommand("AT+RFID\r\n");
055F 90CAA8    1863            mov     dptr,#__str_6
0562 75F080    1864            mov     b,#0x80
0565 120000    1865            lcall   _SendATCommand
0568           1866   ;        main.c:548: SendATCommand("AT+DVID\r\n");
0568 90CAE8    1867            mov     dptr,#__str_7
056B 75F080    1868            mov     b,#0x80
056E 120000    1869            lcall   _SendATCommand
0571           1870   ;        main.c:549: SendATCommand("AT+RFC\r\n");
0571 90CB28    1871            mov     dptr,#__str_8
0574 75F080    1872            mov     b,#0x80
0577 120000    1873            lcall   _SendATCommand
057A           1874   ;        main.c:550: SendATCommand("AT+POWE\r\n");
057A 90CB68    1875            mov     dptr,#__str_9
057D 75F080    1876            mov     b,#0x80
0580 120000    1877            lcall   _SendATCommand
0583           1878   ;        main.c:551: SendATCommand("AT+CLSS\r\n");
0583 90CBA8    1879            mov     dptr,#__str_10
0586 75F080    1880            mov     b,#0x80
0589 120000    1881            lcall   _SendATCommand
058C           1882   ;        main.c:552: SendATCommand("AT+DVIDEFEF\r\n");  
058C 90CBE8    1883            mov     dptr,#__str_11
058F 75F080    1884            mov     b,#0x80
0592 120000    1885            lcall   _SendATCommand
0595           1886   ;        main.c:555: L_bridge_1 = 0; 
0595 C2A1      1887            clr     _P2_1
0597           1888   ;        main.c:556: L_bridge_2 = 0; 
0597 C2A2      1889            clr     _P2_2
0599           1890   ;        main.c:557: R_bridge_1 = 0; 
0599 C2A4      1891            clr     _P2_4
059B           1892   ;        main.c:558: R_bridge_2 = 0; 
059B C2A3      1893            clr     _P2_3
059D           1894   ;        main.c:561: while(1)
059D 7A00      1895            mov     r2,#0x00
059F 7B00      1896            mov     r3,#0x00
05A1           1897   L026025?:
05A1           1898   ;        main.c:563: Set_Pin_Output(0x24);
05A1 758224    1899            mov     dpl,#0x24
05A4 C002      1900            push    ar2
05A6 C003      1901            push    ar3
05A8 120000    1902            lcall   _Set_Pin_Output
05AB           1903   ;        main.c:564: Set_Pin_Output(0x23);
05AB 758223    1904            mov     dpl,#0x23
05AE 120000    1905            lcall   _Set_Pin_Output
05B1           1906   ;        main.c:565: Set_Pin_Output(0x22);
05B1 758222    1907            mov     dpl,#0x22
05B4 120000    1908            lcall   _Set_Pin_Output
05B7           1909   ;        main.c:566: Set_Pin_Output(0x21);
05B7 758221    1910            mov     dpl,#0x21
05BA 120000    1911            lcall   _Set_Pin_Output
05BD           1912   ;        main.c:567: Set_Pin_Input(0x17);
05BD 758217    1913            mov     dpl,#0x17
05C0 120000    1914            lcall   _Set_Pin_Input
05C3 D003      1915            pop     ar3
05C5 D002      1916            pop     ar2
05C7           1917   ;        main.c:569: while(Servo_EN == 0){
05C7           1918   L026001?:
05C7 2097A8    1919            jb      _P1_7,L026003?
05CA           1920   ;        main.c:570: waitms(25);
05CA 900019    1921            mov     dptr,#0x0019
05CD C002      1922            push    ar2
05CF C003      1923            push    ar3
05D1 120000    1924            lcall   _waitms
05D4 D003      1925            pop     ar3
05D6 D002      1926            pop     ar2
05D8 A297      1927            mov     c,_P1_7
05DA 8000      1928            sjmp    L026001?
05DC           1929   L026003?:
05DC           1930   ;        main.c:577: if(RXU1()) // Something has arrived
05DC C002      1931            push    ar2
05DE C003      1932            push    ar3
05E0 120000    1933            lcall   _RXU1
05E3 E4        1934            clr     a
05E4 33        1935            rlc     a
05E5 D003      1936            pop     ar3
05E7 D002      1937            pop     ar2
05E9 6000      1938            jz      L026025?
05EB           1939   ;        main.c:579: c=getchar1();
05EB C002      1940            push    ar2
05ED C003      1941            push    ar3
05EF 120000    1942            lcall   _getchar1
05F2 AC82      1943            mov     r4,dpl
05F4 D003      1944            pop     ar3
05F6 D002      1945            pop     ar2
05F8           1946   ;        main.c:581: if(c=='!') // Master is sending message
05F8 BC21E8    1947            cjne    r4,#0x21,L026042?
05FB 8000      1948            sjmp    L026043?
05FD           1949   L026042?:
05FD 020000    1950            ljmp    L026020?
0600           1951   L026043?:
0600           1952   ;        main.c:583: getstr1(buff, sizeof(buff)-1);
0600 75B813    1953            mov     _getstr1_PARM_2,#0x13
0603 904478    1954            mov     dptr,#_buff
0606 75F040    1955            mov     b,#0x40
0609 C002      1956            push    ar2
060B C003      1957            push    ar3
060D 120000    1958            lcall   _getstr1
0610           1959   ;        main.c:584: if(strlen(buff)==7)
0610 904478    1960            mov     dptr,#_buff
0613 75F040    1961            mov     b,#0x40
0616 120000    1962            lcall   _strlen
0619 AD82      1963            mov     r5,dpl
061B AE83      1964            mov     r6,dph
061D D003      1965            pop     ar3
061F D002      1966            pop     ar2
0621 BD07E8    1967            cjne    r5,#0x07,L026044?
0624 BE00E8    1968            cjne    r6,#0x00,L026044?
0627 8000      1969            sjmp    L026045?
0629           1970   L026044?:
0629 020000    1971            ljmp    L026015?
062C           1972   L026045?:
062C           1973   ;        main.c:588: sscanf(buff, "%03d,%03d", &vx, &vy);
062C C002      1974            push    ar2
062E C003      1975            push    ar3
0630 7400      1976            mov     a,#_main_vy_1_137
0632 C0E0      1977            push    acc
0634 74B4      1978            mov     a,#(_main_vy_1_137 >> 8)
0636 C0E0      1979            push    acc
0638 7440      1980            mov     a,#0x40
063A C0E0      1981            push    acc
063C 74C0      1982            mov     a,#_main_vx_1_137
063E C0E0      1983            push    acc
0640 74B3      1984            mov     a,#(_main_vx_1_137 >> 8)
0642 C0E0      1985            push    acc
0644 7440      1986            mov     a,#0x40
0646 C0E0      1987            push    acc
0648 74A8      1988            mov     a,#__str_12
064A C0E0      1989            push    acc
064C 74CE      1990            mov     a,#(__str_12 >> 8)
064E C0E0      1991            push    acc
0650 7480      1992            mov     a,#0x80
0652 C0E0      1993            push    acc
0654 7478      1994            mov     a,#_buff
0656 C0E0      1995            push    acc
0658 7444      1996            mov     a,#(_buff >> 8)
065A C0E0      1997            push    acc
065C 7440      1998            mov     a,#0x40
065E C0E0      1999            push    acc
0660 120000    2000            lcall   _sscanf
0663 E581      2001            mov     a,sp
0665 24F4      2002            add     a,#0xf4
0667 F581      2003            mov     sp,a
0669           2004   ;        main.c:590: printf("Joystick Received: Vx = %03d, Vy = %03d\r\n", vx, vy);
0669 C000      2005            push    _main_vy_1_137
066B C001      2006            push    (_main_vy_1_137 + 1)
066D C0C0      2007            push    _main_vx_1_137
066F C0C1      2008            push    (_main_vx_1_137 + 1)
0671 7428      2009            mov     a,#__str_13
0673 C0E0      2010            push    acc
0675 74CF      2011            mov     a,#(__str_13 >> 8)
0677 C0E0      2012            push    acc
0679 7480      2013            mov     a,#0x80
067B C0E0      2014            push    acc
067D 120000    2015            lcall   _printf
0680 E581      2016            mov     a,sp
0682 24F9      2017            add     a,#0xf9
0684 F581      2018            mov     sp,a
0686           2019   ;        main.c:592: if (vy > threshold){
0686 850082    2020            mov     dpl,_main_vy_1_137
0689 850183    2021            mov     dph,(_main_vy_1_137 + 1)
068C 120000    2022            lcall   ___sint2fs
068F 858290    2023            mov     _main_sloc0_1_0,dpl
0692 858391    2024            mov     (_main_sloc0_1_0 + 1),dph
0695 85F092    2025            mov     (_main_sloc0_1_0 + 2),b
0698 F593      2026            mov     (_main_sloc0_1_0 + 3),a
069A E4        2027            clr     a
069B C0E0      2028            push    acc
069D C0E0      2029            push    acc
069F 7421      2030            mov     a,#0x21
06A1 C0E0      2031            push    acc
06A3 7443      2032            mov     a,#0x43
06A5 C0E0      2033            push    acc
06A7 859082    2034            mov     dpl,_main_sloc0_1_0
06AA 859183    2035            mov     dph,(_main_sloc0_1_0 + 1)
06AD 8592F0    2036            mov     b,(_main_sloc0_1_0 + 2)
06B0 E593      2037            mov     a,(_main_sloc0_1_0 + 3)
06B2 120000    2038            lcall   ___fsgt
06B5 AD82      2039            mov     r5,dpl
06B7 E581      2040            mov     a,sp
06B9 24FC      2041            add     a,#0xfc
06BB F581      2042            mov     sp,a
06BD D003      2043            pop     ar3
06BF D002      2044            pop     ar2
06C1 ED        2045            mov     a,r5
06C2 7000      2046            jnz     L026046?
06C4 020000    2047            ljmp    L026007?
06C7           2048   L026046?:
06C7           2049   ;        main.c:593: motor_pwm = abs(vy - threshold) * 100 / threshold; 
06C7 C002      2050            push    ar2
06C9 C003      2051            push    ar3
06CB C003      2052            push    ar3
06CD E4        2053            clr     a
06CE C0E0      2054            push    acc
06D0 C0E0      2055            push    acc
06D2 7421      2056            mov     a,#0x21
06D4 C0E0      2057            push    acc
06D6 7443      2058            mov     a,#0x43
06D8 C0E0      2059            push    acc
06DA 859082    2060            mov     dpl,_main_sloc0_1_0
06DD 859183    2061            mov     dph,(_main_sloc0_1_0 + 1)
06E0 8592F0    2062            mov     b,(_main_sloc0_1_0 + 2)
06E3 E593      2063            mov     a,(_main_sloc0_1_0 + 3)
06E5 120000    2064            lcall   ___fssub
06E8 AD82      2065            mov     r5,dpl
06EA AE83      2066            mov     r6,dph
06EC AFF0      2067            mov     r7,b
06EE FA        2068            mov     r2,a
06EF E581      2069            mov     a,sp
06F1 24FC      2070            add     a,#0xfc
06F3 F581      2071            mov     sp,a
06F5 D003      2072            pop     ar3
06F7 8D82      2073            mov     dpl,r5
06F9 8E83      2074            mov     dph,r6
06FB 8FF0      2075            mov     b,r7
06FD EA        2076            mov     a,r2
06FE C002      2077            push    ar2
0700 C003      2078            push    ar3
0702 120000    2079            lcall   ___fs2sint
0705 120000    2080            lcall   _abs
0708 858200    2081            mov     __mulint_PARM_2,dpl
070B 858301    2082            mov     (__mulint_PARM_2 + 1),dph
070E D003      2083            pop     ar3
0710 D002      2084            pop     ar2
0712 900064    2085            mov     dptr,#0x0064
0715 120000    2086            lcall   __mulint
0718 120000    2087            lcall   ___sint2fs
071B AA82      2088            mov     r2,dpl
071D AB83      2089            mov     r3,dph
071F ADF0      2090            mov     r5,b
0721 FE        2091            mov     r6,a
0722 E4        2092            clr     a
0723 C0E0      2093            push    acc
0725 C0E0      2094            push    acc
0727 7421      2095            mov     a,#0x21
0729 C0E0      2096            push    acc
072B 7443      2097            mov     a,#0x43
072D C0E0      2098            push    acc
072F 8A82      2099            mov     dpl,r2
0731 8B83      2100            mov     dph,r3
0733 8DF0      2101            mov     b,r5
0735 EE        2102            mov     a,r6
0736 120000    2103            lcall   ___fsdiv
0739 AA82      2104            mov     r2,dpl
073B AB83      2105            mov     r3,dph
073D ADF0      2106            mov     r5,b
073F FE        2107            mov     r6,a
0740 E581      2108            mov     a,sp
0742 24FC      2109            add     a,#0xfc
0744 F581      2110            mov     sp,a
0746 8A82      2111            mov     dpl,r2
0748 8B83      2112            mov     dph,r3
074A 8DF0      2113            mov     b,r5
074C EE        2114            mov     a,r6
074D C002      2115            push    ar2
074F C003      2116            push    ar3
0751 120000    2117            lcall   ___fs2sint
0754           2118   ;        main.c:594: MoveForward(motor_pwm);
0754 858250    2119            mov     _main_motor_pwm_1_137,dpl
0757 858351    2120            mov  (_main_motor_pwm_1_137 + 1),dph
075A 120000    2121            lcall   _MoveForward
075D D003      2122            pop     ar3
075F D002      2123            pop     ar2
0761 D003      2124            pop     ar3
0763 D002      2125            pop     ar2
0765 020000    2126            ljmp    L026008?
0768           2127   L026007?:
0768           2128   ;        main.c:596: else if (vy < threshold){
0768 C002      2129            push    ar2
076A C003      2130            push    ar3
076C E4        2131            clr     a
076D C0E0      2132            push    acc
076F C0E0      2133            push    acc
0771 7421      2134            mov     a,#0x21
0773 C0E0      2135            push    acc
0775 7443      2136            mov     a,#0x43
0777 C0E0      2137            push    acc
0779 859082    2138            mov     dpl,_main_sloc0_1_0
077C 859183    2139            mov     dph,(_main_sloc0_1_0 + 1)
077F 8592F0    2140            mov     b,(_main_sloc0_1_0 + 2)
0782 E593      2141            mov     a,(_main_sloc0_1_0 + 3)
0784 120000    2142            lcall   ___fslt
0787 AD82      2143            mov     r5,dpl
0789 E581      2144            mov     a,sp
078B 24FC      2145            add     a,#0xfc
078D F581      2146            mov     sp,a
078F D003      2147            pop     ar3
0791 D002      2148            pop     ar2
0793 ED        2149            mov     a,r5
0794 7000      2150            jnz     L026047?
0796 020000    2151            ljmp    L026008?
0799           2152   L026047?:
0799           2153   ;        main.c:597: motor_pwm = abs(threshold - vy) * 100 / threshold; 
0799 C002      2154            push    ar2
079B C003      2155            push    ar3
079D C003      2156            push    ar3
079F C090      2157            push    _main_sloc0_1_0
07A1 C091      2158            push    (_main_sloc0_1_0 + 1)
07A3 C092      2159            push    (_main_sloc0_1_0 + 2)
07A5 C093      2160            push    (_main_sloc0_1_0 + 3)
07A7 900000    2161            mov     dptr,#0x0000
07AA 75F021    2162            mov     b,#0x21
07AD 7443      2163            mov     a,#0x43
07AF 120000    2164            lcall   ___fssub
07B2 AD82      2165            mov     r5,dpl
07B4 AE83      2166            mov     r6,dph
07B6 AFF0      2167            mov     r7,b
07B8 FA        2168            mov     r2,a
07B9 E581      2169            mov     a,sp
07BB 24FC      2170            add     a,#0xfc
07BD F581      2171            mov     sp,a
07BF D003      2172            pop     ar3
07C1 8D82      2173            mov     dpl,r5
07C3 8E83      2174            mov     dph,r6
07C5 8FF0      2175            mov     b,r7
07C7 EA        2176            mov     a,r2
07C8 C002      2177            push    ar2
07CA C003      2178            push    ar3
07CC 120000    2179            lcall   ___fs2sint
07CF 120000    2180            lcall   _abs
07D2 858200    2181            mov     __mulint_PARM_2,dpl
07D5 858301    2182            mov     (__mulint_PARM_2 + 1),dph
07D8 D003      2183            pop     ar3
07DA D002      2184            pop     ar2
07DC 900064    2185            mov     dptr,#0x0064
07DF 120000    2186            lcall   __mulint
07E2 120000    2187            lcall   ___sint2fs
07E5 AA82      2188            mov     r2,dpl
07E7 AB83      2189            mov     r3,dph
07E9 ADF0      2190            mov     r5,b
07EB FE        2191            mov     r6,a
07EC E4        2192            clr     a
07ED C0E0      2193            push    acc
07EF C0E0      2194            push    acc
07F1 7421      2195            mov     a,#0x21
07F3 C0E0      2196            push    acc
07F5 7443      2197            mov     a,#0x43
07F7 C0E0      2198            push    acc
07F9 8A82      2199            mov     dpl,r2
07FB 8B83      2200            mov     dph,r3
07FD 8DF0      2201            mov     b,r5
07FF EE        2202            mov     a,r6
0800 120000    2203            lcall   ___fsdiv
0803 AA82      2204            mov     r2,dpl
0805 AB83      2205            mov     r3,dph
0807 ADF0      2206            mov     r5,b
0809 FE        2207            mov     r6,a
080A E581      2208            mov     a,sp
080C 24FC      2209            add     a,#0xfc
080E F581      2210            mov     sp,a
0810 8A82      2211            mov     dpl,r2
0812 8B83      2212            mov     dph,r3
0814 8DF0      2213            mov     b,r5
0816 EE        2214            mov     a,r6
0817 C002      2215            push    ar2
0819 C003      2216            push    ar3
081B 120000    2217            lcall   ___fs2sint
081E           2218   ;        main.c:598: MoveBackward(motor_pwm);
081E 858250    2219            mov     _main_motor_pwm_1_137,dpl
0821 858351    2220            mov  (_main_motor_pwm_1_137 + 1),dph
0824 120000    2221            lcall   _MoveBackward
0827 D003      2222            pop     ar3
0829 D002      2223            pop     ar2
082B           2224   ;        main.c:622: sendstr1(buff);
082B D003      2225            pop     ar3
082D D002      2226            pop     ar2
082F           2227   ;        main.c:598: MoveBackward(motor_pwm);
082F           2228   L026008?:
082F           2229   ;        main.c:600: if(vx > threshold){
082F 85C082    2230            mov     dpl,_main_vx_1_137
0832 85C183    2231            mov     dph,(_main_vx_1_137 + 1)
0835 C002      2232            push    ar2
0837 C003      2233            push    ar3
0839 120000    2234            lcall   ___sint2fs
083C 858290    2235            mov     _main_sloc0_1_0,dpl
083F 858391    2236            mov     (_main_sloc0_1_0 + 1),dph
0842 85F092    2237            mov     (_main_sloc0_1_0 + 2),b
0845 F593      2238            mov     (_main_sloc0_1_0 + 3),a
0847 E4        2239            clr     a
0848 C0E0      2240            push    acc
084A C0E0      2241            push    acc
084C 7421      2242            mov     a,#0x21
084E C0E0      2243            push    acc
0850 7443      2244            mov     a,#0x43
0852 C0E0      2245            push    acc
0854 859082    2246            mov     dpl,_main_sloc0_1_0
0857 859183    2247            mov     dph,(_main_sloc0_1_0 + 1)
085A 8592F0    2248            mov     b,(_main_sloc0_1_0 + 2)
085D E593      2249            mov     a,(_main_sloc0_1_0 + 3)
085F 120000    2250            lcall   ___fsgt
0862 AD82      2251            mov     r5,dpl
0864 E581      2252            mov     a,sp
0866 24FC      2253            add     a,#0xfc
0868 F581      2254            mov     sp,a
086A D003      2255            pop     ar3
086C D002      2256            pop     ar2
086E ED        2257            mov     a,r5
086F 7000      2258            jnz     L026048?
0871 020000    2259            ljmp    L026012?
0874           2260   L026048?:
0874           2261   ;        main.c:601: motor_pwm = abs(vx - threshold) * 100 / threshold; 
0874 C002      2262            push    ar2
0876 C003      2263            push    ar3
0878 C003      2264            push    ar3
087A E4        2265            clr     a
087B C0E0      2266            push    acc
087D C0E0      2267            push    acc
087F 7421      2268            mov     a,#0x21
0881 C0E0      2269            push    acc
0883 7443      2270            mov     a,#0x43
0885 C0E0      2271            push    acc
0887 859082    2272            mov     dpl,_main_sloc0_1_0
088A 859183    2273            mov     dph,(_main_sloc0_1_0 + 1)
088D 8592F0    2274            mov     b,(_main_sloc0_1_0 + 2)
0890 E593      2275            mov     a,(_main_sloc0_1_0 + 3)
0892 120000    2276            lcall   ___fssub
0895 AD82      2277            mov     r5,dpl
0897 AE83      2278            mov     r6,dph
0899 AFF0      2279            mov     r7,b
089B FA        2280            mov     r2,a
089C E581      2281            mov     a,sp
089E 24FC      2282            add     a,#0xfc
08A0 F581      2283            mov     sp,a
08A2 D003      2284            pop     ar3
08A4 8D82      2285            mov     dpl,r5
08A6 8E83      2286            mov     dph,r6
08A8 8FF0      2287            mov     b,r7
08AA EA        2288            mov     a,r2
08AB C002      2289            push    ar2
08AD C003      2290            push    ar3
08AF 120000    2291            lcall   ___fs2sint
08B2 120000    2292            lcall   _abs
08B5 858200    2293            mov     __mulint_PARM_2,dpl
08B8 858301    2294            mov     (__mulint_PARM_2 + 1),dph
08BB D003      2295            pop     ar3
08BD D002      2296            pop     ar2
08BF 900064    2297            mov     dptr,#0x0064
08C2 120000    2298            lcall   __mulint
08C5 120000    2299            lcall   ___sint2fs
08C8 AA82      2300            mov     r2,dpl
08CA AB83      2301            mov     r3,dph
08CC ADF0      2302            mov     r5,b
08CE FE        2303            mov     r6,a
08CF E4        2304            clr     a
08D0 C0E0      2305            push    acc
08D2 C0E0      2306            push    acc
08D4 7421      2307            mov     a,#0x21
08D6 C0E0      2308            push    acc
08D8 7443      2309            mov     a,#0x43
08DA C0E0      2310            push    acc
08DC 8A82      2311            mov     dpl,r2
08DE 8B83      2312            mov     dph,r3
08E0 8DF0      2313            mov     b,r5
08E2 EE        2314            mov     a,r6
08E3 120000    2315            lcall   ___fsdiv
08E6 AA82      2316            mov     r2,dpl
08E8 AB83      2317            mov     r3,dph
08EA ADF0      2318            mov     r5,b
08EC FE        2319            mov     r6,a
08ED E581      2320            mov     a,sp
08EF 24FC      2321            add     a,#0xfc
08F1 F581      2322            mov     sp,a
08F3 8A82      2323            mov     dpl,r2
08F5 8B83      2324            mov     dph,r3
08F7 8DF0      2325            mov     b,r5
08F9 EE        2326            mov     a,r6
08FA C002      2327            push    ar2
08FC C003      2328            push    ar3
08FE 120000    2329            lcall   ___fs2sint
0901           2330   ;        main.c:602: TurnRight(motor_pwm);
0901 858250    2331            mov     _main_motor_pwm_1_137,dpl
0904 858351    2332            mov  (_main_motor_pwm_1_137 + 1),dph
0907 120000    2333            lcall   _TurnRight
090A D003      2334            pop     ar3
090C D002      2335            pop     ar2
090E D003      2336            pop     ar3
0910 D002      2337            pop     ar2
0912 020000    2338            ljmp    L026025?
0915           2339   L026012?:
0915           2340   ;        main.c:604: else if (vx < threshold){
0915 C002      2341            push    ar2
0917 C003      2342            push    ar3
0919 E4        2343            clr     a
091A C0E0      2344            push    acc
091C C0E0      2345            push    acc
091E 7421      2346            mov     a,#0x21
0920 C0E0      2347            push    acc
0922 7443      2348            mov     a,#0x43
0924 C0E0      2349            push    acc
0926 859082    2350            mov     dpl,_main_sloc0_1_0
0929 859183    2351            mov     dph,(_main_sloc0_1_0 + 1)
092C 8592F0    2352            mov     b,(_main_sloc0_1_0 + 2)
092F E593      2353            mov     a,(_main_sloc0_1_0 + 3)
0931 120000    2354            lcall   ___fslt
0934 AD82      2355            mov     r5,dpl
0936 E581      2356            mov     a,sp
0938 24FC      2357            add     a,#0xfc
093A F581      2358            mov     sp,a
093C D003      2359            pop     ar3
093E D002      2360            pop     ar2
0940 ED        2361            mov     a,r5
0941 7000      2362            jnz     L026049?
0943 020000    2363            ljmp    L026025?
0946           2364   L026049?:
0946           2365   ;        main.c:605: motor_pwm = abs(threshold - vx) * 100 / threshold; 
0946 C002      2366            push    ar2
0948 C003      2367            push    ar3
094A C003      2368            push    ar3
094C C090      2369            push    _main_sloc0_1_0
094E C091      2370            push    (_main_sloc0_1_0 + 1)
0950 C092      2371            push    (_main_sloc0_1_0 + 2)
0952 C093      2372            push    (_main_sloc0_1_0 + 3)
0954 900000    2373            mov     dptr,#0x0000
0957 75F021    2374            mov     b,#0x21
095A 7443      2375            mov     a,#0x43
095C 120000    2376            lcall   ___fssub
095F AD82      2377            mov     r5,dpl
0961 AE83      2378            mov     r6,dph
0963 AFF0      2379            mov     r7,b
0965 FA        2380            mov     r2,a
0966 E581      2381            mov     a,sp
0968 24FC      2382            add     a,#0xfc
096A F581      2383            mov     sp,a
096C D003      2384            pop     ar3
096E 8D82      2385            mov     dpl,r5
0970 8E83      2386            mov     dph,r6
0972 8FF0      2387            mov     b,r7
0974 EA        2388            mov     a,r2
0975 C002      2389            push    ar2
0977 C003      2390            push    ar3
0979 120000    2391            lcall   ___fs2sint
097C 120000    2392            lcall   _abs
097F 858200    2393            mov     __mulint_PARM_2,dpl
0982 858301    2394            mov     (__mulint_PARM_2 + 1),dph
0985 D003      2395            pop     ar3
0987 D002      2396            pop     ar2
0989 900064    2397            mov     dptr,#0x0064
098C 120000    2398            lcall   __mulint
098F 120000    2399            lcall   ___sint2fs
0992 AA82      2400            mov     r2,dpl
0994 AB83      2401            mov     r3,dph
0996 ADF0      2402            mov     r5,b
0998 FE        2403            mov     r6,a
0999 E4        2404            clr     a
099A C0E0      2405            push    acc
099C C0E0      2406            push    acc
099E 7421      2407            mov     a,#0x21
09A0 C0E0      2408            push    acc
09A2 7443      2409            mov     a,#0x43
09A4 C0E0      2410            push    acc
09A6 8A82      2411            mov     dpl,r2
09A8 8B83      2412            mov     dph,r3
09AA 8DF0      2413            mov     b,r5
09AC EE        2414            mov     a,r6
09AD 120000    2415            lcall   ___fsdiv
09B0 AA82      2416            mov     r2,dpl
09B2 AB83      2417            mov     r3,dph
09B4 ADF0      2418            mov     r5,b
09B6 FE        2419            mov     r6,a
09B7 E581      2420            mov     a,sp
09B9 24FC      2421            add     a,#0xfc
09BB F581      2422            mov     sp,a
09BD 8A82      2423            mov     dpl,r2
09BF 8B83      2424            mov     dph,r3
09C1 8DF0      2425            mov     b,r5
09C3 EE        2426            mov     a,r6
09C4 C002      2427            push    ar2
09C6 C003      2428            push    ar3
09C8 120000    2429            lcall   ___fs2sint
09CB           2430   ;        main.c:606: TurnLeft(motor_pwm);
09CB 858250    2431            mov     _main_motor_pwm_1_137,dpl
09CE 858351    2432            mov  (_main_motor_pwm_1_137 + 1),dph
09D1 120000    2433            lcall   _TurnLeft
09D4 D003      2434            pop     ar3
09D6 D002      2435            pop     ar2
09D8 D003      2436            pop     ar3
09DA D002      2437            pop     ar2
09DC 020000    2438            ljmp    L026025?
09DF           2439   L026015?:
09DF           2440   ;        main.c:611: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
09DF 904478    2441            mov     dptr,#_buff
09E2 75F040    2442            mov     b,#0x40
09E5 C002      2443            push    ar2
09E7 C003      2444            push    ar3
09E9 120000    2445            lcall   _strlen
09EC AD82      2446            mov     r5,dpl
09EE AE83      2447            mov     r6,dph
09F0 C005      2448            push    ar5
09F2 C006      2449            push    ar6
09F4 7478      2450            mov     a,#_buff
09F6 C0E0      2451            push    acc
09F8 7444      2452            mov     a,#(_buff >> 8)
09FA C0E0      2453            push    acc
09FC 7440      2454            mov     a,#0x40
09FE C0E0      2455            push    acc
0A00 7468      2456            mov     a,#__str_14
0A02 C0E0      2457            push    acc
0A04 74D3      2458            mov     a,#(__str_14 >> 8)
0A06 C0E0      2459            push    acc
0A08 7480      2460            mov     a,#0x80
0A0A C0E0      2461            push    acc
0A0C 120000    2462            lcall   _printf
0A0F E581      2463            mov     a,sp
0A11 24F8      2464            add     a,#0xf8
0A13 F581      2465            mov     sp,a
0A15 D003      2466            pop     ar3
0A17 D002      2467            pop     ar2
0A19 020000    2468            ljmp    L026025?
0A1C           2469   L026020?:
0A1C           2470   ;        main.c:617: else if(c=='@') // Master wants slave data
0A1C BC40A8    2471            cjne    r4,#0x40,L026050?
0A1F 8000      2472            sjmp    L026051?
0A21           2473   L026050?:
0A21 020000    2474            ljmp    L026025?
0A24           2475   L026051?:
0A24           2476   ;        main.c:619: sprintf(buff, "%05u\n", cnt);
0A24 C002      2477            push    ar2
0A26 C003      2478            push    ar3
0A28 C002      2479            push    ar2
0A2A C003      2480            push    ar3
0A2C 7428      2481            mov     a,#__str_15
0A2E C0E0      2482            push    acc
0A30 74D4      2483            mov     a,#(__str_15 >> 8)
0A32 C0E0      2484            push    acc
0A34 7480      2485            mov     a,#0x80
0A36 C0E0      2486            push    acc
0A38 7478      2487            mov     a,#_buff
0A3A C0E0      2488            push    acc
0A3C 7444      2489            mov     a,#(_buff >> 8)
0A3E C0E0      2490            push    acc
0A40 7440      2491            mov     a,#0x40
0A42 C0E0      2492            push    acc
0A44 120000    2493            lcall   _sprintf
0A47 E581      2494            mov     a,sp
0A49 24F8      2495            add     a,#0xf8
0A4B F581      2496            mov     sp,a
0A4D D003      2497            pop     ar3
0A4F D002      2498            pop     ar2
0A51           2499   ;        main.c:620: cnt++;
0A51 0A        2500            inc     r2
0A52 BA00A8    2501            cjne    r2,#0x00,L026052?
0A55 0B        2502            inc     r3
0A56           2503   L026052?:
0A56           2504   ;        main.c:621: waitms(5); // The radio seems to need this delay...
0A56 900005    2505            mov     dptr,#0x0005
0A59 C002      2506            push    ar2
0A5B C003      2507            push    ar3
0A5D 120000    2508            lcall   _waitms
0A60           2509   ;        main.c:622: sendstr1(buff);
0A60 904478    2510            mov     dptr,#_buff
0A63 75F040    2511            mov     b,#0x40
0A66 120000    2512            lcall   _sendstr1
0A69 D003      2513            pop     ar3
0A6B D002      2514            pop     ar2
0A6D 020000    2515            ljmp    L026025?
0A70           2516            rseg R_CSEG
0A70           2517   
0000           2518            rseg R_XINIT
0000           2519   
0000           2520            rseg R_CONST
0000           2521   __str_0:
0000 436F6D6D  2522            db 'Command: %s'
     616E643A
     202573
000B 00        2523            db 0x00
000C           2524   __str_1:
000C 52657370  2525            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2526            db 0x0D
0019 0A        2527            db 0x0A
001A 00        2528            db 0x00
001B           2529   __str_2:
001B 41542B44  2530            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2531            db 0x0D
0027 0A        2532            db 0x0A
0028 00        2533            db 0x00
0029           2534   __str_3:
0029 0D        2535            db 0x0D
002A 0A        2536            db 0x0A
002B 45464D38  2537            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2538            db 0x0D
0047 0A        2539            db 0x0A
0048 00        2540            db 0x00
0049           2541   __str_4:
0049 41542B56  2542            db 'AT+VER'
     4552
004F 0D        2543            db 0x0D
0050 0A        2544            db 0x0A
0051 00        2545            db 0x00
0052           2546   __str_5:
0052 41542B42  2547            db 'AT+BAUD'
     415544
0059 0D        2548            db 0x0D
005A 0A        2549            db 0x0A
005B 00        2550            db 0x00
005C           2551   __str_6:
005C 41542B52  2552            db 'AT+RFID'
     464944
0063 0D        2553            db 0x0D
0064 0A        2554            db 0x0A
0065 00        2555            db 0x00
0066           2556   __str_7:
0066 41542B44  2557            db 'AT+DVID'
     564944
006D 0D        2558            db 0x0D
006E 0A        2559            db 0x0A
006F 00        2560            db 0x00
0070           2561   __str_8:
0070 41542B52  2562            db 'AT+RFC'
     4643
0076 0D        2563            db 0x0D
0077 0A        2564            db 0x0A
0078 00        2565            db 0x00
0079           2566   __str_9:
0079 41542B50  2567            db 'AT+POWE'
     4F5745
0080 0D        2568            db 0x0D
0081 0A        2569            db 0x0A
0082 00        2570            db 0x00
0083           2571   __str_10:
0083 41542B43  2572            db 'AT+CLSS'
     4C5353
008A 0D        2573            db 0x0D
008B 0A        2574            db 0x0A
008C 00        2575            db 0x00
008D           2576   __str_11:
008D 41542B44  2577            db 'AT+DVIDEFEF'
     56494445
     464546
0098 0D        2578            db 0x0D
0099 0A        2579            db 0x0A
009A 00        2580            db 0x00
009B           2581   __str_12:
009B 25303364  2582            db '%03d,%03d'
     2C253033
     64
00A4 00        2583            db 0x00
00A5           2584   __str_13:
00A5 4A6F7973  2585            db 'Joystick Received: Vx = %03d, Vy = %03d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     303364
00CC 0D        2586            db 0x0D
00CD 0A        2587            db 0x0A
00CE 00        2588            db 0x00
00CF           2589   __str_14:
00CF 2A2A2A20  2590            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
00EA 0D        2591            db 0x0D
00EB 0A        2592            db 0x0A
00EC 00        2593            db 0x00
00ED           2594   __str_15:
00ED 25303575  2595            db '%05u'
00F1 0A        2596            db 0x0A
00F2 00        2597            db 0x00
00F3           2598   
0096           2599            CSEG
0096           2600   
0096           2601   end
