0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 20 13:08:00 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _TurnLeft
0000             29            public _TurnRight
0000             30            public _MoveBackward
0000             31            public _MoveForward
0000             32            public _Timer5_ISR
0000             33            public _ADC_at_Pin
0000             34            public _InitPinADC
0000             35            public _InitADC
0000             36            public _Set_Pin_Input
0000             37            public _Set_Pin_Output
0000             38            public _ReceptionOff
0000             39            public _SendATCommand
0000             40            public _waitms_or_RI1
0000             41            public _RXU1
0000             42            public _getstr1
0000             43            public _getchar1_with_timeout
0000             44            public _getchar1
0000             45            public _sendstr1
0000             46            public _putchar1
0000             47            public _UART1_Init
0000             48            public _waitms
0000             49            public _Timer3us
0000             50            public __c51_external_startup
0000             51            public _buff
0000             52            public _getstr1_PARM_2
0000             53            public _servo_arm
0000             54            public _servo_base
0000             55            public _R_motor_dir
0000             56            public _L_motor_dir
0000             57            public _pwm_right
0000             58            public _pwm_left
0000             59            public _servo_counter
0000             60            public _pwm_counter
0000             61   ;--------------------------------------------------------
0000             62   ; Special Function Registers
0000             63   ;--------------------------------------------------------
0000             64   _ACC            DATA 0xe0
0000             65   _ADC0ASAH       DATA 0xb6
0000             66   _ADC0ASAL       DATA 0xb5
0000             67   _ADC0ASCF       DATA 0xa1
0000             68   _ADC0ASCT       DATA 0xc7
0000             69   _ADC0CF0        DATA 0xbc
0000             70   _ADC0CF1        DATA 0xb9
0000             71   _ADC0CF2        DATA 0xdf
0000             72   _ADC0CN0        DATA 0xe8
0000             73   _ADC0CN1        DATA 0xb2
0000             74   _ADC0CN2        DATA 0xb3
0000             75   _ADC0GTH        DATA 0xc4
0000             76   _ADC0GTL        DATA 0xc3
0000             77   _ADC0H          DATA 0xbe
0000             78   _ADC0L          DATA 0xbd
0000             79   _ADC0LTH        DATA 0xc6
0000             80   _ADC0LTL        DATA 0xc5
0000             81   _ADC0MX         DATA 0xbb
0000             82   _B              DATA 0xf0
0000             83   _CKCON0         DATA 0x8e
0000             84   _CKCON1         DATA 0xa6
0000             85   _CLEN0          DATA 0xc6
0000             86   _CLIE0          DATA 0xc7
0000             87   _CLIF0          DATA 0xe8
0000             88   _CLKSEL         DATA 0xa9
0000             89   _CLOUT0         DATA 0xd1
0000             90   _CLU0CF         DATA 0xb1
0000             91   _CLU0FN         DATA 0xaf
0000             92   _CLU0MX         DATA 0x84
0000             93   _CLU1CF         DATA 0xb3
0000             94   _CLU1FN         DATA 0xb2
0000             95   _CLU1MX         DATA 0x85
0000             96   _CLU2CF         DATA 0xb6
0000             97   _CLU2FN         DATA 0xb5
0000             98   _CLU2MX         DATA 0x91
0000             99   _CLU3CF         DATA 0xbf
0000            100   _CLU3FN         DATA 0xbe
0000            101   _CLU3MX         DATA 0xae
0000            102   _CMP0CN0        DATA 0x9b
0000            103   _CMP0CN1        DATA 0x99
0000            104   _CMP0MD         DATA 0x9d
0000            105   _CMP0MX         DATA 0x9f
0000            106   _CMP1CN0        DATA 0xbf
0000            107   _CMP1CN1        DATA 0xac
0000            108   _CMP1MD         DATA 0xab
0000            109   _CMP1MX         DATA 0xaa
0000            110   _CRC0CN0        DATA 0xce
0000            111   _CRC0CN1        DATA 0x86
0000            112   _CRC0CNT        DATA 0xd3
0000            113   _CRC0DAT        DATA 0xcb
0000            114   _CRC0FLIP       DATA 0xcf
0000            115   _CRC0IN         DATA 0xca
0000            116   _CRC0ST         DATA 0xd2
0000            117   _DAC0CF0        DATA 0x91
0000            118   _DAC0CF1        DATA 0x92
0000            119   _DAC0H          DATA 0x85
0000            120   _DAC0L          DATA 0x84
0000            121   _DAC1CF0        DATA 0x93
0000            122   _DAC1CF1        DATA 0x94
0000            123   _DAC1H          DATA 0x8a
0000            124   _DAC1L          DATA 0x89
0000            125   _DAC2CF0        DATA 0x95
0000            126   _DAC2CF1        DATA 0x96
0000            127   _DAC2H          DATA 0x8c
0000            128   _DAC2L          DATA 0x8b
0000            129   _DAC3CF0        DATA 0x9a
0000            130   _DAC3CF1        DATA 0x9c
0000            131   _DAC3H          DATA 0x8e
0000            132   _DAC3L          DATA 0x8d
0000            133   _DACGCF0        DATA 0x88
0000            134   _DACGCF1        DATA 0x98
0000            135   _DACGCF2        DATA 0xa2
0000            136   _DERIVID        DATA 0xad
0000            137   _DEVICEID       DATA 0xb5
0000            138   _DPH            DATA 0x83
0000            139   _DPL            DATA 0x82
0000            140   _EIE1           DATA 0xe6
0000            141   _EIE2           DATA 0xf3
0000            142   _EIP1           DATA 0xbb
0000            143   _EIP1H          DATA 0xee
0000            144   _EIP2           DATA 0xed
0000            145   _EIP2H          DATA 0xf6
0000            146   _EMI0CN         DATA 0xe7
0000            147   _FLKEY          DATA 0xb7
0000            148   _HFO0CAL        DATA 0xc7
0000            149   _HFO1CAL        DATA 0xd6
0000            150   _HFOCN          DATA 0xef
0000            151   _I2C0ADM        DATA 0xff
0000            152   _I2C0CN0        DATA 0xba
0000            153   _I2C0DIN        DATA 0xbc
0000            154   _I2C0DOUT       DATA 0xbb
0000            155   _I2C0FCN0       DATA 0xad
0000            156   _I2C0FCN1       DATA 0xab
0000            157   _I2C0FCT        DATA 0xf5
0000            158   _I2C0SLAD       DATA 0xbd
0000            159   _I2C0STAT       DATA 0xb9
0000            160   _IE             DATA 0xa8
0000            161   _IP             DATA 0xb8
0000            162   _IPH            DATA 0xf2
0000            163   _IT01CF         DATA 0xe4
0000            164   _LFO0CN         DATA 0xb1
0000            165   _P0             DATA 0x80
0000            166   _P0MASK         DATA 0xfe
0000            167   _P0MAT          DATA 0xfd
0000            168   _P0MDIN         DATA 0xf1
0000            169   _P0MDOUT        DATA 0xa4
0000            170   _P0SKIP         DATA 0xd4
0000            171   _P1             DATA 0x90
0000            172   _P1MASK         DATA 0xee
0000            173   _P1MAT          DATA 0xed
0000            174   _P1MDIN         DATA 0xf2
0000            175   _P1MDOUT        DATA 0xa5
0000            176   _P1SKIP         DATA 0xd5
0000            177   _P2             DATA 0xa0
0000            178   _P2MASK         DATA 0xfc
0000            179   _P2MAT          DATA 0xfb
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P2MDOUT        DATA 0xa6
0000            182   _P2SKIP         DATA 0xcc
0000            183   _P3             DATA 0xb0
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P3MDOUT        DATA 0x9c
0000            186   _PCA0CENT       DATA 0x9e
0000            187   _PCA0CLR        DATA 0x9c
0000            188   _PCA0CN0        DATA 0xd8
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPH1       DATA 0xea
0000            191   _PCA0CPH2       DATA 0xec
0000            192   _PCA0CPH3       DATA 0xf5
0000            193   _PCA0CPH4       DATA 0x85
0000            194   _PCA0CPH5       DATA 0xde
0000            195   _PCA0CPL0       DATA 0xfb
0000            196   _PCA0CPL1       DATA 0xe9
0000            197   _PCA0CPL2       DATA 0xeb
0000            198   _PCA0CPL3       DATA 0xf4
0000            199   _PCA0CPL4       DATA 0x84
0000            200   _PCA0CPL5       DATA 0xdd
0000            201   _PCA0CPM0       DATA 0xda
0000            202   _PCA0CPM1       DATA 0xdb
0000            203   _PCA0CPM2       DATA 0xdc
0000            204   _PCA0CPM3       DATA 0xae
0000            205   _PCA0CPM4       DATA 0xaf
0000            206   _PCA0CPM5       DATA 0xcc
0000            207   _PCA0H          DATA 0xfa
0000            208   _PCA0L          DATA 0xf9
0000            209   _PCA0MD         DATA 0xd9
0000            210   _PCA0POL        DATA 0x96
0000            211   _PCA0PWM        DATA 0xf7
0000            212   _PCON0          DATA 0x87
0000            213   _PCON1          DATA 0xcd
0000            214   _PFE0CN         DATA 0xc1
0000            215   _PRTDRV         DATA 0xf6
0000            216   _PSCTL          DATA 0x8f
0000            217   _PSTAT0         DATA 0xaa
0000            218   _PSW            DATA 0xd0
0000            219   _REF0CN         DATA 0xd1
0000            220   _REG0CN         DATA 0xc9
0000            221   _REVID          DATA 0xb6
0000            222   _RSTSRC         DATA 0xef
0000            223   _SBCON1         DATA 0x94
0000            224   _SBRLH1         DATA 0x96
0000            225   _SBRLL1         DATA 0x95
0000            226   _SBUF           DATA 0x99
0000            227   _SBUF0          DATA 0x99
0000            228   _SBUF1          DATA 0x92
0000            229   _SCON           DATA 0x98
0000            230   _SCON0          DATA 0x98
0000            231   _SCON1          DATA 0xc8
0000            232   _SFRPAGE        DATA 0xa7
0000            233   _SFRPGCN        DATA 0xbc
0000            234   _SFRSTACK       DATA 0xd7
0000            235   _SMB0ADM        DATA 0xd6
0000            236   _SMB0ADR        DATA 0xd7
0000            237   _SMB0CF         DATA 0xc1
0000            238   _SMB0CN0        DATA 0xc0
0000            239   _SMB0DAT        DATA 0xc2
0000            240   _SMB0FCN0       DATA 0xc3
0000            241   _SMB0FCN1       DATA 0xc4
0000            242   _SMB0FCT        DATA 0xef
0000            243   _SMB0RXLN       DATA 0xc5
0000            244   _SMB0TC         DATA 0xac
0000            245   _SMOD1          DATA 0x93
0000            246   _SP             DATA 0x81
0000            247   _SPI0CFG        DATA 0xa1
0000            248   _SPI0CKR        DATA 0xa2
0000            249   _SPI0CN0        DATA 0xf8
0000            250   _SPI0DAT        DATA 0xa3
0000            251   _SPI0FCN0       DATA 0x9a
0000            252   _SPI0FCN1       DATA 0x9b
0000            253   _SPI0FCT        DATA 0xf7
0000            254   _SPI0PCF        DATA 0xdf
0000            255   _TCON           DATA 0x88
0000            256   _TH0            DATA 0x8c
0000            257   _TH1            DATA 0x8d
0000            258   _TL0            DATA 0x8a
0000            259   _TL1            DATA 0x8b
0000            260   _TMOD           DATA 0x89
0000            261   _TMR2CN0        DATA 0xc8
0000            262   _TMR2CN1        DATA 0xfd
0000            263   _TMR2H          DATA 0xcf
0000            264   _TMR2L          DATA 0xce
0000            265   _TMR2RLH        DATA 0xcb
0000            266   _TMR2RLL        DATA 0xca
0000            267   _TMR3CN0        DATA 0x91
0000            268   _TMR3CN1        DATA 0xfe
0000            269   _TMR3H          DATA 0x95
0000            270   _TMR3L          DATA 0x94
0000            271   _TMR3RLH        DATA 0x93
0000            272   _TMR3RLL        DATA 0x92
0000            273   _TMR4CN0        DATA 0x98
0000            274   _TMR4CN1        DATA 0xff
0000            275   _TMR4H          DATA 0xa5
0000            276   _TMR4L          DATA 0xa4
0000            277   _TMR4RLH        DATA 0xa3
0000            278   _TMR4RLL        DATA 0xa2
0000            279   _TMR5CN0        DATA 0xc0
0000            280   _TMR5CN1        DATA 0xf1
0000            281   _TMR5H          DATA 0xd5
0000            282   _TMR5L          DATA 0xd4
0000            283   _TMR5RLH        DATA 0xd3
0000            284   _TMR5RLL        DATA 0xd2
0000            285   _UART0PCF       DATA 0xd9
0000            286   _UART1FCN0      DATA 0x9d
0000            287   _UART1FCN1      DATA 0xd8
0000            288   _UART1FCT       DATA 0xfa
0000            289   _UART1LIN       DATA 0x9e
0000            290   _UART1PCF       DATA 0xda
0000            291   _VDM0CN         DATA 0xff
0000            292   _WDTCN          DATA 0x97
0000            293   _XBR0           DATA 0xe1
0000            294   _XBR1           DATA 0xe2
0000            295   _XBR2           DATA 0xe3
0000            296   _XOSC0CN        DATA 0x86
0000            297   _DPTR           DATA 0x8382
0000            298   _TMR2RL         DATA 0xcbca
0000            299   _TMR3RL         DATA 0x9392
0000            300   _TMR4RL         DATA 0xa3a2
0000            301   _TMR5RL         DATA 0xd3d2
0000            302   _TMR0           DATA 0x8c8a
0000            303   _TMR1           DATA 0x8d8b
0000            304   _TMR2           DATA 0xcfce
0000            305   _TMR3           DATA 0x9594
0000            306   _TMR4           DATA 0xa5a4
0000            307   _TMR5           DATA 0xd5d4
0000            308   _SBRL1          DATA 0x9695
0000            309   _PCA0           DATA 0xfaf9
0000            310   _PCA0CP0        DATA 0xfcfb
0000            311   _PCA0CP1        DATA 0xeae9
0000            312   _PCA0CP2        DATA 0xeceb
0000            313   _PCA0CP3        DATA 0xf5f4
0000            314   _PCA0CP4        DATA 0x8584
0000            315   _PCA0CP5        DATA 0xdedd
0000            316   _ADC0ASA        DATA 0xb6b5
0000            317   _ADC0GT         DATA 0xc4c3
0000            318   _ADC0           DATA 0xbebd
0000            319   _ADC0LT         DATA 0xc6c5
0000            320   _DAC0           DATA 0x8584
0000            321   _DAC1           DATA 0x8a89
0000            322   _DAC2           DATA 0x8c8b
0000            323   _DAC3           DATA 0x8e8d
0000            324   ;--------------------------------------------------------
0000            325   ; special function bits
0000            326   ;--------------------------------------------------------
0000            327   _ACC_0          BIT 0xe0
0000            328   _ACC_1          BIT 0xe1
0000            329   _ACC_2          BIT 0xe2
0000            330   _ACC_3          BIT 0xe3
0000            331   _ACC_4          BIT 0xe4
0000            332   _ACC_5          BIT 0xe5
0000            333   _ACC_6          BIT 0xe6
0000            334   _ACC_7          BIT 0xe7
0000            335   _TEMPE          BIT 0xe8
0000            336   _ADGN0          BIT 0xe9
0000            337   _ADGN1          BIT 0xea
0000            338   _ADWINT         BIT 0xeb
0000            339   _ADBUSY         BIT 0xec
0000            340   _ADINT          BIT 0xed
0000            341   _IPOEN          BIT 0xee
0000            342   _ADEN           BIT 0xef
0000            343   _B_0            BIT 0xf0
0000            344   _B_1            BIT 0xf1
0000            345   _B_2            BIT 0xf2
0000            346   _B_3            BIT 0xf3
0000            347   _B_4            BIT 0xf4
0000            348   _B_5            BIT 0xf5
0000            349   _B_6            BIT 0xf6
0000            350   _B_7            BIT 0xf7
0000            351   _C0FIF          BIT 0xe8
0000            352   _C0RIF          BIT 0xe9
0000            353   _C1FIF          BIT 0xea
0000            354   _C1RIF          BIT 0xeb
0000            355   _C2FIF          BIT 0xec
0000            356   _C2RIF          BIT 0xed
0000            357   _C3FIF          BIT 0xee
0000            358   _C3RIF          BIT 0xef
0000            359   _D1SRC0         BIT 0x88
0000            360   _D1SRC1         BIT 0x89
0000            361   _D1AMEN         BIT 0x8a
0000            362   _D01REFSL       BIT 0x8b
0000            363   _D3SRC0         BIT 0x8c
0000            364   _D3SRC1         BIT 0x8d
0000            365   _D3AMEN         BIT 0x8e
0000            366   _D23REFSL       BIT 0x8f
0000            367   _D0UDIS         BIT 0x98
0000            368   _D1UDIS         BIT 0x99
0000            369   _D2UDIS         BIT 0x9a
0000            370   _D3UDIS         BIT 0x9b
0000            371   _EX0            BIT 0xa8
0000            372   _ET0            BIT 0xa9
0000            373   _EX1            BIT 0xaa
0000            374   _ET1            BIT 0xab
0000            375   _ES0            BIT 0xac
0000            376   _ET2            BIT 0xad
0000            377   _ESPI0          BIT 0xae
0000            378   _EA             BIT 0xaf
0000            379   _PX0            BIT 0xb8
0000            380   _PT0            BIT 0xb9
0000            381   _PX1            BIT 0xba
0000            382   _PT1            BIT 0xbb
0000            383   _PS0            BIT 0xbc
0000            384   _PT2            BIT 0xbd
0000            385   _PSPI0          BIT 0xbe
0000            386   _P0_0           BIT 0x80
0000            387   _P0_1           BIT 0x81
0000            388   _P0_2           BIT 0x82
0000            389   _P0_3           BIT 0x83
0000            390   _P0_4           BIT 0x84
0000            391   _P0_5           BIT 0x85
0000            392   _P0_6           BIT 0x86
0000            393   _P0_7           BIT 0x87
0000            394   _P1_0           BIT 0x90
0000            395   _P1_1           BIT 0x91
0000            396   _P1_2           BIT 0x92
0000            397   _P1_3           BIT 0x93
0000            398   _P1_4           BIT 0x94
0000            399   _P1_5           BIT 0x95
0000            400   _P1_6           BIT 0x96
0000            401   _P1_7           BIT 0x97
0000            402   _P2_0           BIT 0xa0
0000            403   _P2_1           BIT 0xa1
0000            404   _P2_2           BIT 0xa2
0000            405   _P2_3           BIT 0xa3
0000            406   _P2_4           BIT 0xa4
0000            407   _P2_5           BIT 0xa5
0000            408   _P2_6           BIT 0xa6
0000            409   _P3_0           BIT 0xb0
0000            410   _P3_1           BIT 0xb1
0000            411   _P3_2           BIT 0xb2
0000            412   _P3_3           BIT 0xb3
0000            413   _P3_4           BIT 0xb4
0000            414   _P3_7           BIT 0xb7
0000            415   _CCF0           BIT 0xd8
0000            416   _CCF1           BIT 0xd9
0000            417   _CCF2           BIT 0xda
0000            418   _CCF3           BIT 0xdb
0000            419   _CCF4           BIT 0xdc
0000            420   _CCF5           BIT 0xdd
0000            421   _CR             BIT 0xde
0000            422   _CF             BIT 0xdf
0000            423   _PARITY         BIT 0xd0
0000            424   _F1             BIT 0xd1
0000            425   _OV             BIT 0xd2
0000            426   _RS0            BIT 0xd3
0000            427   _RS1            BIT 0xd4
0000            428   _F0             BIT 0xd5
0000            429   _AC             BIT 0xd6
0000            430   _CY             BIT 0xd7
0000            431   _RI             BIT 0x98
0000            432   _TI             BIT 0x99
0000            433   _RB8            BIT 0x9a
0000            434   _TB8            BIT 0x9b
0000            435   _REN            BIT 0x9c
0000            436   _CE             BIT 0x9d
0000            437   _SMODE          BIT 0x9e
0000            438   _RI1            BIT 0xc8
0000            439   _TI1            BIT 0xc9
0000            440   _RBX1           BIT 0xca
0000            441   _TBX1           BIT 0xcb
0000            442   _REN1           BIT 0xcc
0000            443   _PERR1          BIT 0xcd
0000            444   _OVR1           BIT 0xce
0000            445   _SI             BIT 0xc0
0000            446   _ACK            BIT 0xc1
0000            447   _ARBLOST        BIT 0xc2
0000            448   _ACKRQ          BIT 0xc3
0000            449   _STO            BIT 0xc4
0000            450   _STA            BIT 0xc5
0000            451   _TXMODE         BIT 0xc6
0000            452   _MASTER         BIT 0xc7
0000            453   _SPIEN          BIT 0xf8
0000            454   _TXNF           BIT 0xf9
0000            455   _NSSMD0         BIT 0xfa
0000            456   _NSSMD1         BIT 0xfb
0000            457   _RXOVRN         BIT 0xfc
0000            458   _MODF           BIT 0xfd
0000            459   _WCOL           BIT 0xfe
0000            460   _SPIF           BIT 0xff
0000            461   _IT0            BIT 0x88
0000            462   _IE0            BIT 0x89
0000            463   _IT1            BIT 0x8a
0000            464   _IE1            BIT 0x8b
0000            465   _TR0            BIT 0x8c
0000            466   _TF0            BIT 0x8d
0000            467   _TR1            BIT 0x8e
0000            468   _TF1            BIT 0x8f
0000            469   _T2XCLK0        BIT 0xc8
0000            470   _T2XCLK1        BIT 0xc9
0000            471   _TR2            BIT 0xca
0000            472   _T2SPLIT        BIT 0xcb
0000            473   _TF2CEN         BIT 0xcc
0000            474   _TF2LEN         BIT 0xcd
0000            475   _TF2L           BIT 0xce
0000            476   _TF2H           BIT 0xcf
0000            477   _T4XCLK0        BIT 0x98
0000            478   _T4XCLK1        BIT 0x99
0000            479   _TR4            BIT 0x9a
0000            480   _T4SPLIT        BIT 0x9b
0000            481   _TF4CEN         BIT 0x9c
0000            482   _TF4LEN         BIT 0x9d
0000            483   _TF4L           BIT 0x9e
0000            484   _TF4H           BIT 0x9f
0000            485   _T5XCLK0        BIT 0xc0
0000            486   _T5XCLK1        BIT 0xc1
0000            487   _TR5            BIT 0xc2
0000            488   _T5SPLIT        BIT 0xc3
0000            489   _TF5CEN         BIT 0xc4
0000            490   _TF5LEN         BIT 0xc5
0000            491   _TF5L           BIT 0xc6
0000            492   _TF5H           BIT 0xc7
0000            493   _RIE            BIT 0xd8
0000            494   _RXTO0          BIT 0xd9
0000            495   _RXTO1          BIT 0xda
0000            496   _RFRQ           BIT 0xdb
0000            497   _TIE            BIT 0xdc
0000            498   _TXHOLD         BIT 0xdd
0000            499   _TXNF1          BIT 0xde
0000            500   _TFRQ           BIT 0xdf
0000            501   ;--------------------------------------------------------
0000            502   ; overlayable register banks
0000            503   ;--------------------------------------------------------
0000            504            rbank0 segment data overlay
0000            505   ;--------------------------------------------------------
0000            506   ; internal ram data
0000            507   ;--------------------------------------------------------
0000            508            rseg R_DSEG
0000            509   _pwm_counter:
0000            510            ds 2
0002            511   _servo_counter:
0002            512            ds 2
0004            513   _pwm_left:
0004            514            ds 1
0005            515   _pwm_right:
0005            516            ds 1
0006            517   _L_motor_dir:
0006            518            ds 1
0007            519   _R_motor_dir:
0007            520            ds 1
0008            521   _servo_base:
0008            522            ds 1
0009            523   _servo_arm:
0009            524            ds 1
000A            525   _getstr1_PARM_2:
000A            526            ds 1
000B            527   _main_vx_1_133:
000B            528            ds 2
000D            529   _main_vy_1_133:
000D            530            ds 2
000F            531   _main_motor_pwm_1_133:
000F            532            ds 2
0011            533   _main_sloc0_1_0:
0011            534            ds 4
0015            535   ;--------------------------------------------------------
0015            536   ; overlayable items in internal ram 
0015            537   ;--------------------------------------------------------
0000            538            rseg    R_OSEG
0000            539            rseg    R_OSEG
0000            540            rseg    R_OSEG
0000            541            rseg    R_OSEG
0000            542            rseg    R_OSEG
0000            543            rseg    R_OSEG
0000            544   _InitPinADC_PARM_2:
0000            545            ds 1
0001            546            rseg    R_OSEG
0001            547            rseg    R_OSEG
0001            548            rseg    R_OSEG
0001            549            rseg    R_OSEG
0001            550            rseg    R_OSEG
0001            551   ;--------------------------------------------------------
0001            552   ; indirectly addressable internal ram data
0001            553   ;--------------------------------------------------------
0000            554            rseg R_ISEG
0000            555   _buff:
0000            556            ds 20
0014            557   ;--------------------------------------------------------
0014            558   ; absolute internal ram data
0014            559   ;--------------------------------------------------------
0000            560            DSEG
0000            561   ;--------------------------------------------------------
0000            562   ; bit data
0000            563   ;--------------------------------------------------------
0000            564            rseg R_BSEG
0000            565   ;--------------------------------------------------------
0000            566   ; paged external ram data
0000            567   ;--------------------------------------------------------
0000            568            rseg R_PSEG
0000            569   ;--------------------------------------------------------
0000            570   ; external ram data
0000            571   ;--------------------------------------------------------
0000            572            rseg R_XSEG
0000            573   ;--------------------------------------------------------
0000            574   ; absolute external ram data
0000            575   ;--------------------------------------------------------
0000            576            XSEG
0000            577   ;--------------------------------------------------------
0000            578   ; external initialized ram data
0000            579   ;--------------------------------------------------------
0000            580            rseg R_IXSEG
0000            581            rseg R_HOME
0000            582            rseg R_GSINIT
0000            583            rseg R_CSEG
0000            584   ;--------------------------------------------------------
0000            585   ; Reset entry point and interrupt vectors
0000            586   ;--------------------------------------------------------
0000            587            CSEG at 0x0000
0000 020000     588            ljmp    _crt0
0093            589            CSEG at 0x0093
0093 020000     590            ljmp    _Timer5_ISR
0096            591   ;--------------------------------------------------------
0096            592   ; global & static initialisations
0096            593   ;--------------------------------------------------------
0000            594            rseg R_HOME
0000            595            rseg R_GSINIT
0000            596            rseg R_GSINIT
0000            597   ;--------------------------------------------------------
0000            598   ; data variables initialization
0000            599   ;--------------------------------------------------------
0000            600            rseg R_DINIT
0000            601   ;        main.c:48: unsigned int pwm_counter = 0; 
0000 E4         602            clr     a
0001 F510       603            mov     _pwm_counter,a
0003 F511       604            mov     (_pwm_counter + 1),a
0005            605   ;        main.c:49: unsigned int servo_counter = 0; 
0005 E4         606            clr     a
0006 F5D0       607            mov     _servo_counter,a
0008 F5D1       608            mov     (_servo_counter + 1),a
000A            609   ;        main.c:50: unsigned char pwm_left = 0, pwm_right = 0; 
000A 759000     610            mov     _pwm_left,#0x00
000D            611   ;        main.c:50: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 755000     612            mov     _pwm_right,#0x00
0010            613   ;        main.c:51: unsigned char servo_base = 100, servo_arm = 100; 
0010 751001     614            mov     _L_motor_dir,#0x01
0013            615   ;        main.c:51: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 75D001     616            mov     _R_motor_dir,#0x01
0016            617   ;        main.c:52: unsigned char servo_base = 100, servo_arm = 100; 
0016 759064     618            mov     _servo_base,#0x64
0019            619   ;        main.c:52: 
0019 755064     620            mov     _servo_arm,#0x64
001C            621            ; The linker places a 'ret' at the end of segment R_DINIT.
001C            622   ;--------------------------------------------------------
001C            623   ; code
001C            624   ;--------------------------------------------------------
0000            625            rseg R_CSEG
0000            626   ;------------------------------------------------------------
0000            627   ;Allocation info for local variables in function '_c51_external_startup'
0000            628   ;------------------------------------------------------------
0000            629   ;------------------------------------------------------------
0000            630   ;        main.c:55: char _c51_external_startup (void)
0000            631   ;        -----------------------------------------
0000            632   ;         function _c51_external_startup
0000            633   ;        -----------------------------------------
0000            634   __c51_external_startup:
0000            635            using   0
0000            636   ;        main.c:58: SFRPAGE = 0x00;
0000 75A700     637            mov     _SFRPAGE,#0x00
0003            638   ;        main.c:59: WDTCN = 0xDE; //First key
0003 7597DE     639            mov     _WDTCN,#0xDE
0006            640   ;        main.c:60: WDTCN = 0xAD; //Second key
0006 7597AD     641            mov     _WDTCN,#0xAD
0009            642   ;        main.c:62: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     643            mov     _VDM0CN,#0x80
000C            644   ;        main.c:63: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     645            mov     _RSTSRC,#0x06
000F            646   ;        main.c:70: SFRPAGE = 0x10;
000F 75A710     647            mov     _SFRPAGE,#0x10
0012            648   ;        main.c:71: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     649            mov     _PFE0CN,#0x20
0015            650   ;        main.c:72: SFRPAGE = 0x00;
0015 75A700     651            mov     _SFRPAGE,#0x00
0018            652   ;        main.c:93: CLKSEL = 0x00;
0018 75A900     653            mov     _CLKSEL,#0x00
001B            654   ;        main.c:94: CLKSEL = 0x00;
001B 75A900     655            mov     _CLKSEL,#0x00
001E            656   ;        main.c:95: while ((CLKSEL & 0x80) == 0);
001E            657   L002001?:
001E E5A9       658            mov     a,_CLKSEL
0020 30E760     659            jnb     acc.7,L002001?
0023            660   ;        main.c:96: CLKSEL = 0x03;
0023 75A903     661            mov     _CLKSEL,#0x03
0026            662   ;        main.c:97: CLKSEL = 0x03;
0026 75A903     663            mov     _CLKSEL,#0x03
0029            664   ;        main.c:98: while ((CLKSEL & 0x80) == 0);
0029            665   L002004?:
0029 E5A9       666            mov     a,_CLKSEL
002B 30E7E0     667            jnb     acc.7,L002004?
002E            668   ;        main.c:103: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     669            orl     _P0MDOUT,#0x11
0031            670   ;        main.c:104: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     671            orl     _P2MDOUT,#0x01
0034            672   ;        main.c:105: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     673            mov     _XBR0,#0x01
0037            674   ;        main.c:106: XBR1     = 0X00;
0037 75E200     675            mov     _XBR1,#0x00
003A            676   ;        main.c:107: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     677            mov     _XBR2,#0x41
003D            678   ;        main.c:113: SCON0 = 0x10;
003D 759810     679            mov     _SCON0,#0x10
0040            680   ;        main.c:114: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     681            mov     _TH1,#0xE6
0043            682   ;        main.c:115: TL1 = TH1;      // Init Timer1
0043 858D8B     683            mov     _TL1,_TH1
0046            684   ;        main.c:116: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     685            anl     _TMOD,#0x0F
0049            686   ;        main.c:117: TMOD |=  0x20;                       
0049 438920     687            orl     _TMOD,#0x20
004C            688   ;        main.c:118: TR1 = 1; // START Timer1
004C D28E       689            setb    _TR1
004E            690   ;        main.c:119: TI = 1;  // Indicate TX0 ready
004E D299       691            setb    _TI
0050            692   ;        main.c:121: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       693            setb    _P2_0
0052            694   ;        main.c:124: SFRPAGE=0x10;
0052 75A710     695            mov     _SFRPAGE,#0x10
0055            696   ;        main.c:125: TMR5CN0=0x00;
0055 75C000     697            mov     _TMR5CN0,#0x00
0058            698   ;        main.c:126: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     699            mov     _TMR5,#0xFF
005B 75D5FF     700            mov     (_TMR5 >> 8),#0xFF
005E            701   ;        main.c:127: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     702            orl     _EIE2,#0x08
0061            703   ;        main.c:128: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       704            setb    _TR5
0063            705   ;        main.c:131: EA=1;  // Enable global interrupts
0063 D2AF       706            setb    _EA
0065            707   ;        main.c:132: SFRPAGE=0x00;
0065 75A700     708            mov     _SFRPAGE,#0x00
0068            709   ;        main.c:134: return 0;
0068 758200     710            mov     dpl,#0x00
006B 22         711            ret
006C            712   ;------------------------------------------------------------
006C            713   ;Allocation info for local variables in function 'Timer3us'
006C            714   ;------------------------------------------------------------
006C            715   ;us                        Allocated to registers r2 
006C            716   ;i                         Allocated to registers r3 
006C            717   ;------------------------------------------------------------
006C            718   ;        main.c:138: void Timer3us(unsigned char us)
006C            719   ;        -----------------------------------------
006C            720   ;         function Timer3us
006C            721   ;        -----------------------------------------
006C            722   _Timer3us:
006C AA82       723            mov     r2,dpl
006E            724   ;        main.c:143: CKCON0|=0b_0100_0000;
006E 438E40     725            orl     _CKCON0,#0x40
0071            726   ;        main.c:145: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     727            mov     _TMR3RL,#0xB8
0074 7593FF     728            mov     (_TMR3RL >> 8),#0xFF
0077            729   ;        main.c:146: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     730            mov     _TMR3,_TMR3RL
007A 859395     731            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            732   ;        main.c:148: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     733            mov     _TMR3CN0,#0x04
0080            734   ;        main.c:149: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       735            mov     r3,#0x00
0082            736   L003004?:
0082 C3         737            clr     c
0083 EB         738            mov     a,r3
0084 9A         739            subb    a,r2
0085 5000       740            jnc     L003007?
0087            741   ;        main.c:151: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            742   L003001?:
0087 E591       743            mov     a,_TMR3CN0
0089 30E7E0     744            jnb     acc.7,L003001?
008C            745   ;        main.c:152: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     746            anl     _TMR3CN0,#0x7F
008F            747   ;        main.c:149: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         748            inc     r3
0090 8000       749            sjmp    L003004?
0092            750   L003007?:
0092            751   ;        main.c:154: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     752            mov     _TMR3CN0,#0x00
0095 22         753            ret
0096            754   ;------------------------------------------------------------
0096            755   ;Allocation info for local variables in function 'waitms'
0096            756   ;------------------------------------------------------------
0096            757   ;ms                        Allocated to registers r2 r3 
0096            758   ;j                         Allocated to registers r4 r5 
0096            759   ;k                         Allocated to registers r6 
0096            760   ;------------------------------------------------------------
0096            761   ;        main.c:157: void waitms (unsigned int ms)
0096            762   ;        -----------------------------------------
0096            763   ;         function waitms
0096            764   ;        -----------------------------------------
0096            765   _waitms:
0096 AA82       766            mov     r2,dpl
0098 AB83       767            mov     r3,dph
009A            768   ;        main.c:161: for(j=0; j<ms; j++)
009A 7C00       769            mov     r4,#0x00
009C 7D00       770            mov     r5,#0x00
009E            771   L004005?:
009E C3         772            clr     c
009F EC         773            mov     a,r4
00A0 9A         774            subb    a,r2
00A1 ED         775            mov     a,r5
00A2 9B         776            subb    a,r3
00A3 5000       777            jnc     L004009?
00A5            778   ;        main.c:162: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       779            mov     r6,#0x00
00A7            780   L004001?:
00A7 BE0420     781            cjne    r6,#0x04,L004018?
00AA            782   L004018?:
00AA 5000       783            jnc     L004007?
00AC 7582FA     784            mov     dpl,#0xFA
00AF C002       785            push    ar2
00B1 C003       786            push    ar3
00B3 C004       787            push    ar4
00B5 C005       788            push    ar5
00B7 C006       789            push    ar6
00B9 120000     790            lcall   _Timer3us
00BC D006       791            pop     ar6
00BE D005       792            pop     ar5
00C0 D004       793            pop     ar4
00C2 D003       794            pop     ar3
00C4 D002       795            pop     ar2
00C6 0E         796            inc     r6
00C7 8000       797            sjmp    L004001?
00C9            798   L004007?:
00C9            799   ;        main.c:161: for(j=0; j<ms; j++)
00C9 0C         800            inc     r4
00CA BC0060     801            cjne    r4,#0x00,L004005?
00CD 0D         802            inc     r5
00CE 8000       803            sjmp    L004005?
00D0            804   L004009?:
00D0 22         805            ret
00D1            806   ;------------------------------------------------------------
00D1            807   ;Allocation info for local variables in function 'UART1_Init'
00D1            808   ;------------------------------------------------------------
00D1            809   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            810   ;------------------------------------------------------------
00D1            811   ;        main.c:165: void UART1_Init (unsigned long baudrate)
00D1            812   ;        -----------------------------------------
00D1            813   ;         function UART1_Init
00D1            814   ;        -----------------------------------------
00D1            815   _UART1_Init:
00D1 AA82       816            mov     r2,dpl
00D3 AB83       817            mov     r3,dph
00D5 ACF0       818            mov     r4,b
00D7 FD         819            mov     r5,a
00D8            820   ;        main.c:167: SFRPAGE = 0x20;
00D8 75A720     821            mov     _SFRPAGE,#0x20
00DB            822   ;        main.c:168: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     823            mov     _SMOD1,#0x0C
00DE            824   ;        main.c:169: SCON1 = 0x10;
00DE 75C810     825            mov     _SCON1,#0x10
00E1            826   ;        main.c:170: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     827            mov     _SBCON1,#0x00
00E4            828   ;        main.c:171: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       829            mov     __divulong_PARM_2,r2
00E6 8B01       830            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       831            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       832            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     833            mov     dptr,#0xA200
00EF 75F04A     834            mov     b,#0x4A
00F2 7404       835            mov     a,#0x04
00F4 120000     836            lcall   __divulong
00F7 AA82       837            mov     r2,dpl
00F9 AB83       838            mov     r3,dph
00FB ACF0       839            mov     r4,b
00FD FD         840            mov     r5,a
00FE 750018     841            mov     __divulong_PARM_2,#0x18
0101 E4         842            clr     a
0102 F501       843            mov     (__divulong_PARM_2 + 1),a
0104 F502       844            mov     (__divulong_PARM_2 + 2),a
0106 F503       845            mov     (__divulong_PARM_2 + 3),a
0108 8A82       846            mov     dpl,r2
010A 8B83       847            mov     dph,r3
010C 8CF0       848            mov     b,r4
010E ED         849            mov     a,r5
010F 120000     850            lcall   __divulong
0112 AA82       851            mov     r2,dpl
0114 AB83       852            mov     r3,dph
0116 ACF0       853            mov     r4,b
0118 FD         854            mov     r5,a
0119 E4         855            clr     a
011A C3         856            clr     c
011B 9A         857            subb    a,r2
011C FA         858            mov     r2,a
011D E4         859            clr     a
011E 9B         860            subb    a,r3
011F FB         861            mov     r3,a
0120 7401       862            mov     a,#0x01
0122 9C         863            subb    a,r4
0123 E4         864            clr     a
0124 9D         865            subb    a,r5
0125 8A95       866            mov     _SBRL1,r2
0127 8B96       867            mov     (_SBRL1 >> 8),r3
0129            868   ;        main.c:172: TI1 = 1; // indicate ready for TX
0129 D2C9       869            setb    _TI1
012B            870   ;        main.c:173: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     871            orl     _SBCON1,#0x40
012E            872   ;        main.c:174: SFRPAGE = 0x00;
012E 75A700     873            mov     _SFRPAGE,#0x00
0131 22         874            ret
0132            875   ;------------------------------------------------------------
0132            876   ;Allocation info for local variables in function 'putchar1'
0132            877   ;------------------------------------------------------------
0132            878   ;c                         Allocated to registers r2 
0132            879   ;------------------------------------------------------------
0132            880   ;        main.c:177: void putchar1 (char c) 
0132            881   ;        -----------------------------------------
0132            882   ;         function putchar1
0132            883   ;        -----------------------------------------
0132            884   _putchar1:
0132 AA82       885            mov     r2,dpl
0134            886   ;        main.c:179: SFRPAGE = 0x20;
0134 75A720     887            mov     _SFRPAGE,#0x20
0137            888   ;        main.c:180: while (!TI1);
0137            889   L006001?:
0137            890   ;        main.c:181: TI1=0;
0137 10C9B0     891            jbc     _TI1,L006008?
013A 8000       892            sjmp    L006001?
013C            893   L006008?:
013C            894   ;        main.c:182: SBUF1 = c;
013C 8A92       895            mov     _SBUF1,r2
013E            896   ;        main.c:183: SFRPAGE = 0x00;
013E 75A700     897            mov     _SFRPAGE,#0x00
0141 22         898            ret
0142            899   ;------------------------------------------------------------
0142            900   ;Allocation info for local variables in function 'sendstr1'
0142            901   ;------------------------------------------------------------
0142            902   ;s                         Allocated to registers r2 r3 r4 
0142            903   ;------------------------------------------------------------
0142            904   ;        main.c:186: void sendstr1 (char * s)
0142            905   ;        -----------------------------------------
0142            906   ;         function sendstr1
0142            907   ;        -----------------------------------------
0142            908   _sendstr1:
0142 AA82       909            mov     r2,dpl
0144 AB83       910            mov     r3,dph
0146 ACF0       911            mov     r4,b
0148            912   ;        main.c:188: while(*s)
0148            913   L007001?:
0148 8A82       914            mov     dpl,r2
014A 8B83       915            mov     dph,r3
014C 8CF0       916            mov     b,r4
014E 120000     917            lcall   __gptrget
0151 FD         918            mov     r5,a
0152 6000       919            jz      L007004?
0154            920   ;        main.c:190: putchar1(*s);
0154 8D82       921            mov     dpl,r5
0156 C002       922            push    ar2
0158 C003       923            push    ar3
015A C004       924            push    ar4
015C 120000     925            lcall   _putchar1
015F D004       926            pop     ar4
0161 D003       927            pop     ar3
0163 D002       928            pop     ar2
0165            929   ;        main.c:191: s++;        
0165 0A         930            inc     r2
0166 BA00F0     931            cjne    r2,#0x00,L007001?
0169 0B         932            inc     r3
016A 8000       933            sjmp    L007001?
016C            934   L007004?:
016C 22         935            ret
016D            936   ;------------------------------------------------------------
016D            937   ;Allocation info for local variables in function 'getchar1'
016D            938   ;------------------------------------------------------------
016D            939   ;c                         Allocated to registers 
016D            940   ;------------------------------------------------------------
016D            941   ;        main.c:195: char getchar1 (void)
016D            942   ;        -----------------------------------------
016D            943   ;         function getchar1
016D            944   ;        -----------------------------------------
016D            945   _getchar1:
016D            946   ;        main.c:198: SFRPAGE = 0x20;
016D 75A720     947            mov     _SFRPAGE,#0x20
0170            948   ;        main.c:199: while (!RI1);
0170            949   L008001?:
0170            950   ;        main.c:200: RI1=0;
0170 10C8F0     951            jbc     _RI1,L008008?
0173 8000       952            sjmp    L008001?
0175            953   L008008?:
0175            954   ;        main.c:202: SCON1&=0b_0011_1111;
0175 53C83F     955            anl     _SCON1,#0x3F
0178            956   ;        main.c:203: c = SBUF1;
0178 859282     957            mov     dpl,_SBUF1
017B            958   ;        main.c:204: SFRPAGE = 0x00;
017B 75A700     959            mov     _SFRPAGE,#0x00
017E            960   ;        main.c:205: return (c);
017E 22         961            ret
017F            962   ;------------------------------------------------------------
017F            963   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            964   ;------------------------------------------------------------
017F            965   ;c                         Allocated to registers 
017F            966   ;timeout                   Allocated to registers r2 r3 
017F            967   ;------------------------------------------------------------
017F            968   ;        main.c:208: char getchar1_with_timeout (void)
017F            969   ;        -----------------------------------------
017F            970   ;         function getchar1_with_timeout
017F            971   ;        -----------------------------------------
017F            972   _getchar1_with_timeout:
017F            973   ;        main.c:212: SFRPAGE = 0x20;
017F 75A720     974            mov     _SFRPAGE,#0x20
0182            975   ;        main.c:214: while (!RI1)
0182 7A00       976            mov     r2,#0x00
0184 7B00       977            mov     r3,#0x00
0186            978   L009003?:
0186 20C870     979            jb      _RI1,L009005?
0189            980   ;        main.c:216: SFRPAGE = 0x00;
0189 75A700     981            mov     _SFRPAGE,#0x00
018C            982   ;        main.c:217: Timer3us(20);
018C 758214     983            mov     dpl,#0x14
018F C002       984            push    ar2
0191 C003       985            push    ar3
0193 120000     986            lcall   _Timer3us
0196 D003       987            pop     ar3
0198 D002       988            pop     ar2
019A            989   ;        main.c:218: SFRPAGE = 0x20;
019A 75A720     990            mov     _SFRPAGE,#0x20
019D            991   ;        main.c:219: timeout++;
019D 0A         992            inc     r2
019E BA00B0     993            cjne    r2,#0x00,L009012?
01A1 0B         994            inc     r3
01A2            995   L009012?:
01A2            996   ;        main.c:220: if(timeout==25000)
01A2 BAA830     997            cjne    r2,#0xA8,L009003?
01A5 BB6130     998            cjne    r3,#0x61,L009003?
01A8            999   ;        main.c:222: SFRPAGE = 0x00;
01A8 75A700    1000            mov     _SFRPAGE,#0x00
01AB           1001   ;        main.c:223: return ('\n'); // Timeout after half second
01AB 75820A    1002            mov     dpl,#0x0A
01AE 22        1003            ret
01AF           1004   L009005?:
01AF           1005   ;        main.c:226: RI1=0;
01AF C2C8      1006            clr     _RI1
01B1           1007   ;        main.c:228: SCON1&=0b_0011_1111;
01B1 53C83F    1008            anl     _SCON1,#0x3F
01B4           1009   ;        main.c:229: c = SBUF1;
01B4 859282    1010            mov     dpl,_SBUF1
01B7           1011   ;        main.c:230: SFRPAGE = 0x00;
01B7 75A700    1012            mov     _SFRPAGE,#0x00
01BA           1013   ;        main.c:231: return (c);
01BA 22        1014            ret
01BB           1015   ;------------------------------------------------------------
01BB           1016   ;Allocation info for local variables in function 'getstr1'
01BB           1017   ;------------------------------------------------------------
01BB           1018   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1019   ;s                         Allocated to registers r2 r3 r4 
01BB           1020   ;c                         Allocated to registers r1 
01BB           1021   ;cnt                       Allocated to registers r5 
01BB           1022   ;------------------------------------------------------------
01BB           1023   ;        main.c:234: void getstr1 (char * s, unsigned char n)
01BB           1024   ;        -----------------------------------------
01BB           1025   ;         function getstr1
01BB           1026   ;        -----------------------------------------
01BB           1027   _getstr1:
01BB AA82      1028            mov     r2,dpl
01BD AB83      1029            mov     r3,dph
01BF ACF0      1030            mov     r4,b
01C1           1031   ;        main.c:240: while(1)
01C1 7D00      1032            mov     r5,#0x00
01C3 8A06      1033            mov     ar6,r2
01C5 8B07      1034            mov     ar7,r3
01C7 8C00      1035            mov     ar0,r4
01C9           1036   L010007?:
01C9           1037   ;        main.c:242: c=getchar1_with_timeout();
01C9 C002      1038            push    ar2
01CB C003      1039            push    ar3
01CD C004      1040            push    ar4
01CF C005      1041            push    ar5
01D1 C006      1042            push    ar6
01D3 C007      1043            push    ar7
01D5 C000      1044            push    ar0
01D7 120000    1045            lcall   _getchar1_with_timeout
01DA A982      1046            mov     r1,dpl
01DC D000      1047            pop     ar0
01DE D007      1048            pop     ar7
01E0 D006      1049            pop     ar6
01E2 D005      1050            pop     ar5
01E4 D004      1051            pop     ar4
01E6 D003      1052            pop     ar3
01E8 D002      1053            pop     ar2
01EA           1054   ;        main.c:243: if(c=='\n')
01EA B90A30    1055            cjne    r1,#0x0A,L010002?
01ED           1056   ;        main.c:245: *s=0;
01ED 8A82      1057            mov     dpl,r2
01EF 8B83      1058            mov     dph,r3
01F1 8CF0      1059            mov     b,r4
01F3 E4        1060            clr     a
01F4           1061   ;        main.c:246: return;
01F4 020000    1062            ljmp    __gptrput
01F7           1063   L010002?:
01F7           1064   ;        main.c:249: if (cnt<n)
01F7 C3        1065            clr     c
01F8 ED        1066            mov     a,r5
01F9 9510      1067            subb    a,_getstr1_PARM_2
01FB 5000      1068            jnc     L010004?
01FD           1069   ;        main.c:251: cnt++;
01FD 0D        1070            inc     r5
01FE           1071   ;        main.c:252: *s=c;
01FE 8E82      1072            mov     dpl,r6
0200 8F83      1073            mov     dph,r7
0202 88F0      1074            mov     b,r0
0204 E9        1075            mov     a,r1
0205 120000    1076            lcall   __gptrput
0208 A3        1077            inc     dptr
0209 AE82      1078            mov     r6,dpl
020B AF83      1079            mov     r7,dph
020D           1080   ;        main.c:253: s++;
020D 8E02      1081            mov     ar2,r6
020F 8F03      1082            mov     ar3,r7
0211 8804      1083            mov     ar4,r0
0213 8000      1084            sjmp    L010007?
0215           1085   L010004?:
0215           1086   ;        main.c:257: *s=0;
0215 8A82      1087            mov     dpl,r2
0217 8B83      1088            mov     dph,r3
0219 8CF0      1089            mov     b,r4
021B E4        1090            clr     a
021C           1091   ;        main.c:258: return;
021C 020000    1092            ljmp    __gptrput
021F           1093   ;------------------------------------------------------------
021F           1094   ;Allocation info for local variables in function 'RXU1'
021F           1095   ;------------------------------------------------------------
021F           1096   ;------------------------------------------------------------
021F           1097   ;        main.c:264: bit RXU1 (void)
021F           1098   ;        -----------------------------------------
021F           1099   ;         function RXU1
021F           1100   ;        -----------------------------------------
021F           1101   _RXU1:
021F           1102   ;        main.c:267: SFRPAGE = 0x20;
021F 75A720    1103            mov     _SFRPAGE,#0x20
0222           1104   ;        main.c:268: mybit=RI1;
0222 A2C8      1105            mov     c,_RI1
0224           1106   ;        main.c:269: SFRPAGE = 0x00;
0224 75A700    1107            mov     _SFRPAGE,#0x00
0227           1108   ;        main.c:270: return mybit;
0227 22        1109            ret
0228           1110   ;------------------------------------------------------------
0228           1111   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1112   ;------------------------------------------------------------
0228           1113   ;ms                        Allocated to registers r2 r3 
0228           1114   ;j                         Allocated to registers r4 r5 
0228           1115   ;k                         Allocated to registers r6 
0228           1116   ;------------------------------------------------------------
0228           1117   ;        main.c:273: void waitms_or_RI1 (unsigned int ms)
0228           1118   ;        -----------------------------------------
0228           1119   ;         function waitms_or_RI1
0228           1120   ;        -----------------------------------------
0228           1121   _waitms_or_RI1:
0228 AA82      1122            mov     r2,dpl
022A AB83      1123            mov     r3,dph
022C           1124   ;        main.c:277: for(j=0; j<ms; j++)
022C 7C00      1125            mov     r4,#0x00
022E 7D00      1126            mov     r5,#0x00
0230           1127   L012007?:
0230 C3        1128            clr     c
0231 EC        1129            mov     a,r4
0232 9A        1130            subb    a,r2
0233 ED        1131            mov     a,r5
0234 9B        1132            subb    a,r3
0235 5000      1133            jnc     L012011?
0237           1134   ;        main.c:279: for (k=0; k<4; k++)
0237 7E00      1135            mov     r6,#0x00
0239           1136   L012003?:
0239 BE04B0    1137            cjne    r6,#0x04,L012019?
023C           1138   L012019?:
023C 5000      1139            jnc     L012009?
023E           1140   ;        main.c:281: if(RXU1()) return;
023E C002      1141            push    ar2
0240 C003      1142            push    ar3
0242 C004      1143            push    ar4
0244 C005      1144            push    ar5
0246 C006      1145            push    ar6
0248 120000    1146            lcall   _RXU1
024B E4        1147            clr     a
024C 33        1148            rlc     a
024D D006      1149            pop     ar6
024F D005      1150            pop     ar5
0251 D004      1151            pop     ar4
0253 D003      1152            pop     ar3
0255 D002      1153            pop     ar2
0257 6000      1154            jz      L012002?
0259 22        1155            ret
025A           1156   L012002?:
025A           1157   ;        main.c:282: Timer3us(250);
025A 7582FA    1158            mov     dpl,#0xFA
025D C002      1159            push    ar2
025F C003      1160            push    ar3
0261 C004      1161            push    ar4
0263 C005      1162            push    ar5
0265 C006      1163            push    ar6
0267 120000    1164            lcall   _Timer3us
026A D006      1165            pop     ar6
026C D005      1166            pop     ar5
026E D004      1167            pop     ar4
0270 D003      1168            pop     ar3
0272 D002      1169            pop     ar2
0274           1170   ;        main.c:279: for (k=0; k<4; k++)
0274 0E        1171            inc     r6
0275 8000      1172            sjmp    L012003?
0277           1173   L012009?:
0277           1174   ;        main.c:277: for(j=0; j<ms; j++)
0277 0C        1175            inc     r4
0278 BC00F0    1176            cjne    r4,#0x00,L012007?
027B 0D        1177            inc     r5
027C 8000      1178            sjmp    L012007?
027E           1179   L012011?:
027E 22        1180            ret
027F           1181   ;------------------------------------------------------------
027F           1182   ;Allocation info for local variables in function 'SendATCommand'
027F           1183   ;------------------------------------------------------------
027F           1184   ;s                         Allocated to registers r2 r3 r4 
027F           1185   ;------------------------------------------------------------
027F           1186   ;        main.c:287: void SendATCommand (char * s)
027F           1187   ;        -----------------------------------------
027F           1188   ;         function SendATCommand
027F           1189   ;        -----------------------------------------
027F           1190   _SendATCommand:
027F AA82      1191            mov     r2,dpl
0281 AB83      1192            mov     r3,dph
0283 ACF0      1193            mov     r4,b
0285           1194   ;        main.c:289: printf("Command: %s", s);
0285 C002      1195            push    ar2
0287 C003      1196            push    ar3
0289 C004      1197            push    ar4
028B C002      1198            push    ar2
028D C003      1199            push    ar3
028F C004      1200            push    ar4
0291 7470      1201            mov     a,#__str_0
0293 C0E0      1202            push    acc
0295 74BE      1203            mov     a,#(__str_0 >> 8)
0297 C0E0      1204            push    acc
0299 7480      1205            mov     a,#0x80
029B C0E0      1206            push    acc
029D 120000    1207            lcall   _printf
02A0 E581      1208            mov     a,sp
02A2 24FA      1209            add     a,#0xfa
02A4 F581      1210            mov     sp,a
02A6           1211   ;        main.c:290: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1212            clr     _P2_0
02A8           1213   ;        main.c:291: waitms(5);
02A8 900005    1214            mov     dptr,#0x0005
02AB 120000    1215            lcall   _waitms
02AE D004      1216            pop     ar4
02B0 D003      1217            pop     ar3
02B2 D002      1218            pop     ar2
02B4           1219   ;        main.c:292: sendstr1(s);
02B4 8A82      1220            mov     dpl,r2
02B6 8B83      1221            mov     dph,r3
02B8 8CF0      1222            mov     b,r4
02BA 120000    1223            lcall   _sendstr1
02BD           1224   ;        main.c:293: getstr1(buff, sizeof(buff)-1);
02BD 751013    1225            mov     _getstr1_PARM_2,#0x13
02C0 9044D0    1226            mov     dptr,#_buff
02C3 75F040    1227            mov     b,#0x40
02C6 120000    1228            lcall   _getstr1
02C9           1229   ;        main.c:294: waitms(10);
02C9 90000A    1230            mov     dptr,#0x000A
02CC 120000    1231            lcall   _waitms
02CF           1232   ;        main.c:295: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1233            setb    _P2_0
02D1           1234   ;        main.c:296: printf("Response: %s\r\n", buff);
02D1 74D0      1235            mov     a,#_buff
02D3 C0E0      1236            push    acc
02D5 7444      1237            mov     a,#(_buff >> 8)
02D7 C0E0      1238            push    acc
02D9 7440      1239            mov     a,#0x40
02DB C0E0      1240            push    acc
02DD 7430      1241            mov     a,#__str_1
02DF C0E0      1242            push    acc
02E1 74BF      1243            mov     a,#(__str_1 >> 8)
02E3 C0E0      1244            push    acc
02E5 7480      1245            mov     a,#0x80
02E7 C0E0      1246            push    acc
02E9 120000    1247            lcall   _printf
02EC E581      1248            mov     a,sp
02EE 24FA      1249            add     a,#0xfa
02F0 F581      1250            mov     sp,a
02F2 22        1251            ret
02F3           1252   ;------------------------------------------------------------
02F3           1253   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1254   ;------------------------------------------------------------
02F3           1255   ;------------------------------------------------------------
02F3           1256   ;        main.c:299: void ReceptionOff (void)
02F3           1257   ;        -----------------------------------------
02F3           1258   ;         function ReceptionOff
02F3           1259   ;        -----------------------------------------
02F3           1260   _ReceptionOff:
02F3           1261   ;        main.c:301: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1262            clr     _P2_0
02F5           1263   ;        main.c:302: waitms(10);
02F5 90000A    1264            mov     dptr,#0x000A
02F8 120000    1265            lcall   _waitms
02FB           1266   ;        main.c:303: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90BF70    1267            mov     dptr,#__str_2
02FE 75F080    1268            mov     b,#0x80
0301 120000    1269            lcall   _sendstr1
0304           1270   ;        main.c:304: waitms(10);
0304 90000A    1271            mov     dptr,#0x000A
0307 120000    1272            lcall   _waitms
030A           1273   ;        main.c:306: SCON1&=0b_0011_1111;
030A 53C83F    1274            anl     _SCON1,#0x3F
030D           1275   ;        main.c:307: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1276            setb    _P2_0
030F 22        1277            ret
0310           1278   ;------------------------------------------------------------
0310           1279   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1280   ;------------------------------------------------------------
0310           1281   ;pin                       Allocated to registers r2 
0310           1282   ;mask                      Allocated to registers r3 
0310           1283   ;------------------------------------------------------------
0310           1284   ;        main.c:310: void Set_Pin_Output (unsigned char pin)
0310           1285   ;        -----------------------------------------
0310           1286   ;         function Set_Pin_Output
0310           1287   ;        -----------------------------------------
0310           1288   _Set_Pin_Output:
0310 AA82      1289            mov     r2,dpl
0312           1290   ;        main.c:314: mask=(1<<(pin&0x7));
0312 7407      1291            mov     a,#0x07
0314 5A        1292            anl     a,r2
0315 F5F0      1293            mov     b,a
0317 05F0      1294            inc     b
0319 7401      1295            mov     a,#0x01
031B 8000      1296            sjmp    L015011?
031D           1297   L015009?:
031D 25E0      1298            add     a,acc
031F           1299   L015011?:
031F D5F0F0    1300            djnz    b,L015009?
0322 FB        1301            mov     r3,a
0323           1302   ;        main.c:315: switch(pin/0x10)
0323 EA        1303            mov     a,r2
0324 C4        1304            swap    a
0325 540F      1305            anl     a,#0x0f
0327 FA        1306            mov  r2,a
0328 24FC      1307            add     a,#0xff - 0x03
032A 4000      1308            jc      L015006?
032C EA        1309            mov     a,r2
032D 2A        1310            add     a,r2
032E 2A        1311            add     a,r2
032F 90C070    1312            mov     dptr,#L015013?
0332 73        1313            jmp     @a+dptr
0333           1314   L015013?:
0333 020000    1315            ljmp    L015001?
0336 020000    1316            ljmp    L015002?
0339 020000    1317            ljmp    L015003?
033C 020000    1318            ljmp    L015004?
033F           1319   ;        main.c:317: case 0: P0MDOUT |= mask; break;
033F           1320   L015001?:
033F EB        1321            mov     a,r3
0340 42A4      1322            orl     _P0MDOUT,a
0342           1323   ;        main.c:318: case 1: P1MDOUT |= mask; break;
0342 22        1324            ret
0343           1325   L015002?:
0343 EB        1326            mov     a,r3
0344 42A5      1327            orl     _P1MDOUT,a
0346           1328   ;        main.c:319: case 2: P2MDOUT |= mask; break; 
0346 22        1329            ret
0347           1330   L015003?:
0347 EB        1331            mov     a,r3
0348 42A6      1332            orl     _P2MDOUT,a
034A           1333   ;        main.c:320: case 3: P3MDOUT |= mask; break; 
034A 22        1334            ret
034B           1335   L015004?:
034B EB        1336            mov     a,r3
034C 429C      1337            orl     _P3MDOUT,a
034E           1338   ;        main.c:321: }   
034E           1339   L015006?:
034E 22        1340            ret
034F           1341   ;------------------------------------------------------------
034F           1342   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1343   ;------------------------------------------------------------
034F           1344   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1345   ;pin                       Allocated to registers r2 
034F           1346   ;------------------------------------------------------------
034F           1347   ;        main.c:324: void Set_Pin_Input (unsigned char pin)
034F           1348   ;        -----------------------------------------
034F           1349   ;         function Set_Pin_Input
034F           1350   ;        -----------------------------------------
034F           1351   _Set_Pin_Input:
034F AA82      1352            mov     r2,dpl
0351           1353   ;        main.c:328: mask=(1<<(pin&0x7));
0351 7407      1354            mov     a,#0x07
0353 5A        1355            anl     a,r2
0354 F5F0      1356            mov     b,a
0356 05F0      1357            inc     b
0358 7401      1358            mov     a,#0x01
035A 8000      1359            sjmp    L016011?
035C           1360   L016009?:
035C 25E0      1361            add     a,acc
035E           1362   L016011?:
035E D5F0F0    1363            djnz    b,L016009?
0361           1364   ;        main.c:329: mask=~mask;
0361 F4        1365            cpl     a
0362 FB        1366            mov     r3,a
0363           1367   ;        main.c:330: switch(pin/0x10)
0363 EA        1368            mov     a,r2
0364 C4        1369            swap    a
0365 540F      1370            anl     a,#0x0f
0367 FA        1371            mov  r2,a
0368 24FC      1372            add     a,#0xff - 0x03
036A 4000      1373            jc      L016006?
036C EA        1374            mov     a,r2
036D 2A        1375            add     a,r2
036E 2A        1376            add     a,r2
036F 90C270    1377            mov     dptr,#L016013?
0372 73        1378            jmp     @a+dptr
0373           1379   L016013?:
0373 020000    1380            ljmp    L016001?
0376 020000    1381            ljmp    L016002?
0379 020000    1382            ljmp    L016003?
037C 020000    1383            ljmp    L016004?
037F           1384   ;        main.c:332: case 0: P0MDOUT &= mask; break;
037F           1385   L016001?:
037F EB        1386            mov     a,r3
0380 52A4      1387            anl     _P0MDOUT,a
0382           1388   ;        main.c:333: case 1: P1MDOUT &= mask; break;
0382 22        1389            ret
0383           1390   L016002?:
0383 EB        1391            mov     a,r3
0384 52A5      1392            anl     _P1MDOUT,a
0386           1393   ;        main.c:334: case 2: P2MDOUT &= mask; break; 
0386 22        1394            ret
0387           1395   L016003?:
0387 EB        1396            mov     a,r3
0388 52A6      1397            anl     _P2MDOUT,a
038A           1398   ;        main.c:335: case 3: P3MDOUT &= mask; break; 
038A 22        1399            ret
038B           1400   L016004?:
038B EB        1401            mov     a,r3
038C 529C      1402            anl     _P3MDOUT,a
038E           1403   ;        main.c:336: }   
038E           1404   L016006?:
038E 22        1405            ret
038F           1406   ;------------------------------------------------------------
038F           1407   ;Allocation info for local variables in function 'InitADC'
038F           1408   ;------------------------------------------------------------
038F           1409   ;------------------------------------------------------------
038F           1410   ;        main.c:339: void InitADC (void)
038F           1411   ;        -----------------------------------------
038F           1412   ;         function InitADC
038F           1413   ;        -----------------------------------------
038F           1414   _InitADC:
038F           1415   ;        main.c:341: SFRPAGE = 0x00;
038F 75A700    1416            mov     _SFRPAGE,#0x00
0392           1417   ;        main.c:342: ADEN=0; // Disable ADC
0392 C2EF      1418            clr     _ADEN
0394           1419   ;        main.c:347: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1420            mov     _ADC0CN1,#0x80
0397           1421   ;        main.c:351: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1422            mov     _ADC0CF0,#0x20
039A           1423   ;        main.c:355: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1424            mov     _ADC0CF1,#0x1E
039D           1425   ;        main.c:364: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1426            mov     _ADC0CN0,#0x00
03A0           1427   ;        main.c:369: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1428            mov     _ADC0CF2,#0x3F
03A3           1429   ;        main.c:373: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1430            mov     _ADC0CN2,#0x00
03A6           1431   ;        main.c:375: ADEN=1; // Enable ADC
03A6 D2EF      1432            setb    _ADEN
03A8 22        1433            ret
03A9           1434   ;------------------------------------------------------------
03A9           1435   ;Allocation info for local variables in function 'InitPinADC'
03A9           1436   ;------------------------------------------------------------
03A9           1437   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1438   ;portno                    Allocated to registers r2 
03A9           1439   ;mask                      Allocated to registers r3 
03A9           1440   ;------------------------------------------------------------
03A9           1441   ;        main.c:378: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1442   ;        -----------------------------------------
03A9           1443   ;         function InitPinADC
03A9           1444   ;        -----------------------------------------
03A9           1445   _InitPinADC:
03A9 AA82      1446            mov     r2,dpl
03AB           1447   ;        main.c:382: mask=1<<pin_num;
03AB 8588F0    1448            mov     b,_InitPinADC_PARM_2
03AE 05F0      1449            inc     b
03B0 7401      1450            mov     a,#0x01
03B2 8000      1451            sjmp    L018013?
03B4           1452   L018011?:
03B4 25E0      1453            add     a,acc
03B6           1454   L018013?:
03B6 D5F0F0    1455            djnz    b,L018011?
03B9 FB        1456            mov     r3,a
03BA           1457   ;        main.c:384: SFRPAGE = 0x20;
03BA 75A720    1458            mov     _SFRPAGE,#0x20
03BD           1459   ;        main.c:385: switch (portno)
03BD BA0030    1460            cjne    r2,#0x00,L018014?
03C0 8000      1461            sjmp    L018001?
03C2           1462   L018014?:
03C2 BA01B0    1463            cjne    r2,#0x01,L018015?
03C5 8000      1464            sjmp    L018002?
03C7           1465   L018015?:
03C7           1466   ;        main.c:387: case 0:
03C7 BA0230    1467            cjne    r2,#0x02,L018005?
03CA 8000      1468            sjmp    L018003?
03CC           1469   L018001?:
03CC           1470   ;        main.c:388: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1471            mov     a,r3
03CD F4        1472            cpl     a
03CE FA        1473            mov     r2,a
03CF 52F1      1474            anl     _P0MDIN,a
03D1           1475   ;        main.c:389: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1476            mov     a,r3
03D2 42D4      1477            orl     _P0SKIP,a
03D4           1478   ;        main.c:390: break;
03D4           1479   ;        main.c:391: case 1:
03D4 8000      1480            sjmp    L018005?
03D6           1481   L018002?:
03D6           1482   ;        main.c:392: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1483            mov     a,r3
03D7 F4        1484            cpl     a
03D8 FA        1485            mov     r2,a
03D9 52F2      1486            anl     _P1MDIN,a
03DB           1487   ;        main.c:393: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1488            mov     a,r3
03DC 42D5      1489            orl     _P1SKIP,a
03DE           1490   ;        main.c:394: break;
03DE           1491   ;        main.c:395: case 2:
03DE 8000      1492            sjmp    L018005?
03E0           1493   L018003?:
03E0           1494   ;        main.c:396: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1495            mov     a,r3
03E1 F4        1496            cpl     a
03E2 FA        1497            mov     r2,a
03E3 52F3      1498            anl     _P2MDIN,a
03E5           1499   ;        main.c:397: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1500            mov     a,r3
03E6 42CC      1501            orl     _P2SKIP,a
03E8           1502   ;        main.c:401: }
03E8           1503   L018005?:
03E8           1504   ;        main.c:402: SFRPAGE = 0x00;
03E8 75A700    1505            mov     _SFRPAGE,#0x00
03EB 22        1506            ret
03EC           1507   ;------------------------------------------------------------
03EC           1508   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1509   ;------------------------------------------------------------
03EC           1510   ;pin                       Allocated to registers 
03EC           1511   ;------------------------------------------------------------
03EC           1512   ;        main.c:405: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1513   ;        -----------------------------------------
03EC           1514   ;         function ADC_at_Pin
03EC           1515   ;        -----------------------------------------
03EC           1516   _ADC_at_Pin:
03EC 8582BB    1517            mov     _ADC0MX,dpl
03EF           1518   ;        main.c:408: ADINT = 0;
03EF C2ED      1519            clr     _ADINT
03F1           1520   ;        main.c:409: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1521            setb    _ADBUSY
03F3           1522   ;        main.c:410: while (!ADINT); // Wait for conversion to complete
03F3           1523   L019001?:
03F3 30EDB0    1524            jnb     _ADINT,L019001?
03F6           1525   ;        main.c:411: return (ADC0);
03F6 85BD82    1526            mov     dpl,_ADC0
03F9 85BE83    1527            mov     dph,(_ADC0 >> 8)
03FC 22        1528            ret
03FD           1529   ;------------------------------------------------------------
03FD           1530   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1531   ;------------------------------------------------------------
03FD           1532   ;------------------------------------------------------------
03FD           1533   ;        main.c:414: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1534   ;        -----------------------------------------
03FD           1535   ;         function Timer5_ISR
03FD           1536   ;        -----------------------------------------
03FD           1537   _Timer5_ISR:
03FD C0E0      1538            push    acc
03FF C002      1539            push    ar2
0401 C003      1540            push    ar3
0403 C0D0      1541            push    psw
0405 75D000    1542            mov     psw,#0x00
0408           1543   ;        main.c:416: SFRPAGE=0x10;
0408 75A710    1544            mov     _SFRPAGE,#0x10
040B           1545   ;        main.c:417: TF5H = 0; // Clear Timer5 interrupt flag
040B C2C7      1546            clr     _TF5H
040D           1547   ;        main.c:418: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
040D 75D2C4    1548            mov     _TMR5RL,#0xC4
0410 75D3FF    1549            mov     (_TMR5RL >> 8),#0xFF
0413           1550   ;        main.c:420: pwm_counter++; 
0413 0510      1551            inc     _pwm_counter
0415 E4        1552            clr     a
0416 B51030    1553            cjne    a,_pwm_counter,L020031?
0419 0511      1554            inc     (_pwm_counter + 1)
041B           1555   L020031?:
041B           1556   ;        main.c:421: if (pwm_counter == 100){
041B 7464      1557            mov     a,#0x64
041D B51070    1558            cjne    a,_pwm_counter,L020032?
0420 E4        1559            clr     a
0421 B51170    1560            cjne    a,(_pwm_counter + 1),L020032?
0424 8000      1561            sjmp    L020033?
0426           1562   L020032?:
0426 8000      1563            sjmp    L020002?
0428           1564   L020033?:
0428           1565   ;        main.c:422: pwm_counter = 0; 
0428 E4        1566            clr     a
0429 F510      1567            mov     _pwm_counter,a
042B F511      1568            mov     (_pwm_counter + 1),a
042D           1569   L020002?:
042D           1570   ;        main.c:425: if (pwm_left > pwm_counter){
042D AA90      1571            mov     r2,_pwm_left
042F 7B00      1572            mov     r3,#0x00
0431 C3        1573            clr     c
0432 E510      1574            mov     a,_pwm_counter
0434 9A        1575            subb    a,r2
0435 E511      1576            mov     a,(_pwm_counter + 1)
0437 9B        1577            subb    a,r3
0438 5000      1578            jnc     L020007?
043A           1579   ;        main.c:426: if(L_motor_dir){
043A E510      1580            mov     a,_L_motor_dir
043C 6000      1581            jz      L020004?
043E           1582   ;        main.c:427: L_bridge_1 = 1; 
043E D2A1      1583            setb    _P2_1
0440           1584   ;        main.c:428: L_bridge_2 = 0; 
0440 C2A2      1585            clr     _P2_2
0442 8000      1586            sjmp    L020008?
0444           1587   L020004?:
0444           1588   ;        main.c:431: L_bridge_1 = 0; 
0444 C2A1      1589            clr     _P2_1
0446           1590   ;        main.c:432: L_bridge_2 = 1; 
0446 D2A2      1591            setb    _P2_2
0448 8000      1592            sjmp    L020008?
044A           1593   L020007?:
044A           1594   ;        main.c:436: L_bridge_1 = 0; 
044A C2A1      1595            clr     _P2_1
044C           1596   ;        main.c:437: L_bridge_2 = 0; 
044C C2A2      1597            clr     _P2_2
044E           1598   L020008?:
044E           1599   ;        main.c:439: if (pwm_right > pwm_counter){
044E AA50      1600            mov     r2,_pwm_right
0450 7B00      1601            mov     r3,#0x00
0452 C3        1602            clr     c
0453 E510      1603            mov     a,_pwm_counter
0455 9A        1604            subb    a,r2
0456 E511      1605            mov     a,(_pwm_counter + 1)
0458 9B        1606            subb    a,r3
0459 5000      1607            jnc     L020013?
045B           1608   ;        main.c:440: if (R_motor_dir){
045B E5D0      1609            mov     a,_R_motor_dir
045D 6000      1610            jz      L020010?
045F           1611   ;        main.c:441: R_bridge_1 = 1; 
045F D2A4      1612            setb    _P2_4
0461           1613   ;        main.c:442: R_bridge_2 = 0;
0461 C2A3      1614            clr     _P2_3
0463 8000      1615            sjmp    L020014?
0465           1616   L020010?:
0465           1617   ;        main.c:445: R_bridge_1 = 0; 
0465 C2A4      1618            clr     _P2_4
0467           1619   ;        main.c:446: R_bridge_2 = 1;
0467 D2A3      1620            setb    _P2_3
0469 8000      1621            sjmp    L020014?
046B           1622   L020013?:
046B           1623   ;        main.c:450: R_bridge_1 = 0; 
046B C2A4      1624            clr     _P2_4
046D           1625   ;        main.c:451: R_bridge_2 = 0; 
046D C2A3      1626            clr     _P2_3
046F           1627   L020014?:
046F           1628   ;        main.c:454: servo_counter++;
046F 05D0      1629            inc     _servo_counter
0471 E4        1630            clr     a
0472 B5D0B0    1631            cjne    a,_servo_counter,L020038?
0475 05D1      1632            inc     (_servo_counter + 1)
0477           1633   L020038?:
0477           1634   ;        main.c:455: if(servo_counter==2000)
0477 74D0      1635            mov     a,#0xD0
0479 B5D0F0    1636            cjne    a,_servo_counter,L020016?
047C 7407      1637            mov     a,#0x07
047E B5D1F0    1638            cjne    a,(_servo_counter + 1),L020016?
0481           1639   ;        main.c:457: servo_counter=0;
0481 E4        1640            clr     a
0482 F5D0      1641            mov     _servo_counter,a
0484 F5D1      1642            mov     (_servo_counter + 1),a
0486           1643   ;        main.c:458: Servo_arm=1;
0486 D297      1644            setb    _P1_7
0488           1645   ;        main.c:459: Servo_base=1;
0488 D296      1646            setb    _P1_6
048A           1647   L020016?:
048A           1648   ;        main.c:461: if(servo_arm==servo_counter)
048A AA50      1649            mov     r2,_servo_arm
048C 7B00      1650            mov     r3,#0x00
048E EA        1651            mov     a,r2
048F B5D030    1652            cjne    a,_servo_counter,L020018?
0492 EB        1653            mov     a,r3
0493 B5D130    1654            cjne    a,(_servo_counter + 1),L020018?
0496           1655   ;        main.c:463: Servo_arm=0;
0496 C297      1656            clr     _P1_7
0498           1657   L020018?:
0498           1658   ;        main.c:465: if(servo_base==servo_counter)
0498 AA90      1659            mov     r2,_servo_base
049A 7B00      1660            mov     r3,#0x00
049C EA        1661            mov     a,r2
049D B5D070    1662            cjne    a,_servo_counter,L020021?
04A0 EB        1663            mov     a,r3
04A1 B5D170    1664            cjne    a,(_servo_counter + 1),L020021?
04A4           1665   ;        main.c:467: Servo_base=0;
04A4 C296      1666            clr     _P1_6
04A6           1667   L020021?:
04A6 D0D0      1668            pop     psw
04A8 D003      1669            pop     ar3
04AA D002      1670            pop     ar2
04AC D0E0      1671            pop     acc
04AE 32        1672            reti
04AF           1673   ;        eliminated unneeded push/pop dpl
04AF           1674   ;        eliminated unneeded push/pop dph
04AF           1675   ;        eliminated unneeded push/pop b
04AF           1676   ;------------------------------------------------------------
04AF           1677   ;Allocation info for local variables in function 'MoveForward'
04AF           1678   ;------------------------------------------------------------
04AF           1679   ;speed                     Allocated to registers r2 r3 
04AF           1680   ;------------------------------------------------------------
04AF           1681   ;        main.c:471: void MoveForward (int speed)
04AF           1682   ;        -----------------------------------------
04AF           1683   ;         function MoveForward
04AF           1684   ;        -----------------------------------------
04AF           1685   _MoveForward:
04AF AA82      1686            mov     r2,dpl
04B1           1687   ;        main.c:473: pwm_left = speed; 
04B1 8A90      1688            mov     _pwm_left,r2
04B3           1689   ;        main.c:474: pwm_right = speed; 
04B3 8A50      1690            mov     _pwm_right,r2
04B5           1691   ;        main.c:475: L_motor_dir = 0; 
04B5 751000    1692            mov     _L_motor_dir,#0x00
04B8           1693   ;        main.c:476: R_motor_dir = 0; 
04B8 75D000    1694            mov     _R_motor_dir,#0x00
04BB 22        1695            ret
04BC           1696   ;------------------------------------------------------------
04BC           1697   ;Allocation info for local variables in function 'MoveBackward'
04BC           1698   ;------------------------------------------------------------
04BC           1699   ;speed                     Allocated to registers r2 r3 
04BC           1700   ;------------------------------------------------------------
04BC           1701   ;        main.c:479: void MoveBackward (int speed)
04BC           1702   ;        -----------------------------------------
04BC           1703   ;         function MoveBackward
04BC           1704   ;        -----------------------------------------
04BC           1705   _MoveBackward:
04BC AA82      1706            mov     r2,dpl
04BE           1707   ;        main.c:481: pwm_left = speed; 
04BE 8A90      1708            mov     _pwm_left,r2
04C0           1709   ;        main.c:482: pwm_right = speed; 
04C0 8A50      1710            mov     _pwm_right,r2
04C2           1711   ;        main.c:483: L_motor_dir = 1; 
04C2 751001    1712            mov     _L_motor_dir,#0x01
04C5           1713   ;        main.c:484: R_motor_dir = 1;  
04C5 75D001    1714            mov     _R_motor_dir,#0x01
04C8 22        1715            ret
04C9           1716   ;------------------------------------------------------------
04C9           1717   ;Allocation info for local variables in function 'TurnRight'
04C9           1718   ;------------------------------------------------------------
04C9           1719   ;speed                     Allocated to registers r2 r3 
04C9           1720   ;------------------------------------------------------------
04C9           1721   ;        main.c:487: void TurnRight (int speed)
04C9           1722   ;        -----------------------------------------
04C9           1723   ;         function TurnRight
04C9           1724   ;        -----------------------------------------
04C9           1725   _TurnRight:
04C9 AA82      1726            mov     r2,dpl
04CB           1727   ;        main.c:489: pwm_left = speed; 
04CB 8A90      1728            mov     _pwm_left,r2
04CD           1729   ;        main.c:490: pwm_right = speed; 
04CD 8A50      1730            mov     _pwm_right,r2
04CF           1731   ;        main.c:491: L_motor_dir = 1; 
04CF 751001    1732            mov     _L_motor_dir,#0x01
04D2           1733   ;        main.c:492: R_motor_dir = 0; 
04D2 75D000    1734            mov     _R_motor_dir,#0x00
04D5 22        1735            ret
04D6           1736   ;------------------------------------------------------------
04D6           1737   ;Allocation info for local variables in function 'TurnLeft'
04D6           1738   ;------------------------------------------------------------
04D6           1739   ;speed                     Allocated to registers r2 r3 
04D6           1740   ;------------------------------------------------------------
04D6           1741   ;        main.c:495: void TurnLeft (int speed)
04D6           1742   ;        -----------------------------------------
04D6           1743   ;         function TurnLeft
04D6           1744   ;        -----------------------------------------
04D6           1745   _TurnLeft:
04D6 AA82      1746            mov     r2,dpl
04D8           1747   ;        main.c:497: pwm_left = speed; 
04D8 8A90      1748            mov     _pwm_left,r2
04DA           1749   ;        main.c:498: pwm_right = speed; 
04DA 8A50      1750            mov     _pwm_right,r2
04DC           1751   ;        main.c:499: L_motor_dir = 0; 
04DC 751000    1752            mov     _L_motor_dir,#0x00
04DF           1753   ;        main.c:500: R_motor_dir = 1; 
04DF 75D001    1754            mov     _R_motor_dir,#0x01
04E2 22        1755            ret
04E3           1756   ;------------------------------------------------------------
04E3           1757   ;Allocation info for local variables in function 'main'
04E3           1758   ;------------------------------------------------------------
04E3           1759   ;cnt                       Allocated to registers 
04E3           1760   ;c                         Allocated to registers r4 
04E3           1761   ;vx                        Allocated with name '_main_vx_1_133'
04E3           1762   ;vy                        Allocated with name '_main_vy_1_133'
04E3           1763   ;threshold                 Allocated to registers 
04E3           1764   ;motor_pwm                 Allocated with name '_main_motor_pwm_1_133'
04E3           1765   ;sloc0                     Allocated with name '_main_sloc0_1_0'
04E3           1766   ;------------------------------------------------------------
04E3           1767   ;        main.c:503: void main (void)
04E3           1768   ;        -----------------------------------------
04E3           1769   ;         function main
04E3           1770   ;        -----------------------------------------
04E3           1771   _main:
04E3           1772   ;        main.c:507: int vx = 0, vy = 0; 
04E3 E4        1773            clr     a
04E4 F510      1774            mov     _main_vx_1_133,a
04E6 F511      1775            mov     (_main_vx_1_133 + 1),a
04E8 F550      1776            mov     _main_vy_1_133,a
04EA F551      1777            mov     (_main_vy_1_133 + 1),a
04EC           1778   ;        main.c:511: Set_Pin_Output(0x24);
04EC 758224    1779            mov     dpl,#0x24
04EF 120000    1780            lcall   _Set_Pin_Output
04F2           1781   ;        main.c:512: Set_Pin_Output(0x23);
04F2 758223    1782            mov     dpl,#0x23
04F5 120000    1783            lcall   _Set_Pin_Output
04F8           1784   ;        main.c:513: Set_Pin_Output(0x22);
04F8 758222    1785            mov     dpl,#0x22
04FB 120000    1786            lcall   _Set_Pin_Output
04FE           1787   ;        main.c:514: Set_Pin_Output(0x21);
04FE 758221    1788            mov     dpl,#0x21
0501 120000    1789            lcall   _Set_Pin_Output
0504           1790   ;        main.c:515: Set_Pin_Output(0x17);
0504 758217    1791            mov     dpl,#0x17
0507 120000    1792            lcall   _Set_Pin_Output
050A           1793   ;        main.c:516: Set_Pin_Output(0x16);
050A 758216    1794            mov     dpl,#0x16
050D 120000    1795            lcall   _Set_Pin_Output
0510           1796   ;        main.c:518: waitms(500);
0510 9001F4    1797            mov     dptr,#0x01F4
0513 120000    1798            lcall   _waitms
0516           1799   ;        main.c:519: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0516 74B0      1800            mov     a,#__str_3
0518 C0E0      1801            push    acc
051A 74C9      1802            mov     a,#(__str_3 >> 8)
051C C0E0      1803            push    acc
051E 7480      1804            mov     a,#0x80
0520 C0E0      1805            push    acc
0522 120000    1806            lcall   _printf
0525 1581      1807            dec     sp
0527 1581      1808            dec     sp
0529 1581      1809            dec     sp
052B           1810   ;        main.c:520: UART1_Init(9600);
052B 902580    1811            mov     dptr,#0x2580
052E E4        1812            clr     a
052F F5F0      1813            mov     b,a
0531 120000    1814            lcall   _UART1_Init
0534           1815   ;        main.c:522: ReceptionOff();
0534 120000    1816            lcall   _ReceptionOff
0537           1817   ;        main.c:525: SendATCommand("AT+VER\r\n");
0537 90C9F0    1818            mov     dptr,#__str_4
053A 75F080    1819            mov     b,#0x80
053D 120000    1820            lcall   _SendATCommand
0540           1821   ;        main.c:526: SendATCommand("AT+BAUD\r\n");
0540 90CA30    1822            mov     dptr,#__str_5
0543 75F080    1823            mov     b,#0x80
0546 120000    1824            lcall   _SendATCommand
0549           1825   ;        main.c:527: SendATCommand("AT+RFID\r\n");
0549 90CA70    1826            mov     dptr,#__str_6
054C 75F080    1827            mov     b,#0x80
054F 120000    1828            lcall   _SendATCommand
0552           1829   ;        main.c:528: SendATCommand("AT+DVID\r\n");
0552 90CAB0    1830            mov     dptr,#__str_7
0555 75F080    1831            mov     b,#0x80
0558 120000    1832            lcall   _SendATCommand
055B           1833   ;        main.c:529: SendATCommand("AT+RFC\r\n");
055B 90CAF0    1834            mov     dptr,#__str_8
055E 75F080    1835            mov     b,#0x80
0561 120000    1836            lcall   _SendATCommand
0564           1837   ;        main.c:530: SendATCommand("AT+POWE\r\n");
0564 90CB30    1838            mov     dptr,#__str_9
0567 75F080    1839            mov     b,#0x80
056A 120000    1840            lcall   _SendATCommand
056D           1841   ;        main.c:531: SendATCommand("AT+CLSS\r\n");
056D 90CB70    1842            mov     dptr,#__str_10
0570 75F080    1843            mov     b,#0x80
0573 120000    1844            lcall   _SendATCommand
0576           1845   ;        main.c:532: SendATCommand("AT+DVIDEFEF\r\n");  
0576 90CBB0    1846            mov     dptr,#__str_11
0579 75F080    1847            mov     b,#0x80
057C 120000    1848            lcall   _SendATCommand
057F           1849   ;        main.c:535: L_bridge_1 = 0; 
057F C2A1      1850            clr     _P2_1
0581           1851   ;        main.c:536: L_bridge_2 = 0; 
0581 C2A2      1852            clr     _P2_2
0583           1853   ;        main.c:537: R_bridge_1 = 0; 
0583 C2A4      1854            clr     _P2_4
0585           1855   ;        main.c:538: R_bridge_2 = 0; 
0585 C2A3      1856            clr     _P2_3
0587           1857   ;        main.c:541: while(1)
0587 7A00      1858            mov     r2,#0x00
0589 7B00      1859            mov     r3,#0x00
058B           1860   L025022?:
058B           1861   ;        main.c:545: if(RXU1()) // Something has arrived
058B C002      1862            push    ar2
058D C003      1863            push    ar3
058F 120000    1864            lcall   _RXU1
0592 E4        1865            clr     a
0593 33        1866            rlc     a
0594 D003      1867            pop     ar3
0596 D002      1868            pop     ar2
0598 6000      1869            jz      L025022?
059A           1870   ;        main.c:547: c=getchar1();
059A C002      1871            push    ar2
059C C003      1872            push    ar3
059E 120000    1873            lcall   _getchar1
05A1 AC82      1874            mov     r4,dpl
05A3 D003      1875            pop     ar3
05A5 D002      1876            pop     ar2
05A7           1877   ;        main.c:549: if(c=='!') // Master is sending message
05A7 BC2130    1878            cjne    r4,#0x21,L025036?
05AA 8000      1879            sjmp    L025037?
05AC           1880   L025036?:
05AC 020000    1881            ljmp    L025017?
05AF           1882   L025037?:
05AF           1883   ;        main.c:551: getstr1(buff, sizeof(buff)-1);
05AF 751013    1884            mov     _getstr1_PARM_2,#0x13
05B2 9044D0    1885            mov     dptr,#_buff
05B5 75F040    1886            mov     b,#0x40
05B8 C002      1887            push    ar2
05BA C003      1888            push    ar3
05BC 120000    1889            lcall   _getstr1
05BF           1890   ;        main.c:552: if(strlen(buff)==7)
05BF 9044D0    1891            mov     dptr,#_buff
05C2 75F040    1892            mov     b,#0x40
05C5 120000    1893            lcall   _strlen
05C8 AD82      1894            mov     r5,dpl
05CA AE83      1895            mov     r6,dph
05CC D003      1896            pop     ar3
05CE D002      1897            pop     ar2
05D0 BD0730    1898            cjne    r5,#0x07,L025038?
05D3 BE0030    1899            cjne    r6,#0x00,L025038?
05D6 8000      1900            sjmp    L025039?
05D8           1901   L025038?:
05D8 020000    1902            ljmp    L025012?
05DB           1903   L025039?:
05DB           1904   ;        main.c:556: sscanf(buff, "%03d,%03d", &vx, &vy);
05DB C002      1905            push    ar2
05DD C003      1906            push    ar3
05DF 7450      1907            mov     a,#_main_vy_1_133
05E1 C0E0      1908            push    acc
05E3 74B4      1909            mov     a,#(_main_vy_1_133 >> 8)
05E5 C0E0      1910            push    acc
05E7 7440      1911            mov     a,#0x40
05E9 C0E0      1912            push    acc
05EB 7410      1913            mov     a,#_main_vx_1_133
05ED C0E0      1914            push    acc
05EF 74B4      1915            mov     a,#(_main_vx_1_133 >> 8)
05F1 C0E0      1916            push    acc
05F3 7440      1917            mov     a,#0x40
05F5 C0E0      1918            push    acc
05F7 74F0      1919            mov     a,#__str_12
05F9 C0E0      1920            push    acc
05FB 74CD      1921            mov     a,#(__str_12 >> 8)
05FD C0E0      1922            push    acc
05FF 7480      1923            mov     a,#0x80
0601 C0E0      1924            push    acc
0603 74D0      1925            mov     a,#_buff
0605 C0E0      1926            push    acc
0607 7444      1927            mov     a,#(_buff >> 8)
0609 C0E0      1928            push    acc
060B 7440      1929            mov     a,#0x40
060D C0E0      1930            push    acc
060F 120000    1931            lcall   _sscanf
0612 E581      1932            mov     a,sp
0614 24F4      1933            add     a,#0xf4
0616 F581      1934            mov     sp,a
0618           1935   ;        main.c:558: printf("Joystick Received: Vx = %03d, Vy = %03d\r\n", vx, vy);
0618 C050      1936            push    _main_vy_1_133
061A C051      1937            push    (_main_vy_1_133 + 1)
061C C010      1938            push    _main_vx_1_133
061E C011      1939            push    (_main_vx_1_133 + 1)
0620 7470      1940            mov     a,#__str_13
0622 C0E0      1941            push    acc
0624 74CE      1942            mov     a,#(__str_13 >> 8)
0626 C0E0      1943            push    acc
0628 7480      1944            mov     a,#0x80
062A C0E0      1945            push    acc
062C 120000    1946            lcall   _printf
062F E581      1947            mov     a,sp
0631 24F9      1948            add     a,#0xf9
0633 F581      1949            mov     sp,a
0635           1950   ;        main.c:560: if (vy > threshold){
0635 855082    1951            mov     dpl,_main_vy_1_133
0638 855183    1952            mov     dph,(_main_vy_1_133 + 1)
063B 120000    1953            lcall   ___sint2fs
063E 8582E0    1954            mov     _main_sloc0_1_0,dpl
0641 8583E1    1955            mov     (_main_sloc0_1_0 + 1),dph
0644 85F0E2    1956            mov     (_main_sloc0_1_0 + 2),b
0647 F5E3      1957            mov     (_main_sloc0_1_0 + 3),a
0649 E4        1958            clr     a
064A C0E0      1959            push    acc
064C C0E0      1960            push    acc
064E 7421      1961            mov     a,#0x21
0650 C0E0      1962            push    acc
0652 7443      1963            mov     a,#0x43
0654 C0E0      1964            push    acc
0656 85E082    1965            mov     dpl,_main_sloc0_1_0
0659 85E183    1966            mov     dph,(_main_sloc0_1_0 + 1)
065C 85E2F0    1967            mov     b,(_main_sloc0_1_0 + 2)
065F E5E3      1968            mov     a,(_main_sloc0_1_0 + 3)
0661 120000    1969            lcall   ___fsgt
0664 AD82      1970            mov     r5,dpl
0666 E581      1971            mov     a,sp
0668 24FC      1972            add     a,#0xfc
066A F581      1973            mov     sp,a
066C D003      1974            pop     ar3
066E D002      1975            pop     ar2
0670 ED        1976            mov     a,r5
0671 7000      1977            jnz     L025040?
0673 020000    1978            ljmp    L025004?
0676           1979   L025040?:
0676           1980   ;        main.c:561: motor_pwm = abs(vy - threshold) * 100 / threshold; 
0676 C002      1981            push    ar2
0678 C003      1982            push    ar3
067A C003      1983            push    ar3
067C E4        1984            clr     a
067D C0E0      1985            push    acc
067F C0E0      1986            push    acc
0681 7421      1987            mov     a,#0x21
0683 C0E0      1988            push    acc
0685 7443      1989            mov     a,#0x43
0687 C0E0      1990            push    acc
0689 85E082    1991            mov     dpl,_main_sloc0_1_0
068C 85E183    1992            mov     dph,(_main_sloc0_1_0 + 1)
068F 85E2F0    1993            mov     b,(_main_sloc0_1_0 + 2)
0692 E5E3      1994            mov     a,(_main_sloc0_1_0 + 3)
0694 120000    1995            lcall   ___fssub
0697 AD82      1996            mov     r5,dpl
0699 AE83      1997            mov     r6,dph
069B AFF0      1998            mov     r7,b
069D FA        1999            mov     r2,a
069E E581      2000            mov     a,sp
06A0 24FC      2001            add     a,#0xfc
06A2 F581      2002            mov     sp,a
06A4 D003      2003            pop     ar3
06A6 8D82      2004            mov     dpl,r5
06A8 8E83      2005            mov     dph,r6
06AA 8FF0      2006            mov     b,r7
06AC EA        2007            mov     a,r2
06AD C002      2008            push    ar2
06AF C003      2009            push    ar3
06B1 120000    2010            lcall   ___fs2sint
06B4 120000    2011            lcall   _abs
06B7 858200    2012            mov     __mulint_PARM_2,dpl
06BA 858301    2013            mov     (__mulint_PARM_2 + 1),dph
06BD D003      2014            pop     ar3
06BF D002      2015            pop     ar2
06C1 900064    2016            mov     dptr,#0x0064
06C4 120000    2017            lcall   __mulint
06C7 120000    2018            lcall   ___sint2fs
06CA AA82      2019            mov     r2,dpl
06CC AB83      2020            mov     r3,dph
06CE ADF0      2021            mov     r5,b
06D0 FE        2022            mov     r6,a
06D1 E4        2023            clr     a
06D2 C0E0      2024            push    acc
06D4 C0E0      2025            push    acc
06D6 7421      2026            mov     a,#0x21
06D8 C0E0      2027            push    acc
06DA 7443      2028            mov     a,#0x43
06DC C0E0      2029            push    acc
06DE 8A82      2030            mov     dpl,r2
06E0 8B83      2031            mov     dph,r3
06E2 8DF0      2032            mov     b,r5
06E4 EE        2033            mov     a,r6
06E5 120000    2034            lcall   ___fsdiv
06E8 AA82      2035            mov     r2,dpl
06EA AB83      2036            mov     r3,dph
06EC ADF0      2037            mov     r5,b
06EE FE        2038            mov     r6,a
06EF E581      2039            mov     a,sp
06F1 24FC      2040            add     a,#0xfc
06F3 F581      2041            mov     sp,a
06F5 8A82      2042            mov     dpl,r2
06F7 8B83      2043            mov     dph,r3
06F9 8DF0      2044            mov     b,r5
06FB EE        2045            mov     a,r6
06FC C002      2046            push    ar2
06FE C003      2047            push    ar3
0700 120000    2048            lcall   ___fs2sint
0703           2049   ;        main.c:562: MoveForward(motor_pwm);
0703 8582A0    2050            mov     _main_motor_pwm_1_133,dpl
0706 8583A1    2051            mov  (_main_motor_pwm_1_133 + 1),dph
0709 120000    2052            lcall   _MoveForward
070C D003      2053            pop     ar3
070E D002      2054            pop     ar2
0710 D003      2055            pop     ar3
0712 D002      2056            pop     ar2
0714 020000    2057            ljmp    L025005?
0717           2058   L025004?:
0717           2059   ;        main.c:564: else if (vy < threshold){
0717 C002      2060            push    ar2
0719 C003      2061            push    ar3
071B E4        2062            clr     a
071C C0E0      2063            push    acc
071E C0E0      2064            push    acc
0720 7421      2065            mov     a,#0x21
0722 C0E0      2066            push    acc
0724 7443      2067            mov     a,#0x43
0726 C0E0      2068            push    acc
0728 85E082    2069            mov     dpl,_main_sloc0_1_0
072B 85E183    2070            mov     dph,(_main_sloc0_1_0 + 1)
072E 85E2F0    2071            mov     b,(_main_sloc0_1_0 + 2)
0731 E5E3      2072            mov     a,(_main_sloc0_1_0 + 3)
0733 120000    2073            lcall   ___fslt
0736 AD82      2074            mov     r5,dpl
0738 E581      2075            mov     a,sp
073A 24FC      2076            add     a,#0xfc
073C F581      2077            mov     sp,a
073E D003      2078            pop     ar3
0740 D002      2079            pop     ar2
0742 ED        2080            mov     a,r5
0743 7000      2081            jnz     L025041?
0745 020000    2082            ljmp    L025005?
0748           2083   L025041?:
0748           2084   ;        main.c:565: motor_pwm = abs(threshold - vy) * 100 / threshold; 
0748 C002      2085            push    ar2
074A C003      2086            push    ar3
074C C003      2087            push    ar3
074E C0E0      2088            push    _main_sloc0_1_0
0750 C0E1      2089            push    (_main_sloc0_1_0 + 1)
0752 C0E2      2090            push    (_main_sloc0_1_0 + 2)
0754 C0E3      2091            push    (_main_sloc0_1_0 + 3)
0756 900000    2092            mov     dptr,#0x0000
0759 75F021    2093            mov     b,#0x21
075C 7443      2094            mov     a,#0x43
075E 120000    2095            lcall   ___fssub
0761 AD82      2096            mov     r5,dpl
0763 AE83      2097            mov     r6,dph
0765 AFF0      2098            mov     r7,b
0767 FA        2099            mov     r2,a
0768 E581      2100            mov     a,sp
076A 24FC      2101            add     a,#0xfc
076C F581      2102            mov     sp,a
076E D003      2103            pop     ar3
0770 8D82      2104            mov     dpl,r5
0772 8E83      2105            mov     dph,r6
0774 8FF0      2106            mov     b,r7
0776 EA        2107            mov     a,r2
0777 C002      2108            push    ar2
0779 C003      2109            push    ar3
077B 120000    2110            lcall   ___fs2sint
077E 120000    2111            lcall   _abs
0781 858200    2112            mov     __mulint_PARM_2,dpl
0784 858301    2113            mov     (__mulint_PARM_2 + 1),dph
0787 D003      2114            pop     ar3
0789 D002      2115            pop     ar2
078B 900064    2116            mov     dptr,#0x0064
078E 120000    2117            lcall   __mulint
0791 120000    2118            lcall   ___sint2fs
0794 AA82      2119            mov     r2,dpl
0796 AB83      2120            mov     r3,dph
0798 ADF0      2121            mov     r5,b
079A FE        2122            mov     r6,a
079B E4        2123            clr     a
079C C0E0      2124            push    acc
079E C0E0      2125            push    acc
07A0 7421      2126            mov     a,#0x21
07A2 C0E0      2127            push    acc
07A4 7443      2128            mov     a,#0x43
07A6 C0E0      2129            push    acc
07A8 8A82      2130            mov     dpl,r2
07AA 8B83      2131            mov     dph,r3
07AC 8DF0      2132            mov     b,r5
07AE EE        2133            mov     a,r6
07AF 120000    2134            lcall   ___fsdiv
07B2 AA82      2135            mov     r2,dpl
07B4 AB83      2136            mov     r3,dph
07B6 ADF0      2137            mov     r5,b
07B8 FE        2138            mov     r6,a
07B9 E581      2139            mov     a,sp
07BB 24FC      2140            add     a,#0xfc
07BD F581      2141            mov     sp,a
07BF 8A82      2142            mov     dpl,r2
07C1 8B83      2143            mov     dph,r3
07C3 8DF0      2144            mov     b,r5
07C5 EE        2145            mov     a,r6
07C6 C002      2146            push    ar2
07C8 C003      2147            push    ar3
07CA 120000    2148            lcall   ___fs2sint
07CD           2149   ;        main.c:566: MoveBackward(motor_pwm);
07CD 8582A0    2150            mov     _main_motor_pwm_1_133,dpl
07D0 8583A1    2151            mov  (_main_motor_pwm_1_133 + 1),dph
07D3 120000    2152            lcall   _MoveBackward
07D6 D003      2153            pop     ar3
07D8 D002      2154            pop     ar2
07DA           2155   ;        main.c:590: sendstr1(buff);
07DA D003      2156            pop     ar3
07DC D002      2157            pop     ar2
07DE           2158   ;        main.c:566: MoveBackward(motor_pwm);
07DE           2159   L025005?:
07DE           2160   ;        main.c:568: if(vx > threshold){
07DE 851082    2161            mov     dpl,_main_vx_1_133
07E1 851183    2162            mov     dph,(_main_vx_1_133 + 1)
07E4 C002      2163            push    ar2
07E6 C003      2164            push    ar3
07E8 120000    2165            lcall   ___sint2fs
07EB 8582E0    2166            mov     _main_sloc0_1_0,dpl
07EE 8583E1    2167            mov     (_main_sloc0_1_0 + 1),dph
07F1 85F0E2    2168            mov     (_main_sloc0_1_0 + 2),b
07F4 F5E3      2169            mov     (_main_sloc0_1_0 + 3),a
07F6 E4        2170            clr     a
07F7 C0E0      2171            push    acc
07F9 C0E0      2172            push    acc
07FB 7421      2173            mov     a,#0x21
07FD C0E0      2174            push    acc
07FF 7443      2175            mov     a,#0x43
0801 C0E0      2176            push    acc
0803 85E082    2177            mov     dpl,_main_sloc0_1_0
0806 85E183    2178            mov     dph,(_main_sloc0_1_0 + 1)
0809 85E2F0    2179            mov     b,(_main_sloc0_1_0 + 2)
080C E5E3      2180            mov     a,(_main_sloc0_1_0 + 3)
080E 120000    2181            lcall   ___fsgt
0811 AD82      2182            mov     r5,dpl
0813 E581      2183            mov     a,sp
0815 24FC      2184            add     a,#0xfc
0817 F581      2185            mov     sp,a
0819 D003      2186            pop     ar3
081B D002      2187            pop     ar2
081D ED        2188            mov     a,r5
081E 7000      2189            jnz     L025042?
0820 020000    2190            ljmp    L025009?
0823           2191   L025042?:
0823           2192   ;        main.c:569: motor_pwm = abs(vx - threshold) * 100 / threshold; 
0823 C002      2193            push    ar2
0825 C003      2194            push    ar3
0827 C003      2195            push    ar3
0829 E4        2196            clr     a
082A C0E0      2197            push    acc
082C C0E0      2198            push    acc
082E 7421      2199            mov     a,#0x21
0830 C0E0      2200            push    acc
0832 7443      2201            mov     a,#0x43
0834 C0E0      2202            push    acc
0836 85E082    2203            mov     dpl,_main_sloc0_1_0
0839 85E183    2204            mov     dph,(_main_sloc0_1_0 + 1)
083C 85E2F0    2205            mov     b,(_main_sloc0_1_0 + 2)
083F E5E3      2206            mov     a,(_main_sloc0_1_0 + 3)
0841 120000    2207            lcall   ___fssub
0844 AD82      2208            mov     r5,dpl
0846 AE83      2209            mov     r6,dph
0848 AFF0      2210            mov     r7,b
084A FA        2211            mov     r2,a
084B E581      2212            mov     a,sp
084D 24FC      2213            add     a,#0xfc
084F F581      2214            mov     sp,a
0851 D003      2215            pop     ar3
0853 8D82      2216            mov     dpl,r5
0855 8E83      2217            mov     dph,r6
0857 8FF0      2218            mov     b,r7
0859 EA        2219            mov     a,r2
085A C002      2220            push    ar2
085C C003      2221            push    ar3
085E 120000    2222            lcall   ___fs2sint
0861 120000    2223            lcall   _abs
0864 858200    2224            mov     __mulint_PARM_2,dpl
0867 858301    2225            mov     (__mulint_PARM_2 + 1),dph
086A D003      2226            pop     ar3
086C D002      2227            pop     ar2
086E 900064    2228            mov     dptr,#0x0064
0871 120000    2229            lcall   __mulint
0874 120000    2230            lcall   ___sint2fs
0877 AA82      2231            mov     r2,dpl
0879 AB83      2232            mov     r3,dph
087B ADF0      2233            mov     r5,b
087D FE        2234            mov     r6,a
087E E4        2235            clr     a
087F C0E0      2236            push    acc
0881 C0E0      2237            push    acc
0883 7421      2238            mov     a,#0x21
0885 C0E0      2239            push    acc
0887 7443      2240            mov     a,#0x43
0889 C0E0      2241            push    acc
088B 8A82      2242            mov     dpl,r2
088D 8B83      2243            mov     dph,r3
088F 8DF0      2244            mov     b,r5
0891 EE        2245            mov     a,r6
0892 120000    2246            lcall   ___fsdiv
0895 AA82      2247            mov     r2,dpl
0897 AB83      2248            mov     r3,dph
0899 ADF0      2249            mov     r5,b
089B FE        2250            mov     r6,a
089C E581      2251            mov     a,sp
089E 24FC      2252            add     a,#0xfc
08A0 F581      2253            mov     sp,a
08A2 8A82      2254            mov     dpl,r2
08A4 8B83      2255            mov     dph,r3
08A6 8DF0      2256            mov     b,r5
08A8 EE        2257            mov     a,r6
08A9 C002      2258            push    ar2
08AB C003      2259            push    ar3
08AD 120000    2260            lcall   ___fs2sint
08B0           2261   ;        main.c:570: TurnRight(motor_pwm);
08B0 8582A0    2262            mov     _main_motor_pwm_1_133,dpl
08B3 8583A1    2263            mov  (_main_motor_pwm_1_133 + 1),dph
08B6 120000    2264            lcall   _TurnRight
08B9 D003      2265            pop     ar3
08BB D002      2266            pop     ar2
08BD D003      2267            pop     ar3
08BF D002      2268            pop     ar2
08C1 020000    2269            ljmp    L025022?
08C4           2270   L025009?:
08C4           2271   ;        main.c:572: else if (vx < threshold){
08C4 C002      2272            push    ar2
08C6 C003      2273            push    ar3
08C8 E4        2274            clr     a
08C9 C0E0      2275            push    acc
08CB C0E0      2276            push    acc
08CD 7421      2277            mov     a,#0x21
08CF C0E0      2278            push    acc
08D1 7443      2279            mov     a,#0x43
08D3 C0E0      2280            push    acc
08D5 85E082    2281            mov     dpl,_main_sloc0_1_0
08D8 85E183    2282            mov     dph,(_main_sloc0_1_0 + 1)
08DB 85E2F0    2283            mov     b,(_main_sloc0_1_0 + 2)
08DE E5E3      2284            mov     a,(_main_sloc0_1_0 + 3)
08E0 120000    2285            lcall   ___fslt
08E3 AD82      2286            mov     r5,dpl
08E5 E581      2287            mov     a,sp
08E7 24FC      2288            add     a,#0xfc
08E9 F581      2289            mov     sp,a
08EB D003      2290            pop     ar3
08ED D002      2291            pop     ar2
08EF ED        2292            mov     a,r5
08F0 7000      2293            jnz     L025043?
08F2 020000    2294            ljmp    L025022?
08F5           2295   L025043?:
08F5           2296   ;        main.c:573: motor_pwm = abs(threshold - vx) * 100 / threshold; 
08F5 C002      2297            push    ar2
08F7 C003      2298            push    ar3
08F9 C003      2299            push    ar3
08FB C0E0      2300            push    _main_sloc0_1_0
08FD C0E1      2301            push    (_main_sloc0_1_0 + 1)
08FF C0E2      2302            push    (_main_sloc0_1_0 + 2)
0901 C0E3      2303            push    (_main_sloc0_1_0 + 3)
0903 900000    2304            mov     dptr,#0x0000
0906 75F021    2305            mov     b,#0x21
0909 7443      2306            mov     a,#0x43
090B 120000    2307            lcall   ___fssub
090E AD82      2308            mov     r5,dpl
0910 AE83      2309            mov     r6,dph
0912 AFF0      2310            mov     r7,b
0914 FA        2311            mov     r2,a
0915 E581      2312            mov     a,sp
0917 24FC      2313            add     a,#0xfc
0919 F581      2314            mov     sp,a
091B D003      2315            pop     ar3
091D 8D82      2316            mov     dpl,r5
091F 8E83      2317            mov     dph,r6
0921 8FF0      2318            mov     b,r7
0923 EA        2319            mov     a,r2
0924 C002      2320            push    ar2
0926 C003      2321            push    ar3
0928 120000    2322            lcall   ___fs2sint
092B 120000    2323            lcall   _abs
092E 858200    2324            mov     __mulint_PARM_2,dpl
0931 858301    2325            mov     (__mulint_PARM_2 + 1),dph
0934 D003      2326            pop     ar3
0936 D002      2327            pop     ar2
0938 900064    2328            mov     dptr,#0x0064
093B 120000    2329            lcall   __mulint
093E 120000    2330            lcall   ___sint2fs
0941 AA82      2331            mov     r2,dpl
0943 AB83      2332            mov     r3,dph
0945 ADF0      2333            mov     r5,b
0947 FE        2334            mov     r6,a
0948 E4        2335            clr     a
0949 C0E0      2336            push    acc
094B C0E0      2337            push    acc
094D 7421      2338            mov     a,#0x21
094F C0E0      2339            push    acc
0951 7443      2340            mov     a,#0x43
0953 C0E0      2341            push    acc
0955 8A82      2342            mov     dpl,r2
0957 8B83      2343            mov     dph,r3
0959 8DF0      2344            mov     b,r5
095B EE        2345            mov     a,r6
095C 120000    2346            lcall   ___fsdiv
095F AA82      2347            mov     r2,dpl
0961 AB83      2348            mov     r3,dph
0963 ADF0      2349            mov     r5,b
0965 FE        2350            mov     r6,a
0966 E581      2351            mov     a,sp
0968 24FC      2352            add     a,#0xfc
096A F581      2353            mov     sp,a
096C 8A82      2354            mov     dpl,r2
096E 8B83      2355            mov     dph,r3
0970 8DF0      2356            mov     b,r5
0972 EE        2357            mov     a,r6
0973 C002      2358            push    ar2
0975 C003      2359            push    ar3
0977 120000    2360            lcall   ___fs2sint
097A           2361   ;        main.c:574: TurnLeft(motor_pwm);
097A 8582A0    2362            mov     _main_motor_pwm_1_133,dpl
097D 8583A1    2363            mov  (_main_motor_pwm_1_133 + 1),dph
0980 120000    2364            lcall   _TurnLeft
0983 D003      2365            pop     ar3
0985 D002      2366            pop     ar2
0987 D003      2367            pop     ar3
0989 D002      2368            pop     ar2
098B 020000    2369            ljmp    L025022?
098E           2370   L025012?:
098E           2371   ;        main.c:579: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
098E 9044D0    2372            mov     dptr,#_buff
0991 75F040    2373            mov     b,#0x40
0994 C002      2374            push    ar2
0996 C003      2375            push    ar3
0998 120000    2376            lcall   _strlen
099B AD82      2377            mov     r5,dpl
099D AE83      2378            mov     r6,dph
099F C005      2379            push    ar5
09A1 C006      2380            push    ar6
09A3 74D0      2381            mov     a,#_buff
09A5 C0E0      2382            push    acc
09A7 7444      2383            mov     a,#(_buff >> 8)
09A9 C0E0      2384            push    acc
09AB 7440      2385            mov     a,#0x40
09AD C0E0      2386            push    acc
09AF 74B0      2387            mov     a,#__str_14
09B1 C0E0      2388            push    acc
09B3 74D2      2389            mov     a,#(__str_14 >> 8)
09B5 C0E0      2390            push    acc
09B7 7480      2391            mov     a,#0x80
09B9 C0E0      2392            push    acc
09BB 120000    2393            lcall   _printf
09BE E581      2394            mov     a,sp
09C0 24F8      2395            add     a,#0xf8
09C2 F581      2396            mov     sp,a
09C4 D003      2397            pop     ar3
09C6 D002      2398            pop     ar2
09C8 020000    2399            ljmp    L025022?
09CB           2400   L025017?:
09CB           2401   ;        main.c:585: else if(c=='@') // Master wants slave data
09CB BC40F0    2402            cjne    r4,#0x40,L025044?
09CE 8000      2403            sjmp    L025045?
09D0           2404   L025044?:
09D0 020000    2405            ljmp    L025022?
09D3           2406   L025045?:
09D3           2407   ;        main.c:587: sprintf(buff, "%05u\n", cnt);
09D3 C002      2408            push    ar2
09D5 C003      2409            push    ar3
09D7 C002      2410            push    ar2
09D9 C003      2411            push    ar3
09DB 7470      2412            mov     a,#__str_15
09DD C0E0      2413            push    acc
09DF 74D3      2414            mov     a,#(__str_15 >> 8)
09E1 C0E0      2415            push    acc
09E3 7480      2416            mov     a,#0x80
09E5 C0E0      2417            push    acc
09E7 74D0      2418            mov     a,#_buff
09E9 C0E0      2419            push    acc
09EB 7444      2420            mov     a,#(_buff >> 8)
09ED C0E0      2421            push    acc
09EF 7440      2422            mov     a,#0x40
09F1 C0E0      2423            push    acc
09F3 120000    2424            lcall   _sprintf
09F6 E581      2425            mov     a,sp
09F8 24F8      2426            add     a,#0xf8
09FA F581      2427            mov     sp,a
09FC D003      2428            pop     ar3
09FE D002      2429            pop     ar2
0A00           2430   ;        main.c:588: cnt++;
0A00 0A        2431            inc     r2
0A01 BA00F0    2432            cjne    r2,#0x00,L025046?
0A04 0B        2433            inc     r3
0A05           2434   L025046?:
0A05           2435   ;        main.c:589: waitms(5); // The radio seems to need this delay...
0A05 900005    2436            mov     dptr,#0x0005
0A08 C002      2437            push    ar2
0A0A C003      2438            push    ar3
0A0C 120000    2439            lcall   _waitms
0A0F           2440   ;        main.c:590: sendstr1(buff);
0A0F 9044D0    2441            mov     dptr,#_buff
0A12 75F040    2442            mov     b,#0x40
0A15 120000    2443            lcall   _sendstr1
0A18 D003      2444            pop     ar3
0A1A D002      2445            pop     ar2
0A1C 020000    2446            ljmp    L025022?
0A1F           2447            rseg R_CSEG
0A1F           2448   
0000           2449            rseg R_XINIT
0000           2450   
0000           2451            rseg R_CONST
0000           2452   __str_0:
0000 436F6D6D  2453            db 'Command: %s'
     616E643A
     202573
000B 00        2454            db 0x00
000C           2455   __str_1:
000C 52657370  2456            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2457            db 0x0D
0019 0A        2458            db 0x0A
001A 00        2459            db 0x00
001B           2460   __str_2:
001B 41542B44  2461            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2462            db 0x0D
0027 0A        2463            db 0x0A
0028 00        2464            db 0x00
0029           2465   __str_3:
0029 0D        2466            db 0x0D
002A 0A        2467            db 0x0A
002B 45464D38  2468            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2469            db 0x0D
0047 0A        2470            db 0x0A
0048 00        2471            db 0x00
0049           2472   __str_4:
0049 41542B56  2473            db 'AT+VER'
     4552
004F 0D        2474            db 0x0D
0050 0A        2475            db 0x0A
0051 00        2476            db 0x00
0052           2477   __str_5:
0052 41542B42  2478            db 'AT+BAUD'
     415544
0059 0D        2479            db 0x0D
005A 0A        2480            db 0x0A
005B 00        2481            db 0x00
005C           2482   __str_6:
005C 41542B52  2483            db 'AT+RFID'
     464944
0063 0D        2484            db 0x0D
0064 0A        2485            db 0x0A
0065 00        2486            db 0x00
0066           2487   __str_7:
0066 41542B44  2488            db 'AT+DVID'
     564944
006D 0D        2489            db 0x0D
006E 0A        2490            db 0x0A
006F 00        2491            db 0x00
0070           2492   __str_8:
0070 41542B52  2493            db 'AT+RFC'
     4643
0076 0D        2494            db 0x0D
0077 0A        2495            db 0x0A
0078 00        2496            db 0x00
0079           2497   __str_9:
0079 41542B50  2498            db 'AT+POWE'
     4F5745
0080 0D        2499            db 0x0D
0081 0A        2500            db 0x0A
0082 00        2501            db 0x00
0083           2502   __str_10:
0083 41542B43  2503            db 'AT+CLSS'
     4C5353
008A 0D        2504            db 0x0D
008B 0A        2505            db 0x0A
008C 00        2506            db 0x00
008D           2507   __str_11:
008D 41542B44  2508            db 'AT+DVIDEFEF'
     56494445
     464546
0098 0D        2509            db 0x0D
0099 0A        2510            db 0x0A
009A 00        2511            db 0x00
009B           2512   __str_12:
009B 25303364  2513            db '%03d,%03d'
     2C253033
     64
00A4 00        2514            db 0x00
00A5           2515   __str_13:
00A5 4A6F7973  2516            db 'Joystick Received: Vx = %03d, Vy = %03d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     303364
00CC 0D        2517            db 0x0D
00CD 0A        2518            db 0x0A
00CE 00        2519            db 0x00
00CF           2520   __str_14:
00CF 2A2A2A20  2521            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
00EA 0D        2522            db 0x0D
00EB 0A        2523            db 0x0A
00EC 00        2524            db 0x00
00ED           2525   __str_15:
00ED 25303575  2526            db '%05u'
00F1 0A        2527            db 0x0A
00F2 00        2528            db 0x00
00F3           2529   
0096           2530            CSEG
0096           2531   
0096           2532   end
