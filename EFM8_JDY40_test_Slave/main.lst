0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 21 14:20:01 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _servo_pick
0000             29            public _Timer5_ISR
0000             30            public _ADC_at_Pin
0000             31            public _InitPinADC
0000             32            public _InitADC
0000             33            public _Set_Pin_Input
0000             34            public _Set_Pin_Output
0000             35            public _ReceptionOff
0000             36            public _SendATCommand
0000             37            public _waitms_or_RI1
0000             38            public _RXU1
0000             39            public _getstr1
0000             40            public _getchar1_with_timeout
0000             41            public _getchar1
0000             42            public _sendstr1
0000             43            public _putchar1
0000             44            public _UART1_Init
0000             45            public _waitms
0000             46            public _Timer3us
0000             47            public __c51_external_startup
0000             48            public _buff
0000             49            public _getstr1_PARM_2
0000             50            public _vy
0000             51            public _vx
0000             52            public _vy_thres
0000             53            public _vx_thres
0000             54            public _servo_arm
0000             55            public _servo_base
0000             56            public _R_motor_dir
0000             57            public _L_motor_dir
0000             58            public _pwm_right
0000             59            public _pwm_left
0000             60            public _servo_counter
0000             61            public _pwm_counter
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADC0ASAH       DATA 0xb6
0000             67   _ADC0ASAL       DATA 0xb5
0000             68   _ADC0ASCF       DATA 0xa1
0000             69   _ADC0ASCT       DATA 0xc7
0000             70   _ADC0CF0        DATA 0xbc
0000             71   _ADC0CF1        DATA 0xb9
0000             72   _ADC0CF2        DATA 0xdf
0000             73   _ADC0CN0        DATA 0xe8
0000             74   _ADC0CN1        DATA 0xb2
0000             75   _ADC0CN2        DATA 0xb3
0000             76   _ADC0GTH        DATA 0xc4
0000             77   _ADC0GTL        DATA 0xc3
0000             78   _ADC0H          DATA 0xbe
0000             79   _ADC0L          DATA 0xbd
0000             80   _ADC0LTH        DATA 0xc6
0000             81   _ADC0LTL        DATA 0xc5
0000             82   _ADC0MX         DATA 0xbb
0000             83   _B              DATA 0xf0
0000             84   _CKCON0         DATA 0x8e
0000             85   _CKCON1         DATA 0xa6
0000             86   _CLEN0          DATA 0xc6
0000             87   _CLIE0          DATA 0xc7
0000             88   _CLIF0          DATA 0xe8
0000             89   _CLKSEL         DATA 0xa9
0000             90   _CLOUT0         DATA 0xd1
0000             91   _CLU0CF         DATA 0xb1
0000             92   _CLU0FN         DATA 0xaf
0000             93   _CLU0MX         DATA 0x84
0000             94   _CLU1CF         DATA 0xb3
0000             95   _CLU1FN         DATA 0xb2
0000             96   _CLU1MX         DATA 0x85
0000             97   _CLU2CF         DATA 0xb6
0000             98   _CLU2FN         DATA 0xb5
0000             99   _CLU2MX         DATA 0x91
0000            100   _CLU3CF         DATA 0xbf
0000            101   _CLU3FN         DATA 0xbe
0000            102   _CLU3MX         DATA 0xae
0000            103   _CMP0CN0        DATA 0x9b
0000            104   _CMP0CN1        DATA 0x99
0000            105   _CMP0MD         DATA 0x9d
0000            106   _CMP0MX         DATA 0x9f
0000            107   _CMP1CN0        DATA 0xbf
0000            108   _CMP1CN1        DATA 0xac
0000            109   _CMP1MD         DATA 0xab
0000            110   _CMP1MX         DATA 0xaa
0000            111   _CRC0CN0        DATA 0xce
0000            112   _CRC0CN1        DATA 0x86
0000            113   _CRC0CNT        DATA 0xd3
0000            114   _CRC0DAT        DATA 0xcb
0000            115   _CRC0FLIP       DATA 0xcf
0000            116   _CRC0IN         DATA 0xca
0000            117   _CRC0ST         DATA 0xd2
0000            118   _DAC0CF0        DATA 0x91
0000            119   _DAC0CF1        DATA 0x92
0000            120   _DAC0H          DATA 0x85
0000            121   _DAC0L          DATA 0x84
0000            122   _DAC1CF0        DATA 0x93
0000            123   _DAC1CF1        DATA 0x94
0000            124   _DAC1H          DATA 0x8a
0000            125   _DAC1L          DATA 0x89
0000            126   _DAC2CF0        DATA 0x95
0000            127   _DAC2CF1        DATA 0x96
0000            128   _DAC2H          DATA 0x8c
0000            129   _DAC2L          DATA 0x8b
0000            130   _DAC3CF0        DATA 0x9a
0000            131   _DAC3CF1        DATA 0x9c
0000            132   _DAC3H          DATA 0x8e
0000            133   _DAC3L          DATA 0x8d
0000            134   _DACGCF0        DATA 0x88
0000            135   _DACGCF1        DATA 0x98
0000            136   _DACGCF2        DATA 0xa2
0000            137   _DERIVID        DATA 0xad
0000            138   _DEVICEID       DATA 0xb5
0000            139   _DPH            DATA 0x83
0000            140   _DPL            DATA 0x82
0000            141   _EIE1           DATA 0xe6
0000            142   _EIE2           DATA 0xf3
0000            143   _EIP1           DATA 0xbb
0000            144   _EIP1H          DATA 0xee
0000            145   _EIP2           DATA 0xed
0000            146   _EIP2H          DATA 0xf6
0000            147   _EMI0CN         DATA 0xe7
0000            148   _FLKEY          DATA 0xb7
0000            149   _HFO0CAL        DATA 0xc7
0000            150   _HFO1CAL        DATA 0xd6
0000            151   _HFOCN          DATA 0xef
0000            152   _I2C0ADM        DATA 0xff
0000            153   _I2C0CN0        DATA 0xba
0000            154   _I2C0DIN        DATA 0xbc
0000            155   _I2C0DOUT       DATA 0xbb
0000            156   _I2C0FCN0       DATA 0xad
0000            157   _I2C0FCN1       DATA 0xab
0000            158   _I2C0FCT        DATA 0xf5
0000            159   _I2C0SLAD       DATA 0xbd
0000            160   _I2C0STAT       DATA 0xb9
0000            161   _IE             DATA 0xa8
0000            162   _IP             DATA 0xb8
0000            163   _IPH            DATA 0xf2
0000            164   _IT01CF         DATA 0xe4
0000            165   _LFO0CN         DATA 0xb1
0000            166   _P0             DATA 0x80
0000            167   _P0MASK         DATA 0xfe
0000            168   _P0MAT          DATA 0xfd
0000            169   _P0MDIN         DATA 0xf1
0000            170   _P0MDOUT        DATA 0xa4
0000            171   _P0SKIP         DATA 0xd4
0000            172   _P1             DATA 0x90
0000            173   _P1MASK         DATA 0xee
0000            174   _P1MAT          DATA 0xed
0000            175   _P1MDIN         DATA 0xf2
0000            176   _P1MDOUT        DATA 0xa5
0000            177   _P1SKIP         DATA 0xd5
0000            178   _P2             DATA 0xa0
0000            179   _P2MASK         DATA 0xfc
0000            180   _P2MAT          DATA 0xfb
0000            181   _P2MDIN         DATA 0xf3
0000            182   _P2MDOUT        DATA 0xa6
0000            183   _P2SKIP         DATA 0xcc
0000            184   _P3             DATA 0xb0
0000            185   _P3MDIN         DATA 0xf4
0000            186   _P3MDOUT        DATA 0x9c
0000            187   _PCA0CENT       DATA 0x9e
0000            188   _PCA0CLR        DATA 0x9c
0000            189   _PCA0CN0        DATA 0xd8
0000            190   _PCA0CPH0       DATA 0xfc
0000            191   _PCA0CPH1       DATA 0xea
0000            192   _PCA0CPH2       DATA 0xec
0000            193   _PCA0CPH3       DATA 0xf5
0000            194   _PCA0CPH4       DATA 0x85
0000            195   _PCA0CPH5       DATA 0xde
0000            196   _PCA0CPL0       DATA 0xfb
0000            197   _PCA0CPL1       DATA 0xe9
0000            198   _PCA0CPL2       DATA 0xeb
0000            199   _PCA0CPL3       DATA 0xf4
0000            200   _PCA0CPL4       DATA 0x84
0000            201   _PCA0CPL5       DATA 0xdd
0000            202   _PCA0CPM0       DATA 0xda
0000            203   _PCA0CPM1       DATA 0xdb
0000            204   _PCA0CPM2       DATA 0xdc
0000            205   _PCA0CPM3       DATA 0xae
0000            206   _PCA0CPM4       DATA 0xaf
0000            207   _PCA0CPM5       DATA 0xcc
0000            208   _PCA0H          DATA 0xfa
0000            209   _PCA0L          DATA 0xf9
0000            210   _PCA0MD         DATA 0xd9
0000            211   _PCA0POL        DATA 0x96
0000            212   _PCA0PWM        DATA 0xf7
0000            213   _PCON0          DATA 0x87
0000            214   _PCON1          DATA 0xcd
0000            215   _PFE0CN         DATA 0xc1
0000            216   _PRTDRV         DATA 0xf6
0000            217   _PSCTL          DATA 0x8f
0000            218   _PSTAT0         DATA 0xaa
0000            219   _PSW            DATA 0xd0
0000            220   _REF0CN         DATA 0xd1
0000            221   _REG0CN         DATA 0xc9
0000            222   _REVID          DATA 0xb6
0000            223   _RSTSRC         DATA 0xef
0000            224   _SBCON1         DATA 0x94
0000            225   _SBRLH1         DATA 0x96
0000            226   _SBRLL1         DATA 0x95
0000            227   _SBUF           DATA 0x99
0000            228   _SBUF0          DATA 0x99
0000            229   _SBUF1          DATA 0x92
0000            230   _SCON           DATA 0x98
0000            231   _SCON0          DATA 0x98
0000            232   _SCON1          DATA 0xc8
0000            233   _SFRPAGE        DATA 0xa7
0000            234   _SFRPGCN        DATA 0xbc
0000            235   _SFRSTACK       DATA 0xd7
0000            236   _SMB0ADM        DATA 0xd6
0000            237   _SMB0ADR        DATA 0xd7
0000            238   _SMB0CF         DATA 0xc1
0000            239   _SMB0CN0        DATA 0xc0
0000            240   _SMB0DAT        DATA 0xc2
0000            241   _SMB0FCN0       DATA 0xc3
0000            242   _SMB0FCN1       DATA 0xc4
0000            243   _SMB0FCT        DATA 0xef
0000            244   _SMB0RXLN       DATA 0xc5
0000            245   _SMB0TC         DATA 0xac
0000            246   _SMOD1          DATA 0x93
0000            247   _SP             DATA 0x81
0000            248   _SPI0CFG        DATA 0xa1
0000            249   _SPI0CKR        DATA 0xa2
0000            250   _SPI0CN0        DATA 0xf8
0000            251   _SPI0DAT        DATA 0xa3
0000            252   _SPI0FCN0       DATA 0x9a
0000            253   _SPI0FCN1       DATA 0x9b
0000            254   _SPI0FCT        DATA 0xf7
0000            255   _SPI0PCF        DATA 0xdf
0000            256   _TCON           DATA 0x88
0000            257   _TH0            DATA 0x8c
0000            258   _TH1            DATA 0x8d
0000            259   _TL0            DATA 0x8a
0000            260   _TL1            DATA 0x8b
0000            261   _TMOD           DATA 0x89
0000            262   _TMR2CN0        DATA 0xc8
0000            263   _TMR2CN1        DATA 0xfd
0000            264   _TMR2H          DATA 0xcf
0000            265   _TMR2L          DATA 0xce
0000            266   _TMR2RLH        DATA 0xcb
0000            267   _TMR2RLL        DATA 0xca
0000            268   _TMR3CN0        DATA 0x91
0000            269   _TMR3CN1        DATA 0xfe
0000            270   _TMR3H          DATA 0x95
0000            271   _TMR3L          DATA 0x94
0000            272   _TMR3RLH        DATA 0x93
0000            273   _TMR3RLL        DATA 0x92
0000            274   _TMR4CN0        DATA 0x98
0000            275   _TMR4CN1        DATA 0xff
0000            276   _TMR4H          DATA 0xa5
0000            277   _TMR4L          DATA 0xa4
0000            278   _TMR4RLH        DATA 0xa3
0000            279   _TMR4RLL        DATA 0xa2
0000            280   _TMR5CN0        DATA 0xc0
0000            281   _TMR5CN1        DATA 0xf1
0000            282   _TMR5H          DATA 0xd5
0000            283   _TMR5L          DATA 0xd4
0000            284   _TMR5RLH        DATA 0xd3
0000            285   _TMR5RLL        DATA 0xd2
0000            286   _UART0PCF       DATA 0xd9
0000            287   _UART1FCN0      DATA 0x9d
0000            288   _UART1FCN1      DATA 0xd8
0000            289   _UART1FCT       DATA 0xfa
0000            290   _UART1LIN       DATA 0x9e
0000            291   _UART1PCF       DATA 0xda
0000            292   _VDM0CN         DATA 0xff
0000            293   _WDTCN          DATA 0x97
0000            294   _XBR0           DATA 0xe1
0000            295   _XBR1           DATA 0xe2
0000            296   _XBR2           DATA 0xe3
0000            297   _XOSC0CN        DATA 0x86
0000            298   _DPTR           DATA 0x8382
0000            299   _TMR2RL         DATA 0xcbca
0000            300   _TMR3RL         DATA 0x9392
0000            301   _TMR4RL         DATA 0xa3a2
0000            302   _TMR5RL         DATA 0xd3d2
0000            303   _TMR0           DATA 0x8c8a
0000            304   _TMR1           DATA 0x8d8b
0000            305   _TMR2           DATA 0xcfce
0000            306   _TMR3           DATA 0x9594
0000            307   _TMR4           DATA 0xa5a4
0000            308   _TMR5           DATA 0xd5d4
0000            309   _SBRL1          DATA 0x9695
0000            310   _PCA0           DATA 0xfaf9
0000            311   _PCA0CP0        DATA 0xfcfb
0000            312   _PCA0CP1        DATA 0xeae9
0000            313   _PCA0CP2        DATA 0xeceb
0000            314   _PCA0CP3        DATA 0xf5f4
0000            315   _PCA0CP4        DATA 0x8584
0000            316   _PCA0CP5        DATA 0xdedd
0000            317   _ADC0ASA        DATA 0xb6b5
0000            318   _ADC0GT         DATA 0xc4c3
0000            319   _ADC0           DATA 0xbebd
0000            320   _ADC0LT         DATA 0xc6c5
0000            321   _DAC0           DATA 0x8584
0000            322   _DAC1           DATA 0x8a89
0000            323   _DAC2           DATA 0x8c8b
0000            324   _DAC3           DATA 0x8e8d
0000            325   ;--------------------------------------------------------
0000            326   ; special function bits
0000            327   ;--------------------------------------------------------
0000            328   _ACC_0          BIT 0xe0
0000            329   _ACC_1          BIT 0xe1
0000            330   _ACC_2          BIT 0xe2
0000            331   _ACC_3          BIT 0xe3
0000            332   _ACC_4          BIT 0xe4
0000            333   _ACC_5          BIT 0xe5
0000            334   _ACC_6          BIT 0xe6
0000            335   _ACC_7          BIT 0xe7
0000            336   _TEMPE          BIT 0xe8
0000            337   _ADGN0          BIT 0xe9
0000            338   _ADGN1          BIT 0xea
0000            339   _ADWINT         BIT 0xeb
0000            340   _ADBUSY         BIT 0xec
0000            341   _ADINT          BIT 0xed
0000            342   _IPOEN          BIT 0xee
0000            343   _ADEN           BIT 0xef
0000            344   _B_0            BIT 0xf0
0000            345   _B_1            BIT 0xf1
0000            346   _B_2            BIT 0xf2
0000            347   _B_3            BIT 0xf3
0000            348   _B_4            BIT 0xf4
0000            349   _B_5            BIT 0xf5
0000            350   _B_6            BIT 0xf6
0000            351   _B_7            BIT 0xf7
0000            352   _C0FIF          BIT 0xe8
0000            353   _C0RIF          BIT 0xe9
0000            354   _C1FIF          BIT 0xea
0000            355   _C1RIF          BIT 0xeb
0000            356   _C2FIF          BIT 0xec
0000            357   _C2RIF          BIT 0xed
0000            358   _C3FIF          BIT 0xee
0000            359   _C3RIF          BIT 0xef
0000            360   _D1SRC0         BIT 0x88
0000            361   _D1SRC1         BIT 0x89
0000            362   _D1AMEN         BIT 0x8a
0000            363   _D01REFSL       BIT 0x8b
0000            364   _D3SRC0         BIT 0x8c
0000            365   _D3SRC1         BIT 0x8d
0000            366   _D3AMEN         BIT 0x8e
0000            367   _D23REFSL       BIT 0x8f
0000            368   _D0UDIS         BIT 0x98
0000            369   _D1UDIS         BIT 0x99
0000            370   _D2UDIS         BIT 0x9a
0000            371   _D3UDIS         BIT 0x9b
0000            372   _EX0            BIT 0xa8
0000            373   _ET0            BIT 0xa9
0000            374   _EX1            BIT 0xaa
0000            375   _ET1            BIT 0xab
0000            376   _ES0            BIT 0xac
0000            377   _ET2            BIT 0xad
0000            378   _ESPI0          BIT 0xae
0000            379   _EA             BIT 0xaf
0000            380   _PX0            BIT 0xb8
0000            381   _PT0            BIT 0xb9
0000            382   _PX1            BIT 0xba
0000            383   _PT1            BIT 0xbb
0000            384   _PS0            BIT 0xbc
0000            385   _PT2            BIT 0xbd
0000            386   _PSPI0          BIT 0xbe
0000            387   _P0_0           BIT 0x80
0000            388   _P0_1           BIT 0x81
0000            389   _P0_2           BIT 0x82
0000            390   _P0_3           BIT 0x83
0000            391   _P0_4           BIT 0x84
0000            392   _P0_5           BIT 0x85
0000            393   _P0_6           BIT 0x86
0000            394   _P0_7           BIT 0x87
0000            395   _P1_0           BIT 0x90
0000            396   _P1_1           BIT 0x91
0000            397   _P1_2           BIT 0x92
0000            398   _P1_3           BIT 0x93
0000            399   _P1_4           BIT 0x94
0000            400   _P1_5           BIT 0x95
0000            401   _P1_6           BIT 0x96
0000            402   _P1_7           BIT 0x97
0000            403   _P2_0           BIT 0xa0
0000            404   _P2_1           BIT 0xa1
0000            405   _P2_2           BIT 0xa2
0000            406   _P2_3           BIT 0xa3
0000            407   _P2_4           BIT 0xa4
0000            408   _P2_5           BIT 0xa5
0000            409   _P2_6           BIT 0xa6
0000            410   _P3_0           BIT 0xb0
0000            411   _P3_1           BIT 0xb1
0000            412   _P3_2           BIT 0xb2
0000            413   _P3_3           BIT 0xb3
0000            414   _P3_4           BIT 0xb4
0000            415   _P3_7           BIT 0xb7
0000            416   _CCF0           BIT 0xd8
0000            417   _CCF1           BIT 0xd9
0000            418   _CCF2           BIT 0xda
0000            419   _CCF3           BIT 0xdb
0000            420   _CCF4           BIT 0xdc
0000            421   _CCF5           BIT 0xdd
0000            422   _CR             BIT 0xde
0000            423   _CF             BIT 0xdf
0000            424   _PARITY         BIT 0xd0
0000            425   _F1             BIT 0xd1
0000            426   _OV             BIT 0xd2
0000            427   _RS0            BIT 0xd3
0000            428   _RS1            BIT 0xd4
0000            429   _F0             BIT 0xd5
0000            430   _AC             BIT 0xd6
0000            431   _CY             BIT 0xd7
0000            432   _RI             BIT 0x98
0000            433   _TI             BIT 0x99
0000            434   _RB8            BIT 0x9a
0000            435   _TB8            BIT 0x9b
0000            436   _REN            BIT 0x9c
0000            437   _CE             BIT 0x9d
0000            438   _SMODE          BIT 0x9e
0000            439   _RI1            BIT 0xc8
0000            440   _TI1            BIT 0xc9
0000            441   _RBX1           BIT 0xca
0000            442   _TBX1           BIT 0xcb
0000            443   _REN1           BIT 0xcc
0000            444   _PERR1          BIT 0xcd
0000            445   _OVR1           BIT 0xce
0000            446   _SI             BIT 0xc0
0000            447   _ACK            BIT 0xc1
0000            448   _ARBLOST        BIT 0xc2
0000            449   _ACKRQ          BIT 0xc3
0000            450   _STO            BIT 0xc4
0000            451   _STA            BIT 0xc5
0000            452   _TXMODE         BIT 0xc6
0000            453   _MASTER         BIT 0xc7
0000            454   _SPIEN          BIT 0xf8
0000            455   _TXNF           BIT 0xf9
0000            456   _NSSMD0         BIT 0xfa
0000            457   _NSSMD1         BIT 0xfb
0000            458   _RXOVRN         BIT 0xfc
0000            459   _MODF           BIT 0xfd
0000            460   _WCOL           BIT 0xfe
0000            461   _SPIF           BIT 0xff
0000            462   _IT0            BIT 0x88
0000            463   _IE0            BIT 0x89
0000            464   _IT1            BIT 0x8a
0000            465   _IE1            BIT 0x8b
0000            466   _TR0            BIT 0x8c
0000            467   _TF0            BIT 0x8d
0000            468   _TR1            BIT 0x8e
0000            469   _TF1            BIT 0x8f
0000            470   _T2XCLK0        BIT 0xc8
0000            471   _T2XCLK1        BIT 0xc9
0000            472   _TR2            BIT 0xca
0000            473   _T2SPLIT        BIT 0xcb
0000            474   _TF2CEN         BIT 0xcc
0000            475   _TF2LEN         BIT 0xcd
0000            476   _TF2L           BIT 0xce
0000            477   _TF2H           BIT 0xcf
0000            478   _T4XCLK0        BIT 0x98
0000            479   _T4XCLK1        BIT 0x99
0000            480   _TR4            BIT 0x9a
0000            481   _T4SPLIT        BIT 0x9b
0000            482   _TF4CEN         BIT 0x9c
0000            483   _TF4LEN         BIT 0x9d
0000            484   _TF4L           BIT 0x9e
0000            485   _TF4H           BIT 0x9f
0000            486   _T5XCLK0        BIT 0xc0
0000            487   _T5XCLK1        BIT 0xc1
0000            488   _TR5            BIT 0xc2
0000            489   _T5SPLIT        BIT 0xc3
0000            490   _TF5CEN         BIT 0xc4
0000            491   _TF5LEN         BIT 0xc5
0000            492   _TF5L           BIT 0xc6
0000            493   _TF5H           BIT 0xc7
0000            494   _RIE            BIT 0xd8
0000            495   _RXTO0          BIT 0xd9
0000            496   _RXTO1          BIT 0xda
0000            497   _RFRQ           BIT 0xdb
0000            498   _TIE            BIT 0xdc
0000            499   _TXHOLD         BIT 0xdd
0000            500   _TXNF1          BIT 0xde
0000            501   _TFRQ           BIT 0xdf
0000            502   ;--------------------------------------------------------
0000            503   ; overlayable register banks
0000            504   ;--------------------------------------------------------
0000            505            rbank0 segment data overlay
0000            506   ;--------------------------------------------------------
0000            507   ; internal ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_DSEG
0000            510   _pwm_counter:
0000            511            ds 2
0002            512   _servo_counter:
0002            513            ds 2
0004            514   _pwm_left:
0004            515            ds 1
0005            516   _pwm_right:
0005            517            ds 1
0006            518   _L_motor_dir:
0006            519            ds 1
0007            520   _R_motor_dir:
0007            521            ds 1
0008            522   _servo_base:
0008            523            ds 1
0009            524   _servo_arm:
0009            525            ds 1
000A            526   _vx_thres:
000A            527            ds 2
000C            528   _vy_thres:
000C            529            ds 2
000E            530   _vx:
000E            531            ds 2
0010            532   _vy:
0010            533            ds 2
0012            534   _getstr1_PARM_2:
0012            535            ds 1
0013            536   _main_vx_error_1_126:
0013            537            ds 2
0015            538   _main_vy_error_1_126:
0015            539            ds 2
0017            540   _main_vx_err_1_126:
0017            541            ds 2
0019            542   _main_vy_err_1_126:
0019            543            ds 2
001B            544   _main_vx_1_126:
001B            545            ds 2
001D            546   _main_vy_1_126:
001D            547            ds 2
001F            548   ;--------------------------------------------------------
001F            549   ; overlayable items in internal ram 
001F            550   ;--------------------------------------------------------
0000            551            rseg    R_OSEG
0000            552            rseg    R_OSEG
0000            553            rseg    R_OSEG
0000            554            rseg    R_OSEG
0000            555            rseg    R_OSEG
0000            556            rseg    R_OSEG
0000            557   _InitPinADC_PARM_2:
0000            558            ds 1
0001            559            rseg    R_OSEG
0001            560   ;--------------------------------------------------------
0001            561   ; indirectly addressable internal ram data
0001            562   ;--------------------------------------------------------
0000            563            rseg R_ISEG
0000            564   _buff:
0000            565            ds 20
0014            566   ;--------------------------------------------------------
0014            567   ; absolute internal ram data
0014            568   ;--------------------------------------------------------
0000            569            DSEG
0000            570   ;--------------------------------------------------------
0000            571   ; bit data
0000            572   ;--------------------------------------------------------
0000            573            rseg R_BSEG
0000            574   ;--------------------------------------------------------
0000            575   ; paged external ram data
0000            576   ;--------------------------------------------------------
0000            577            rseg R_PSEG
0000            578   ;--------------------------------------------------------
0000            579   ; external ram data
0000            580   ;--------------------------------------------------------
0000            581            rseg R_XSEG
0000            582   ;--------------------------------------------------------
0000            583   ; absolute external ram data
0000            584   ;--------------------------------------------------------
0000            585            XSEG
0000            586   ;--------------------------------------------------------
0000            587   ; external initialized ram data
0000            588   ;--------------------------------------------------------
0000            589            rseg R_IXSEG
0000            590            rseg R_HOME
0000            591            rseg R_GSINIT
0000            592            rseg R_CSEG
0000            593   ;--------------------------------------------------------
0000            594   ; Reset entry point and interrupt vectors
0000            595   ;--------------------------------------------------------
0000            596            CSEG at 0x0000
0000 020000     597            ljmp    _crt0
0093            598            CSEG at 0x0093
0093 020000     599            ljmp    _Timer5_ISR
0096            600   ;--------------------------------------------------------
0096            601   ; global & static initialisations
0096            602   ;--------------------------------------------------------
0000            603            rseg R_HOME
0000            604            rseg R_GSINIT
0000            605            rseg R_GSINIT
0000            606   ;--------------------------------------------------------
0000            607   ; data variables initialization
0000            608   ;--------------------------------------------------------
0000            609            rseg R_DINIT
0000            610   ;        main.c:49: unsigned int pwm_counter = 0; 
0000 E4         611            clr     a
0001 F550       612            mov     _pwm_counter,a
0003 F551       613            mov     (_pwm_counter + 1),a
0005            614   ;        main.c:50: unsigned int servo_counter = 0; 
0005 E4         615            clr     a
0006 F510       616            mov     _servo_counter,a
0008 F511       617            mov     (_servo_counter + 1),a
000A            618   ;        main.c:51: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75D000     619            mov     _pwm_left,#0x00
000D            620   ;        main.c:51: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 759000     621            mov     _pwm_right,#0x00
0010            622   ;        main.c:52: unsigned char servo_base = 1, servo_arm = 1; 
0010 755001     623            mov     _L_motor_dir,#0x01
0013            624   ;        main.c:52: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 751001     625            mov     _R_motor_dir,#0x01
0016            626   ;        main.c:53: unsigned char servo_base = 1, servo_arm = 1; 
0016 75D001     627            mov     _servo_base,#0x01
0019            628   ;        main.c:53: int vx_thres = 161, vy_thres = 166; 
0019 759001     629            mov     _servo_arm,#0x01
001C            630   ;        main.c:54: int vx = 0, vy = 0; 
001C 7550A1     631            mov     _vx_thres,#0xA1
001F E4         632            clr     a
0020 F551       633            mov     (_vx_thres + 1),a
0022            634   ;        main.c:54: int vx_thres = 161, vy_thres = 166; 
0022 7510A6     635            mov     _vy_thres,#0xA6
0025 E4         636            clr     a
0026 F511       637            mov     (_vy_thres + 1),a
0028            638   ;        main.c:55: int vx = 0, vy = 0; 
0028 E4         639            clr     a
0029 F5D0       640            mov     _vx,a
002B F5D1       641            mov     (_vx + 1),a
002D            642   ;        main.c:55: 
002D E4         643            clr     a
002E F590       644            mov     _vy,a
0030 F591       645            mov     (_vy + 1),a
0032            646            ; The linker places a 'ret' at the end of segment R_DINIT.
0032            647   ;--------------------------------------------------------
0032            648   ; code
0032            649   ;--------------------------------------------------------
0000            650            rseg R_CSEG
0000            651   ;------------------------------------------------------------
0000            652   ;Allocation info for local variables in function '_c51_external_startup'
0000            653   ;------------------------------------------------------------
0000            654   ;------------------------------------------------------------
0000            655   ;        main.c:58: char _c51_external_startup (void)
0000            656   ;        -----------------------------------------
0000            657   ;         function _c51_external_startup
0000            658   ;        -----------------------------------------
0000            659   __c51_external_startup:
0000            660            using   0
0000            661   ;        main.c:61: SFRPAGE = 0x00;
0000 75A700     662            mov     _SFRPAGE,#0x00
0003            663   ;        main.c:62: WDTCN = 0xDE; //First key
0003 7597DE     664            mov     _WDTCN,#0xDE
0006            665   ;        main.c:63: WDTCN = 0xAD; //Second key
0006 7597AD     666            mov     _WDTCN,#0xAD
0009            667   ;        main.c:65: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     668            mov     _VDM0CN,#0x80
000C            669   ;        main.c:66: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     670            mov     _RSTSRC,#0x06
000F            671   ;        main.c:73: SFRPAGE = 0x10;
000F 75A710     672            mov     _SFRPAGE,#0x10
0012            673   ;        main.c:74: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     674            mov     _PFE0CN,#0x20
0015            675   ;        main.c:75: SFRPAGE = 0x00;
0015 75A700     676            mov     _SFRPAGE,#0x00
0018            677   ;        main.c:96: CLKSEL = 0x00;
0018 75A900     678            mov     _CLKSEL,#0x00
001B            679   ;        main.c:97: CLKSEL = 0x00;
001B 75A900     680            mov     _CLKSEL,#0x00
001E            681   ;        main.c:98: while ((CLKSEL & 0x80) == 0);
001E            682   L002001?:
001E E5A9       683            mov     a,_CLKSEL
0020 30E750     684            jnb     acc.7,L002001?
0023            685   ;        main.c:99: CLKSEL = 0x03;
0023 75A903     686            mov     _CLKSEL,#0x03
0026            687   ;        main.c:100: CLKSEL = 0x03;
0026 75A903     688            mov     _CLKSEL,#0x03
0029            689   ;        main.c:101: while ((CLKSEL & 0x80) == 0);
0029            690   L002004?:
0029 E5A9       691            mov     a,_CLKSEL
002B 30E7D0     692            jnb     acc.7,L002004?
002E            693   ;        main.c:106: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     694            orl     _P0MDOUT,#0x11
0031            695   ;        main.c:107: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     696            orl     _P2MDOUT,#0x01
0034            697   ;        main.c:108: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     698            mov     _XBR0,#0x01
0037            699   ;        main.c:109: XBR1     = 0X00;
0037 75E200     700            mov     _XBR1,#0x00
003A            701   ;        main.c:110: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     702            mov     _XBR2,#0x41
003D            703   ;        main.c:116: SCON0 = 0x10;
003D 759810     704            mov     _SCON0,#0x10
0040            705   ;        main.c:117: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     706            mov     _TH1,#0xE6
0043            707   ;        main.c:118: TL1 = TH1;      // Init Timer1
0043 858D8B     708            mov     _TL1,_TH1
0046            709   ;        main.c:119: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     710            anl     _TMOD,#0x0F
0049            711   ;        main.c:120: TMOD |=  0x20;                       
0049 438920     712            orl     _TMOD,#0x20
004C            713   ;        main.c:121: TR1 = 1; // START Timer1
004C D28E       714            setb    _TR1
004E            715   ;        main.c:122: TI = 1;  // Indicate TX0 ready
004E D299       716            setb    _TI
0050            717   ;        main.c:124: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       718            setb    _P2_0
0052            719   ;        main.c:127: SFRPAGE=0x10;
0052 75A710     720            mov     _SFRPAGE,#0x10
0055            721   ;        main.c:128: TMR5CN0=0x00;
0055 75C000     722            mov     _TMR5CN0,#0x00
0058            723   ;        main.c:129: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     724            mov     _TMR5,#0xFF
005B 75D5FF     725            mov     (_TMR5 >> 8),#0xFF
005E            726   ;        main.c:130: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     727            orl     _EIE2,#0x08
0061            728   ;        main.c:131: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       729            setb    _TR5
0063            730   ;        main.c:134: EA=1;  // Enable global interrupts
0063 D2AF       731            setb    _EA
0065            732   ;        main.c:135: SFRPAGE=0x00;
0065 75A700     733            mov     _SFRPAGE,#0x00
0068            734   ;        main.c:137: return 0;
0068 758200     735            mov     dpl,#0x00
006B 22         736            ret
006C            737   ;------------------------------------------------------------
006C            738   ;Allocation info for local variables in function 'Timer3us'
006C            739   ;------------------------------------------------------------
006C            740   ;us                        Allocated to registers r2 
006C            741   ;i                         Allocated to registers r3 
006C            742   ;------------------------------------------------------------
006C            743   ;        main.c:141: void Timer3us(unsigned char us)
006C            744   ;        -----------------------------------------
006C            745   ;         function Timer3us
006C            746   ;        -----------------------------------------
006C            747   _Timer3us:
006C AA82       748            mov     r2,dpl
006E            749   ;        main.c:146: CKCON0|=0b_0100_0000;
006E 438E40     750            orl     _CKCON0,#0x40
0071            751   ;        main.c:148: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     752            mov     _TMR3RL,#0xB8
0074 7593FF     753            mov     (_TMR3RL >> 8),#0xFF
0077            754   ;        main.c:149: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     755            mov     _TMR3,_TMR3RL
007A 859395     756            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            757   ;        main.c:151: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     758            mov     _TMR3CN0,#0x04
0080            759   ;        main.c:152: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       760            mov     r3,#0x00
0082            761   L003004?:
0082 C3         762            clr     c
0083 EB         763            mov     a,r3
0084 9A         764            subb    a,r2
0085 5000       765            jnc     L003007?
0087            766   ;        main.c:154: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            767   L003001?:
0087 E591       768            mov     a,_TMR3CN0
0089 30E7D0     769            jnb     acc.7,L003001?
008C            770   ;        main.c:155: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     771            anl     _TMR3CN0,#0x7F
008F            772   ;        main.c:152: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         773            inc     r3
0090 8000       774            sjmp    L003004?
0092            775   L003007?:
0092            776   ;        main.c:157: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     777            mov     _TMR3CN0,#0x00
0095 22         778            ret
0096            779   ;------------------------------------------------------------
0096            780   ;Allocation info for local variables in function 'waitms'
0096            781   ;------------------------------------------------------------
0096            782   ;ms                        Allocated to registers r2 r3 
0096            783   ;j                         Allocated to registers r4 r5 
0096            784   ;k                         Allocated to registers r6 
0096            785   ;------------------------------------------------------------
0096            786   ;        main.c:160: void waitms (unsigned int ms)
0096            787   ;        -----------------------------------------
0096            788   ;         function waitms
0096            789   ;        -----------------------------------------
0096            790   _waitms:
0096 AA82       791            mov     r2,dpl
0098 AB83       792            mov     r3,dph
009A            793   ;        main.c:164: for(j=0; j<ms; j++)
009A 7C00       794            mov     r4,#0x00
009C 7D00       795            mov     r5,#0x00
009E            796   L004005?:
009E C3         797            clr     c
009F EC         798            mov     a,r4
00A0 9A         799            subb    a,r2
00A1 ED         800            mov     a,r5
00A2 9B         801            subb    a,r3
00A3 5000       802            jnc     L004009?
00A5            803   ;        main.c:165: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       804            mov     r6,#0x00
00A7            805   L004001?:
00A7 BE0410     806            cjne    r6,#0x04,L004018?
00AA            807   L004018?:
00AA 5000       808            jnc     L004007?
00AC 7582FA     809            mov     dpl,#0xFA
00AF C002       810            push    ar2
00B1 C003       811            push    ar3
00B3 C004       812            push    ar4
00B5 C005       813            push    ar5
00B7 C006       814            push    ar6
00B9 120000     815            lcall   _Timer3us
00BC D006       816            pop     ar6
00BE D005       817            pop     ar5
00C0 D004       818            pop     ar4
00C2 D003       819            pop     ar3
00C4 D002       820            pop     ar2
00C6 0E         821            inc     r6
00C7 8000       822            sjmp    L004001?
00C9            823   L004007?:
00C9            824   ;        main.c:164: for(j=0; j<ms; j++)
00C9 0C         825            inc     r4
00CA BC0050     826            cjne    r4,#0x00,L004005?
00CD 0D         827            inc     r5
00CE 8000       828            sjmp    L004005?
00D0            829   L004009?:
00D0 22         830            ret
00D1            831   ;------------------------------------------------------------
00D1            832   ;Allocation info for local variables in function 'UART1_Init'
00D1            833   ;------------------------------------------------------------
00D1            834   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            835   ;------------------------------------------------------------
00D1            836   ;        main.c:168: void UART1_Init (unsigned long baudrate)
00D1            837   ;        -----------------------------------------
00D1            838   ;         function UART1_Init
00D1            839   ;        -----------------------------------------
00D1            840   _UART1_Init:
00D1 AA82       841            mov     r2,dpl
00D3 AB83       842            mov     r3,dph
00D5 ACF0       843            mov     r4,b
00D7 FD         844            mov     r5,a
00D8            845   ;        main.c:170: SFRPAGE = 0x20;
00D8 75A720     846            mov     _SFRPAGE,#0x20
00DB            847   ;        main.c:171: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     848            mov     _SMOD1,#0x0C
00DE            849   ;        main.c:172: SCON1 = 0x10;
00DE 75C810     850            mov     _SCON1,#0x10
00E1            851   ;        main.c:173: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     852            mov     _SBCON1,#0x00
00E4            853   ;        main.c:174: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       854            mov     __divulong_PARM_2,r2
00E6 8B01       855            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       856            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       857            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     858            mov     dptr,#0xA200
00EF 75F04A     859            mov     b,#0x4A
00F2 7404       860            mov     a,#0x04
00F4 120000     861            lcall   __divulong
00F7 AA82       862            mov     r2,dpl
00F9 AB83       863            mov     r3,dph
00FB ACF0       864            mov     r4,b
00FD FD         865            mov     r5,a
00FE 750018     866            mov     __divulong_PARM_2,#0x18
0101 E4         867            clr     a
0102 F501       868            mov     (__divulong_PARM_2 + 1),a
0104 F502       869            mov     (__divulong_PARM_2 + 2),a
0106 F503       870            mov     (__divulong_PARM_2 + 3),a
0108 8A82       871            mov     dpl,r2
010A 8B83       872            mov     dph,r3
010C 8CF0       873            mov     b,r4
010E ED         874            mov     a,r5
010F 120000     875            lcall   __divulong
0112 AA82       876            mov     r2,dpl
0114 AB83       877            mov     r3,dph
0116 ACF0       878            mov     r4,b
0118 FD         879            mov     r5,a
0119 E4         880            clr     a
011A C3         881            clr     c
011B 9A         882            subb    a,r2
011C FA         883            mov     r2,a
011D E4         884            clr     a
011E 9B         885            subb    a,r3
011F FB         886            mov     r3,a
0120 7401       887            mov     a,#0x01
0122 9C         888            subb    a,r4
0123 E4         889            clr     a
0124 9D         890            subb    a,r5
0125 8A95       891            mov     _SBRL1,r2
0127 8B96       892            mov     (_SBRL1 >> 8),r3
0129            893   ;        main.c:175: TI1 = 1; // indicate ready for TX
0129 D2C9       894            setb    _TI1
012B            895   ;        main.c:176: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     896            orl     _SBCON1,#0x40
012E            897   ;        main.c:177: SFRPAGE = 0x00;
012E 75A700     898            mov     _SFRPAGE,#0x00
0131 22         899            ret
0132            900   ;------------------------------------------------------------
0132            901   ;Allocation info for local variables in function 'putchar1'
0132            902   ;------------------------------------------------------------
0132            903   ;c                         Allocated to registers r2 
0132            904   ;------------------------------------------------------------
0132            905   ;        main.c:180: void putchar1 (char c) 
0132            906   ;        -----------------------------------------
0132            907   ;         function putchar1
0132            908   ;        -----------------------------------------
0132            909   _putchar1:
0132 AA82       910            mov     r2,dpl
0134            911   ;        main.c:182: SFRPAGE = 0x20;
0134 75A720     912            mov     _SFRPAGE,#0x20
0137            913   ;        main.c:183: while (!TI1);
0137            914   L006001?:
0137            915   ;        main.c:184: TI1=0;
0137 10C9A0     916            jbc     _TI1,L006008?
013A 8000       917            sjmp    L006001?
013C            918   L006008?:
013C            919   ;        main.c:185: SBUF1 = c;
013C 8A92       920            mov     _SBUF1,r2
013E            921   ;        main.c:186: SFRPAGE = 0x00;
013E 75A700     922            mov     _SFRPAGE,#0x00
0141 22         923            ret
0142            924   ;------------------------------------------------------------
0142            925   ;Allocation info for local variables in function 'sendstr1'
0142            926   ;------------------------------------------------------------
0142            927   ;s                         Allocated to registers r2 r3 r4 
0142            928   ;------------------------------------------------------------
0142            929   ;        main.c:189: void sendstr1 (char * s)
0142            930   ;        -----------------------------------------
0142            931   ;         function sendstr1
0142            932   ;        -----------------------------------------
0142            933   _sendstr1:
0142 AA82       934            mov     r2,dpl
0144 AB83       935            mov     r3,dph
0146 ACF0       936            mov     r4,b
0148            937   ;        main.c:191: while(*s)
0148            938   L007001?:
0148 8A82       939            mov     dpl,r2
014A 8B83       940            mov     dph,r3
014C 8CF0       941            mov     b,r4
014E 120000     942            lcall   __gptrget
0151 FD         943            mov     r5,a
0152 6000       944            jz      L007004?
0154            945   ;        main.c:193: putchar1(*s);
0154 8D82       946            mov     dpl,r5
0156 C002       947            push    ar2
0158 C003       948            push    ar3
015A C004       949            push    ar4
015C 120000     950            lcall   _putchar1
015F D004       951            pop     ar4
0161 D003       952            pop     ar3
0163 D002       953            pop     ar2
0165            954   ;        main.c:194: s++;        
0165 0A         955            inc     r2
0166 BA00E0     956            cjne    r2,#0x00,L007001?
0169 0B         957            inc     r3
016A 8000       958            sjmp    L007001?
016C            959   L007004?:
016C 22         960            ret
016D            961   ;------------------------------------------------------------
016D            962   ;Allocation info for local variables in function 'getchar1'
016D            963   ;------------------------------------------------------------
016D            964   ;c                         Allocated to registers 
016D            965   ;------------------------------------------------------------
016D            966   ;        main.c:198: char getchar1 (void)
016D            967   ;        -----------------------------------------
016D            968   ;         function getchar1
016D            969   ;        -----------------------------------------
016D            970   _getchar1:
016D            971   ;        main.c:201: SFRPAGE = 0x20;
016D 75A720     972            mov     _SFRPAGE,#0x20
0170            973   ;        main.c:202: while (!RI1);
0170            974   L008001?:
0170            975   ;        main.c:203: RI1=0;
0170 10C8E0     976            jbc     _RI1,L008008?
0173 8000       977            sjmp    L008001?
0175            978   L008008?:
0175            979   ;        main.c:205: SCON1&=0b_0011_1111;
0175 53C83F     980            anl     _SCON1,#0x3F
0178            981   ;        main.c:206: c = SBUF1;
0178 859282     982            mov     dpl,_SBUF1
017B            983   ;        main.c:207: SFRPAGE = 0x00;
017B 75A700     984            mov     _SFRPAGE,#0x00
017E            985   ;        main.c:208: return (c);
017E 22         986            ret
017F            987   ;------------------------------------------------------------
017F            988   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            989   ;------------------------------------------------------------
017F            990   ;c                         Allocated to registers 
017F            991   ;timeout                   Allocated to registers r2 r3 
017F            992   ;------------------------------------------------------------
017F            993   ;        main.c:211: char getchar1_with_timeout (void)
017F            994   ;        -----------------------------------------
017F            995   ;         function getchar1_with_timeout
017F            996   ;        -----------------------------------------
017F            997   _getchar1_with_timeout:
017F            998   ;        main.c:215: SFRPAGE = 0x20;
017F 75A720     999            mov     _SFRPAGE,#0x20
0182           1000   ;        main.c:217: while (!RI1)
0182 7A00      1001            mov     r2,#0x00
0184 7B00      1002            mov     r3,#0x00
0186           1003   L009003?:
0186 20C860    1004            jb      _RI1,L009005?
0189           1005   ;        main.c:219: SFRPAGE = 0x00;
0189 75A700    1006            mov     _SFRPAGE,#0x00
018C           1007   ;        main.c:220: Timer3us(20);
018C 758214    1008            mov     dpl,#0x14
018F C002      1009            push    ar2
0191 C003      1010            push    ar3
0193 120000    1011            lcall   _Timer3us
0196 D003      1012            pop     ar3
0198 D002      1013            pop     ar2
019A           1014   ;        main.c:221: SFRPAGE = 0x20;
019A 75A720    1015            mov     _SFRPAGE,#0x20
019D           1016   ;        main.c:222: timeout++;
019D 0A        1017            inc     r2
019E BA00A0    1018            cjne    r2,#0x00,L009012?
01A1 0B        1019            inc     r3
01A2           1020   L009012?:
01A2           1021   ;        main.c:223: if(timeout==25000)
01A2 BAA820    1022            cjne    r2,#0xA8,L009003?
01A5 BB6120    1023            cjne    r3,#0x61,L009003?
01A8           1024   ;        main.c:225: SFRPAGE = 0x00;
01A8 75A700    1025            mov     _SFRPAGE,#0x00
01AB           1026   ;        main.c:226: return ('\n'); // Timeout after half second
01AB 75820A    1027            mov     dpl,#0x0A
01AE 22        1028            ret
01AF           1029   L009005?:
01AF           1030   ;        main.c:229: RI1=0;
01AF C2C8      1031            clr     _RI1
01B1           1032   ;        main.c:231: SCON1&=0b_0011_1111;
01B1 53C83F    1033            anl     _SCON1,#0x3F
01B4           1034   ;        main.c:232: c = SBUF1;
01B4 859282    1035            mov     dpl,_SBUF1
01B7           1036   ;        main.c:233: SFRPAGE = 0x00;
01B7 75A700    1037            mov     _SFRPAGE,#0x00
01BA           1038   ;        main.c:234: return (c);
01BA 22        1039            ret
01BB           1040   ;------------------------------------------------------------
01BB           1041   ;Allocation info for local variables in function 'getstr1'
01BB           1042   ;------------------------------------------------------------
01BB           1043   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1044   ;s                         Allocated to registers r2 r3 r4 
01BB           1045   ;c                         Allocated to registers r1 
01BB           1046   ;cnt                       Allocated to registers r5 
01BB           1047   ;------------------------------------------------------------
01BB           1048   ;        main.c:237: void getstr1 (char * s, unsigned char n)
01BB           1049   ;        -----------------------------------------
01BB           1050   ;         function getstr1
01BB           1051   ;        -----------------------------------------
01BB           1052   _getstr1:
01BB AA82      1053            mov     r2,dpl
01BD AB83      1054            mov     r3,dph
01BF ACF0      1055            mov     r4,b
01C1           1056   ;        main.c:243: while(1)
01C1 7D00      1057            mov     r5,#0x00
01C3 8A06      1058            mov     ar6,r2
01C5 8B07      1059            mov     ar7,r3
01C7 8C00      1060            mov     ar0,r4
01C9           1061   L010007?:
01C9           1062   ;        main.c:245: c=getchar1_with_timeout();
01C9 C002      1063            push    ar2
01CB C003      1064            push    ar3
01CD C004      1065            push    ar4
01CF C005      1066            push    ar5
01D1 C006      1067            push    ar6
01D3 C007      1068            push    ar7
01D5 C000      1069            push    ar0
01D7 120000    1070            lcall   _getchar1_with_timeout
01DA A982      1071            mov     r1,dpl
01DC D000      1072            pop     ar0
01DE D007      1073            pop     ar7
01E0 D006      1074            pop     ar6
01E2 D005      1075            pop     ar5
01E4 D004      1076            pop     ar4
01E6 D003      1077            pop     ar3
01E8 D002      1078            pop     ar2
01EA           1079   ;        main.c:246: if(c=='\n')
01EA B90A20    1080            cjne    r1,#0x0A,L010002?
01ED           1081   ;        main.c:248: *s=0;
01ED 8A82      1082            mov     dpl,r2
01EF 8B83      1083            mov     dph,r3
01F1 8CF0      1084            mov     b,r4
01F3 E4        1085            clr     a
01F4           1086   ;        main.c:249: return;
01F4 020000    1087            ljmp    __gptrput
01F7           1088   L010002?:
01F7           1089   ;        main.c:252: if (cnt<n)
01F7 C3        1090            clr     c
01F8 ED        1091            mov     a,r5
01F9 9550      1092            subb    a,_getstr1_PARM_2
01FB 5000      1093            jnc     L010004?
01FD           1094   ;        main.c:254: cnt++;
01FD 0D        1095            inc     r5
01FE           1096   ;        main.c:255: *s=c;
01FE 8E82      1097            mov     dpl,r6
0200 8F83      1098            mov     dph,r7
0202 88F0      1099            mov     b,r0
0204 E9        1100            mov     a,r1
0205 120000    1101            lcall   __gptrput
0208 A3        1102            inc     dptr
0209 AE82      1103            mov     r6,dpl
020B AF83      1104            mov     r7,dph
020D           1105   ;        main.c:256: s++;
020D 8E02      1106            mov     ar2,r6
020F 8F03      1107            mov     ar3,r7
0211 8804      1108            mov     ar4,r0
0213 8000      1109            sjmp    L010007?
0215           1110   L010004?:
0215           1111   ;        main.c:260: *s=0;
0215 8A82      1112            mov     dpl,r2
0217 8B83      1113            mov     dph,r3
0219 8CF0      1114            mov     b,r4
021B E4        1115            clr     a
021C           1116   ;        main.c:261: return;
021C 020000    1117            ljmp    __gptrput
021F           1118   ;------------------------------------------------------------
021F           1119   ;Allocation info for local variables in function 'RXU1'
021F           1120   ;------------------------------------------------------------
021F           1121   ;------------------------------------------------------------
021F           1122   ;        main.c:267: bit RXU1 (void)
021F           1123   ;        -----------------------------------------
021F           1124   ;         function RXU1
021F           1125   ;        -----------------------------------------
021F           1126   _RXU1:
021F           1127   ;        main.c:270: SFRPAGE = 0x20;
021F 75A720    1128            mov     _SFRPAGE,#0x20
0222           1129   ;        main.c:271: mybit=RI1;
0222 A2C8      1130            mov     c,_RI1
0224           1131   ;        main.c:272: SFRPAGE = 0x00;
0224 75A700    1132            mov     _SFRPAGE,#0x00
0227           1133   ;        main.c:273: return mybit;
0227 22        1134            ret
0228           1135   ;------------------------------------------------------------
0228           1136   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1137   ;------------------------------------------------------------
0228           1138   ;ms                        Allocated to registers r2 r3 
0228           1139   ;j                         Allocated to registers r4 r5 
0228           1140   ;k                         Allocated to registers r6 
0228           1141   ;------------------------------------------------------------
0228           1142   ;        main.c:276: void waitms_or_RI1 (unsigned int ms)
0228           1143   ;        -----------------------------------------
0228           1144   ;         function waitms_or_RI1
0228           1145   ;        -----------------------------------------
0228           1146   _waitms_or_RI1:
0228 AA82      1147            mov     r2,dpl
022A AB83      1148            mov     r3,dph
022C           1149   ;        main.c:280: for(j=0; j<ms; j++)
022C 7C00      1150            mov     r4,#0x00
022E 7D00      1151            mov     r5,#0x00
0230           1152   L012007?:
0230 C3        1153            clr     c
0231 EC        1154            mov     a,r4
0232 9A        1155            subb    a,r2
0233 ED        1156            mov     a,r5
0234 9B        1157            subb    a,r3
0235 5000      1158            jnc     L012011?
0237           1159   ;        main.c:282: for (k=0; k<4; k++)
0237 7E00      1160            mov     r6,#0x00
0239           1161   L012003?:
0239 BE04A0    1162            cjne    r6,#0x04,L012019?
023C           1163   L012019?:
023C 5000      1164            jnc     L012009?
023E           1165   ;        main.c:284: if(RXU1()) return;
023E C002      1166            push    ar2
0240 C003      1167            push    ar3
0242 C004      1168            push    ar4
0244 C005      1169            push    ar5
0246 C006      1170            push    ar6
0248 120000    1171            lcall   _RXU1
024B E4        1172            clr     a
024C 33        1173            rlc     a
024D D006      1174            pop     ar6
024F D005      1175            pop     ar5
0251 D004      1176            pop     ar4
0253 D003      1177            pop     ar3
0255 D002      1178            pop     ar2
0257 6000      1179            jz      L012002?
0259 22        1180            ret
025A           1181   L012002?:
025A           1182   ;        main.c:285: Timer3us(250);
025A 7582FA    1183            mov     dpl,#0xFA
025D C002      1184            push    ar2
025F C003      1185            push    ar3
0261 C004      1186            push    ar4
0263 C005      1187            push    ar5
0265 C006      1188            push    ar6
0267 120000    1189            lcall   _Timer3us
026A D006      1190            pop     ar6
026C D005      1191            pop     ar5
026E D004      1192            pop     ar4
0270 D003      1193            pop     ar3
0272 D002      1194            pop     ar2
0274           1195   ;        main.c:282: for (k=0; k<4; k++)
0274 0E        1196            inc     r6
0275 8000      1197            sjmp    L012003?
0277           1198   L012009?:
0277           1199   ;        main.c:280: for(j=0; j<ms; j++)
0277 0C        1200            inc     r4
0278 BC00E0    1201            cjne    r4,#0x00,L012007?
027B 0D        1202            inc     r5
027C 8000      1203            sjmp    L012007?
027E           1204   L012011?:
027E 22        1205            ret
027F           1206   ;------------------------------------------------------------
027F           1207   ;Allocation info for local variables in function 'SendATCommand'
027F           1208   ;------------------------------------------------------------
027F           1209   ;s                         Allocated to registers r2 r3 r4 
027F           1210   ;------------------------------------------------------------
027F           1211   ;        main.c:290: void SendATCommand (char * s)
027F           1212   ;        -----------------------------------------
027F           1213   ;         function SendATCommand
027F           1214   ;        -----------------------------------------
027F           1215   _SendATCommand:
027F AA82      1216            mov     r2,dpl
0281 AB83      1217            mov     r3,dph
0283 ACF0      1218            mov     r4,b
0285           1219   ;        main.c:292: printf("Command: %s", s);
0285 C002      1220            push    ar2
0287 C003      1221            push    ar3
0289 C004      1222            push    ar4
028B C002      1223            push    ar2
028D C003      1224            push    ar3
028F C004      1225            push    ar4
0291 7460      1226            mov     a,#__str_0
0293 C0E0      1227            push    acc
0295 74BF      1228            mov     a,#(__str_0 >> 8)
0297 C0E0      1229            push    acc
0299 7480      1230            mov     a,#0x80
029B C0E0      1231            push    acc
029D 120000    1232            lcall   _printf
02A0 E581      1233            mov     a,sp
02A2 24FA      1234            add     a,#0xfa
02A4 F581      1235            mov     sp,a
02A6           1236   ;        main.c:293: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1237            clr     _P2_0
02A8           1238   ;        main.c:294: waitms(5);
02A8 900005    1239            mov     dptr,#0x0005
02AB 120000    1240            lcall   _waitms
02AE D004      1241            pop     ar4
02B0 D003      1242            pop     ar3
02B2 D002      1243            pop     ar2
02B4           1244   ;        main.c:295: sendstr1(s);
02B4 8A82      1245            mov     dpl,r2
02B6 8B83      1246            mov     dph,r3
02B8 8CF0      1247            mov     b,r4
02BA 120000    1248            lcall   _sendstr1
02BD           1249   ;        main.c:296: getstr1(buff, sizeof(buff)-1);
02BD 755013    1250            mov     _getstr1_PARM_2,#0x13
02C0 904410    1251            mov     dptr,#_buff
02C3 75F040    1252            mov     b,#0x40
02C6 120000    1253            lcall   _getstr1
02C9           1254   ;        main.c:297: waitms(10);
02C9 90000A    1255            mov     dptr,#0x000A
02CC 120000    1256            lcall   _waitms
02CF           1257   ;        main.c:298: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1258            setb    _P2_0
02D1           1259   ;        main.c:299: printf("Response: %s\r\n", buff);
02D1 7410      1260            mov     a,#_buff
02D3 C0E0      1261            push    acc
02D5 7444      1262            mov     a,#(_buff >> 8)
02D7 C0E0      1263            push    acc
02D9 7440      1264            mov     a,#0x40
02DB C0E0      1265            push    acc
02DD 7428      1266            mov     a,#__str_1
02DF C0E0      1267            push    acc
02E1 74C0      1268            mov     a,#(__str_1 >> 8)
02E3 C0E0      1269            push    acc
02E5 7480      1270            mov     a,#0x80
02E7 C0E0      1271            push    acc
02E9 120000    1272            lcall   _printf
02EC E581      1273            mov     a,sp
02EE 24FA      1274            add     a,#0xfa
02F0 F581      1275            mov     sp,a
02F2 22        1276            ret
02F3           1277   ;------------------------------------------------------------
02F3           1278   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1279   ;------------------------------------------------------------
02F3           1280   ;------------------------------------------------------------
02F3           1281   ;        main.c:302: void ReceptionOff (void)
02F3           1282   ;        -----------------------------------------
02F3           1283   ;         function ReceptionOff
02F3           1284   ;        -----------------------------------------
02F3           1285   _ReceptionOff:
02F3           1286   ;        main.c:304: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1287            clr     _P2_0
02F5           1288   ;        main.c:305: waitms(10);
02F5 90000A    1289            mov     dptr,#0x000A
02F8 120000    1290            lcall   _waitms
02FB           1291   ;        main.c:306: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C068    1292            mov     dptr,#__str_2
02FE 75F080    1293            mov     b,#0x80
0301 120000    1294            lcall   _sendstr1
0304           1295   ;        main.c:307: waitms(10);
0304 90000A    1296            mov     dptr,#0x000A
0307 120000    1297            lcall   _waitms
030A           1298   ;        main.c:309: SCON1&=0b_0011_1111;
030A 53C83F    1299            anl     _SCON1,#0x3F
030D           1300   ;        main.c:310: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1301            setb    _P2_0
030F 22        1302            ret
0310           1303   ;------------------------------------------------------------
0310           1304   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1305   ;------------------------------------------------------------
0310           1306   ;pin                       Allocated to registers r2 
0310           1307   ;mask                      Allocated to registers r3 
0310           1308   ;------------------------------------------------------------
0310           1309   ;        main.c:313: void Set_Pin_Output (unsigned char pin)
0310           1310   ;        -----------------------------------------
0310           1311   ;         function Set_Pin_Output
0310           1312   ;        -----------------------------------------
0310           1313   _Set_Pin_Output:
0310 AA82      1314            mov     r2,dpl
0312           1315   ;        main.c:317: mask=(1<<(pin&0x7));
0312 7407      1316            mov     a,#0x07
0314 5A        1317            anl     a,r2
0315 F5F0      1318            mov     b,a
0317 05F0      1319            inc     b
0319 7401      1320            mov     a,#0x01
031B 8000      1321            sjmp    L015011?
031D           1322   L015009?:
031D 25E0      1323            add     a,acc
031F           1324   L015011?:
031F D5F0E8    1325            djnz    b,L015009?
0322 FB        1326            mov     r3,a
0323           1327   ;        main.c:318: switch(pin/0x10)
0323 EA        1328            mov     a,r2
0324 C4        1329            swap    a
0325 540F      1330            anl     a,#0x0f
0327 FA        1331            mov  r2,a
0328 24FC      1332            add     a,#0xff - 0x03
032A 4000      1333            jc      L015006?
032C EA        1334            mov     a,r2
032D 2A        1335            add     a,r2
032E 2A        1336            add     a,r2
032F 90C168    1337            mov     dptr,#L015013?
0332 73        1338            jmp     @a+dptr
0333           1339   L015013?:
0333 020000    1340            ljmp    L015001?
0336 020000    1341            ljmp    L015002?
0339 020000    1342            ljmp    L015003?
033C 020000    1343            ljmp    L015004?
033F           1344   ;        main.c:320: case 0: P0MDOUT |= mask; break;
033F           1345   L015001?:
033F EB        1346            mov     a,r3
0340 42A4      1347            orl     _P0MDOUT,a
0342           1348   ;        main.c:321: case 1: P1MDOUT |= mask; break;
0342 22        1349            ret
0343           1350   L015002?:
0343 EB        1351            mov     a,r3
0344 42A5      1352            orl     _P1MDOUT,a
0346           1353   ;        main.c:322: case 2: P2MDOUT |= mask; break; 
0346 22        1354            ret
0347           1355   L015003?:
0347 EB        1356            mov     a,r3
0348 42A6      1357            orl     _P2MDOUT,a
034A           1358   ;        main.c:323: case 3: P3MDOUT |= mask; break; 
034A 22        1359            ret
034B           1360   L015004?:
034B EB        1361            mov     a,r3
034C 429C      1362            orl     _P3MDOUT,a
034E           1363   ;        main.c:324: }   
034E           1364   L015006?:
034E 22        1365            ret
034F           1366   ;------------------------------------------------------------
034F           1367   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1368   ;------------------------------------------------------------
034F           1369   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1370   ;pin                       Allocated to registers r2 
034F           1371   ;------------------------------------------------------------
034F           1372   ;        main.c:327: void Set_Pin_Input (unsigned char pin)
034F           1373   ;        -----------------------------------------
034F           1374   ;         function Set_Pin_Input
034F           1375   ;        -----------------------------------------
034F           1376   _Set_Pin_Input:
034F AA82      1377            mov     r2,dpl
0351           1378   ;        main.c:331: mask=(1<<(pin&0x7));
0351 7407      1379            mov     a,#0x07
0353 5A        1380            anl     a,r2
0354 F5F0      1381            mov     b,a
0356 05F0      1382            inc     b
0358 7401      1383            mov     a,#0x01
035A 8000      1384            sjmp    L016011?
035C           1385   L016009?:
035C 25E0      1386            add     a,acc
035E           1387   L016011?:
035E D5F0E8    1388            djnz    b,L016009?
0361           1389   ;        main.c:332: mask=~mask;
0361 F4        1390            cpl     a
0362 FB        1391            mov     r3,a
0363           1392   ;        main.c:333: switch(pin/0x10)
0363 EA        1393            mov     a,r2
0364 C4        1394            swap    a
0365 540F      1395            anl     a,#0x0f
0367 FA        1396            mov  r2,a
0368 24FC      1397            add     a,#0xff - 0x03
036A 4000      1398            jc      L016006?
036C EA        1399            mov     a,r2
036D 2A        1400            add     a,r2
036E 2A        1401            add     a,r2
036F 90C368    1402            mov     dptr,#L016013?
0372 73        1403            jmp     @a+dptr
0373           1404   L016013?:
0373 020000    1405            ljmp    L016001?
0376 020000    1406            ljmp    L016002?
0379 020000    1407            ljmp    L016003?
037C 020000    1408            ljmp    L016004?
037F           1409   ;        main.c:335: case 0: P0MDOUT &= mask; break;
037F           1410   L016001?:
037F EB        1411            mov     a,r3
0380 52A4      1412            anl     _P0MDOUT,a
0382           1413   ;        main.c:336: case 1: P1MDOUT &= mask; break;
0382 22        1414            ret
0383           1415   L016002?:
0383 EB        1416            mov     a,r3
0384 52A5      1417            anl     _P1MDOUT,a
0386           1418   ;        main.c:337: case 2: P2MDOUT &= mask; break; 
0386 22        1419            ret
0387           1420   L016003?:
0387 EB        1421            mov     a,r3
0388 52A6      1422            anl     _P2MDOUT,a
038A           1423   ;        main.c:338: case 3: P3MDOUT &= mask; break; 
038A 22        1424            ret
038B           1425   L016004?:
038B EB        1426            mov     a,r3
038C 529C      1427            anl     _P3MDOUT,a
038E           1428   ;        main.c:339: }   
038E           1429   L016006?:
038E 22        1430            ret
038F           1431   ;------------------------------------------------------------
038F           1432   ;Allocation info for local variables in function 'InitADC'
038F           1433   ;------------------------------------------------------------
038F           1434   ;------------------------------------------------------------
038F           1435   ;        main.c:342: void InitADC (void)
038F           1436   ;        -----------------------------------------
038F           1437   ;         function InitADC
038F           1438   ;        -----------------------------------------
038F           1439   _InitADC:
038F           1440   ;        main.c:344: SFRPAGE = 0x00;
038F 75A700    1441            mov     _SFRPAGE,#0x00
0392           1442   ;        main.c:345: ADEN=0; // Disable ADC
0392 C2EF      1443            clr     _ADEN
0394           1444   ;        main.c:350: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1445            mov     _ADC0CN1,#0x80
0397           1446   ;        main.c:354: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1447            mov     _ADC0CF0,#0x20
039A           1448   ;        main.c:358: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1449            mov     _ADC0CF1,#0x1E
039D           1450   ;        main.c:367: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1451            mov     _ADC0CN0,#0x00
03A0           1452   ;        main.c:372: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1453            mov     _ADC0CF2,#0x3F
03A3           1454   ;        main.c:376: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1455            mov     _ADC0CN2,#0x00
03A6           1456   ;        main.c:378: ADEN=1; // Enable ADC
03A6 D2EF      1457            setb    _ADEN
03A8 22        1458            ret
03A9           1459   ;------------------------------------------------------------
03A9           1460   ;Allocation info for local variables in function 'InitPinADC'
03A9           1461   ;------------------------------------------------------------
03A9           1462   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1463   ;portno                    Allocated to registers r2 
03A9           1464   ;mask                      Allocated to registers r3 
03A9           1465   ;------------------------------------------------------------
03A9           1466   ;        main.c:381: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1467   ;        -----------------------------------------
03A9           1468   ;         function InitPinADC
03A9           1469   ;        -----------------------------------------
03A9           1470   _InitPinADC:
03A9 AA82      1471            mov     r2,dpl
03AB           1472   ;        main.c:385: mask=1<<pin_num;
03AB 8588F0    1473            mov     b,_InitPinADC_PARM_2
03AE 05F0      1474            inc     b
03B0 7401      1475            mov     a,#0x01
03B2 8000      1476            sjmp    L018013?
03B4           1477   L018011?:
03B4 25E0      1478            add     a,acc
03B6           1479   L018013?:
03B6 D5F0E8    1480            djnz    b,L018011?
03B9 FB        1481            mov     r3,a
03BA           1482   ;        main.c:387: SFRPAGE = 0x20;
03BA 75A720    1483            mov     _SFRPAGE,#0x20
03BD           1484   ;        main.c:388: switch (portno)
03BD BA0028    1485            cjne    r2,#0x00,L018014?
03C0 8000      1486            sjmp    L018001?
03C2           1487   L018014?:
03C2 BA01A8    1488            cjne    r2,#0x01,L018015?
03C5 8000      1489            sjmp    L018002?
03C7           1490   L018015?:
03C7           1491   ;        main.c:390: case 0:
03C7 BA0228    1492            cjne    r2,#0x02,L018005?
03CA 8000      1493            sjmp    L018003?
03CC           1494   L018001?:
03CC           1495   ;        main.c:391: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1496            mov     a,r3
03CD F4        1497            cpl     a
03CE FA        1498            mov     r2,a
03CF 52F1      1499            anl     _P0MDIN,a
03D1           1500   ;        main.c:392: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1501            mov     a,r3
03D2 42D4      1502            orl     _P0SKIP,a
03D4           1503   ;        main.c:393: break;
03D4           1504   ;        main.c:394: case 1:
03D4 8000      1505            sjmp    L018005?
03D6           1506   L018002?:
03D6           1507   ;        main.c:395: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1508            mov     a,r3
03D7 F4        1509            cpl     a
03D8 FA        1510            mov     r2,a
03D9 52F2      1511            anl     _P1MDIN,a
03DB           1512   ;        main.c:396: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1513            mov     a,r3
03DC 42D5      1514            orl     _P1SKIP,a
03DE           1515   ;        main.c:397: break;
03DE           1516   ;        main.c:398: case 2:
03DE 8000      1517            sjmp    L018005?
03E0           1518   L018003?:
03E0           1519   ;        main.c:399: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1520            mov     a,r3
03E1 F4        1521            cpl     a
03E2 FA        1522            mov     r2,a
03E3 52F3      1523            anl     _P2MDIN,a
03E5           1524   ;        main.c:400: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1525            mov     a,r3
03E6 42CC      1526            orl     _P2SKIP,a
03E8           1527   ;        main.c:404: }
03E8           1528   L018005?:
03E8           1529   ;        main.c:405: SFRPAGE = 0x00;
03E8 75A700    1530            mov     _SFRPAGE,#0x00
03EB 22        1531            ret
03EC           1532   ;------------------------------------------------------------
03EC           1533   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1534   ;------------------------------------------------------------
03EC           1535   ;pin                       Allocated to registers 
03EC           1536   ;------------------------------------------------------------
03EC           1537   ;        main.c:408: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1538   ;        -----------------------------------------
03EC           1539   ;         function ADC_at_Pin
03EC           1540   ;        -----------------------------------------
03EC           1541   _ADC_at_Pin:
03EC 8582BB    1542            mov     _ADC0MX,dpl
03EF           1543   ;        main.c:411: ADINT = 0;
03EF C2ED      1544            clr     _ADINT
03F1           1545   ;        main.c:412: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1546            setb    _ADBUSY
03F3           1547   ;        main.c:413: while (!ADINT); // Wait for conversion to complete
03F3           1548   L019001?:
03F3 30EDA8    1549            jnb     _ADINT,L019001?
03F6           1550   ;        main.c:414: return (ADC0);
03F6 85BD82    1551            mov     dpl,_ADC0
03F9 85BE83    1552            mov     dph,(_ADC0 >> 8)
03FC 22        1553            ret
03FD           1554   ;------------------------------------------------------------
03FD           1555   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1556   ;------------------------------------------------------------
03FD           1557   ;------------------------------------------------------------
03FD           1558   ;        main.c:417: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1559   ;        -----------------------------------------
03FD           1560   ;         function Timer5_ISR
03FD           1561   ;        -----------------------------------------
03FD           1562   _Timer5_ISR:
03FD C0E0      1563            push    acc
03FF C002      1564            push    ar2
0401 C003      1565            push    ar3
0403 C0D0      1566            push    psw
0405 75D000    1567            mov     psw,#0x00
0408           1568   ;        main.c:419: SFRPAGE=0x10;
0408 75A710    1569            mov     _SFRPAGE,#0x10
040B           1570   ;        main.c:420: TF5H = 0; // Clear Timer5 interrupt flag
040B C2C7      1571            clr     _TF5H
040D           1572   ;        main.c:421: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
040D 75D2C4    1573            mov     _TMR5RL,#0xC4
0410 75D3FF    1574            mov     (_TMR5RL >> 8),#0xFF
0413           1575   ;        main.c:423: pwm_counter++; 
0413 0550      1576            inc     _pwm_counter
0415 E4        1577            clr     a
0416 B55028    1578            cjne    a,_pwm_counter,L020031?
0419 0551      1579            inc     (_pwm_counter + 1)
041B           1580   L020031?:
041B           1581   ;        main.c:424: if (pwm_counter == 100){
041B 7464      1582            mov     a,#0x64
041D B55068    1583            cjne    a,_pwm_counter,L020032?
0420 E4        1584            clr     a
0421 B55168    1585            cjne    a,(_pwm_counter + 1),L020032?
0424 8000      1586            sjmp    L020033?
0426           1587   L020032?:
0426 8000      1588            sjmp    L020002?
0428           1589   L020033?:
0428           1590   ;        main.c:425: pwm_counter = 0; 
0428 E4        1591            clr     a
0429 F550      1592            mov     _pwm_counter,a
042B F551      1593            mov     (_pwm_counter + 1),a
042D           1594   L020002?:
042D           1595   ;        main.c:428: if (pwm_right > pwm_counter){
042D AA90      1596            mov     r2,_pwm_right
042F 7B00      1597            mov     r3,#0x00
0431 C3        1598            clr     c
0432 E550      1599            mov     a,_pwm_counter
0434 9A        1600            subb    a,r2
0435 E551      1601            mov     a,(_pwm_counter + 1)
0437 9B        1602            subb    a,r3
0438 5000      1603            jnc     L020007?
043A           1604   ;        main.c:429: if(L_motor_dir){
043A E550      1605            mov     a,_L_motor_dir
043C 6000      1606            jz      L020004?
043E           1607   ;        main.c:430: L_bridge_1 = 1; 
043E D2A1      1608            setb    _P2_1
0440           1609   ;        main.c:431: L_bridge_2 = 0; 
0440 C2A2      1610            clr     _P2_2
0442 8000      1611            sjmp    L020008?
0444           1612   L020004?:
0444           1613   ;        main.c:434: L_bridge_1 = 0; 
0444 C2A1      1614            clr     _P2_1
0446           1615   ;        main.c:435: L_bridge_2 = 1; 
0446 D2A2      1616            setb    _P2_2
0448 8000      1617            sjmp    L020008?
044A           1618   L020007?:
044A           1619   ;        main.c:439: L_bridge_1 = 0; 
044A C2A1      1620            clr     _P2_1
044C           1621   ;        main.c:440: L_bridge_2 = 0; 
044C C2A2      1622            clr     _P2_2
044E           1623   L020008?:
044E           1624   ;        main.c:442: if (pwm_left > pwm_counter){
044E AAD0      1625            mov     r2,_pwm_left
0450 7B00      1626            mov     r3,#0x00
0452 C3        1627            clr     c
0453 E550      1628            mov     a,_pwm_counter
0455 9A        1629            subb    a,r2
0456 E551      1630            mov     a,(_pwm_counter + 1)
0458 9B        1631            subb    a,r3
0459 5000      1632            jnc     L020013?
045B           1633   ;        main.c:443: if (R_motor_dir){
045B E510      1634            mov     a,_R_motor_dir
045D 6000      1635            jz      L020010?
045F           1636   ;        main.c:444: R_bridge_1 = 1; 
045F D2A4      1637            setb    _P2_4
0461           1638   ;        main.c:445: R_bridge_2 = 0;
0461 C2A3      1639            clr     _P2_3
0463 8000      1640            sjmp    L020014?
0465           1641   L020010?:
0465           1642   ;        main.c:448: R_bridge_1 = 0; 
0465 C2A4      1643            clr     _P2_4
0467           1644   ;        main.c:449: R_bridge_2 = 1;
0467 D2A3      1645            setb    _P2_3
0469 8000      1646            sjmp    L020014?
046B           1647   L020013?:
046B           1648   ;        main.c:453: R_bridge_1 = 0; 
046B C2A4      1649            clr     _P2_4
046D           1650   ;        main.c:454: R_bridge_2 = 0; 
046D C2A3      1651            clr     _P2_3
046F           1652   L020014?:
046F           1653   ;        main.c:457: servo_counter++;
046F 0510      1654            inc     _servo_counter
0471 E4        1655            clr     a
0472 B510A8    1656            cjne    a,_servo_counter,L020038?
0475 0511      1657            inc     (_servo_counter + 1)
0477           1658   L020038?:
0477           1659   ;        main.c:458: if(servo_counter==2000)
0477 74D0      1660            mov     a,#0xD0
0479 B510E8    1661            cjne    a,_servo_counter,L020016?
047C 7407      1662            mov     a,#0x07
047E B511E8    1663            cjne    a,(_servo_counter + 1),L020016?
0481           1664   ;        main.c:460: servo_counter=0;
0481 E4        1665            clr     a
0482 F510      1666            mov     _servo_counter,a
0484 F511      1667            mov     (_servo_counter + 1),a
0486           1668   ;        main.c:461: Servo_arm=1;
0486 D296      1669            setb    _P1_6
0488           1670   ;        main.c:462: Servo_base=1;
0488 D297      1671            setb    _P1_7
048A           1672   L020016?:
048A           1673   ;        main.c:464: if(servo_arm==servo_counter)
048A AA90      1674            mov     r2,_servo_arm
048C 7B00      1675            mov     r3,#0x00
048E EA        1676            mov     a,r2
048F B51028    1677            cjne    a,_servo_counter,L020018?
0492 EB        1678            mov     a,r3
0493 B51128    1679            cjne    a,(_servo_counter + 1),L020018?
0496           1680   ;        main.c:466: Servo_arm=0;
0496 C296      1681            clr     _P1_6
0498           1682   L020018?:
0498           1683   ;        main.c:468: if(servo_base==servo_counter)
0498 AAD0      1684            mov     r2,_servo_base
049A 7B00      1685            mov     r3,#0x00
049C EA        1686            mov     a,r2
049D B51068    1687            cjne    a,_servo_counter,L020021?
04A0 EB        1688            mov     a,r3
04A1 B51168    1689            cjne    a,(_servo_counter + 1),L020021?
04A4           1690   ;        main.c:470: Servo_base=0;
04A4 C297      1691            clr     _P1_7
04A6           1692   L020021?:
04A6 D0D0      1693            pop     psw
04A8 D003      1694            pop     ar3
04AA D002      1695            pop     ar2
04AC D0E0      1696            pop     acc
04AE 32        1697            reti
04AF           1698   ;        eliminated unneeded push/pop dpl
04AF           1699   ;        eliminated unneeded push/pop dph
04AF           1700   ;        eliminated unneeded push/pop b
04AF           1701   ;------------------------------------------------------------
04AF           1702   ;Allocation info for local variables in function 'servo_pick'
04AF           1703   ;------------------------------------------------------------
04AF           1704   ;------------------------------------------------------------
04AF           1705   ;        main.c:474: servo_pick(){
04AF           1706   ;        -----------------------------------------
04AF           1707   ;         function servo_pick
04AF           1708   ;        -----------------------------------------
04AF           1709   _servo_pick:
04AF           1710   ;        main.c:475: servo_arm = 1;
04AF 759001    1711            mov     _servo_arm,#0x01
04B2           1712   ;        main.c:476: servo_base = 1;
04B2 75D001    1713            mov     _servo_base,#0x01
04B5           1714   ;        main.c:477: waitms(1000);
04B5 9003E8    1715            mov     dptr,#0x03E8
04B8 120000    1716            lcall   _waitms
04BB           1717   ;        main.c:478: servo_base = 250;
04BB 75D0FA    1718            mov     _servo_base,#0xFA
04BE           1719   ;        main.c:479: waitms(1000);
04BE 9003E8    1720            mov     dptr,#0x03E8
04C1 120000    1721            lcall   _waitms
04C4           1722   ;        main.c:480: servo_arm = 250;
04C4 7590FA    1723            mov     _servo_arm,#0xFA
04C7           1724   ;        main.c:481: waitms(1000);
04C7 9003E8    1725            mov     dptr,#0x03E8
04CA 120000    1726            lcall   _waitms
04CD           1727   ;        main.c:482: servo_base = 2;
04CD 75D002    1728            mov     _servo_base,#0x02
04D0           1729   ;        main.c:483: waitms(1000);
04D0 9003E8    1730            mov     dptr,#0x03E8
04D3 120000    1731            lcall   _waitms
04D6           1732   ;        main.c:484: servo_arm = 2;
04D6 759002    1733            mov     _servo_arm,#0x02
04D9 22        1734            ret
04DA           1735   ;------------------------------------------------------------
04DA           1736   ;Allocation info for local variables in function 'main'
04DA           1737   ;------------------------------------------------------------
04DA           1738   ;cnt                       Allocated to registers 
04DA           1739   ;c                         Allocated to registers r4 
04DA           1740   ;vx_error                  Allocated with name '_main_vx_error_1_126'
04DA           1741   ;vy_error                  Allocated with name '_main_vy_error_1_126'
04DA           1742   ;vx_err                    Allocated with name '_main_vx_err_1_126'
04DA           1743   ;vy_err                    Allocated with name '_main_vy_err_1_126'
04DA           1744   ;vx                        Allocated with name '_main_vx_1_126'
04DA           1745   ;vy                        Allocated with name '_main_vy_1_126'
04DA           1746   ;threshold                 Allocated to registers 
04DA           1747   ;motor_pwm                 Allocated to registers 
04DA           1748   ;------------------------------------------------------------
04DA           1749   ;        main.c:487: void main (void)
04DA           1750   ;        -----------------------------------------
04DA           1751   ;         function main
04DA           1752   ;        -----------------------------------------
04DA           1753   _main:
04DA           1754   ;        main.c:492: int vx = 0, vy = 0; 
04DA E4        1755            clr     a
04DB F590      1756            mov     _main_vx_1_126,a
04DD F591      1757            mov     (_main_vx_1_126 + 1),a
04DF F5D0      1758            mov     _main_vy_1_126,a
04E1 F5D1      1759            mov     (_main_vy_1_126 + 1),a
04E3           1760   ;        main.c:496: Set_Pin_Output(0x24);
04E3 758224    1761            mov     dpl,#0x24
04E6 120000    1762            lcall   _Set_Pin_Output
04E9           1763   ;        main.c:497: Set_Pin_Output(0x23);
04E9 758223    1764            mov     dpl,#0x23
04EC 120000    1765            lcall   _Set_Pin_Output
04EF           1766   ;        main.c:498: Set_Pin_Output(0x22);
04EF 758222    1767            mov     dpl,#0x22
04F2 120000    1768            lcall   _Set_Pin_Output
04F5           1769   ;        main.c:499: Set_Pin_Output(0x21);
04F5 758221    1770            mov     dpl,#0x21
04F8 120000    1771            lcall   _Set_Pin_Output
04FB           1772   ;        main.c:500: Set_Pin_Output(0x17);
04FB 758217    1773            mov     dpl,#0x17
04FE 120000    1774            lcall   _Set_Pin_Output
0501           1775   ;        main.c:501: Set_Pin_Output(0x16);
0501 758216    1776            mov     dpl,#0x16
0504 120000    1777            lcall   _Set_Pin_Output
0507           1778   ;        main.c:503: Servo_arm=0;
0507 C296      1779            clr     _P1_6
0509           1780   ;        main.c:504: Servo_base=0;
0509 C297      1781            clr     _P1_7
050B           1782   ;        main.c:506: waitms(500);
050B 9001F4    1783            mov     dptr,#0x01F4
050E 120000    1784            lcall   _waitms
0511           1785   ;        main.c:507: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0511 74A8      1786            mov     a,#__str_3
0513 C0E0      1787            push    acc
0515 74CA      1788            mov     a,#(__str_3 >> 8)
0517 C0E0      1789            push    acc
0519 7480      1790            mov     a,#0x80
051B C0E0      1791            push    acc
051D 120000    1792            lcall   _printf
0520 1581      1793            dec     sp
0522 1581      1794            dec     sp
0524 1581      1795            dec     sp
0526           1796   ;        main.c:508: UART1_Init(9600);
0526 902580    1797            mov     dptr,#0x2580
0529 E4        1798            clr     a
052A F5F0      1799            mov     b,a
052C 120000    1800            lcall   _UART1_Init
052F           1801   ;        main.c:510: ReceptionOff();
052F 120000    1802            lcall   _ReceptionOff
0532           1803   ;        main.c:511: servo_pick();
0532 120000    1804            lcall   _servo_pick
0535           1805   ;        main.c:514: SendATCommand("AT+VER\r\n");
0535 90CAE8    1806            mov     dptr,#__str_4
0538 75F080    1807            mov     b,#0x80
053B 120000    1808            lcall   _SendATCommand
053E           1809   ;        main.c:515: SendATCommand("AT+BAUD\r\n");
053E 90CB28    1810            mov     dptr,#__str_5
0541 75F080    1811            mov     b,#0x80
0544 120000    1812            lcall   _SendATCommand
0547           1813   ;        main.c:516: SendATCommand("AT+RFID\r\n");
0547 90CB68    1814            mov     dptr,#__str_6
054A 75F080    1815            mov     b,#0x80
054D 120000    1816            lcall   _SendATCommand
0550           1817   ;        main.c:517: SendATCommand("AT+DVID\r\n");
0550 90CBA8    1818            mov     dptr,#__str_7
0553 75F080    1819            mov     b,#0x80
0556 120000    1820            lcall   _SendATCommand
0559           1821   ;        main.c:518: SendATCommand("AT+RFC\r\n");
0559 90CBE8    1822            mov     dptr,#__str_8
055C 75F080    1823            mov     b,#0x80
055F 120000    1824            lcall   _SendATCommand
0562           1825   ;        main.c:519: SendATCommand("AT+POWE\r\n");
0562 90CC28    1826            mov     dptr,#__str_9
0565 75F080    1827            mov     b,#0x80
0568 120000    1828            lcall   _SendATCommand
056B           1829   ;        main.c:520: SendATCommand("AT+CLSS\r\n");
056B 90CC68    1830            mov     dptr,#__str_10
056E 75F080    1831            mov     b,#0x80
0571 120000    1832            lcall   _SendATCommand
0574           1833   ;        main.c:521: SendATCommand("AT+DVIDEFEF\r\n");  
0574 90CCA8    1834            mov     dptr,#__str_11
0577 75F080    1835            mov     b,#0x80
057A 120000    1836            lcall   _SendATCommand
057D           1837   ;        main.c:524: L_bridge_1 = 0; 
057D C2A1      1838            clr     _P2_1
057F           1839   ;        main.c:525: L_bridge_2 = 0; 
057F C2A2      1840            clr     _P2_2
0581           1841   ;        main.c:526: R_bridge_1 = 0; 
0581 C2A4      1842            clr     _P2_4
0583           1843   ;        main.c:527: R_bridge_2 = 0; 
0583 C2A3      1844            clr     _P2_3
0585           1845   ;        main.c:530: while(1)
0585 7A00      1846            mov     r2,#0x00
0587 7B00      1847            mov     r3,#0x00
0589           1848   L022049?:
0589           1849   ;        main.c:534: if(RXU1()) // Something has arrived
0589 C002      1850            push    ar2
058B C003      1851            push    ar3
058D 120000    1852            lcall   _RXU1
0590 E4        1853            clr     a
0591 33        1854            rlc     a
0592 D003      1855            pop     ar3
0594 D002      1856            pop     ar2
0596 6000      1857            jz      L022049?
0598           1858   ;        main.c:536: c=getchar1();
0598 C002      1859            push    ar2
059A C003      1860            push    ar3
059C 120000    1861            lcall   _getchar1
059F AC82      1862            mov     r4,dpl
05A1 D003      1863            pop     ar3
05A3 D002      1864            pop     ar2
05A5           1865   ;        main.c:538: if(c=='!') // Master is sending message
05A5 BC2128    1866            cjne    r4,#0x21,L022075?
05A8 8000      1867            sjmp    L022076?
05AA           1868   L022075?:
05AA 020000    1869            ljmp    L022044?
05AD           1870   L022076?:
05AD           1871   ;        main.c:540: getstr1(buff, sizeof(buff)-1);
05AD 755013    1872            mov     _getstr1_PARM_2,#0x13
05B0 904410    1873            mov     dptr,#_buff
05B3 75F040    1874            mov     b,#0x40
05B6 C002      1875            push    ar2
05B8 C003      1876            push    ar3
05BA 120000    1877            lcall   _getstr1
05BD           1878   ;        main.c:541: if(strlen(buff)==7)
05BD 904410    1879            mov     dptr,#_buff
05C0 75F040    1880            mov     b,#0x40
05C3 120000    1881            lcall   _strlen
05C6 AD82      1882            mov     r5,dpl
05C8 AE83      1883            mov     r6,dph
05CA D003      1884            pop     ar3
05CC D002      1885            pop     ar2
05CE BD0728    1886            cjne    r5,#0x07,L022077?
05D1 BE0028    1887            cjne    r6,#0x00,L022077?
05D4 8000      1888            sjmp    L022078?
05D6           1889   L022077?:
05D6 020000    1890            ljmp    L022039?
05D9           1891   L022078?:
05D9           1892   ;        main.c:545: sscanf(buff, "%03d,%03d", &vx, &vy);
05D9 C002      1893            push    ar2
05DB C003      1894            push    ar3
05DD 74D0      1895            mov     a,#_main_vy_1_126
05DF C0E0      1896            push    acc
05E1 74B5      1897            mov     a,#(_main_vy_1_126 >> 8)
05E3 C0E0      1898            push    acc
05E5 7440      1899            mov     a,#0x40
05E7 C0E0      1900            push    acc
05E9 7490      1901            mov     a,#_main_vx_1_126
05EB C0E0      1902            push    acc
05ED 74B5      1903            mov     a,#(_main_vx_1_126 >> 8)
05EF C0E0      1904            push    acc
05F1 7440      1905            mov     a,#0x40
05F3 C0E0      1906            push    acc
05F5 74E8      1907            mov     a,#__str_12
05F7 C0E0      1908            push    acc
05F9 74CE      1909            mov     a,#(__str_12 >> 8)
05FB C0E0      1910            push    acc
05FD 7480      1911            mov     a,#0x80
05FF C0E0      1912            push    acc
0601 7410      1913            mov     a,#_buff
0603 C0E0      1914            push    acc
0605 7444      1915            mov     a,#(_buff >> 8)
0607 C0E0      1916            push    acc
0609 7440      1917            mov     a,#0x40
060B C0E0      1918            push    acc
060D 120000    1919            lcall   _sscanf
0610 E581      1920            mov     a,sp
0612 24F4      1921            add     a,#0xf4
0614 F581      1922            mov     sp,a
0616           1923   ;        main.c:547: printf("Joystick Received: Vx = %03d, Vy = %03d\r\n", vx, vy);
0616 C0D0      1924            push    _main_vy_1_126
0618 C0D1      1925            push    (_main_vy_1_126 + 1)
061A C090      1926            push    _main_vx_1_126
061C C091      1927            push    (_main_vx_1_126 + 1)
061E 7468      1928            mov     a,#__str_13
0620 C0E0      1929            push    acc
0622 74CF      1930            mov     a,#(__str_13 >> 8)
0624 C0E0      1931            push    acc
0626 7480      1932            mov     a,#0x80
0628 C0E0      1933            push    acc
062A 120000    1934            lcall   _printf
062D E581      1935            mov     a,sp
062F 24F9      1936            add     a,#0xf9
0631 F581      1937            mov     sp,a
0633           1938   ;        main.c:550: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0633 E590      1939            mov     a,_main_vx_1_126
0635 C3        1940            clr     c
0636 9550      1941            subb    a,_vx_thres
0638 F582      1942            mov     dpl,a
063A E591      1943            mov     a,(_main_vx_1_126 + 1)
063C 9551      1944            subb    a,(_vx_thres + 1)
063E F583      1945            mov     dph,a
0640 120000    1946            lcall   _abs
0643 858200    1947            mov     __mulint_PARM_2,dpl
0646 858301    1948            mov     (__mulint_PARM_2 + 1),dph
0649 900064    1949            mov     dptr,#0x0064
064C 120000    1950            lcall   __mulint
064F 855000    1951            mov     __divsint_PARM_2,_vx_thres
0652 855101    1952            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
0655 120000    1953            lcall   __divsint
0658 858260    1954            mov     _main_vx_error_1_126,dpl
065B 858361    1955            mov     (_main_vx_error_1_126 + 1),dph
065E           1956   ;        main.c:551: vy_error = abs(vy-vy_thres)*100/vy_thres; 
065E E5D0      1957            mov     a,_main_vy_1_126
0660 C3        1958            clr     c
0661 9510      1959            subb    a,_vy_thres
0663 F582      1960            mov     dpl,a
0665 E5D1      1961            mov     a,(_main_vy_1_126 + 1)
0667 9511      1962            subb    a,(_vy_thres + 1)
0669 F583      1963            mov     dph,a
066B 120000    1964            lcall   _abs
066E 858200    1965            mov     __mulint_PARM_2,dpl
0671 858301    1966            mov     (__mulint_PARM_2 + 1),dph
0674 900064    1967            mov     dptr,#0x0064
0677 120000    1968            lcall   __mulint
067A 851000    1969            mov     __divsint_PARM_2,_vy_thres
067D 851101    1970            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
0680 120000    1971            lcall   __divsint
0683 8582B0    1972            mov     _main_vy_error_1_126,dpl
0686 8583B1    1973            mov     (_main_vy_error_1_126 + 1),dph
0689 D003      1974            pop     ar3
068B D002      1975            pop     ar2
068D           1976   ;        main.c:552: vx_err = vx-vx_thres; 
068D E590      1977            mov     a,_main_vx_1_126
068F C3        1978            clr     c
0690 9550      1979            subb    a,_vx_thres
0692 F500      1980            mov     _main_vx_err_1_126,a
0694 E591      1981            mov     a,(_main_vx_1_126 + 1)
0696 9551      1982            subb    a,(_vx_thres + 1)
0698 F501      1983            mov     (_main_vx_err_1_126 + 1),a
069A           1984   ;        main.c:553: vy_err = vy-vy_thres; 
069A E5D0      1985            mov     a,_main_vy_1_126
069C C3        1986            clr     c
069D 9510      1987            subb    a,_vy_thres
069F F550      1988            mov     _main_vy_err_1_126,a
06A1 E5D1      1989            mov     a,(_main_vy_1_126 + 1)
06A3 9511      1990            subb    a,(_vy_thres + 1)
06A5 F551      1991            mov     (_main_vy_err_1_126 + 1),a
06A7           1992   ;        main.c:554: pwm_left = 0; 
06A7 75D000    1993            mov     _pwm_left,#0x00
06AA           1994   ;        main.c:555: pwm_right = 0; 
06AA 759000    1995            mov     _pwm_right,#0x00
06AD           1996   ;        main.c:557: if ((vy_error>5) && (vx_error<5)){
06AD C3        1997            clr     c
06AE 7405      1998            mov     a,#0x05
06B0 95B0      1999            subb    a,_main_vy_error_1_126
06B2 E4        2000            clr     a
06B3 6480      2001            xrl     a,#0x80
06B5 85B1F0    2002            mov     b,(_main_vy_error_1_126 + 1)
06B8 63F080    2003            xrl     b,#0x80
06BB 95F0      2004            subb    a,b
06BD E4        2005            clr     a
06BE 33        2006            rlc     a
06BF FF        2007            mov     r7,a
06C0 6000      2008            jz      L022005?
06C2 C3        2009            clr     c
06C3 E560      2010            mov     a,_main_vx_error_1_126
06C5 9405      2011            subb    a,#0x05
06C7 E561      2012            mov     a,(_main_vx_error_1_126 + 1)
06C9 6480      2013            xrl     a,#0x80
06CB 9480      2014            subb    a,#0x80
06CD 5000      2015            jnc     L022005?
06CF           2016   ;        main.c:558: pwm_left = vy_error; 
06CF ADB0      2017            mov     r5,_main_vy_error_1_126
06D1 8DD0      2018            mov     _pwm_left,r5
06D3           2019   ;        main.c:559: pwm_right = vy_error; 
06D3 8D90      2020            mov     _pwm_right,r5
06D5           2021   ;        main.c:560: if (vy_err > 0){ //move forward
06D5 C3        2022            clr     c
06D6 E4        2023            clr     a
06D7 9550      2024            subb    a,_main_vy_err_1_126
06D9 E4        2025            clr     a
06DA 6480      2026            xrl     a,#0x80
06DC 8551F0    2027            mov     b,(_main_vy_err_1_126 + 1)
06DF 63F080    2028            xrl     b,#0x80
06E2 95F0      2029            subb    a,b
06E4 5000      2030            jnc     L022002?
06E6           2031   ;        main.c:561: L_motor_dir = 0; 
06E6 755000    2032            mov     _L_motor_dir,#0x00
06E9           2033   ;        main.c:562: R_motor_dir = 0; 
06E9 751000    2034            mov     _R_motor_dir,#0x00
06EC 8000      2035            sjmp    L022005?
06EE           2036   L022002?:
06EE           2037   ;        main.c:565: L_motor_dir = 1; 
06EE 755001    2038            mov     _L_motor_dir,#0x01
06F1           2039   ;        main.c:566: R_motor_dir = 1; 
06F1 751001    2040            mov     _R_motor_dir,#0x01
06F4           2041   L022005?:
06F4           2042   ;        main.c:569: if ((vx_error>5)&&(vy_error<5)){
06F4 C3        2043            clr     c
06F5 7405      2044            mov     a,#0x05
06F7 9560      2045            subb    a,_main_vx_error_1_126
06F9 E4        2046            clr     a
06FA 6480      2047            xrl     a,#0x80
06FC 8561F0    2048            mov     b,(_main_vx_error_1_126 + 1)
06FF 63F080    2049            xrl     b,#0x80
0702 95F0      2050            subb    a,b
0704 E4        2051            clr     a
0705 33        2052            rlc     a
0706 FD        2053            mov     r5,a
0707 6000      2054            jz      L022011?
0709 C3        2055            clr     c
070A E5B0      2056            mov     a,_main_vy_error_1_126
070C 9405      2057            subb    a,#0x05
070E E5B1      2058            mov     a,(_main_vy_error_1_126 + 1)
0710 6480      2059            xrl     a,#0x80
0712 9480      2060            subb    a,#0x80
0714 5000      2061            jnc     L022011?
0716           2062   ;        main.c:570: pwm_left = vx_error; 
0716 AE60      2063            mov     r6,_main_vx_error_1_126
0718 8ED0      2064            mov     _pwm_left,r6
071A           2065   ;        main.c:571: pwm_right = vx_error; 
071A 8E90      2066            mov     _pwm_right,r6
071C           2067   ;        main.c:572: if (vx_err > 0){ //turn right
071C C3        2068            clr     c
071D E4        2069            clr     a
071E 9500      2070            subb    a,_main_vx_err_1_126
0720 E4        2071            clr     a
0721 6480      2072            xrl     a,#0x80
0723 8501F0    2073            mov     b,(_main_vx_err_1_126 + 1)
0726 63F080    2074            xrl     b,#0x80
0729 95F0      2075            subb    a,b
072B 5000      2076            jnc     L022008?
072D           2077   ;        main.c:573: L_motor_dir = 1; 
072D 755001    2078            mov     _L_motor_dir,#0x01
0730           2079   ;        main.c:574: R_motor_dir = 0; 
0730 751000    2080            mov     _R_motor_dir,#0x00
0733 8000      2081            sjmp    L022011?
0735           2082   L022008?:
0735           2083   ;        main.c:577: L_motor_dir = 0; 
0735 755000    2084            mov     _L_motor_dir,#0x00
0738           2085   ;        main.c:578: R_motor_dir = 1; 
0738 751001    2086            mov     _R_motor_dir,#0x01
073B           2087   L022011?:
073B           2088   ;        main.c:581: if ((vx_error>5)&&(vy_error)>5){
073B ED        2089            mov     a,r5
073C 7000      2090            jnz     L022085?
073E 020000    2091            ljmp    L022049?
0741           2092   L022085?:
0741 EF        2093            mov     a,r7
0742 7000      2094            jnz     L022086?
0744 020000    2095            ljmp    L022049?
0747           2096   L022086?:
0747           2097   ;        main.c:583: if (vy_err>0){
0747 C3        2098            clr     c
0748 E4        2099            clr     a
0749 9550      2100            subb    a,_main_vy_err_1_126
074B E4        2101            clr     a
074C 6480      2102            xrl     a,#0x80
074E 8551F0    2103            mov     b,(_main_vy_err_1_126 + 1)
0751 63F080    2104            xrl     b,#0x80
0754 95F0      2105            subb    a,b
0756 4000      2106            jc      L022087?
0758 020000    2107            ljmp    L022023?
075B           2108   L022087?:
075B           2109   ;        main.c:584: L_motor_dir = 0; 
075B 755000    2110            mov     _L_motor_dir,#0x00
075E           2111   ;        main.c:585: R_motor_dir = 0; 
075E 751000    2112            mov     _R_motor_dir,#0x00
0761           2113   ;        main.c:587: if (vx_err>0){
0761 C3        2114            clr     c
0762 E4        2115            clr     a
0763 9500      2116            subb    a,_main_vx_err_1_126
0765 E4        2117            clr     a
0766 6480      2118            xrl     a,#0x80
0768 8501F0    2119            mov     b,(_main_vx_err_1_126 + 1)
076B 63F080    2120            xrl     b,#0x80
076E 95F0      2121            subb    a,b
0770 4000      2122            jc      L022088?
0772 020000    2123            ljmp    L022020?
0775           2124   L022088?:
0775           2125   ;        main.c:588: if (vy*100<=vy_thres*100/2){
0775 C002      2126            push    ar2
0777 C003      2127            push    ar3
0779 85D000    2128            mov     __mulint_PARM_2,_main_vy_1_126
077C 85D101    2129            mov     (__mulint_PARM_2 + 1),(_main_vy_1_126 + 1)
077F 900064    2130            mov     dptr,#0x0064
0782 C002      2131            push    ar2
0784 C003      2132            push    ar3
0786 120000    2133            lcall   __mulint
0789 AD82      2134            mov     r5,dpl
078B AE83      2135            mov     r6,dph
078D D003      2136            pop     ar3
078F D002      2137            pop     ar2
0791 851000    2138            mov     __mulint_PARM_2,_vy_thres
0794 851101    2139            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0797 900064    2140            mov     dptr,#0x0064
079A C003      2141            push    ar3
079C C005      2142            push    ar5
079E C006      2143            push    ar6
07A0 120000    2144            lcall   __mulint
07A3 AF82      2145            mov     r7,dpl
07A5 AA83      2146            mov     r2,dph
07A7 D006      2147            pop     ar6
07A9 D005      2148            pop     ar5
07AB D003      2149            pop     ar3
07AD 750002    2150            mov     __divsint_PARM_2,#0x02
07B0 E4        2151            clr     a
07B1 F501      2152            mov     (__divsint_PARM_2 + 1),a
07B3 8F82      2153            mov     dpl,r7
07B5 8A83      2154            mov     dph,r2
07B7 C005      2155            push    ar5
07B9 C006      2156            push    ar6
07BB 120000    2157            lcall   __divsint
07BE AA82      2158            mov     r2,dpl
07C0 AB83      2159            mov     r3,dph
07C2 D006      2160            pop     ar6
07C4 D005      2161            pop     ar5
07C6 C3        2162            clr     c
07C7 EA        2163            mov     a,r2
07C8 9D        2164            subb    a,r5
07C9 EB        2165            mov     a,r3
07CA 6480      2166            xrl     a,#0x80
07CC 8EF0      2167            mov     b,r6
07CE 63F080    2168            xrl     b,#0x80
07D1 95F0      2169            subb    a,b
07D3 D003      2170            pop     ar3
07D5 D002      2171            pop     ar2
07D7 4000      2172            jc      L022014?
07D9           2173   ;        main.c:589: pwm_left = vy_error; 
07D9 85B0D0    2174            mov     _pwm_left,_main_vy_error_1_126
07DC           2175   ;        main.c:590: pwm_right = vy_error*100/(vx_error+vy_error);
07DC 85B000    2176            mov     __mulint_PARM_2,_main_vy_error_1_126
07DF 85B101    2177            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_126 + 1)
07E2 900064    2178            mov     dptr,#0x0064
07E5 C002      2179            push    ar2
07E7 C003      2180            push    ar3
07E9 120000    2181            lcall   __mulint
07EC AD82      2182            mov     r5,dpl
07EE AE83      2183            mov     r6,dph
07F0 E5B0      2184            mov     a,_main_vy_error_1_126
07F2 2560      2185            add     a,_main_vx_error_1_126
07F4 F500      2186            mov     __divsint_PARM_2,a
07F6 E5B1      2187            mov     a,(_main_vy_error_1_126 + 1)
07F8 3561      2188            addc    a,(_main_vx_error_1_126 + 1)
07FA F501      2189            mov     (__divsint_PARM_2 + 1),a
07FC 8D82      2190            mov     dpl,r5
07FE 8E83      2191            mov     dph,r6
0800 120000    2192            lcall   __divsint
0803 AD82      2193            mov     r5,dpl
0805 AE83      2194            mov     r6,dph
0807 D003      2195            pop     ar3
0809 D002      2196            pop     ar2
080B 8D90      2197            mov     _pwm_right,r5
080D 020000    2198            ljmp    L022023?
0810           2199   L022014?:
0810           2200   ;        main.c:593: pwm_left = vx_error; 
0810 8560D0    2201            mov     _pwm_left,_main_vx_error_1_126
0813           2202   ;        main.c:594: pwm_right = vx_error*100/(vx_error+vy_error);
0813 856000    2203            mov     __mulint_PARM_2,_main_vx_error_1_126
0816 856101    2204            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_126 + 1)
0819 900064    2205            mov     dptr,#0x0064
081C C002      2206            push    ar2
081E C003      2207            push    ar3
0820 120000    2208            lcall   __mulint
0823 AD82      2209            mov     r5,dpl
0825 AE83      2210            mov     r6,dph
0827 E5B0      2211            mov     a,_main_vy_error_1_126
0829 2560      2212            add     a,_main_vx_error_1_126
082B F500      2213            mov     __divsint_PARM_2,a
082D E5B1      2214            mov     a,(_main_vy_error_1_126 + 1)
082F 3561      2215            addc    a,(_main_vx_error_1_126 + 1)
0831 F501      2216            mov     (__divsint_PARM_2 + 1),a
0833 8D82      2217            mov     dpl,r5
0835 8E83      2218            mov     dph,r6
0837 120000    2219            lcall   __divsint
083A AD82      2220            mov     r5,dpl
083C AE83      2221            mov     r6,dph
083E D003      2222            pop     ar3
0840 D002      2223            pop     ar2
0842 8D90      2224            mov     _pwm_right,r5
0844 020000    2225            ljmp    L022023?
0847           2226   L022020?:
0847           2227   ;        main.c:599: if (vy*100<=vy_thres*100/2){
0847 C002      2228            push    ar2
0849 C003      2229            push    ar3
084B 85D000    2230            mov     __mulint_PARM_2,_main_vy_1_126
084E 85D101    2231            mov     (__mulint_PARM_2 + 1),(_main_vy_1_126 + 1)
0851 900064    2232            mov     dptr,#0x0064
0854 C002      2233            push    ar2
0856 C003      2234            push    ar3
0858 120000    2235            lcall   __mulint
085B AD82      2236            mov     r5,dpl
085D AE83      2237            mov     r6,dph
085F D003      2238            pop     ar3
0861 D002      2239            pop     ar2
0863 851000    2240            mov     __mulint_PARM_2,_vy_thres
0866 851101    2241            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0869 900064    2242            mov     dptr,#0x0064
086C C003      2243            push    ar3
086E C005      2244            push    ar5
0870 C006      2245            push    ar6
0872 120000    2246            lcall   __mulint
0875 AF82      2247            mov     r7,dpl
0877 AA83      2248            mov     r2,dph
0879 D006      2249            pop     ar6
087B D005      2250            pop     ar5
087D D003      2251            pop     ar3
087F 750002    2252            mov     __divsint_PARM_2,#0x02
0882 E4        2253            clr     a
0883 F501      2254            mov     (__divsint_PARM_2 + 1),a
0885 8F82      2255            mov     dpl,r7
0887 8A83      2256            mov     dph,r2
0889 C005      2257            push    ar5
088B C006      2258            push    ar6
088D 120000    2259            lcall   __divsint
0890 AA82      2260            mov     r2,dpl
0892 AB83      2261            mov     r3,dph
0894 D006      2262            pop     ar6
0896 D005      2263            pop     ar5
0898 C3        2264            clr     c
0899 EA        2265            mov     a,r2
089A 9D        2266            subb    a,r5
089B EB        2267            mov     a,r3
089C 6480      2268            xrl     a,#0x80
089E 8EF0      2269            mov     b,r6
08A0 63F080    2270            xrl     b,#0x80
08A3 95F0      2271            subb    a,b
08A5 D003      2272            pop     ar3
08A7 D002      2273            pop     ar2
08A9 4000      2274            jc      L022017?
08AB           2275   ;        main.c:600: pwm_left = vy_error*100/(vx_error+vy_error);
08AB 85B000    2276            mov     __mulint_PARM_2,_main_vy_error_1_126
08AE 85B101    2277            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_126 + 1)
08B1 900064    2278            mov     dptr,#0x0064
08B4 C002      2279            push    ar2
08B6 C003      2280            push    ar3
08B8 120000    2281            lcall   __mulint
08BB AD82      2282            mov     r5,dpl
08BD AE83      2283            mov     r6,dph
08BF E5B0      2284            mov     a,_main_vy_error_1_126
08C1 2560      2285            add     a,_main_vx_error_1_126
08C3 F500      2286            mov     __divsint_PARM_2,a
08C5 E5B1      2287            mov     a,(_main_vy_error_1_126 + 1)
08C7 3561      2288            addc    a,(_main_vx_error_1_126 + 1)
08C9 F501      2289            mov     (__divsint_PARM_2 + 1),a
08CB 8D82      2290            mov     dpl,r5
08CD 8E83      2291            mov     dph,r6
08CF 120000    2292            lcall   __divsint
08D2 AD82      2293            mov     r5,dpl
08D4 AE83      2294            mov     r6,dph
08D6 D003      2295            pop     ar3
08D8 D002      2296            pop     ar2
08DA 8DD0      2297            mov     _pwm_left,r5
08DC           2298   ;        main.c:601: pwm_right = vy_error; 
08DC 85B090    2299            mov     _pwm_right,_main_vy_error_1_126
08DF 8000      2300            sjmp    L022023?
08E1           2301   L022017?:
08E1           2302   ;        main.c:604: pwm_left = vx_error*100/(vx_error+vy_error);
08E1 856000    2303            mov     __mulint_PARM_2,_main_vx_error_1_126
08E4 856101    2304            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_126 + 1)
08E7 900064    2305            mov     dptr,#0x0064
08EA C002      2306            push    ar2
08EC C003      2307            push    ar3
08EE 120000    2308            lcall   __mulint
08F1 AD82      2309            mov     r5,dpl
08F3 AE83      2310            mov     r6,dph
08F5 E5B0      2311            mov     a,_main_vy_error_1_126
08F7 2560      2312            add     a,_main_vx_error_1_126
08F9 F500      2313            mov     __divsint_PARM_2,a
08FB E5B1      2314            mov     a,(_main_vy_error_1_126 + 1)
08FD 3561      2315            addc    a,(_main_vx_error_1_126 + 1)
08FF F501      2316            mov     (__divsint_PARM_2 + 1),a
0901 8D82      2317            mov     dpl,r5
0903 8E83      2318            mov     dph,r6
0905 120000    2319            lcall   __divsint
0908 AD82      2320            mov     r5,dpl
090A AE83      2321            mov     r6,dph
090C D003      2322            pop     ar3
090E D002      2323            pop     ar2
0910 8DD0      2324            mov     _pwm_left,r5
0912           2325   ;        main.c:605: pwm_right = vx_error; 
0912 856090    2326            mov     _pwm_right,_main_vx_error_1_126
0915           2327   L022023?:
0915           2328   ;        main.c:610: if (vy_err<0){
0915 E551      2329            mov     a,(_main_vy_err_1_126 + 1)
0917 20E7F8    2330            jb      acc.7,L022091?
091A 020000    2331            ljmp    L022049?
091D           2332   L022091?:
091D           2333   ;        main.c:611: L_motor_dir = 1; 
091D 755001    2334            mov     _L_motor_dir,#0x01
0920           2335   ;        main.c:612: R_motor_dir = 1; 
0920 751001    2336            mov     _R_motor_dir,#0x01
0923           2337   ;        main.c:614: if (vx_err>0){
0923 C3        2338            clr     c
0924 E4        2339            clr     a
0925 9500      2340            subb    a,_main_vx_err_1_126
0927 E4        2341            clr     a
0928 6480      2342            xrl     a,#0x80
092A 8501F0    2343            mov     b,(_main_vx_err_1_126 + 1)
092D 63F080    2344            xrl     b,#0x80
0930 95F0      2345            subb    a,b
0932 4000      2346            jc      L022092?
0934 020000    2347            ljmp    L022031?
0937           2348   L022092?:
0937           2349   ;        main.c:615: if (vy*100<=vy_thres*100/2){
0937 C002      2350            push    ar2
0939 C003      2351            push    ar3
093B 85D000    2352            mov     __mulint_PARM_2,_main_vy_1_126
093E 85D101    2353            mov     (__mulint_PARM_2 + 1),(_main_vy_1_126 + 1)
0941 900064    2354            mov     dptr,#0x0064
0944 C002      2355            push    ar2
0946 C003      2356            push    ar3
0948 120000    2357            lcall   __mulint
094B AD82      2358            mov     r5,dpl
094D AE83      2359            mov     r6,dph
094F D003      2360            pop     ar3
0951 D002      2361            pop     ar2
0953 851000    2362            mov     __mulint_PARM_2,_vy_thres
0956 851101    2363            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0959 900064    2364            mov     dptr,#0x0064
095C C003      2365            push    ar3
095E C005      2366            push    ar5
0960 C006      2367            push    ar6
0962 120000    2368            lcall   __mulint
0965 AF82      2369            mov     r7,dpl
0967 AA83      2370            mov     r2,dph
0969 D006      2371            pop     ar6
096B D005      2372            pop     ar5
096D D003      2373            pop     ar3
096F 750002    2374            mov     __divsint_PARM_2,#0x02
0972 E4        2375            clr     a
0973 F501      2376            mov     (__divsint_PARM_2 + 1),a
0975 8F82      2377            mov     dpl,r7
0977 8A83      2378            mov     dph,r2
0979 C005      2379            push    ar5
097B C006      2380            push    ar6
097D 120000    2381            lcall   __divsint
0980 AA82      2382            mov     r2,dpl
0982 AB83      2383            mov     r3,dph
0984 D006      2384            pop     ar6
0986 D005      2385            pop     ar5
0988 C3        2386            clr     c
0989 EA        2387            mov     a,r2
098A 9D        2388            subb    a,r5
098B EB        2389            mov     a,r3
098C 6480      2390            xrl     a,#0x80
098E 8EF0      2391            mov     b,r6
0990 63F080    2392            xrl     b,#0x80
0993 95F0      2393            subb    a,b
0995 D003      2394            pop     ar3
0997 D002      2395            pop     ar2
0999 4000      2396            jc      L022025?
099B           2397   ;        main.c:616: pwm_left = vy_error; 
099B 85B0D0    2398            mov     _pwm_left,_main_vy_error_1_126
099E           2399   ;        main.c:617: pwm_right = vy_error*100/(vx_error+vy_error);
099E 85B000    2400            mov     __mulint_PARM_2,_main_vy_error_1_126
09A1 85B101    2401            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_126 + 1)
09A4 900064    2402            mov     dptr,#0x0064
09A7 C002      2403            push    ar2
09A9 C003      2404            push    ar3
09AB 120000    2405            lcall   __mulint
09AE AD82      2406            mov     r5,dpl
09B0 AE83      2407            mov     r6,dph
09B2 E5B0      2408            mov     a,_main_vy_error_1_126
09B4 2560      2409            add     a,_main_vx_error_1_126
09B6 F500      2410            mov     __divsint_PARM_2,a
09B8 E5B1      2411            mov     a,(_main_vy_error_1_126 + 1)
09BA 3561      2412            addc    a,(_main_vx_error_1_126 + 1)
09BC F501      2413            mov     (__divsint_PARM_2 + 1),a
09BE 8D82      2414            mov     dpl,r5
09C0 8E83      2415            mov     dph,r6
09C2 120000    2416            lcall   __divsint
09C5 AD82      2417            mov     r5,dpl
09C7 AE83      2418            mov     r6,dph
09C9 D003      2419            pop     ar3
09CB D002      2420            pop     ar2
09CD 8D90      2421            mov     _pwm_right,r5
09CF 020000    2422            ljmp    L022049?
09D2           2423   L022025?:
09D2           2424   ;        main.c:620: pwm_left = vx_error; 
09D2 8560D0    2425            mov     _pwm_left,_main_vx_error_1_126
09D5           2426   ;        main.c:621: pwm_right = vx_error*100/(vx_error+vy_error);
09D5 856000    2427            mov     __mulint_PARM_2,_main_vx_error_1_126
09D8 856101    2428            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_126 + 1)
09DB 900064    2429            mov     dptr,#0x0064
09DE C002      2430            push    ar2
09E0 C003      2431            push    ar3
09E2 120000    2432            lcall   __mulint
09E5 AD82      2433            mov     r5,dpl
09E7 AE83      2434            mov     r6,dph
09E9 E5B0      2435            mov     a,_main_vy_error_1_126
09EB 2560      2436            add     a,_main_vx_error_1_126
09ED F500      2437            mov     __divsint_PARM_2,a
09EF E5B1      2438            mov     a,(_main_vy_error_1_126 + 1)
09F1 3561      2439            addc    a,(_main_vx_error_1_126 + 1)
09F3 F501      2440            mov     (__divsint_PARM_2 + 1),a
09F5 8D82      2441            mov     dpl,r5
09F7 8E83      2442            mov     dph,r6
09F9 120000    2443            lcall   __divsint
09FC AD82      2444            mov     r5,dpl
09FE AE83      2445            mov     r6,dph
0A00 D003      2446            pop     ar3
0A02 D002      2447            pop     ar2
0A04 8D90      2448            mov     _pwm_right,r5
0A06 020000    2449            ljmp    L022049?
0A09           2450   L022031?:
0A09           2451   ;        main.c:626: if (vy*100<=vy_thres*100/2){
0A09 C002      2452            push    ar2
0A0B C003      2453            push    ar3
0A0D 85D000    2454            mov     __mulint_PARM_2,_main_vy_1_126
0A10 85D101    2455            mov     (__mulint_PARM_2 + 1),(_main_vy_1_126 + 1)
0A13 900064    2456            mov     dptr,#0x0064
0A16 C002      2457            push    ar2
0A18 C003      2458            push    ar3
0A1A 120000    2459            lcall   __mulint
0A1D AD82      2460            mov     r5,dpl
0A1F AE83      2461            mov     r6,dph
0A21 D003      2462            pop     ar3
0A23 D002      2463            pop     ar2
0A25 851000    2464            mov     __mulint_PARM_2,_vy_thres
0A28 851101    2465            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0A2B 900064    2466            mov     dptr,#0x0064
0A2E C003      2467            push    ar3
0A30 C005      2468            push    ar5
0A32 C006      2469            push    ar6
0A34 120000    2470            lcall   __mulint
0A37 AF82      2471            mov     r7,dpl
0A39 AA83      2472            mov     r2,dph
0A3B D006      2473            pop     ar6
0A3D D005      2474            pop     ar5
0A3F D003      2475            pop     ar3
0A41 750002    2476            mov     __divsint_PARM_2,#0x02
0A44 E4        2477            clr     a
0A45 F501      2478            mov     (__divsint_PARM_2 + 1),a
0A47 8F82      2479            mov     dpl,r7
0A49 8A83      2480            mov     dph,r2
0A4B C005      2481            push    ar5
0A4D C006      2482            push    ar6
0A4F 120000    2483            lcall   __divsint
0A52 AA82      2484            mov     r2,dpl
0A54 AB83      2485            mov     r3,dph
0A56 D006      2486            pop     ar6
0A58 D005      2487            pop     ar5
0A5A C3        2488            clr     c
0A5B EA        2489            mov     a,r2
0A5C 9D        2490            subb    a,r5
0A5D EB        2491            mov     a,r3
0A5E 6480      2492            xrl     a,#0x80
0A60 8EF0      2493            mov     b,r6
0A62 63F080    2494            xrl     b,#0x80
0A65 95F0      2495            subb    a,b
0A67 D003      2496            pop     ar3
0A69 D002      2497            pop     ar2
0A6B 4000      2498            jc      L022028?
0A6D           2499   ;        main.c:627: pwm_left = vy_error*100/(vx_error+vy_error);
0A6D 85B000    2500            mov     __mulint_PARM_2,_main_vy_error_1_126
0A70 85B101    2501            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_126 + 1)
0A73 900064    2502            mov     dptr,#0x0064
0A76 C002      2503            push    ar2
0A78 C003      2504            push    ar3
0A7A 120000    2505            lcall   __mulint
0A7D AD82      2506            mov     r5,dpl
0A7F AE83      2507            mov     r6,dph
0A81 E5B0      2508            mov     a,_main_vy_error_1_126
0A83 2560      2509            add     a,_main_vx_error_1_126
0A85 F500      2510            mov     __divsint_PARM_2,a
0A87 E5B1      2511            mov     a,(_main_vy_error_1_126 + 1)
0A89 3561      2512            addc    a,(_main_vx_error_1_126 + 1)
0A8B F501      2513            mov     (__divsint_PARM_2 + 1),a
0A8D 8D82      2514            mov     dpl,r5
0A8F 8E83      2515            mov     dph,r6
0A91 120000    2516            lcall   __divsint
0A94 AD82      2517            mov     r5,dpl
0A96 AE83      2518            mov     r6,dph
0A98 D003      2519            pop     ar3
0A9A D002      2520            pop     ar2
0A9C 8DD0      2521            mov     _pwm_left,r5
0A9E           2522   ;        main.c:628: pwm_right = vy_error; 
0A9E 85B090    2523            mov     _pwm_right,_main_vy_error_1_126
0AA1 020000    2524            ljmp    L022049?
0AA4           2525   L022028?:
0AA4           2526   ;        main.c:631: pwm_left = vx_error*100/(vx_error+vy_error);
0AA4 856000    2527            mov     __mulint_PARM_2,_main_vx_error_1_126
0AA7 856101    2528            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_126 + 1)
0AAA 900064    2529            mov     dptr,#0x0064
0AAD C002      2530            push    ar2
0AAF C003      2531            push    ar3
0AB1 120000    2532            lcall   __mulint
0AB4 AD82      2533            mov     r5,dpl
0AB6 AE83      2534            mov     r6,dph
0AB8 E5B0      2535            mov     a,_main_vy_error_1_126
0ABA 2560      2536            add     a,_main_vx_error_1_126
0ABC F500      2537            mov     __divsint_PARM_2,a
0ABE E5B1      2538            mov     a,(_main_vy_error_1_126 + 1)
0AC0 3561      2539            addc    a,(_main_vx_error_1_126 + 1)
0AC2 F501      2540            mov     (__divsint_PARM_2 + 1),a
0AC4 8D82      2541            mov     dpl,r5
0AC6 8E83      2542            mov     dph,r6
0AC8 120000    2543            lcall   __divsint
0ACB AD82      2544            mov     r5,dpl
0ACD AE83      2545            mov     r6,dph
0ACF D003      2546            pop     ar3
0AD1 D002      2547            pop     ar2
0AD3 8DD0      2548            mov     _pwm_left,r5
0AD5           2549   ;        main.c:632: pwm_right = vx_error; 
0AD5 856090    2550            mov     _pwm_right,_main_vx_error_1_126
0AD8 020000    2551            ljmp    L022049?
0ADB           2552   L022039?:
0ADB           2553   ;        main.c:640: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0ADB 904410    2554            mov     dptr,#_buff
0ADE 75F040    2555            mov     b,#0x40
0AE1 C002      2556            push    ar2
0AE3 C003      2557            push    ar3
0AE5 120000    2558            lcall   _strlen
0AE8 AD82      2559            mov     r5,dpl
0AEA AE83      2560            mov     r6,dph
0AEC C005      2561            push    ar5
0AEE C006      2562            push    ar6
0AF0 7410      2563            mov     a,#_buff
0AF2 C0E0      2564            push    acc
0AF4 7444      2565            mov     a,#(_buff >> 8)
0AF6 C0E0      2566            push    acc
0AF8 7440      2567            mov     a,#0x40
0AFA C0E0      2568            push    acc
0AFC 7438      2569            mov     a,#__str_14
0AFE C0E0      2570            push    acc
0B00 74D5      2571            mov     a,#(__str_14 >> 8)
0B02 C0E0      2572            push    acc
0B04 7480      2573            mov     a,#0x80
0B06 C0E0      2574            push    acc
0B08 120000    2575            lcall   _printf
0B0B E581      2576            mov     a,sp
0B0D 24F8      2577            add     a,#0xf8
0B0F F581      2578            mov     sp,a
0B11 D003      2579            pop     ar3
0B13 D002      2580            pop     ar2
0B15 020000    2581            ljmp    L022049?
0B18           2582   L022044?:
0B18           2583   ;        main.c:646: else if(c=='@') // Master wants slave data
0B18 BC4078    2584            cjne    r4,#0x40,L022095?
0B1B 8000      2585            sjmp    L022096?
0B1D           2586   L022095?:
0B1D 020000    2587            ljmp    L022049?
0B20           2588   L022096?:
0B20           2589   ;        main.c:648: sprintf(buff, "%05u\n", cnt);
0B20 C002      2590            push    ar2
0B22 C003      2591            push    ar3
0B24 C002      2592            push    ar2
0B26 C003      2593            push    ar3
0B28 74F8      2594            mov     a,#__str_15
0B2A C0E0      2595            push    acc
0B2C 74D5      2596            mov     a,#(__str_15 >> 8)
0B2E C0E0      2597            push    acc
0B30 7480      2598            mov     a,#0x80
0B32 C0E0      2599            push    acc
0B34 7410      2600            mov     a,#_buff
0B36 C0E0      2601            push    acc
0B38 7444      2602            mov     a,#(_buff >> 8)
0B3A C0E0      2603            push    acc
0B3C 7440      2604            mov     a,#0x40
0B3E C0E0      2605            push    acc
0B40 120000    2606            lcall   _sprintf
0B43 E581      2607            mov     a,sp
0B45 24F8      2608            add     a,#0xf8
0B47 F581      2609            mov     sp,a
0B49 D003      2610            pop     ar3
0B4B D002      2611            pop     ar2
0B4D           2612   ;        main.c:649: cnt++;
0B4D 0A        2613            inc     r2
0B4E BA0078    2614            cjne    r2,#0x00,L022097?
0B51 0B        2615            inc     r3
0B52           2616   L022097?:
0B52           2617   ;        main.c:650: waitms(5); // The radio seems to need this delay...
0B52 900005    2618            mov     dptr,#0x0005
0B55 C002      2619            push    ar2
0B57 C003      2620            push    ar3
0B59 120000    2621            lcall   _waitms
0B5C           2622   ;        main.c:651: sendstr1(buff);
0B5C 904410    2623            mov     dptr,#_buff
0B5F 75F040    2624            mov     b,#0x40
0B62 120000    2625            lcall   _sendstr1
0B65 D003      2626            pop     ar3
0B67 D002      2627            pop     ar2
0B69 020000    2628            ljmp    L022049?
0B6C           2629            rseg R_CSEG
0B6C           2630   
0000           2631            rseg R_XINIT
0000           2632   
0000           2633            rseg R_CONST
0000           2634   __str_0:
0000 436F6D6D  2635            db 'Command: %s'
     616E643A
     202573
000B 00        2636            db 0x00
000C           2637   __str_1:
000C 52657370  2638            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2639            db 0x0D
0019 0A        2640            db 0x0A
001A 00        2641            db 0x00
001B           2642   __str_2:
001B 41542B44  2643            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2644            db 0x0D
0027 0A        2645            db 0x0A
0028 00        2646            db 0x00
0029           2647   __str_3:
0029 0D        2648            db 0x0D
002A 0A        2649            db 0x0A
002B 45464D38  2650            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2651            db 0x0D
0047 0A        2652            db 0x0A
0048 00        2653            db 0x00
0049           2654   __str_4:
0049 41542B56  2655            db 'AT+VER'
     4552
004F 0D        2656            db 0x0D
0050 0A        2657            db 0x0A
0051 00        2658            db 0x00
0052           2659   __str_5:
0052 41542B42  2660            db 'AT+BAUD'
     415544
0059 0D        2661            db 0x0D
005A 0A        2662            db 0x0A
005B 00        2663            db 0x00
005C           2664   __str_6:
005C 41542B52  2665            db 'AT+RFID'
     464944
0063 0D        2666            db 0x0D
0064 0A        2667            db 0x0A
0065 00        2668            db 0x00
0066           2669   __str_7:
0066 41542B44  2670            db 'AT+DVID'
     564944
006D 0D        2671            db 0x0D
006E 0A        2672            db 0x0A
006F 00        2673            db 0x00
0070           2674   __str_8:
0070 41542B52  2675            db 'AT+RFC'
     4643
0076 0D        2676            db 0x0D
0077 0A        2677            db 0x0A
0078 00        2678            db 0x00
0079           2679   __str_9:
0079 41542B50  2680            db 'AT+POWE'
     4F5745
0080 0D        2681            db 0x0D
0081 0A        2682            db 0x0A
0082 00        2683            db 0x00
0083           2684   __str_10:
0083 41542B43  2685            db 'AT+CLSS'
     4C5353
008A 0D        2686            db 0x0D
008B 0A        2687            db 0x0A
008C 00        2688            db 0x00
008D           2689   __str_11:
008D 41542B44  2690            db 'AT+DVIDEFEF'
     56494445
     464546
0098 0D        2691            db 0x0D
0099 0A        2692            db 0x0A
009A 00        2693            db 0x00
009B           2694   __str_12:
009B 25303364  2695            db '%03d,%03d'
     2C253033
     64
00A4 00        2696            db 0x00
00A5           2697   __str_13:
00A5 4A6F7973  2698            db 'Joystick Received: Vx = %03d, Vy = %03d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     303364
00CC 0D        2699            db 0x0D
00CD 0A        2700            db 0x0A
00CE 00        2701            db 0x00
00CF           2702   __str_14:
00CF 2A2A2A20  2703            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
00EA 0D        2704            db 0x0D
00EB 0A        2705            db 0x0A
00EC 00        2706            db 0x00
00ED           2707   __str_15:
00ED 25303575  2708            db '%05u'
00F1 0A        2709            db 0x0A
00F2 00        2710            db 0x00
00F3           2711   
0096           2712            CSEG
0096           2713   
0096           2714   end
