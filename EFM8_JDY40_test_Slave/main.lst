0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 21 16:04:58 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _servo_pick
0000             29            public _Timer5_ISR
0000             30            public _ADC_at_Pin
0000             31            public _InitPinADC
0000             32            public _InitADC
0000             33            public _Set_Pin_Input
0000             34            public _Set_Pin_Output
0000             35            public _ReceptionOff
0000             36            public _SendATCommand
0000             37            public _waitms_or_RI1
0000             38            public _RXU1
0000             39            public _getstr1
0000             40            public _getchar1_with_timeout
0000             41            public _getchar1
0000             42            public _sendstr1
0000             43            public _putchar1
0000             44            public _UART1_Init
0000             45            public _waitms
0000             46            public _Timer3us
0000             47            public __c51_external_startup
0000             48            public _buff
0000             49            public _getstr1_PARM_2
0000             50            public _vy
0000             51            public _vx
0000             52            public _vy_thres
0000             53            public _vx_thres
0000             54            public _servo_arm
0000             55            public _servo_base
0000             56            public _R_motor_dir
0000             57            public _L_motor_dir
0000             58            public _pwm_right
0000             59            public _pwm_left
0000             60            public _servo_counter
0000             61            public _pwm_counter
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADC0ASAH       DATA 0xb6
0000             67   _ADC0ASAL       DATA 0xb5
0000             68   _ADC0ASCF       DATA 0xa1
0000             69   _ADC0ASCT       DATA 0xc7
0000             70   _ADC0CF0        DATA 0xbc
0000             71   _ADC0CF1        DATA 0xb9
0000             72   _ADC0CF2        DATA 0xdf
0000             73   _ADC0CN0        DATA 0xe8
0000             74   _ADC0CN1        DATA 0xb2
0000             75   _ADC0CN2        DATA 0xb3
0000             76   _ADC0GTH        DATA 0xc4
0000             77   _ADC0GTL        DATA 0xc3
0000             78   _ADC0H          DATA 0xbe
0000             79   _ADC0L          DATA 0xbd
0000             80   _ADC0LTH        DATA 0xc6
0000             81   _ADC0LTL        DATA 0xc5
0000             82   _ADC0MX         DATA 0xbb
0000             83   _B              DATA 0xf0
0000             84   _CKCON0         DATA 0x8e
0000             85   _CKCON1         DATA 0xa6
0000             86   _CLEN0          DATA 0xc6
0000             87   _CLIE0          DATA 0xc7
0000             88   _CLIF0          DATA 0xe8
0000             89   _CLKSEL         DATA 0xa9
0000             90   _CLOUT0         DATA 0xd1
0000             91   _CLU0CF         DATA 0xb1
0000             92   _CLU0FN         DATA 0xaf
0000             93   _CLU0MX         DATA 0x84
0000             94   _CLU1CF         DATA 0xb3
0000             95   _CLU1FN         DATA 0xb2
0000             96   _CLU1MX         DATA 0x85
0000             97   _CLU2CF         DATA 0xb6
0000             98   _CLU2FN         DATA 0xb5
0000             99   _CLU2MX         DATA 0x91
0000            100   _CLU3CF         DATA 0xbf
0000            101   _CLU3FN         DATA 0xbe
0000            102   _CLU3MX         DATA 0xae
0000            103   _CMP0CN0        DATA 0x9b
0000            104   _CMP0CN1        DATA 0x99
0000            105   _CMP0MD         DATA 0x9d
0000            106   _CMP0MX         DATA 0x9f
0000            107   _CMP1CN0        DATA 0xbf
0000            108   _CMP1CN1        DATA 0xac
0000            109   _CMP1MD         DATA 0xab
0000            110   _CMP1MX         DATA 0xaa
0000            111   _CRC0CN0        DATA 0xce
0000            112   _CRC0CN1        DATA 0x86
0000            113   _CRC0CNT        DATA 0xd3
0000            114   _CRC0DAT        DATA 0xcb
0000            115   _CRC0FLIP       DATA 0xcf
0000            116   _CRC0IN         DATA 0xca
0000            117   _CRC0ST         DATA 0xd2
0000            118   _DAC0CF0        DATA 0x91
0000            119   _DAC0CF1        DATA 0x92
0000            120   _DAC0H          DATA 0x85
0000            121   _DAC0L          DATA 0x84
0000            122   _DAC1CF0        DATA 0x93
0000            123   _DAC1CF1        DATA 0x94
0000            124   _DAC1H          DATA 0x8a
0000            125   _DAC1L          DATA 0x89
0000            126   _DAC2CF0        DATA 0x95
0000            127   _DAC2CF1        DATA 0x96
0000            128   _DAC2H          DATA 0x8c
0000            129   _DAC2L          DATA 0x8b
0000            130   _DAC3CF0        DATA 0x9a
0000            131   _DAC3CF1        DATA 0x9c
0000            132   _DAC3H          DATA 0x8e
0000            133   _DAC3L          DATA 0x8d
0000            134   _DACGCF0        DATA 0x88
0000            135   _DACGCF1        DATA 0x98
0000            136   _DACGCF2        DATA 0xa2
0000            137   _DERIVID        DATA 0xad
0000            138   _DEVICEID       DATA 0xb5
0000            139   _DPH            DATA 0x83
0000            140   _DPL            DATA 0x82
0000            141   _EIE1           DATA 0xe6
0000            142   _EIE2           DATA 0xf3
0000            143   _EIP1           DATA 0xbb
0000            144   _EIP1H          DATA 0xee
0000            145   _EIP2           DATA 0xed
0000            146   _EIP2H          DATA 0xf6
0000            147   _EMI0CN         DATA 0xe7
0000            148   _FLKEY          DATA 0xb7
0000            149   _HFO0CAL        DATA 0xc7
0000            150   _HFO1CAL        DATA 0xd6
0000            151   _HFOCN          DATA 0xef
0000            152   _I2C0ADM        DATA 0xff
0000            153   _I2C0CN0        DATA 0xba
0000            154   _I2C0DIN        DATA 0xbc
0000            155   _I2C0DOUT       DATA 0xbb
0000            156   _I2C0FCN0       DATA 0xad
0000            157   _I2C0FCN1       DATA 0xab
0000            158   _I2C0FCT        DATA 0xf5
0000            159   _I2C0SLAD       DATA 0xbd
0000            160   _I2C0STAT       DATA 0xb9
0000            161   _IE             DATA 0xa8
0000            162   _IP             DATA 0xb8
0000            163   _IPH            DATA 0xf2
0000            164   _IT01CF         DATA 0xe4
0000            165   _LFO0CN         DATA 0xb1
0000            166   _P0             DATA 0x80
0000            167   _P0MASK         DATA 0xfe
0000            168   _P0MAT          DATA 0xfd
0000            169   _P0MDIN         DATA 0xf1
0000            170   _P0MDOUT        DATA 0xa4
0000            171   _P0SKIP         DATA 0xd4
0000            172   _P1             DATA 0x90
0000            173   _P1MASK         DATA 0xee
0000            174   _P1MAT          DATA 0xed
0000            175   _P1MDIN         DATA 0xf2
0000            176   _P1MDOUT        DATA 0xa5
0000            177   _P1SKIP         DATA 0xd5
0000            178   _P2             DATA 0xa0
0000            179   _P2MASK         DATA 0xfc
0000            180   _P2MAT          DATA 0xfb
0000            181   _P2MDIN         DATA 0xf3
0000            182   _P2MDOUT        DATA 0xa6
0000            183   _P2SKIP         DATA 0xcc
0000            184   _P3             DATA 0xb0
0000            185   _P3MDIN         DATA 0xf4
0000            186   _P3MDOUT        DATA 0x9c
0000            187   _PCA0CENT       DATA 0x9e
0000            188   _PCA0CLR        DATA 0x9c
0000            189   _PCA0CN0        DATA 0xd8
0000            190   _PCA0CPH0       DATA 0xfc
0000            191   _PCA0CPH1       DATA 0xea
0000            192   _PCA0CPH2       DATA 0xec
0000            193   _PCA0CPH3       DATA 0xf5
0000            194   _PCA0CPH4       DATA 0x85
0000            195   _PCA0CPH5       DATA 0xde
0000            196   _PCA0CPL0       DATA 0xfb
0000            197   _PCA0CPL1       DATA 0xe9
0000            198   _PCA0CPL2       DATA 0xeb
0000            199   _PCA0CPL3       DATA 0xf4
0000            200   _PCA0CPL4       DATA 0x84
0000            201   _PCA0CPL5       DATA 0xdd
0000            202   _PCA0CPM0       DATA 0xda
0000            203   _PCA0CPM1       DATA 0xdb
0000            204   _PCA0CPM2       DATA 0xdc
0000            205   _PCA0CPM3       DATA 0xae
0000            206   _PCA0CPM4       DATA 0xaf
0000            207   _PCA0CPM5       DATA 0xcc
0000            208   _PCA0H          DATA 0xfa
0000            209   _PCA0L          DATA 0xf9
0000            210   _PCA0MD         DATA 0xd9
0000            211   _PCA0POL        DATA 0x96
0000            212   _PCA0PWM        DATA 0xf7
0000            213   _PCON0          DATA 0x87
0000            214   _PCON1          DATA 0xcd
0000            215   _PFE0CN         DATA 0xc1
0000            216   _PRTDRV         DATA 0xf6
0000            217   _PSCTL          DATA 0x8f
0000            218   _PSTAT0         DATA 0xaa
0000            219   _PSW            DATA 0xd0
0000            220   _REF0CN         DATA 0xd1
0000            221   _REG0CN         DATA 0xc9
0000            222   _REVID          DATA 0xb6
0000            223   _RSTSRC         DATA 0xef
0000            224   _SBCON1         DATA 0x94
0000            225   _SBRLH1         DATA 0x96
0000            226   _SBRLL1         DATA 0x95
0000            227   _SBUF           DATA 0x99
0000            228   _SBUF0          DATA 0x99
0000            229   _SBUF1          DATA 0x92
0000            230   _SCON           DATA 0x98
0000            231   _SCON0          DATA 0x98
0000            232   _SCON1          DATA 0xc8
0000            233   _SFRPAGE        DATA 0xa7
0000            234   _SFRPGCN        DATA 0xbc
0000            235   _SFRSTACK       DATA 0xd7
0000            236   _SMB0ADM        DATA 0xd6
0000            237   _SMB0ADR        DATA 0xd7
0000            238   _SMB0CF         DATA 0xc1
0000            239   _SMB0CN0        DATA 0xc0
0000            240   _SMB0DAT        DATA 0xc2
0000            241   _SMB0FCN0       DATA 0xc3
0000            242   _SMB0FCN1       DATA 0xc4
0000            243   _SMB0FCT        DATA 0xef
0000            244   _SMB0RXLN       DATA 0xc5
0000            245   _SMB0TC         DATA 0xac
0000            246   _SMOD1          DATA 0x93
0000            247   _SP             DATA 0x81
0000            248   _SPI0CFG        DATA 0xa1
0000            249   _SPI0CKR        DATA 0xa2
0000            250   _SPI0CN0        DATA 0xf8
0000            251   _SPI0DAT        DATA 0xa3
0000            252   _SPI0FCN0       DATA 0x9a
0000            253   _SPI0FCN1       DATA 0x9b
0000            254   _SPI0FCT        DATA 0xf7
0000            255   _SPI0PCF        DATA 0xdf
0000            256   _TCON           DATA 0x88
0000            257   _TH0            DATA 0x8c
0000            258   _TH1            DATA 0x8d
0000            259   _TL0            DATA 0x8a
0000            260   _TL1            DATA 0x8b
0000            261   _TMOD           DATA 0x89
0000            262   _TMR2CN0        DATA 0xc8
0000            263   _TMR2CN1        DATA 0xfd
0000            264   _TMR2H          DATA 0xcf
0000            265   _TMR2L          DATA 0xce
0000            266   _TMR2RLH        DATA 0xcb
0000            267   _TMR2RLL        DATA 0xca
0000            268   _TMR3CN0        DATA 0x91
0000            269   _TMR3CN1        DATA 0xfe
0000            270   _TMR3H          DATA 0x95
0000            271   _TMR3L          DATA 0x94
0000            272   _TMR3RLH        DATA 0x93
0000            273   _TMR3RLL        DATA 0x92
0000            274   _TMR4CN0        DATA 0x98
0000            275   _TMR4CN1        DATA 0xff
0000            276   _TMR4H          DATA 0xa5
0000            277   _TMR4L          DATA 0xa4
0000            278   _TMR4RLH        DATA 0xa3
0000            279   _TMR4RLL        DATA 0xa2
0000            280   _TMR5CN0        DATA 0xc0
0000            281   _TMR5CN1        DATA 0xf1
0000            282   _TMR5H          DATA 0xd5
0000            283   _TMR5L          DATA 0xd4
0000            284   _TMR5RLH        DATA 0xd3
0000            285   _TMR5RLL        DATA 0xd2
0000            286   _UART0PCF       DATA 0xd9
0000            287   _UART1FCN0      DATA 0x9d
0000            288   _UART1FCN1      DATA 0xd8
0000            289   _UART1FCT       DATA 0xfa
0000            290   _UART1LIN       DATA 0x9e
0000            291   _UART1PCF       DATA 0xda
0000            292   _VDM0CN         DATA 0xff
0000            293   _WDTCN          DATA 0x97
0000            294   _XBR0           DATA 0xe1
0000            295   _XBR1           DATA 0xe2
0000            296   _XBR2           DATA 0xe3
0000            297   _XOSC0CN        DATA 0x86
0000            298   _DPTR           DATA 0x8382
0000            299   _TMR2RL         DATA 0xcbca
0000            300   _TMR3RL         DATA 0x9392
0000            301   _TMR4RL         DATA 0xa3a2
0000            302   _TMR5RL         DATA 0xd3d2
0000            303   _TMR0           DATA 0x8c8a
0000            304   _TMR1           DATA 0x8d8b
0000            305   _TMR2           DATA 0xcfce
0000            306   _TMR3           DATA 0x9594
0000            307   _TMR4           DATA 0xa5a4
0000            308   _TMR5           DATA 0xd5d4
0000            309   _SBRL1          DATA 0x9695
0000            310   _PCA0           DATA 0xfaf9
0000            311   _PCA0CP0        DATA 0xfcfb
0000            312   _PCA0CP1        DATA 0xeae9
0000            313   _PCA0CP2        DATA 0xeceb
0000            314   _PCA0CP3        DATA 0xf5f4
0000            315   _PCA0CP4        DATA 0x8584
0000            316   _PCA0CP5        DATA 0xdedd
0000            317   _ADC0ASA        DATA 0xb6b5
0000            318   _ADC0GT         DATA 0xc4c3
0000            319   _ADC0           DATA 0xbebd
0000            320   _ADC0LT         DATA 0xc6c5
0000            321   _DAC0           DATA 0x8584
0000            322   _DAC1           DATA 0x8a89
0000            323   _DAC2           DATA 0x8c8b
0000            324   _DAC3           DATA 0x8e8d
0000            325   ;--------------------------------------------------------
0000            326   ; special function bits
0000            327   ;--------------------------------------------------------
0000            328   _ACC_0          BIT 0xe0
0000            329   _ACC_1          BIT 0xe1
0000            330   _ACC_2          BIT 0xe2
0000            331   _ACC_3          BIT 0xe3
0000            332   _ACC_4          BIT 0xe4
0000            333   _ACC_5          BIT 0xe5
0000            334   _ACC_6          BIT 0xe6
0000            335   _ACC_7          BIT 0xe7
0000            336   _TEMPE          BIT 0xe8
0000            337   _ADGN0          BIT 0xe9
0000            338   _ADGN1          BIT 0xea
0000            339   _ADWINT         BIT 0xeb
0000            340   _ADBUSY         BIT 0xec
0000            341   _ADINT          BIT 0xed
0000            342   _IPOEN          BIT 0xee
0000            343   _ADEN           BIT 0xef
0000            344   _B_0            BIT 0xf0
0000            345   _B_1            BIT 0xf1
0000            346   _B_2            BIT 0xf2
0000            347   _B_3            BIT 0xf3
0000            348   _B_4            BIT 0xf4
0000            349   _B_5            BIT 0xf5
0000            350   _B_6            BIT 0xf6
0000            351   _B_7            BIT 0xf7
0000            352   _C0FIF          BIT 0xe8
0000            353   _C0RIF          BIT 0xe9
0000            354   _C1FIF          BIT 0xea
0000            355   _C1RIF          BIT 0xeb
0000            356   _C2FIF          BIT 0xec
0000            357   _C2RIF          BIT 0xed
0000            358   _C3FIF          BIT 0xee
0000            359   _C3RIF          BIT 0xef
0000            360   _D1SRC0         BIT 0x88
0000            361   _D1SRC1         BIT 0x89
0000            362   _D1AMEN         BIT 0x8a
0000            363   _D01REFSL       BIT 0x8b
0000            364   _D3SRC0         BIT 0x8c
0000            365   _D3SRC1         BIT 0x8d
0000            366   _D3AMEN         BIT 0x8e
0000            367   _D23REFSL       BIT 0x8f
0000            368   _D0UDIS         BIT 0x98
0000            369   _D1UDIS         BIT 0x99
0000            370   _D2UDIS         BIT 0x9a
0000            371   _D3UDIS         BIT 0x9b
0000            372   _EX0            BIT 0xa8
0000            373   _ET0            BIT 0xa9
0000            374   _EX1            BIT 0xaa
0000            375   _ET1            BIT 0xab
0000            376   _ES0            BIT 0xac
0000            377   _ET2            BIT 0xad
0000            378   _ESPI0          BIT 0xae
0000            379   _EA             BIT 0xaf
0000            380   _PX0            BIT 0xb8
0000            381   _PT0            BIT 0xb9
0000            382   _PX1            BIT 0xba
0000            383   _PT1            BIT 0xbb
0000            384   _PS0            BIT 0xbc
0000            385   _PT2            BIT 0xbd
0000            386   _PSPI0          BIT 0xbe
0000            387   _P0_0           BIT 0x80
0000            388   _P0_1           BIT 0x81
0000            389   _P0_2           BIT 0x82
0000            390   _P0_3           BIT 0x83
0000            391   _P0_4           BIT 0x84
0000            392   _P0_5           BIT 0x85
0000            393   _P0_6           BIT 0x86
0000            394   _P0_7           BIT 0x87
0000            395   _P1_0           BIT 0x90
0000            396   _P1_1           BIT 0x91
0000            397   _P1_2           BIT 0x92
0000            398   _P1_3           BIT 0x93
0000            399   _P1_4           BIT 0x94
0000            400   _P1_5           BIT 0x95
0000            401   _P1_6           BIT 0x96
0000            402   _P1_7           BIT 0x97
0000            403   _P2_0           BIT 0xa0
0000            404   _P2_1           BIT 0xa1
0000            405   _P2_2           BIT 0xa2
0000            406   _P2_3           BIT 0xa3
0000            407   _P2_4           BIT 0xa4
0000            408   _P2_5           BIT 0xa5
0000            409   _P2_6           BIT 0xa6
0000            410   _P3_0           BIT 0xb0
0000            411   _P3_1           BIT 0xb1
0000            412   _P3_2           BIT 0xb2
0000            413   _P3_3           BIT 0xb3
0000            414   _P3_4           BIT 0xb4
0000            415   _P3_7           BIT 0xb7
0000            416   _CCF0           BIT 0xd8
0000            417   _CCF1           BIT 0xd9
0000            418   _CCF2           BIT 0xda
0000            419   _CCF3           BIT 0xdb
0000            420   _CCF4           BIT 0xdc
0000            421   _CCF5           BIT 0xdd
0000            422   _CR             BIT 0xde
0000            423   _CF             BIT 0xdf
0000            424   _PARITY         BIT 0xd0
0000            425   _F1             BIT 0xd1
0000            426   _OV             BIT 0xd2
0000            427   _RS0            BIT 0xd3
0000            428   _RS1            BIT 0xd4
0000            429   _F0             BIT 0xd5
0000            430   _AC             BIT 0xd6
0000            431   _CY             BIT 0xd7
0000            432   _RI             BIT 0x98
0000            433   _TI             BIT 0x99
0000            434   _RB8            BIT 0x9a
0000            435   _TB8            BIT 0x9b
0000            436   _REN            BIT 0x9c
0000            437   _CE             BIT 0x9d
0000            438   _SMODE          BIT 0x9e
0000            439   _RI1            BIT 0xc8
0000            440   _TI1            BIT 0xc9
0000            441   _RBX1           BIT 0xca
0000            442   _TBX1           BIT 0xcb
0000            443   _REN1           BIT 0xcc
0000            444   _PERR1          BIT 0xcd
0000            445   _OVR1           BIT 0xce
0000            446   _SI             BIT 0xc0
0000            447   _ACK            BIT 0xc1
0000            448   _ARBLOST        BIT 0xc2
0000            449   _ACKRQ          BIT 0xc3
0000            450   _STO            BIT 0xc4
0000            451   _STA            BIT 0xc5
0000            452   _TXMODE         BIT 0xc6
0000            453   _MASTER         BIT 0xc7
0000            454   _SPIEN          BIT 0xf8
0000            455   _TXNF           BIT 0xf9
0000            456   _NSSMD0         BIT 0xfa
0000            457   _NSSMD1         BIT 0xfb
0000            458   _RXOVRN         BIT 0xfc
0000            459   _MODF           BIT 0xfd
0000            460   _WCOL           BIT 0xfe
0000            461   _SPIF           BIT 0xff
0000            462   _IT0            BIT 0x88
0000            463   _IE0            BIT 0x89
0000            464   _IT1            BIT 0x8a
0000            465   _IE1            BIT 0x8b
0000            466   _TR0            BIT 0x8c
0000            467   _TF0            BIT 0x8d
0000            468   _TR1            BIT 0x8e
0000            469   _TF1            BIT 0x8f
0000            470   _T2XCLK0        BIT 0xc8
0000            471   _T2XCLK1        BIT 0xc9
0000            472   _TR2            BIT 0xca
0000            473   _T2SPLIT        BIT 0xcb
0000            474   _TF2CEN         BIT 0xcc
0000            475   _TF2LEN         BIT 0xcd
0000            476   _TF2L           BIT 0xce
0000            477   _TF2H           BIT 0xcf
0000            478   _T4XCLK0        BIT 0x98
0000            479   _T4XCLK1        BIT 0x99
0000            480   _TR4            BIT 0x9a
0000            481   _T4SPLIT        BIT 0x9b
0000            482   _TF4CEN         BIT 0x9c
0000            483   _TF4LEN         BIT 0x9d
0000            484   _TF4L           BIT 0x9e
0000            485   _TF4H           BIT 0x9f
0000            486   _T5XCLK0        BIT 0xc0
0000            487   _T5XCLK1        BIT 0xc1
0000            488   _TR5            BIT 0xc2
0000            489   _T5SPLIT        BIT 0xc3
0000            490   _TF5CEN         BIT 0xc4
0000            491   _TF5LEN         BIT 0xc5
0000            492   _TF5L           BIT 0xc6
0000            493   _TF5H           BIT 0xc7
0000            494   _RIE            BIT 0xd8
0000            495   _RXTO0          BIT 0xd9
0000            496   _RXTO1          BIT 0xda
0000            497   _RFRQ           BIT 0xdb
0000            498   _TIE            BIT 0xdc
0000            499   _TXHOLD         BIT 0xdd
0000            500   _TXNF1          BIT 0xde
0000            501   _TFRQ           BIT 0xdf
0000            502   ;--------------------------------------------------------
0000            503   ; overlayable register banks
0000            504   ;--------------------------------------------------------
0000            505            rbank0 segment data overlay
0000            506   ;--------------------------------------------------------
0000            507   ; internal ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_DSEG
0000            510   _pwm_counter:
0000            511            ds 2
0002            512   _servo_counter:
0002            513            ds 2
0004            514   _pwm_left:
0004            515            ds 1
0005            516   _pwm_right:
0005            517            ds 1
0006            518   _L_motor_dir:
0006            519            ds 1
0007            520   _R_motor_dir:
0007            521            ds 1
0008            522   _servo_base:
0008            523            ds 1
0009            524   _servo_arm:
0009            525            ds 1
000A            526   _vx_thres:
000A            527            ds 2
000C            528   _vy_thres:
000C            529            ds 2
000E            530   _vx:
000E            531            ds 2
0010            532   _vy:
0010            533            ds 2
0012            534   _getstr1_PARM_2:
0012            535            ds 1
0013            536   _main_vx_error_1_131:
0013            537            ds 2
0015            538   _main_vy_error_1_131:
0015            539            ds 2
0017            540   _main_vx_err_1_131:
0017            541            ds 2
0019            542   _main_vy_err_1_131:
0019            543            ds 2
001B            544   _main_vx_1_131:
001B            545            ds 2
001D            546   _main_vy_1_131:
001D            547            ds 2
001F            548   ;--------------------------------------------------------
001F            549   ; overlayable items in internal ram 
001F            550   ;--------------------------------------------------------
0000            551            rseg    R_OSEG
0000            552            rseg    R_OSEG
0000            553            rseg    R_OSEG
0000            554            rseg    R_OSEG
0000            555            rseg    R_OSEG
0000            556            rseg    R_OSEG
0000            557   _InitPinADC_PARM_2:
0000            558            ds 1
0001            559            rseg    R_OSEG
0001            560   ;--------------------------------------------------------
0001            561   ; indirectly addressable internal ram data
0001            562   ;--------------------------------------------------------
0000            563            rseg R_ISEG
0000            564   _buff:
0000            565            ds 20
0014            566   ;--------------------------------------------------------
0014            567   ; absolute internal ram data
0014            568   ;--------------------------------------------------------
0000            569            DSEG
0000            570   ;--------------------------------------------------------
0000            571   ; bit data
0000            572   ;--------------------------------------------------------
0000            573            rseg R_BSEG
0000            574   ;--------------------------------------------------------
0000            575   ; paged external ram data
0000            576   ;--------------------------------------------------------
0000            577            rseg R_PSEG
0000            578   ;--------------------------------------------------------
0000            579   ; external ram data
0000            580   ;--------------------------------------------------------
0000            581            rseg R_XSEG
0000            582   ;--------------------------------------------------------
0000            583   ; absolute external ram data
0000            584   ;--------------------------------------------------------
0000            585            XSEG
0000            586   ;--------------------------------------------------------
0000            587   ; external initialized ram data
0000            588   ;--------------------------------------------------------
0000            589            rseg R_IXSEG
0000            590            rseg R_HOME
0000            591            rseg R_GSINIT
0000            592            rseg R_CSEG
0000            593   ;--------------------------------------------------------
0000            594   ; Reset entry point and interrupt vectors
0000            595   ;--------------------------------------------------------
0000            596            CSEG at 0x0000
0000 020000     597            ljmp    _crt0
0093            598            CSEG at 0x0093
0093 020000     599            ljmp    _Timer5_ISR
0096            600   ;--------------------------------------------------------
0096            601   ; global & static initialisations
0096            602   ;--------------------------------------------------------
0000            603            rseg R_HOME
0000            604            rseg R_GSINIT
0000            605            rseg R_GSINIT
0000            606   ;--------------------------------------------------------
0000            607   ; data variables initialization
0000            608   ;--------------------------------------------------------
0000            609            rseg R_DINIT
0000            610   ;        main.c:50: unsigned int pwm_counter = 0; 
0000 E4         611            clr     a
0001 F550       612            mov     _pwm_counter,a
0003 F551       613            mov     (_pwm_counter + 1),a
0005            614   ;        main.c:51: unsigned int servo_counter = 0; 
0005 E4         615            clr     a
0006 F510       616            mov     _servo_counter,a
0008 F511       617            mov     (_servo_counter + 1),a
000A            618   ;        main.c:52: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75D000     619            mov     _pwm_left,#0x00
000D            620   ;        main.c:52: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 759000     621            mov     _pwm_right,#0x00
0010            622   ;        main.c:53: unsigned char servo_base = 1, servo_arm = 1; 
0010 755001     623            mov     _L_motor_dir,#0x01
0013            624   ;        main.c:53: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 751001     625            mov     _R_motor_dir,#0x01
0016            626   ;        main.c:54: unsigned char servo_base = 1, servo_arm = 1; 
0016 75D001     627            mov     _servo_base,#0x01
0019            628   ;        main.c:54: int vx_thres = 161, vy_thres = 166; 
0019 759001     629            mov     _servo_arm,#0x01
001C            630   ;        main.c:55: int vx = 0, vy = 0; 
001C 7550A1     631            mov     _vx_thres,#0xA1
001F E4         632            clr     a
0020 F551       633            mov     (_vx_thres + 1),a
0022            634   ;        main.c:55: int vx_thres = 161, vy_thres = 166; 
0022 7510A6     635            mov     _vy_thres,#0xA6
0025 E4         636            clr     a
0026 F511       637            mov     (_vy_thres + 1),a
0028            638   ;        main.c:56: int vx = 0, vy = 0; 
0028 E4         639            clr     a
0029 F5D0       640            mov     _vx,a
002B F5D1       641            mov     (_vx + 1),a
002D            642   ;        main.c:56: 
002D E4         643            clr     a
002E F590       644            mov     _vy,a
0030 F591       645            mov     (_vy + 1),a
0032            646            ; The linker places a 'ret' at the end of segment R_DINIT.
0032            647   ;--------------------------------------------------------
0032            648   ; code
0032            649   ;--------------------------------------------------------
0000            650            rseg R_CSEG
0000            651   ;------------------------------------------------------------
0000            652   ;Allocation info for local variables in function '_c51_external_startup'
0000            653   ;------------------------------------------------------------
0000            654   ;------------------------------------------------------------
0000            655   ;        main.c:59: char _c51_external_startup (void)
0000            656   ;        -----------------------------------------
0000            657   ;         function _c51_external_startup
0000            658   ;        -----------------------------------------
0000            659   __c51_external_startup:
0000            660            using   0
0000            661   ;        main.c:62: SFRPAGE = 0x00;
0000 75A700     662            mov     _SFRPAGE,#0x00
0003            663   ;        main.c:63: WDTCN = 0xDE; //First key
0003 7597DE     664            mov     _WDTCN,#0xDE
0006            665   ;        main.c:64: WDTCN = 0xAD; //Second key
0006 7597AD     666            mov     _WDTCN,#0xAD
0009            667   ;        main.c:66: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     668            mov     _VDM0CN,#0x80
000C            669   ;        main.c:67: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     670            mov     _RSTSRC,#0x06
000F            671   ;        main.c:74: SFRPAGE = 0x10;
000F 75A710     672            mov     _SFRPAGE,#0x10
0012            673   ;        main.c:75: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     674            mov     _PFE0CN,#0x20
0015            675   ;        main.c:76: SFRPAGE = 0x00;
0015 75A700     676            mov     _SFRPAGE,#0x00
0018            677   ;        main.c:97: CLKSEL = 0x00;
0018 75A900     678            mov     _CLKSEL,#0x00
001B            679   ;        main.c:98: CLKSEL = 0x00;
001B 75A900     680            mov     _CLKSEL,#0x00
001E            681   ;        main.c:99: while ((CLKSEL & 0x80) == 0);
001E            682   L002001?:
001E E5A9       683            mov     a,_CLKSEL
0020 30E750     684            jnb     acc.7,L002001?
0023            685   ;        main.c:100: CLKSEL = 0x03;
0023 75A903     686            mov     _CLKSEL,#0x03
0026            687   ;        main.c:101: CLKSEL = 0x03;
0026 75A903     688            mov     _CLKSEL,#0x03
0029            689   ;        main.c:102: while ((CLKSEL & 0x80) == 0);
0029            690   L002004?:
0029 E5A9       691            mov     a,_CLKSEL
002B 30E7D0     692            jnb     acc.7,L002004?
002E            693   ;        main.c:107: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     694            orl     _P0MDOUT,#0x11
0031            695   ;        main.c:108: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     696            orl     _P2MDOUT,#0x01
0034            697   ;        main.c:109: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     698            mov     _XBR0,#0x01
0037            699   ;        main.c:110: XBR1     = 0X00;
0037 75E200     700            mov     _XBR1,#0x00
003A            701   ;        main.c:111: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     702            mov     _XBR2,#0x41
003D            703   ;        main.c:117: SCON0 = 0x10;
003D 759810     704            mov     _SCON0,#0x10
0040            705   ;        main.c:118: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     706            mov     _TH1,#0xE6
0043            707   ;        main.c:119: TL1 = TH1;      // Init Timer1
0043 858D8B     708            mov     _TL1,_TH1
0046            709   ;        main.c:120: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     710            anl     _TMOD,#0x0F
0049            711   ;        main.c:121: TMOD |=  0x20;                       
0049 438920     712            orl     _TMOD,#0x20
004C            713   ;        main.c:122: TR1 = 1; // START Timer1
004C D28E       714            setb    _TR1
004E            715   ;        main.c:123: TI = 1;  // Indicate TX0 ready
004E D299       716            setb    _TI
0050            717   ;        main.c:125: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       718            setb    _P2_0
0052            719   ;        main.c:128: SFRPAGE=0x10;
0052 75A710     720            mov     _SFRPAGE,#0x10
0055            721   ;        main.c:129: TMR5CN0=0x00;
0055 75C000     722            mov     _TMR5CN0,#0x00
0058            723   ;        main.c:130: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     724            mov     _TMR5,#0xFF
005B 75D5FF     725            mov     (_TMR5 >> 8),#0xFF
005E            726   ;        main.c:131: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     727            orl     _EIE2,#0x08
0061            728   ;        main.c:132: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       729            setb    _TR5
0063            730   ;        main.c:135: EA=1;  // Enable global interrupts
0063 D2AF       731            setb    _EA
0065            732   ;        main.c:136: SFRPAGE=0x00;
0065 75A700     733            mov     _SFRPAGE,#0x00
0068            734   ;        main.c:138: return 0;
0068 758200     735            mov     dpl,#0x00
006B 22         736            ret
006C            737   ;------------------------------------------------------------
006C            738   ;Allocation info for local variables in function 'Timer3us'
006C            739   ;------------------------------------------------------------
006C            740   ;us                        Allocated to registers r2 
006C            741   ;i                         Allocated to registers r3 
006C            742   ;------------------------------------------------------------
006C            743   ;        main.c:142: void Timer3us(unsigned char us)
006C            744   ;        -----------------------------------------
006C            745   ;         function Timer3us
006C            746   ;        -----------------------------------------
006C            747   _Timer3us:
006C AA82       748            mov     r2,dpl
006E            749   ;        main.c:147: CKCON0|=0b_0100_0000;
006E 438E40     750            orl     _CKCON0,#0x40
0071            751   ;        main.c:149: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     752            mov     _TMR3RL,#0xB8
0074 7593FF     753            mov     (_TMR3RL >> 8),#0xFF
0077            754   ;        main.c:150: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     755            mov     _TMR3,_TMR3RL
007A 859395     756            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            757   ;        main.c:152: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     758            mov     _TMR3CN0,#0x04
0080            759   ;        main.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       760            mov     r3,#0x00
0082            761   L003004?:
0082 C3         762            clr     c
0083 EB         763            mov     a,r3
0084 9A         764            subb    a,r2
0085 5000       765            jnc     L003007?
0087            766   ;        main.c:155: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            767   L003001?:
0087 E591       768            mov     a,_TMR3CN0
0089 30E7D0     769            jnb     acc.7,L003001?
008C            770   ;        main.c:156: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     771            anl     _TMR3CN0,#0x7F
008F            772   ;        main.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         773            inc     r3
0090 8000       774            sjmp    L003004?
0092            775   L003007?:
0092            776   ;        main.c:158: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     777            mov     _TMR3CN0,#0x00
0095 22         778            ret
0096            779   ;------------------------------------------------------------
0096            780   ;Allocation info for local variables in function 'waitms'
0096            781   ;------------------------------------------------------------
0096            782   ;ms                        Allocated to registers r2 r3 
0096            783   ;j                         Allocated to registers r4 r5 
0096            784   ;k                         Allocated to registers r6 
0096            785   ;------------------------------------------------------------
0096            786   ;        main.c:161: void waitms (unsigned int ms)
0096            787   ;        -----------------------------------------
0096            788   ;         function waitms
0096            789   ;        -----------------------------------------
0096            790   _waitms:
0096 AA82       791            mov     r2,dpl
0098 AB83       792            mov     r3,dph
009A            793   ;        main.c:165: for(j=0; j<ms; j++)
009A 7C00       794            mov     r4,#0x00
009C 7D00       795            mov     r5,#0x00
009E            796   L004005?:
009E C3         797            clr     c
009F EC         798            mov     a,r4
00A0 9A         799            subb    a,r2
00A1 ED         800            mov     a,r5
00A2 9B         801            subb    a,r3
00A3 5000       802            jnc     L004009?
00A5            803   ;        main.c:166: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       804            mov     r6,#0x00
00A7            805   L004001?:
00A7 BE0410     806            cjne    r6,#0x04,L004018?
00AA            807   L004018?:
00AA 5000       808            jnc     L004007?
00AC 7582FA     809            mov     dpl,#0xFA
00AF C002       810            push    ar2
00B1 C003       811            push    ar3
00B3 C004       812            push    ar4
00B5 C005       813            push    ar5
00B7 C006       814            push    ar6
00B9 120000     815            lcall   _Timer3us
00BC D006       816            pop     ar6
00BE D005       817            pop     ar5
00C0 D004       818            pop     ar4
00C2 D003       819            pop     ar3
00C4 D002       820            pop     ar2
00C6 0E         821            inc     r6
00C7 8000       822            sjmp    L004001?
00C9            823   L004007?:
00C9            824   ;        main.c:165: for(j=0; j<ms; j++)
00C9 0C         825            inc     r4
00CA BC0050     826            cjne    r4,#0x00,L004005?
00CD 0D         827            inc     r5
00CE 8000       828            sjmp    L004005?
00D0            829   L004009?:
00D0 22         830            ret
00D1            831   ;------------------------------------------------------------
00D1            832   ;Allocation info for local variables in function 'UART1_Init'
00D1            833   ;------------------------------------------------------------
00D1            834   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            835   ;------------------------------------------------------------
00D1            836   ;        main.c:169: void UART1_Init (unsigned long baudrate)
00D1            837   ;        -----------------------------------------
00D1            838   ;         function UART1_Init
00D1            839   ;        -----------------------------------------
00D1            840   _UART1_Init:
00D1 AA82       841            mov     r2,dpl
00D3 AB83       842            mov     r3,dph
00D5 ACF0       843            mov     r4,b
00D7 FD         844            mov     r5,a
00D8            845   ;        main.c:171: SFRPAGE = 0x20;
00D8 75A720     846            mov     _SFRPAGE,#0x20
00DB            847   ;        main.c:172: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     848            mov     _SMOD1,#0x0C
00DE            849   ;        main.c:173: SCON1 = 0x10;
00DE 75C810     850            mov     _SCON1,#0x10
00E1            851   ;        main.c:174: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     852            mov     _SBCON1,#0x00
00E4            853   ;        main.c:175: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       854            mov     __divulong_PARM_2,r2
00E6 8B01       855            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       856            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       857            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     858            mov     dptr,#0xA200
00EF 75F04A     859            mov     b,#0x4A
00F2 7404       860            mov     a,#0x04
00F4 120000     861            lcall   __divulong
00F7 AA82       862            mov     r2,dpl
00F9 AB83       863            mov     r3,dph
00FB ACF0       864            mov     r4,b
00FD FD         865            mov     r5,a
00FE 750018     866            mov     __divulong_PARM_2,#0x18
0101 E4         867            clr     a
0102 F501       868            mov     (__divulong_PARM_2 + 1),a
0104 F502       869            mov     (__divulong_PARM_2 + 2),a
0106 F503       870            mov     (__divulong_PARM_2 + 3),a
0108 8A82       871            mov     dpl,r2
010A 8B83       872            mov     dph,r3
010C 8CF0       873            mov     b,r4
010E ED         874            mov     a,r5
010F 120000     875            lcall   __divulong
0112 AA82       876            mov     r2,dpl
0114 AB83       877            mov     r3,dph
0116 ACF0       878            mov     r4,b
0118 FD         879            mov     r5,a
0119 E4         880            clr     a
011A C3         881            clr     c
011B 9A         882            subb    a,r2
011C FA         883            mov     r2,a
011D E4         884            clr     a
011E 9B         885            subb    a,r3
011F FB         886            mov     r3,a
0120 7401       887            mov     a,#0x01
0122 9C         888            subb    a,r4
0123 E4         889            clr     a
0124 9D         890            subb    a,r5
0125 8A95       891            mov     _SBRL1,r2
0127 8B96       892            mov     (_SBRL1 >> 8),r3
0129            893   ;        main.c:176: TI1 = 1; // indicate ready for TX
0129 D2C9       894            setb    _TI1
012B            895   ;        main.c:177: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     896            orl     _SBCON1,#0x40
012E            897   ;        main.c:178: SFRPAGE = 0x00;
012E 75A700     898            mov     _SFRPAGE,#0x00
0131 22         899            ret
0132            900   ;------------------------------------------------------------
0132            901   ;Allocation info for local variables in function 'putchar1'
0132            902   ;------------------------------------------------------------
0132            903   ;c                         Allocated to registers r2 
0132            904   ;------------------------------------------------------------
0132            905   ;        main.c:181: void putchar1 (char c) 
0132            906   ;        -----------------------------------------
0132            907   ;         function putchar1
0132            908   ;        -----------------------------------------
0132            909   _putchar1:
0132 AA82       910            mov     r2,dpl
0134            911   ;        main.c:183: SFRPAGE = 0x20;
0134 75A720     912            mov     _SFRPAGE,#0x20
0137            913   ;        main.c:184: while (!TI1);
0137            914   L006001?:
0137            915   ;        main.c:185: TI1=0;
0137 10C9A0     916            jbc     _TI1,L006008?
013A 8000       917            sjmp    L006001?
013C            918   L006008?:
013C            919   ;        main.c:186: SBUF1 = c;
013C 8A92       920            mov     _SBUF1,r2
013E            921   ;        main.c:187: SFRPAGE = 0x00;
013E 75A700     922            mov     _SFRPAGE,#0x00
0141 22         923            ret
0142            924   ;------------------------------------------------------------
0142            925   ;Allocation info for local variables in function 'sendstr1'
0142            926   ;------------------------------------------------------------
0142            927   ;s                         Allocated to registers r2 r3 r4 
0142            928   ;------------------------------------------------------------
0142            929   ;        main.c:190: void sendstr1 (char * s)
0142            930   ;        -----------------------------------------
0142            931   ;         function sendstr1
0142            932   ;        -----------------------------------------
0142            933   _sendstr1:
0142 AA82       934            mov     r2,dpl
0144 AB83       935            mov     r3,dph
0146 ACF0       936            mov     r4,b
0148            937   ;        main.c:192: while(*s)
0148            938   L007001?:
0148 8A82       939            mov     dpl,r2
014A 8B83       940            mov     dph,r3
014C 8CF0       941            mov     b,r4
014E 120000     942            lcall   __gptrget
0151 FD         943            mov     r5,a
0152 6000       944            jz      L007004?
0154            945   ;        main.c:194: putchar1(*s);
0154 8D82       946            mov     dpl,r5
0156 C002       947            push    ar2
0158 C003       948            push    ar3
015A C004       949            push    ar4
015C 120000     950            lcall   _putchar1
015F D004       951            pop     ar4
0161 D003       952            pop     ar3
0163 D002       953            pop     ar2
0165            954   ;        main.c:195: s++;        
0165 0A         955            inc     r2
0166 BA00E0     956            cjne    r2,#0x00,L007001?
0169 0B         957            inc     r3
016A 8000       958            sjmp    L007001?
016C            959   L007004?:
016C 22         960            ret
016D            961   ;------------------------------------------------------------
016D            962   ;Allocation info for local variables in function 'getchar1'
016D            963   ;------------------------------------------------------------
016D            964   ;c                         Allocated to registers 
016D            965   ;------------------------------------------------------------
016D            966   ;        main.c:199: char getchar1 (void)
016D            967   ;        -----------------------------------------
016D            968   ;         function getchar1
016D            969   ;        -----------------------------------------
016D            970   _getchar1:
016D            971   ;        main.c:202: SFRPAGE = 0x20;
016D 75A720     972            mov     _SFRPAGE,#0x20
0170            973   ;        main.c:203: while (!RI1);
0170            974   L008001?:
0170            975   ;        main.c:204: RI1=0;
0170 10C8E0     976            jbc     _RI1,L008008?
0173 8000       977            sjmp    L008001?
0175            978   L008008?:
0175            979   ;        main.c:206: SCON1&=0b_0011_1111;
0175 53C83F     980            anl     _SCON1,#0x3F
0178            981   ;        main.c:207: c = SBUF1;
0178 859282     982            mov     dpl,_SBUF1
017B            983   ;        main.c:208: SFRPAGE = 0x00;
017B 75A700     984            mov     _SFRPAGE,#0x00
017E            985   ;        main.c:209: return (c);
017E 22         986            ret
017F            987   ;------------------------------------------------------------
017F            988   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            989   ;------------------------------------------------------------
017F            990   ;c                         Allocated to registers 
017F            991   ;timeout                   Allocated to registers r2 r3 
017F            992   ;------------------------------------------------------------
017F            993   ;        main.c:212: char getchar1_with_timeout (void)
017F            994   ;        -----------------------------------------
017F            995   ;         function getchar1_with_timeout
017F            996   ;        -----------------------------------------
017F            997   _getchar1_with_timeout:
017F            998   ;        main.c:216: SFRPAGE = 0x20;
017F 75A720     999            mov     _SFRPAGE,#0x20
0182           1000   ;        main.c:218: while (!RI1)
0182 7A00      1001            mov     r2,#0x00
0184 7B00      1002            mov     r3,#0x00
0186           1003   L009003?:
0186 20C860    1004            jb      _RI1,L009005?
0189           1005   ;        main.c:220: SFRPAGE = 0x00;
0189 75A700    1006            mov     _SFRPAGE,#0x00
018C           1007   ;        main.c:221: Timer3us(20);
018C 758214    1008            mov     dpl,#0x14
018F C002      1009            push    ar2
0191 C003      1010            push    ar3
0193 120000    1011            lcall   _Timer3us
0196 D003      1012            pop     ar3
0198 D002      1013            pop     ar2
019A           1014   ;        main.c:222: SFRPAGE = 0x20;
019A 75A720    1015            mov     _SFRPAGE,#0x20
019D           1016   ;        main.c:223: timeout++;
019D 0A        1017            inc     r2
019E BA00A0    1018            cjne    r2,#0x00,L009012?
01A1 0B        1019            inc     r3
01A2           1020   L009012?:
01A2           1021   ;        main.c:224: if(timeout==25000)
01A2 BAA820    1022            cjne    r2,#0xA8,L009003?
01A5 BB6120    1023            cjne    r3,#0x61,L009003?
01A8           1024   ;        main.c:226: SFRPAGE = 0x00;
01A8 75A700    1025            mov     _SFRPAGE,#0x00
01AB           1026   ;        main.c:227: return ('\n'); // Timeout after half second
01AB 75820A    1027            mov     dpl,#0x0A
01AE 22        1028            ret
01AF           1029   L009005?:
01AF           1030   ;        main.c:230: RI1=0;
01AF C2C8      1031            clr     _RI1
01B1           1032   ;        main.c:232: SCON1&=0b_0011_1111;
01B1 53C83F    1033            anl     _SCON1,#0x3F
01B4           1034   ;        main.c:233: c = SBUF1;
01B4 859282    1035            mov     dpl,_SBUF1
01B7           1036   ;        main.c:234: SFRPAGE = 0x00;
01B7 75A700    1037            mov     _SFRPAGE,#0x00
01BA           1038   ;        main.c:235: return (c);
01BA 22        1039            ret
01BB           1040   ;------------------------------------------------------------
01BB           1041   ;Allocation info for local variables in function 'getstr1'
01BB           1042   ;------------------------------------------------------------
01BB           1043   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1044   ;s                         Allocated to registers r2 r3 r4 
01BB           1045   ;c                         Allocated to registers r1 
01BB           1046   ;cnt                       Allocated to registers r5 
01BB           1047   ;------------------------------------------------------------
01BB           1048   ;        main.c:238: void getstr1 (char * s, unsigned char n)
01BB           1049   ;        -----------------------------------------
01BB           1050   ;         function getstr1
01BB           1051   ;        -----------------------------------------
01BB           1052   _getstr1:
01BB AA82      1053            mov     r2,dpl
01BD AB83      1054            mov     r3,dph
01BF ACF0      1055            mov     r4,b
01C1           1056   ;        main.c:244: while(1)
01C1 7D00      1057            mov     r5,#0x00
01C3 8A06      1058            mov     ar6,r2
01C5 8B07      1059            mov     ar7,r3
01C7 8C00      1060            mov     ar0,r4
01C9           1061   L010007?:
01C9           1062   ;        main.c:246: c=getchar1_with_timeout();
01C9 C002      1063            push    ar2
01CB C003      1064            push    ar3
01CD C004      1065            push    ar4
01CF C005      1066            push    ar5
01D1 C006      1067            push    ar6
01D3 C007      1068            push    ar7
01D5 C000      1069            push    ar0
01D7 120000    1070            lcall   _getchar1_with_timeout
01DA A982      1071            mov     r1,dpl
01DC D000      1072            pop     ar0
01DE D007      1073            pop     ar7
01E0 D006      1074            pop     ar6
01E2 D005      1075            pop     ar5
01E4 D004      1076            pop     ar4
01E6 D003      1077            pop     ar3
01E8 D002      1078            pop     ar2
01EA           1079   ;        main.c:247: if(c=='\n')
01EA B90A20    1080            cjne    r1,#0x0A,L010002?
01ED           1081   ;        main.c:249: *s=0;
01ED 8A82      1082            mov     dpl,r2
01EF 8B83      1083            mov     dph,r3
01F1 8CF0      1084            mov     b,r4
01F3 E4        1085            clr     a
01F4           1086   ;        main.c:250: return;
01F4 020000    1087            ljmp    __gptrput
01F7           1088   L010002?:
01F7           1089   ;        main.c:253: if (cnt<n)
01F7 C3        1090            clr     c
01F8 ED        1091            mov     a,r5
01F9 9550      1092            subb    a,_getstr1_PARM_2
01FB 5000      1093            jnc     L010004?
01FD           1094   ;        main.c:255: cnt++;
01FD 0D        1095            inc     r5
01FE           1096   ;        main.c:256: *s=c;
01FE 8E82      1097            mov     dpl,r6
0200 8F83      1098            mov     dph,r7
0202 88F0      1099            mov     b,r0
0204 E9        1100            mov     a,r1
0205 120000    1101            lcall   __gptrput
0208 A3        1102            inc     dptr
0209 AE82      1103            mov     r6,dpl
020B AF83      1104            mov     r7,dph
020D           1105   ;        main.c:257: s++;
020D 8E02      1106            mov     ar2,r6
020F 8F03      1107            mov     ar3,r7
0211 8804      1108            mov     ar4,r0
0213 8000      1109            sjmp    L010007?
0215           1110   L010004?:
0215           1111   ;        main.c:261: *s=0;
0215 8A82      1112            mov     dpl,r2
0217 8B83      1113            mov     dph,r3
0219 8CF0      1114            mov     b,r4
021B E4        1115            clr     a
021C           1116   ;        main.c:262: return;
021C 020000    1117            ljmp    __gptrput
021F           1118   ;------------------------------------------------------------
021F           1119   ;Allocation info for local variables in function 'RXU1'
021F           1120   ;------------------------------------------------------------
021F           1121   ;------------------------------------------------------------
021F           1122   ;        main.c:268: bit RXU1 (void)
021F           1123   ;        -----------------------------------------
021F           1124   ;         function RXU1
021F           1125   ;        -----------------------------------------
021F           1126   _RXU1:
021F           1127   ;        main.c:271: SFRPAGE = 0x20;
021F 75A720    1128            mov     _SFRPAGE,#0x20
0222           1129   ;        main.c:272: mybit=RI1;
0222 A2C8      1130            mov     c,_RI1
0224           1131   ;        main.c:273: SFRPAGE = 0x00;
0224 75A700    1132            mov     _SFRPAGE,#0x00
0227           1133   ;        main.c:274: return mybit;
0227 22        1134            ret
0228           1135   ;------------------------------------------------------------
0228           1136   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1137   ;------------------------------------------------------------
0228           1138   ;ms                        Allocated to registers r2 r3 
0228           1139   ;j                         Allocated to registers r4 r5 
0228           1140   ;k                         Allocated to registers r6 
0228           1141   ;------------------------------------------------------------
0228           1142   ;        main.c:277: void waitms_or_RI1 (unsigned int ms)
0228           1143   ;        -----------------------------------------
0228           1144   ;         function waitms_or_RI1
0228           1145   ;        -----------------------------------------
0228           1146   _waitms_or_RI1:
0228 AA82      1147            mov     r2,dpl
022A AB83      1148            mov     r3,dph
022C           1149   ;        main.c:281: for(j=0; j<ms; j++)
022C 7C00      1150            mov     r4,#0x00
022E 7D00      1151            mov     r5,#0x00
0230           1152   L012007?:
0230 C3        1153            clr     c
0231 EC        1154            mov     a,r4
0232 9A        1155            subb    a,r2
0233 ED        1156            mov     a,r5
0234 9B        1157            subb    a,r3
0235 5000      1158            jnc     L012011?
0237           1159   ;        main.c:283: for (k=0; k<4; k++)
0237 7E00      1160            mov     r6,#0x00
0239           1161   L012003?:
0239 BE04A0    1162            cjne    r6,#0x04,L012019?
023C           1163   L012019?:
023C 5000      1164            jnc     L012009?
023E           1165   ;        main.c:285: if(RXU1()) return;
023E C002      1166            push    ar2
0240 C003      1167            push    ar3
0242 C004      1168            push    ar4
0244 C005      1169            push    ar5
0246 C006      1170            push    ar6
0248 120000    1171            lcall   _RXU1
024B E4        1172            clr     a
024C 33        1173            rlc     a
024D D006      1174            pop     ar6
024F D005      1175            pop     ar5
0251 D004      1176            pop     ar4
0253 D003      1177            pop     ar3
0255 D002      1178            pop     ar2
0257 6000      1179            jz      L012002?
0259 22        1180            ret
025A           1181   L012002?:
025A           1182   ;        main.c:286: Timer3us(250);
025A 7582FA    1183            mov     dpl,#0xFA
025D C002      1184            push    ar2
025F C003      1185            push    ar3
0261 C004      1186            push    ar4
0263 C005      1187            push    ar5
0265 C006      1188            push    ar6
0267 120000    1189            lcall   _Timer3us
026A D006      1190            pop     ar6
026C D005      1191            pop     ar5
026E D004      1192            pop     ar4
0270 D003      1193            pop     ar3
0272 D002      1194            pop     ar2
0274           1195   ;        main.c:283: for (k=0; k<4; k++)
0274 0E        1196            inc     r6
0275 8000      1197            sjmp    L012003?
0277           1198   L012009?:
0277           1199   ;        main.c:281: for(j=0; j<ms; j++)
0277 0C        1200            inc     r4
0278 BC00E0    1201            cjne    r4,#0x00,L012007?
027B 0D        1202            inc     r5
027C 8000      1203            sjmp    L012007?
027E           1204   L012011?:
027E 22        1205            ret
027F           1206   ;------------------------------------------------------------
027F           1207   ;Allocation info for local variables in function 'SendATCommand'
027F           1208   ;------------------------------------------------------------
027F           1209   ;s                         Allocated to registers r2 r3 r4 
027F           1210   ;------------------------------------------------------------
027F           1211   ;        main.c:291: void SendATCommand (char * s)
027F           1212   ;        -----------------------------------------
027F           1213   ;         function SendATCommand
027F           1214   ;        -----------------------------------------
027F           1215   _SendATCommand:
027F AA82      1216            mov     r2,dpl
0281 AB83      1217            mov     r3,dph
0283 ACF0      1218            mov     r4,b
0285           1219   ;        main.c:293: printf("Command: %s", s);
0285 C002      1220            push    ar2
0287 C003      1221            push    ar3
0289 C004      1222            push    ar4
028B C002      1223            push    ar2
028D C003      1224            push    ar3
028F C004      1225            push    ar4
0291 7460      1226            mov     a,#__str_0
0293 C0E0      1227            push    acc
0295 74BF      1228            mov     a,#(__str_0 >> 8)
0297 C0E0      1229            push    acc
0299 7480      1230            mov     a,#0x80
029B C0E0      1231            push    acc
029D 120000    1232            lcall   _printf
02A0 E581      1233            mov     a,sp
02A2 24FA      1234            add     a,#0xfa
02A4 F581      1235            mov     sp,a
02A6           1236   ;        main.c:294: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1237            clr     _P2_0
02A8           1238   ;        main.c:295: waitms(5);
02A8 900005    1239            mov     dptr,#0x0005
02AB 120000    1240            lcall   _waitms
02AE D004      1241            pop     ar4
02B0 D003      1242            pop     ar3
02B2 D002      1243            pop     ar2
02B4           1244   ;        main.c:296: sendstr1(s);
02B4 8A82      1245            mov     dpl,r2
02B6 8B83      1246            mov     dph,r3
02B8 8CF0      1247            mov     b,r4
02BA 120000    1248            lcall   _sendstr1
02BD           1249   ;        main.c:297: getstr1(buff, sizeof(buff)-1);
02BD 755013    1250            mov     _getstr1_PARM_2,#0x13
02C0 904410    1251            mov     dptr,#_buff
02C3 75F040    1252            mov     b,#0x40
02C6 120000    1253            lcall   _getstr1
02C9           1254   ;        main.c:298: waitms(10);
02C9 90000A    1255            mov     dptr,#0x000A
02CC 120000    1256            lcall   _waitms
02CF           1257   ;        main.c:299: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1258            setb    _P2_0
02D1           1259   ;        main.c:300: printf("Response: %s\r\n", buff);
02D1 7410      1260            mov     a,#_buff
02D3 C0E0      1261            push    acc
02D5 7444      1262            mov     a,#(_buff >> 8)
02D7 C0E0      1263            push    acc
02D9 7440      1264            mov     a,#0x40
02DB C0E0      1265            push    acc
02DD 7428      1266            mov     a,#__str_1
02DF C0E0      1267            push    acc
02E1 74C0      1268            mov     a,#(__str_1 >> 8)
02E3 C0E0      1269            push    acc
02E5 7480      1270            mov     a,#0x80
02E7 C0E0      1271            push    acc
02E9 120000    1272            lcall   _printf
02EC E581      1273            mov     a,sp
02EE 24FA      1274            add     a,#0xfa
02F0 F581      1275            mov     sp,a
02F2 22        1276            ret
02F3           1277   ;------------------------------------------------------------
02F3           1278   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1279   ;------------------------------------------------------------
02F3           1280   ;------------------------------------------------------------
02F3           1281   ;        main.c:303: void ReceptionOff (void)
02F3           1282   ;        -----------------------------------------
02F3           1283   ;         function ReceptionOff
02F3           1284   ;        -----------------------------------------
02F3           1285   _ReceptionOff:
02F3           1286   ;        main.c:305: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1287            clr     _P2_0
02F5           1288   ;        main.c:306: waitms(10);
02F5 90000A    1289            mov     dptr,#0x000A
02F8 120000    1290            lcall   _waitms
02FB           1291   ;        main.c:307: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C068    1292            mov     dptr,#__str_2
02FE 75F080    1293            mov     b,#0x80
0301 120000    1294            lcall   _sendstr1
0304           1295   ;        main.c:308: waitms(10);
0304 90000A    1296            mov     dptr,#0x000A
0307 120000    1297            lcall   _waitms
030A           1298   ;        main.c:310: SCON1&=0b_0011_1111;
030A 53C83F    1299            anl     _SCON1,#0x3F
030D           1300   ;        main.c:311: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1301            setb    _P2_0
030F 22        1302            ret
0310           1303   ;------------------------------------------------------------
0310           1304   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1305   ;------------------------------------------------------------
0310           1306   ;pin                       Allocated to registers r2 
0310           1307   ;mask                      Allocated to registers r3 
0310           1308   ;------------------------------------------------------------
0310           1309   ;        main.c:314: void Set_Pin_Output (unsigned char pin)
0310           1310   ;        -----------------------------------------
0310           1311   ;         function Set_Pin_Output
0310           1312   ;        -----------------------------------------
0310           1313   _Set_Pin_Output:
0310 AA82      1314            mov     r2,dpl
0312           1315   ;        main.c:318: mask=(1<<(pin&0x7));
0312 7407      1316            mov     a,#0x07
0314 5A        1317            anl     a,r2
0315 F5F0      1318            mov     b,a
0317 05F0      1319            inc     b
0319 7401      1320            mov     a,#0x01
031B 8000      1321            sjmp    L015011?
031D           1322   L015009?:
031D 25E0      1323            add     a,acc
031F           1324   L015011?:
031F D5F0E8    1325            djnz    b,L015009?
0322 FB        1326            mov     r3,a
0323           1327   ;        main.c:319: switch(pin/0x10)
0323 EA        1328            mov     a,r2
0324 C4        1329            swap    a
0325 540F      1330            anl     a,#0x0f
0327 FA        1331            mov  r2,a
0328 24FC      1332            add     a,#0xff - 0x03
032A 4000      1333            jc      L015006?
032C EA        1334            mov     a,r2
032D 2A        1335            add     a,r2
032E 2A        1336            add     a,r2
032F 90C168    1337            mov     dptr,#L015013?
0332 73        1338            jmp     @a+dptr
0333           1339   L015013?:
0333 020000    1340            ljmp    L015001?
0336 020000    1341            ljmp    L015002?
0339 020000    1342            ljmp    L015003?
033C 020000    1343            ljmp    L015004?
033F           1344   ;        main.c:321: case 0: P0MDOUT |= mask; break;
033F           1345   L015001?:
033F EB        1346            mov     a,r3
0340 42A4      1347            orl     _P0MDOUT,a
0342           1348   ;        main.c:322: case 1: P1MDOUT |= mask; break;
0342 22        1349            ret
0343           1350   L015002?:
0343 EB        1351            mov     a,r3
0344 42A5      1352            orl     _P1MDOUT,a
0346           1353   ;        main.c:323: case 2: P2MDOUT |= mask; break; 
0346 22        1354            ret
0347           1355   L015003?:
0347 EB        1356            mov     a,r3
0348 42A6      1357            orl     _P2MDOUT,a
034A           1358   ;        main.c:324: case 3: P3MDOUT |= mask; break; 
034A 22        1359            ret
034B           1360   L015004?:
034B EB        1361            mov     a,r3
034C 429C      1362            orl     _P3MDOUT,a
034E           1363   ;        main.c:325: }   
034E           1364   L015006?:
034E 22        1365            ret
034F           1366   ;------------------------------------------------------------
034F           1367   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1368   ;------------------------------------------------------------
034F           1369   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1370   ;pin                       Allocated to registers r2 
034F           1371   ;------------------------------------------------------------
034F           1372   ;        main.c:328: void Set_Pin_Input (unsigned char pin)
034F           1373   ;        -----------------------------------------
034F           1374   ;         function Set_Pin_Input
034F           1375   ;        -----------------------------------------
034F           1376   _Set_Pin_Input:
034F AA82      1377            mov     r2,dpl
0351           1378   ;        main.c:332: mask=(1<<(pin&0x7));
0351 7407      1379            mov     a,#0x07
0353 5A        1380            anl     a,r2
0354 F5F0      1381            mov     b,a
0356 05F0      1382            inc     b
0358 7401      1383            mov     a,#0x01
035A 8000      1384            sjmp    L016011?
035C           1385   L016009?:
035C 25E0      1386            add     a,acc
035E           1387   L016011?:
035E D5F0E8    1388            djnz    b,L016009?
0361           1389   ;        main.c:333: mask=~mask;
0361 F4        1390            cpl     a
0362 FB        1391            mov     r3,a
0363           1392   ;        main.c:334: switch(pin/0x10)
0363 EA        1393            mov     a,r2
0364 C4        1394            swap    a
0365 540F      1395            anl     a,#0x0f
0367 FA        1396            mov  r2,a
0368 24FC      1397            add     a,#0xff - 0x03
036A 4000      1398            jc      L016006?
036C EA        1399            mov     a,r2
036D 2A        1400            add     a,r2
036E 2A        1401            add     a,r2
036F 90C368    1402            mov     dptr,#L016013?
0372 73        1403            jmp     @a+dptr
0373           1404   L016013?:
0373 020000    1405            ljmp    L016001?
0376 020000    1406            ljmp    L016002?
0379 020000    1407            ljmp    L016003?
037C 020000    1408            ljmp    L016004?
037F           1409   ;        main.c:336: case 0: P0MDOUT &= mask; break;
037F           1410   L016001?:
037F EB        1411            mov     a,r3
0380 52A4      1412            anl     _P0MDOUT,a
0382           1413   ;        main.c:337: case 1: P1MDOUT &= mask; break;
0382 22        1414            ret
0383           1415   L016002?:
0383 EB        1416            mov     a,r3
0384 52A5      1417            anl     _P1MDOUT,a
0386           1418   ;        main.c:338: case 2: P2MDOUT &= mask; break; 
0386 22        1419            ret
0387           1420   L016003?:
0387 EB        1421            mov     a,r3
0388 52A6      1422            anl     _P2MDOUT,a
038A           1423   ;        main.c:339: case 3: P3MDOUT &= mask; break; 
038A 22        1424            ret
038B           1425   L016004?:
038B EB        1426            mov     a,r3
038C 529C      1427            anl     _P3MDOUT,a
038E           1428   ;        main.c:340: }   
038E           1429   L016006?:
038E 22        1430            ret
038F           1431   ;------------------------------------------------------------
038F           1432   ;Allocation info for local variables in function 'InitADC'
038F           1433   ;------------------------------------------------------------
038F           1434   ;------------------------------------------------------------
038F           1435   ;        main.c:343: void InitADC (void)
038F           1436   ;        -----------------------------------------
038F           1437   ;         function InitADC
038F           1438   ;        -----------------------------------------
038F           1439   _InitADC:
038F           1440   ;        main.c:345: SFRPAGE = 0x00;
038F 75A700    1441            mov     _SFRPAGE,#0x00
0392           1442   ;        main.c:346: ADEN=0; // Disable ADC
0392 C2EF      1443            clr     _ADEN
0394           1444   ;        main.c:351: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1445            mov     _ADC0CN1,#0x80
0397           1446   ;        main.c:355: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1447            mov     _ADC0CF0,#0x20
039A           1448   ;        main.c:359: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1449            mov     _ADC0CF1,#0x1E
039D           1450   ;        main.c:368: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1451            mov     _ADC0CN0,#0x00
03A0           1452   ;        main.c:373: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1453            mov     _ADC0CF2,#0x3F
03A3           1454   ;        main.c:377: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1455            mov     _ADC0CN2,#0x00
03A6           1456   ;        main.c:379: ADEN=1; // Enable ADC
03A6 D2EF      1457            setb    _ADEN
03A8 22        1458            ret
03A9           1459   ;------------------------------------------------------------
03A9           1460   ;Allocation info for local variables in function 'InitPinADC'
03A9           1461   ;------------------------------------------------------------
03A9           1462   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1463   ;portno                    Allocated to registers r2 
03A9           1464   ;mask                      Allocated to registers r3 
03A9           1465   ;------------------------------------------------------------
03A9           1466   ;        main.c:382: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1467   ;        -----------------------------------------
03A9           1468   ;         function InitPinADC
03A9           1469   ;        -----------------------------------------
03A9           1470   _InitPinADC:
03A9 AA82      1471            mov     r2,dpl
03AB           1472   ;        main.c:386: mask=1<<pin_num;
03AB 8588F0    1473            mov     b,_InitPinADC_PARM_2
03AE 05F0      1474            inc     b
03B0 7401      1475            mov     a,#0x01
03B2 8000      1476            sjmp    L018013?
03B4           1477   L018011?:
03B4 25E0      1478            add     a,acc
03B6           1479   L018013?:
03B6 D5F0E8    1480            djnz    b,L018011?
03B9 FB        1481            mov     r3,a
03BA           1482   ;        main.c:388: SFRPAGE = 0x20;
03BA 75A720    1483            mov     _SFRPAGE,#0x20
03BD           1484   ;        main.c:389: switch (portno)
03BD BA0028    1485            cjne    r2,#0x00,L018014?
03C0 8000      1486            sjmp    L018001?
03C2           1487   L018014?:
03C2 BA01A8    1488            cjne    r2,#0x01,L018015?
03C5 8000      1489            sjmp    L018002?
03C7           1490   L018015?:
03C7           1491   ;        main.c:391: case 0:
03C7 BA0228    1492            cjne    r2,#0x02,L018005?
03CA 8000      1493            sjmp    L018003?
03CC           1494   L018001?:
03CC           1495   ;        main.c:392: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1496            mov     a,r3
03CD F4        1497            cpl     a
03CE FA        1498            mov     r2,a
03CF 52F1      1499            anl     _P0MDIN,a
03D1           1500   ;        main.c:393: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1501            mov     a,r3
03D2 42D4      1502            orl     _P0SKIP,a
03D4           1503   ;        main.c:394: break;
03D4           1504   ;        main.c:395: case 1:
03D4 8000      1505            sjmp    L018005?
03D6           1506   L018002?:
03D6           1507   ;        main.c:396: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1508            mov     a,r3
03D7 F4        1509            cpl     a
03D8 FA        1510            mov     r2,a
03D9 52F2      1511            anl     _P1MDIN,a
03DB           1512   ;        main.c:397: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1513            mov     a,r3
03DC 42D5      1514            orl     _P1SKIP,a
03DE           1515   ;        main.c:398: break;
03DE           1516   ;        main.c:399: case 2:
03DE 8000      1517            sjmp    L018005?
03E0           1518   L018003?:
03E0           1519   ;        main.c:400: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1520            mov     a,r3
03E1 F4        1521            cpl     a
03E2 FA        1522            mov     r2,a
03E3 52F3      1523            anl     _P2MDIN,a
03E5           1524   ;        main.c:401: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1525            mov     a,r3
03E6 42CC      1526            orl     _P2SKIP,a
03E8           1527   ;        main.c:405: }
03E8           1528   L018005?:
03E8           1529   ;        main.c:406: SFRPAGE = 0x00;
03E8 75A700    1530            mov     _SFRPAGE,#0x00
03EB 22        1531            ret
03EC           1532   ;------------------------------------------------------------
03EC           1533   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1534   ;------------------------------------------------------------
03EC           1535   ;pin                       Allocated to registers 
03EC           1536   ;------------------------------------------------------------
03EC           1537   ;        main.c:409: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1538   ;        -----------------------------------------
03EC           1539   ;         function ADC_at_Pin
03EC           1540   ;        -----------------------------------------
03EC           1541   _ADC_at_Pin:
03EC 8582BB    1542            mov     _ADC0MX,dpl
03EF           1543   ;        main.c:412: ADINT = 0;
03EF C2ED      1544            clr     _ADINT
03F1           1545   ;        main.c:413: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1546            setb    _ADBUSY
03F3           1547   ;        main.c:414: while (!ADINT); // Wait for conversion to complete
03F3           1548   L019001?:
03F3 30EDA8    1549            jnb     _ADINT,L019001?
03F6           1550   ;        main.c:415: return (ADC0);
03F6 85BD82    1551            mov     dpl,_ADC0
03F9 85BE83    1552            mov     dph,(_ADC0 >> 8)
03FC 22        1553            ret
03FD           1554   ;------------------------------------------------------------
03FD           1555   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1556   ;------------------------------------------------------------
03FD           1557   ;------------------------------------------------------------
03FD           1558   ;        main.c:418: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1559   ;        -----------------------------------------
03FD           1560   ;         function Timer5_ISR
03FD           1561   ;        -----------------------------------------
03FD           1562   _Timer5_ISR:
03FD C0E0      1563            push    acc
03FF C002      1564            push    ar2
0401 C003      1565            push    ar3
0403 C0D0      1566            push    psw
0405 75D000    1567            mov     psw,#0x00
0408           1568   ;        main.c:420: SFRPAGE=0x10;
0408 75A710    1569            mov     _SFRPAGE,#0x10
040B           1570   ;        main.c:421: TF5H = 0; // Clear Timer5 interrupt flag
040B C2C7      1571            clr     _TF5H
040D           1572   ;        main.c:422: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
040D 75D2C4    1573            mov     _TMR5RL,#0xC4
0410 75D3FF    1574            mov     (_TMR5RL >> 8),#0xFF
0413           1575   ;        main.c:424: pwm_counter++; 
0413 0550      1576            inc     _pwm_counter
0415 E4        1577            clr     a
0416 B55028    1578            cjne    a,_pwm_counter,L020031?
0419 0551      1579            inc     (_pwm_counter + 1)
041B           1580   L020031?:
041B           1581   ;        main.c:425: if (pwm_counter == 100){
041B 7464      1582            mov     a,#0x64
041D B55068    1583            cjne    a,_pwm_counter,L020032?
0420 E4        1584            clr     a
0421 B55168    1585            cjne    a,(_pwm_counter + 1),L020032?
0424 8000      1586            sjmp    L020033?
0426           1587   L020032?:
0426 8000      1588            sjmp    L020002?
0428           1589   L020033?:
0428           1590   ;        main.c:426: pwm_counter = 0; 
0428 E4        1591            clr     a
0429 F550      1592            mov     _pwm_counter,a
042B F551      1593            mov     (_pwm_counter + 1),a
042D           1594   L020002?:
042D           1595   ;        main.c:429: if (pwm_right > pwm_counter){
042D AA90      1596            mov     r2,_pwm_right
042F 7B00      1597            mov     r3,#0x00
0431 C3        1598            clr     c
0432 E550      1599            mov     a,_pwm_counter
0434 9A        1600            subb    a,r2
0435 E551      1601            mov     a,(_pwm_counter + 1)
0437 9B        1602            subb    a,r3
0438 5000      1603            jnc     L020007?
043A           1604   ;        main.c:430: if(L_motor_dir){
043A E550      1605            mov     a,_L_motor_dir
043C 6000      1606            jz      L020004?
043E           1607   ;        main.c:431: L_bridge_1 = 1; 
043E D2A1      1608            setb    _P2_1
0440           1609   ;        main.c:432: L_bridge_2 = 0; 
0440 C2A2      1610            clr     _P2_2
0442 8000      1611            sjmp    L020008?
0444           1612   L020004?:
0444           1613   ;        main.c:435: L_bridge_1 = 0; 
0444 C2A1      1614            clr     _P2_1
0446           1615   ;        main.c:436: L_bridge_2 = 1; 
0446 D2A2      1616            setb    _P2_2
0448 8000      1617            sjmp    L020008?
044A           1618   L020007?:
044A           1619   ;        main.c:440: L_bridge_1 = 0; 
044A C2A1      1620            clr     _P2_1
044C           1621   ;        main.c:441: L_bridge_2 = 0; 
044C C2A2      1622            clr     _P2_2
044E           1623   L020008?:
044E           1624   ;        main.c:443: if (pwm_left > pwm_counter){
044E AAD0      1625            mov     r2,_pwm_left
0450 7B00      1626            mov     r3,#0x00
0452 C3        1627            clr     c
0453 E550      1628            mov     a,_pwm_counter
0455 9A        1629            subb    a,r2
0456 E551      1630            mov     a,(_pwm_counter + 1)
0458 9B        1631            subb    a,r3
0459 5000      1632            jnc     L020013?
045B           1633   ;        main.c:444: if (R_motor_dir){
045B E510      1634            mov     a,_R_motor_dir
045D 6000      1635            jz      L020010?
045F           1636   ;        main.c:445: R_bridge_1 = 1; 
045F D2A4      1637            setb    _P2_4
0461           1638   ;        main.c:446: R_bridge_2 = 0;
0461 C2A3      1639            clr     _P2_3
0463 8000      1640            sjmp    L020014?
0465           1641   L020010?:
0465           1642   ;        main.c:449: R_bridge_1 = 0; 
0465 C2A4      1643            clr     _P2_4
0467           1644   ;        main.c:450: R_bridge_2 = 1;
0467 D2A3      1645            setb    _P2_3
0469 8000      1646            sjmp    L020014?
046B           1647   L020013?:
046B           1648   ;        main.c:454: R_bridge_1 = 0; 
046B C2A4      1649            clr     _P2_4
046D           1650   ;        main.c:455: R_bridge_2 = 0; 
046D C2A3      1651            clr     _P2_3
046F           1652   L020014?:
046F           1653   ;        main.c:458: servo_counter++;
046F 0510      1654            inc     _servo_counter
0471 E4        1655            clr     a
0472 B510A8    1656            cjne    a,_servo_counter,L020038?
0475 0511      1657            inc     (_servo_counter + 1)
0477           1658   L020038?:
0477           1659   ;        main.c:459: if(servo_counter==2000)
0477 74D0      1660            mov     a,#0xD0
0479 B510E8    1661            cjne    a,_servo_counter,L020016?
047C 7407      1662            mov     a,#0x07
047E B511E8    1663            cjne    a,(_servo_counter + 1),L020016?
0481           1664   ;        main.c:461: servo_counter=0;
0481 E4        1665            clr     a
0482 F510      1666            mov     _servo_counter,a
0484 F511      1667            mov     (_servo_counter + 1),a
0486           1668   ;        main.c:462: Servo_arm=1;
0486 D296      1669            setb    _P1_6
0488           1670   ;        main.c:463: Servo_base=1;
0488 D297      1671            setb    _P1_7
048A           1672   L020016?:
048A           1673   ;        main.c:465: if(servo_arm==servo_counter)
048A AA90      1674            mov     r2,_servo_arm
048C 7B00      1675            mov     r3,#0x00
048E EA        1676            mov     a,r2
048F B51028    1677            cjne    a,_servo_counter,L020018?
0492 EB        1678            mov     a,r3
0493 B51128    1679            cjne    a,(_servo_counter + 1),L020018?
0496           1680   ;        main.c:467: Servo_arm=0;
0496 C296      1681            clr     _P1_6
0498           1682   L020018?:
0498           1683   ;        main.c:469: if(servo_base==servo_counter)
0498 AAD0      1684            mov     r2,_servo_base
049A 7B00      1685            mov     r3,#0x00
049C EA        1686            mov     a,r2
049D B51068    1687            cjne    a,_servo_counter,L020021?
04A0 EB        1688            mov     a,r3
04A1 B51168    1689            cjne    a,(_servo_counter + 1),L020021?
04A4           1690   ;        main.c:471: Servo_base=0;
04A4 C297      1691            clr     _P1_7
04A6           1692   L020021?:
04A6 D0D0      1693            pop     psw
04A8 D003      1694            pop     ar3
04AA D002      1695            pop     ar2
04AC D0E0      1696            pop     acc
04AE 32        1697            reti
04AF           1698   ;        eliminated unneeded push/pop dpl
04AF           1699   ;        eliminated unneeded push/pop dph
04AF           1700   ;        eliminated unneeded push/pop b
04AF           1701   ;------------------------------------------------------------
04AF           1702   ;Allocation info for local variables in function 'servo_pick'
04AF           1703   ;------------------------------------------------------------
04AF           1704   ;i                         Allocated to registers r2 r3 
04AF           1705   ;------------------------------------------------------------
04AF           1706   ;        main.c:476: void servo_pick(){
04AF           1707   ;        -----------------------------------------
04AF           1708   ;         function servo_pick
04AF           1709   ;        -----------------------------------------
04AF           1710   _servo_pick:
04AF           1711   ;        main.c:478: servo_arm = 1;
04AF 759001    1712            mov     _servo_arm,#0x01
04B2           1713   ;        main.c:480: servo_base = 250;
04B2 75D0FA    1714            mov     _servo_base,#0xFA
04B5           1715   ;        main.c:481: waitms(200);
04B5 9000C8    1716            mov     dptr,#0x00C8
04B8 120000    1717            lcall   _waitms
04BB           1718   ;        main.c:482: servo_arm = 250;
04BB 7590FA    1719            mov     _servo_arm,#0xFA
04BE           1720   ;        main.c:483: Magnet = 1;
04BE D295      1721            setb    _P1_5
04C0           1722   ;        main.c:484: waitms(500);
04C0 9001F4    1723            mov     dptr,#0x01F4
04C3 120000    1724            lcall   _waitms
04C6           1725   ;        main.c:485: for(i = 0; i<69; i++){
04C6 7A00      1726            mov     r2,#0x00
04C8 7B00      1727            mov     r3,#0x00
04CA           1728   L021001?:
04CA C3        1729            clr     c
04CB EA        1730            mov     a,r2
04CC 9445      1731            subb    a,#0x45
04CE EB        1732            mov     a,r3
04CF 6480      1733            xrl     a,#0x80
04D1 9480      1734            subb    a,#0x80
04D3 5000      1735            jnc     L021004?
04D5           1736   ;        main.c:486: waitms(10);
04D5 90000A    1737            mov     dptr,#0x000A
04D8 C002      1738            push    ar2
04DA C003      1739            push    ar3
04DC 120000    1740            lcall   _waitms
04DF D003      1741            pop     ar3
04E1 D002      1742            pop     ar2
04E3           1743   ;        main.c:487: servo_base--;
04E3 15D0      1744            dec     _servo_base
04E5           1745   ;        main.c:485: for(i = 0; i<69; i++){
04E5 0A        1746            inc     r2
04E6 BA00A8    1747            cjne    r2,#0x00,L021001?
04E9 0B        1748            inc     r3
04EA 8000      1749            sjmp    L021001?
04EC           1750   L021004?:
04EC           1751   ;        main.c:489: waitms(200);
04EC 9000C8    1752            mov     dptr,#0x00C8
04EF 120000    1753            lcall   _waitms
04F2           1754   ;        main.c:490: for(i = 0; i<149; i++){
04F2 7A00      1755            mov     r2,#0x00
04F4 7B00      1756            mov     r3,#0x00
04F6           1757   L021005?:
04F6 C3        1758            clr     c
04F7 EA        1759            mov     a,r2
04F8 9495      1760            subb    a,#0x95
04FA EB        1761            mov     a,r3
04FB 6480      1762            xrl     a,#0x80
04FD 9480      1763            subb    a,#0x80
04FF 5000      1764            jnc     L021008?
0501           1765   ;        main.c:491: waitms(10);
0501 90000A    1766            mov     dptr,#0x000A
0504 C002      1767            push    ar2
0506 C003      1768            push    ar3
0508 120000    1769            lcall   _waitms
050B D003      1770            pop     ar3
050D D002      1771            pop     ar2
050F           1772   ;        main.c:492: servo_arm--;
050F 1590      1773            dec     _servo_arm
0511           1774   ;        main.c:490: for(i = 0; i<149; i++){
0511 0A        1775            inc     r2
0512 BA0028    1776            cjne    r2,#0x00,L021005?
0515 0B        1777            inc     r3
0516 8000      1778            sjmp    L021005?
0518           1779   L021008?:
0518           1780   ;        main.c:494: waitms(500);
0518 9001F4    1781            mov     dptr,#0x01F4
051B 120000    1782            lcall   _waitms
051E           1783   ;        main.c:495: for(i = 0; i<60; i++){
051E 7A00      1784            mov     r2,#0x00
0520 7B00      1785            mov     r3,#0x00
0522           1786   L021009?:
0522 C3        1787            clr     c
0523 EA        1788            mov     a,r2
0524 943C      1789            subb    a,#0x3C
0526 EB        1790            mov     a,r3
0527 6480      1791            xrl     a,#0x80
0529 9480      1792            subb    a,#0x80
052B 5000      1793            jnc     L021012?
052D           1794   ;        main.c:496: waitms(10);
052D 90000A    1795            mov     dptr,#0x000A
0530 C002      1796            push    ar2
0532 C003      1797            push    ar3
0534 120000    1798            lcall   _waitms
0537 D003      1799            pop     ar3
0539 D002      1800            pop     ar2
053B           1801   ;        main.c:497: servo_base--;
053B 15D0      1802            dec     _servo_base
053D           1803   ;        main.c:495: for(i = 0; i<60; i++){
053D 0A        1804            inc     r2
053E BA00A8    1805            cjne    r2,#0x00,L021009?
0541 0B        1806            inc     r3
0542 8000      1807            sjmp    L021009?
0544           1808   L021012?:
0544           1809   ;        main.c:499: Magnet = 0;
0544 C295      1810            clr     _P1_5
0546           1811   ;        main.c:500: waitms(200);
0546 9000C8    1812            mov     dptr,#0x00C8
0549 120000    1813            lcall   _waitms
054C           1814   ;        main.c:501: for(i = 0; i<100; i++){
054C 7A00      1815            mov     r2,#0x00
054E 7B00      1816            mov     r3,#0x00
0550           1817   L021013?:
0550 C3        1818            clr     c
0551 EA        1819            mov     a,r2
0552 9464      1820            subb    a,#0x64
0554 EB        1821            mov     a,r3
0555 6480      1822            xrl     a,#0x80
0557 9480      1823            subb    a,#0x80
0559 5000      1824            jnc     L021016?
055B           1825   ;        main.c:502: waitms(10);
055B 90000A    1826            mov     dptr,#0x000A
055E C002      1827            push    ar2
0560 C003      1828            push    ar3
0562 120000    1829            lcall   _waitms
0565 D003      1830            pop     ar3
0567 D002      1831            pop     ar2
0569           1832   ;        main.c:503: servo_arm--;
0569 1590      1833            dec     _servo_arm
056B           1834   ;        main.c:501: for(i = 0; i<100; i++){
056B 0A        1835            inc     r2
056C BA0028    1836            cjne    r2,#0x00,L021013?
056F 0B        1837            inc     r3
0570 8000      1838            sjmp    L021013?
0572           1839   L021016?:
0572           1840   ;        main.c:505: waitms(200);
0572 9000C8    1841            mov     dptr,#0x00C8
0575 120000    1842            lcall   _waitms
0578           1843   ;        main.c:506: for(i = 0; i<120; i++){
0578 7A00      1844            mov     r2,#0x00
057A 7B00      1845            mov     r3,#0x00
057C           1846   L021017?:
057C C3        1847            clr     c
057D EA        1848            mov     a,r2
057E 9478      1849            subb    a,#0x78
0580 EB        1850            mov     a,r3
0581 6480      1851            xrl     a,#0x80
0583 9480      1852            subb    a,#0x80
0585 5000      1853            jnc     L021020?
0587           1854   ;        main.c:507: waitms(10);
0587 90000A    1855            mov     dptr,#0x000A
058A C002      1856            push    ar2
058C C003      1857            push    ar3
058E 120000    1858            lcall   _waitms
0591 D003      1859            pop     ar3
0593 D002      1860            pop     ar2
0595           1861   ;        main.c:508: servo_base--;
0595 15D0      1862            dec     _servo_base
0597           1863   ;        main.c:506: for(i = 0; i<120; i++){
0597 0A        1864            inc     r2
0598 BA00A8    1865            cjne    r2,#0x00,L021017?
059B 0B        1866            inc     r3
059C 8000      1867            sjmp    L021017?
059E           1868   L021020?:
059E           1869   ;        main.c:510: return;
059E 22        1870            ret
059F           1871   ;------------------------------------------------------------
059F           1872   ;Allocation info for local variables in function 'main'
059F           1873   ;------------------------------------------------------------
059F           1874   ;cnt                       Allocated to registers 
059F           1875   ;c                         Allocated to registers r4 
059F           1876   ;vx_error                  Allocated with name '_main_vx_error_1_131'
059F           1877   ;vy_error                  Allocated with name '_main_vy_error_1_131'
059F           1878   ;vx_err                    Allocated with name '_main_vx_err_1_131'
059F           1879   ;vy_err                    Allocated with name '_main_vy_err_1_131'
059F           1880   ;vx                        Allocated with name '_main_vx_1_131'
059F           1881   ;vy                        Allocated with name '_main_vy_1_131'
059F           1882   ;threshold                 Allocated to registers 
059F           1883   ;motor_pwm                 Allocated to registers 
059F           1884   ;------------------------------------------------------------
059F           1885   ;        main.c:513: void main (void)
059F           1886   ;        -----------------------------------------
059F           1887   ;         function main
059F           1888   ;        -----------------------------------------
059F           1889   _main:
059F           1890   ;        main.c:518: int vx = 0, vy = 0; 
059F E4        1891            clr     a
05A0 F590      1892            mov     _main_vx_1_131,a
05A2 F591      1893            mov     (_main_vx_1_131 + 1),a
05A4 F5D0      1894            mov     _main_vy_1_131,a
05A6 F5D1      1895            mov     (_main_vy_1_131 + 1),a
05A8           1896   ;        main.c:522: Set_Pin_Output(0x24);
05A8 758224    1897            mov     dpl,#0x24
05AB 120000    1898            lcall   _Set_Pin_Output
05AE           1899   ;        main.c:523: Set_Pin_Output(0x23);
05AE 758223    1900            mov     dpl,#0x23
05B1 120000    1901            lcall   _Set_Pin_Output
05B4           1902   ;        main.c:524: Set_Pin_Output(0x22);
05B4 758222    1903            mov     dpl,#0x22
05B7 120000    1904            lcall   _Set_Pin_Output
05BA           1905   ;        main.c:525: Set_Pin_Output(0x21);
05BA 758221    1906            mov     dpl,#0x21
05BD 120000    1907            lcall   _Set_Pin_Output
05C0           1908   ;        main.c:526: Set_Pin_Output(0x17);
05C0 758217    1909            mov     dpl,#0x17
05C3 120000    1910            lcall   _Set_Pin_Output
05C6           1911   ;        main.c:527: Set_Pin_Output(0x16);
05C6 758216    1912            mov     dpl,#0x16
05C9 120000    1913            lcall   _Set_Pin_Output
05CC           1914   ;        main.c:528: Set_Pin_Output(0x15);
05CC 758215    1915            mov     dpl,#0x15
05CF 120000    1916            lcall   _Set_Pin_Output
05D2           1917   ;        main.c:530: Servo_arm=0;
05D2 C296      1918            clr     _P1_6
05D4           1919   ;        main.c:531: Servo_base=0;
05D4 C297      1920            clr     _P1_7
05D6           1921   ;        main.c:532: Magnet = 0;
05D6 C295      1922            clr     _P1_5
05D8           1923   ;        main.c:534: waitms(500);
05D8 9001F4    1924            mov     dptr,#0x01F4
05DB 120000    1925            lcall   _waitms
05DE           1926   ;        main.c:535: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
05DE 7428      1927            mov     a,#__str_3
05E0 C0E0      1928            push    acc
05E2 74CD      1929            mov     a,#(__str_3 >> 8)
05E4 C0E0      1930            push    acc
05E6 7480      1931            mov     a,#0x80
05E8 C0E0      1932            push    acc
05EA 120000    1933            lcall   _printf
05ED 1581      1934            dec     sp
05EF 1581      1935            dec     sp
05F1 1581      1936            dec     sp
05F3           1937   ;        main.c:536: UART1_Init(9600);
05F3 902580    1938            mov     dptr,#0x2580
05F6 E4        1939            clr     a
05F7 F5F0      1940            mov     b,a
05F9 120000    1941            lcall   _UART1_Init
05FC           1942   ;        main.c:538: ReceptionOff();
05FC 120000    1943            lcall   _ReceptionOff
05FF           1944   ;        main.c:539: servo_pick();
05FF 120000    1945            lcall   _servo_pick
0602           1946   ;        main.c:542: SendATCommand("AT+VER\r\n");
0602 90CD68    1947            mov     dptr,#__str_4
0605 75F080    1948            mov     b,#0x80
0608 120000    1949            lcall   _SendATCommand
060B           1950   ;        main.c:543: SendATCommand("AT+BAUD\r\n");
060B 90CDA8    1951            mov     dptr,#__str_5
060E 75F080    1952            mov     b,#0x80
0611 120000    1953            lcall   _SendATCommand
0614           1954   ;        main.c:544: SendATCommand("AT+RFID\r\n");
0614 90CDE8    1955            mov     dptr,#__str_6
0617 75F080    1956            mov     b,#0x80
061A 120000    1957            lcall   _SendATCommand
061D           1958   ;        main.c:545: SendATCommand("AT+DVID\r\n");
061D 90CE28    1959            mov     dptr,#__str_7
0620 75F080    1960            mov     b,#0x80
0623 120000    1961            lcall   _SendATCommand
0626           1962   ;        main.c:546: SendATCommand("AT+RFC\r\n");
0626 90CE68    1963            mov     dptr,#__str_8
0629 75F080    1964            mov     b,#0x80
062C 120000    1965            lcall   _SendATCommand
062F           1966   ;        main.c:547: SendATCommand("AT+POWE\r\n");
062F 90CEA8    1967            mov     dptr,#__str_9
0632 75F080    1968            mov     b,#0x80
0635 120000    1969            lcall   _SendATCommand
0638           1970   ;        main.c:548: SendATCommand("AT+CLSS\r\n");
0638 90CEE8    1971            mov     dptr,#__str_10
063B 75F080    1972            mov     b,#0x80
063E 120000    1973            lcall   _SendATCommand
0641           1974   ;        main.c:549: SendATCommand("AT+DVIDEFEF\r\n");  
0641 90CF28    1975            mov     dptr,#__str_11
0644 75F080    1976            mov     b,#0x80
0647 120000    1977            lcall   _SendATCommand
064A           1978   ;        main.c:552: L_bridge_1 = 0; 
064A C2A1      1979            clr     _P2_1
064C           1980   ;        main.c:553: L_bridge_2 = 0; 
064C C2A2      1981            clr     _P2_2
064E           1982   ;        main.c:554: R_bridge_1 = 0; 
064E C2A4      1983            clr     _P2_4
0650           1984   ;        main.c:555: R_bridge_2 = 0; 
0650 C2A3      1985            clr     _P2_3
0652           1986   ;        main.c:558: while(1)
0652 7A00      1987            mov     r2,#0x00
0654 7B00      1988            mov     r3,#0x00
0656           1989   L022049?:
0656           1990   ;        main.c:562: if(RXU1()) // Something has arrived
0656 C002      1991            push    ar2
0658 C003      1992            push    ar3
065A 120000    1993            lcall   _RXU1
065D E4        1994            clr     a
065E 33        1995            rlc     a
065F D003      1996            pop     ar3
0661 D002      1997            pop     ar2
0663 6000      1998            jz      L022049?
0665           1999   ;        main.c:564: c=getchar1();
0665 C002      2000            push    ar2
0667 C003      2001            push    ar3
0669 120000    2002            lcall   _getchar1
066C AC82      2003            mov     r4,dpl
066E D003      2004            pop     ar3
0670 D002      2005            pop     ar2
0672           2006   ;        main.c:566: if(c=='!') // Master is sending message
0672 BC21A8    2007            cjne    r4,#0x21,L022075?
0675 8000      2008            sjmp    L022076?
0677           2009   L022075?:
0677 020000    2010            ljmp    L022044?
067A           2011   L022076?:
067A           2012   ;        main.c:568: getstr1(buff, sizeof(buff)-1);
067A 755013    2013            mov     _getstr1_PARM_2,#0x13
067D 904410    2014            mov     dptr,#_buff
0680 75F040    2015            mov     b,#0x40
0683 C002      2016            push    ar2
0685 C003      2017            push    ar3
0687 120000    2018            lcall   _getstr1
068A           2019   ;        main.c:569: if(strlen(buff)==7)
068A 904410    2020            mov     dptr,#_buff
068D 75F040    2021            mov     b,#0x40
0690 120000    2022            lcall   _strlen
0693 AD82      2023            mov     r5,dpl
0695 AE83      2024            mov     r6,dph
0697 D003      2025            pop     ar3
0699 D002      2026            pop     ar2
069B BD07A8    2027            cjne    r5,#0x07,L022077?
069E BE00A8    2028            cjne    r6,#0x00,L022077?
06A1 8000      2029            sjmp    L022078?
06A3           2030   L022077?:
06A3 020000    2031            ljmp    L022039?
06A6           2032   L022078?:
06A6           2033   ;        main.c:573: sscanf(buff, "%03d,%03d", &vx, &vy);
06A6 C002      2034            push    ar2
06A8 C003      2035            push    ar3
06AA 74D0      2036            mov     a,#_main_vy_1_131
06AC C0E0      2037            push    acc
06AE 74B5      2038            mov     a,#(_main_vy_1_131 >> 8)
06B0 C0E0      2039            push    acc
06B2 7440      2040            mov     a,#0x40
06B4 C0E0      2041            push    acc
06B6 7490      2042            mov     a,#_main_vx_1_131
06B8 C0E0      2043            push    acc
06BA 74B5      2044            mov     a,#(_main_vx_1_131 >> 8)
06BC C0E0      2045            push    acc
06BE 7440      2046            mov     a,#0x40
06C0 C0E0      2047            push    acc
06C2 7468      2048            mov     a,#__str_12
06C4 C0E0      2049            push    acc
06C6 74D1      2050            mov     a,#(__str_12 >> 8)
06C8 C0E0      2051            push    acc
06CA 7480      2052            mov     a,#0x80
06CC C0E0      2053            push    acc
06CE 7410      2054            mov     a,#_buff
06D0 C0E0      2055            push    acc
06D2 7444      2056            mov     a,#(_buff >> 8)
06D4 C0E0      2057            push    acc
06D6 7440      2058            mov     a,#0x40
06D8 C0E0      2059            push    acc
06DA 120000    2060            lcall   _sscanf
06DD E581      2061            mov     a,sp
06DF 24F4      2062            add     a,#0xf4
06E1 F581      2063            mov     sp,a
06E3           2064   ;        main.c:575: printf("Joystick Received: Vx = %03d, Vy = %03d\r\n", vx, vy);
06E3 C0D0      2065            push    _main_vy_1_131
06E5 C0D1      2066            push    (_main_vy_1_131 + 1)
06E7 C090      2067            push    _main_vx_1_131
06E9 C091      2068            push    (_main_vx_1_131 + 1)
06EB 74E8      2069            mov     a,#__str_13
06ED C0E0      2070            push    acc
06EF 74D1      2071            mov     a,#(__str_13 >> 8)
06F1 C0E0      2072            push    acc
06F3 7480      2073            mov     a,#0x80
06F5 C0E0      2074            push    acc
06F7 120000    2075            lcall   _printf
06FA E581      2076            mov     a,sp
06FC 24F9      2077            add     a,#0xf9
06FE F581      2078            mov     sp,a
0700           2079   ;        main.c:578: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0700 E590      2080            mov     a,_main_vx_1_131
0702 C3        2081            clr     c
0703 9550      2082            subb    a,_vx_thres
0705 F582      2083            mov     dpl,a
0707 E591      2084            mov     a,(_main_vx_1_131 + 1)
0709 9551      2085            subb    a,(_vx_thres + 1)
070B F583      2086            mov     dph,a
070D 120000    2087            lcall   _abs
0710 858200    2088            mov     __mulint_PARM_2,dpl
0713 858301    2089            mov     (__mulint_PARM_2 + 1),dph
0716 900064    2090            mov     dptr,#0x0064
0719 120000    2091            lcall   __mulint
071C 855000    2092            mov     __divsint_PARM_2,_vx_thres
071F 855101    2093            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
0722 120000    2094            lcall   __divsint
0725 858260    2095            mov     _main_vx_error_1_131,dpl
0728 858361    2096            mov     (_main_vx_error_1_131 + 1),dph
072B           2097   ;        main.c:579: vy_error = abs(vy-vy_thres)*100/vy_thres; 
072B E5D0      2098            mov     a,_main_vy_1_131
072D C3        2099            clr     c
072E 9510      2100            subb    a,_vy_thres
0730 F582      2101            mov     dpl,a
0732 E5D1      2102            mov     a,(_main_vy_1_131 + 1)
0734 9511      2103            subb    a,(_vy_thres + 1)
0736 F583      2104            mov     dph,a
0738 120000    2105            lcall   _abs
073B 858200    2106            mov     __mulint_PARM_2,dpl
073E 858301    2107            mov     (__mulint_PARM_2 + 1),dph
0741 900064    2108            mov     dptr,#0x0064
0744 120000    2109            lcall   __mulint
0747 851000    2110            mov     __divsint_PARM_2,_vy_thres
074A 851101    2111            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
074D 120000    2112            lcall   __divsint
0750 8582B0    2113            mov     _main_vy_error_1_131,dpl
0753 8583B1    2114            mov     (_main_vy_error_1_131 + 1),dph
0756 D003      2115            pop     ar3
0758 D002      2116            pop     ar2
075A           2117   ;        main.c:580: vx_err = vx-vx_thres; 
075A E590      2118            mov     a,_main_vx_1_131
075C C3        2119            clr     c
075D 9550      2120            subb    a,_vx_thres
075F F500      2121            mov     _main_vx_err_1_131,a
0761 E591      2122            mov     a,(_main_vx_1_131 + 1)
0763 9551      2123            subb    a,(_vx_thres + 1)
0765 F501      2124            mov     (_main_vx_err_1_131 + 1),a
0767           2125   ;        main.c:581: vy_err = vy-vy_thres; 
0767 E5D0      2126            mov     a,_main_vy_1_131
0769 C3        2127            clr     c
076A 9510      2128            subb    a,_vy_thres
076C F550      2129            mov     _main_vy_err_1_131,a
076E E5D1      2130            mov     a,(_main_vy_1_131 + 1)
0770 9511      2131            subb    a,(_vy_thres + 1)
0772 F551      2132            mov     (_main_vy_err_1_131 + 1),a
0774           2133   ;        main.c:582: pwm_left = 0; 
0774 75D000    2134            mov     _pwm_left,#0x00
0777           2135   ;        main.c:583: pwm_right = 0; 
0777 759000    2136            mov     _pwm_right,#0x00
077A           2137   ;        main.c:585: if ((vy_error>5) && (vx_error<5)){
077A C3        2138            clr     c
077B 7405      2139            mov     a,#0x05
077D 95B0      2140            subb    a,_main_vy_error_1_131
077F E4        2141            clr     a
0780 6480      2142            xrl     a,#0x80
0782 85B1F0    2143            mov     b,(_main_vy_error_1_131 + 1)
0785 63F080    2144            xrl     b,#0x80
0788 95F0      2145            subb    a,b
078A E4        2146            clr     a
078B 33        2147            rlc     a
078C FF        2148            mov     r7,a
078D 6000      2149            jz      L022005?
078F C3        2150            clr     c
0790 E560      2151            mov     a,_main_vx_error_1_131
0792 9405      2152            subb    a,#0x05
0794 E561      2153            mov     a,(_main_vx_error_1_131 + 1)
0796 6480      2154            xrl     a,#0x80
0798 9480      2155            subb    a,#0x80
079A 5000      2156            jnc     L022005?
079C           2157   ;        main.c:586: pwm_left = vy_error; 
079C ADB0      2158            mov     r5,_main_vy_error_1_131
079E 8DD0      2159            mov     _pwm_left,r5
07A0           2160   ;        main.c:587: pwm_right = vy_error; 
07A0 8D90      2161            mov     _pwm_right,r5
07A2           2162   ;        main.c:588: if (vy_err > 0){ //move forward
07A2 C3        2163            clr     c
07A3 E4        2164            clr     a
07A4 9550      2165            subb    a,_main_vy_err_1_131
07A6 E4        2166            clr     a
07A7 6480      2167            xrl     a,#0x80
07A9 8551F0    2168            mov     b,(_main_vy_err_1_131 + 1)
07AC 63F080    2169            xrl     b,#0x80
07AF 95F0      2170            subb    a,b
07B1 5000      2171            jnc     L022002?
07B3           2172   ;        main.c:589: L_motor_dir = 0; 
07B3 755000    2173            mov     _L_motor_dir,#0x00
07B6           2174   ;        main.c:590: R_motor_dir = 0; 
07B6 751000    2175            mov     _R_motor_dir,#0x00
07B9 8000      2176            sjmp    L022005?
07BB           2177   L022002?:
07BB           2178   ;        main.c:593: L_motor_dir = 1; 
07BB 755001    2179            mov     _L_motor_dir,#0x01
07BE           2180   ;        main.c:594: R_motor_dir = 1; 
07BE 751001    2181            mov     _R_motor_dir,#0x01
07C1           2182   L022005?:
07C1           2183   ;        main.c:597: if ((vx_error>5)&&(vy_error<5)){
07C1 C3        2184            clr     c
07C2 7405      2185            mov     a,#0x05
07C4 9560      2186            subb    a,_main_vx_error_1_131
07C6 E4        2187            clr     a
07C7 6480      2188            xrl     a,#0x80
07C9 8561F0    2189            mov     b,(_main_vx_error_1_131 + 1)
07CC 63F080    2190            xrl     b,#0x80
07CF 95F0      2191            subb    a,b
07D1 E4        2192            clr     a
07D2 33        2193            rlc     a
07D3 FD        2194            mov     r5,a
07D4 6000      2195            jz      L022011?
07D6 C3        2196            clr     c
07D7 E5B0      2197            mov     a,_main_vy_error_1_131
07D9 9405      2198            subb    a,#0x05
07DB E5B1      2199            mov     a,(_main_vy_error_1_131 + 1)
07DD 6480      2200            xrl     a,#0x80
07DF 9480      2201            subb    a,#0x80
07E1 5000      2202            jnc     L022011?
07E3           2203   ;        main.c:598: pwm_left = vx_error; 
07E3 AE60      2204            mov     r6,_main_vx_error_1_131
07E5 8ED0      2205            mov     _pwm_left,r6
07E7           2206   ;        main.c:599: pwm_right = vx_error; 
07E7 8E90      2207            mov     _pwm_right,r6
07E9           2208   ;        main.c:600: if (vx_err > 0){ //turn right
07E9 C3        2209            clr     c
07EA E4        2210            clr     a
07EB 9500      2211            subb    a,_main_vx_err_1_131
07ED E4        2212            clr     a
07EE 6480      2213            xrl     a,#0x80
07F0 8501F0    2214            mov     b,(_main_vx_err_1_131 + 1)
07F3 63F080    2215            xrl     b,#0x80
07F6 95F0      2216            subb    a,b
07F8 5000      2217            jnc     L022008?
07FA           2218   ;        main.c:601: L_motor_dir = 1; 
07FA 755001    2219            mov     _L_motor_dir,#0x01
07FD           2220   ;        main.c:602: R_motor_dir = 0; 
07FD 751000    2221            mov     _R_motor_dir,#0x00
0800 8000      2222            sjmp    L022011?
0802           2223   L022008?:
0802           2224   ;        main.c:605: L_motor_dir = 0; 
0802 755000    2225            mov     _L_motor_dir,#0x00
0805           2226   ;        main.c:606: R_motor_dir = 1; 
0805 751001    2227            mov     _R_motor_dir,#0x01
0808           2228   L022011?:
0808           2229   ;        main.c:609: if ((vx_error>5)&&(vy_error)>5){
0808 ED        2230            mov     a,r5
0809 7000      2231            jnz     L022085?
080B 020000    2232            ljmp    L022049?
080E           2233   L022085?:
080E EF        2234            mov     a,r7
080F 7000      2235            jnz     L022086?
0811 020000    2236            ljmp    L022049?
0814           2237   L022086?:
0814           2238   ;        main.c:611: if (vy_err>0){
0814 C3        2239            clr     c
0815 E4        2240            clr     a
0816 9550      2241            subb    a,_main_vy_err_1_131
0818 E4        2242            clr     a
0819 6480      2243            xrl     a,#0x80
081B 8551F0    2244            mov     b,(_main_vy_err_1_131 + 1)
081E 63F080    2245            xrl     b,#0x80
0821 95F0      2246            subb    a,b
0823 4000      2247            jc      L022087?
0825 020000    2248            ljmp    L022023?
0828           2249   L022087?:
0828           2250   ;        main.c:612: L_motor_dir = 0; 
0828 755000    2251            mov     _L_motor_dir,#0x00
082B           2252   ;        main.c:613: R_motor_dir = 0; 
082B 751000    2253            mov     _R_motor_dir,#0x00
082E           2254   ;        main.c:615: if (vx_err>0){
082E C3        2255            clr     c
082F E4        2256            clr     a
0830 9500      2257            subb    a,_main_vx_err_1_131
0832 E4        2258            clr     a
0833 6480      2259            xrl     a,#0x80
0835 8501F0    2260            mov     b,(_main_vx_err_1_131 + 1)
0838 63F080    2261            xrl     b,#0x80
083B 95F0      2262            subb    a,b
083D 4000      2263            jc      L022088?
083F 020000    2264            ljmp    L022020?
0842           2265   L022088?:
0842           2266   ;        main.c:616: if (vy*100<=vy_thres*100/2){
0842 C002      2267            push    ar2
0844 C003      2268            push    ar3
0846 85D000    2269            mov     __mulint_PARM_2,_main_vy_1_131
0849 85D101    2270            mov     (__mulint_PARM_2 + 1),(_main_vy_1_131 + 1)
084C 900064    2271            mov     dptr,#0x0064
084F C002      2272            push    ar2
0851 C003      2273            push    ar3
0853 120000    2274            lcall   __mulint
0856 AD82      2275            mov     r5,dpl
0858 AE83      2276            mov     r6,dph
085A D003      2277            pop     ar3
085C D002      2278            pop     ar2
085E 851000    2279            mov     __mulint_PARM_2,_vy_thres
0861 851101    2280            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0864 900064    2281            mov     dptr,#0x0064
0867 C003      2282            push    ar3
0869 C005      2283            push    ar5
086B C006      2284            push    ar6
086D 120000    2285            lcall   __mulint
0870 AF82      2286            mov     r7,dpl
0872 AA83      2287            mov     r2,dph
0874 D006      2288            pop     ar6
0876 D005      2289            pop     ar5
0878 D003      2290            pop     ar3
087A 750002    2291            mov     __divsint_PARM_2,#0x02
087D E4        2292            clr     a
087E F501      2293            mov     (__divsint_PARM_2 + 1),a
0880 8F82      2294            mov     dpl,r7
0882 8A83      2295            mov     dph,r2
0884 C005      2296            push    ar5
0886 C006      2297            push    ar6
0888 120000    2298            lcall   __divsint
088B AA82      2299            mov     r2,dpl
088D AB83      2300            mov     r3,dph
088F D006      2301            pop     ar6
0891 D005      2302            pop     ar5
0893 C3        2303            clr     c
0894 EA        2304            mov     a,r2
0895 9D        2305            subb    a,r5
0896 EB        2306            mov     a,r3
0897 6480      2307            xrl     a,#0x80
0899 8EF0      2308            mov     b,r6
089B 63F080    2309            xrl     b,#0x80
089E 95F0      2310            subb    a,b
08A0 D003      2311            pop     ar3
08A2 D002      2312            pop     ar2
08A4 4000      2313            jc      L022014?
08A6           2314   ;        main.c:617: pwm_left = vy_error; 
08A6 85B0D0    2315            mov     _pwm_left,_main_vy_error_1_131
08A9           2316   ;        main.c:618: pwm_right = vy_error*100/(vx_error+vy_error);
08A9 85B000    2317            mov     __mulint_PARM_2,_main_vy_error_1_131
08AC 85B101    2318            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_131 + 1)
08AF 900064    2319            mov     dptr,#0x0064
08B2 C002      2320            push    ar2
08B4 C003      2321            push    ar3
08B6 120000    2322            lcall   __mulint
08B9 AD82      2323            mov     r5,dpl
08BB AE83      2324            mov     r6,dph
08BD E5B0      2325            mov     a,_main_vy_error_1_131
08BF 2560      2326            add     a,_main_vx_error_1_131
08C1 F500      2327            mov     __divsint_PARM_2,a
08C3 E5B1      2328            mov     a,(_main_vy_error_1_131 + 1)
08C5 3561      2329            addc    a,(_main_vx_error_1_131 + 1)
08C7 F501      2330            mov     (__divsint_PARM_2 + 1),a
08C9 8D82      2331            mov     dpl,r5
08CB 8E83      2332            mov     dph,r6
08CD 120000    2333            lcall   __divsint
08D0 AD82      2334            mov     r5,dpl
08D2 AE83      2335            mov     r6,dph
08D4 D003      2336            pop     ar3
08D6 D002      2337            pop     ar2
08D8 8D90      2338            mov     _pwm_right,r5
08DA 020000    2339            ljmp    L022023?
08DD           2340   L022014?:
08DD           2341   ;        main.c:621: pwm_left = vx_error; 
08DD 8560D0    2342            mov     _pwm_left,_main_vx_error_1_131
08E0           2343   ;        main.c:622: pwm_right = vx_error*100/(vx_error+vy_error);
08E0 856000    2344            mov     __mulint_PARM_2,_main_vx_error_1_131
08E3 856101    2345            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_131 + 1)
08E6 900064    2346            mov     dptr,#0x0064
08E9 C002      2347            push    ar2
08EB C003      2348            push    ar3
08ED 120000    2349            lcall   __mulint
08F0 AD82      2350            mov     r5,dpl
08F2 AE83      2351            mov     r6,dph
08F4 E5B0      2352            mov     a,_main_vy_error_1_131
08F6 2560      2353            add     a,_main_vx_error_1_131
08F8 F500      2354            mov     __divsint_PARM_2,a
08FA E5B1      2355            mov     a,(_main_vy_error_1_131 + 1)
08FC 3561      2356            addc    a,(_main_vx_error_1_131 + 1)
08FE F501      2357            mov     (__divsint_PARM_2 + 1),a
0900 8D82      2358            mov     dpl,r5
0902 8E83      2359            mov     dph,r6
0904 120000    2360            lcall   __divsint
0907 AD82      2361            mov     r5,dpl
0909 AE83      2362            mov     r6,dph
090B D003      2363            pop     ar3
090D D002      2364            pop     ar2
090F 8D90      2365            mov     _pwm_right,r5
0911 020000    2366            ljmp    L022023?
0914           2367   L022020?:
0914           2368   ;        main.c:627: if (vy*100<=vy_thres*100/2){
0914 C002      2369            push    ar2
0916 C003      2370            push    ar3
0918 85D000    2371            mov     __mulint_PARM_2,_main_vy_1_131
091B 85D101    2372            mov     (__mulint_PARM_2 + 1),(_main_vy_1_131 + 1)
091E 900064    2373            mov     dptr,#0x0064
0921 C002      2374            push    ar2
0923 C003      2375            push    ar3
0925 120000    2376            lcall   __mulint
0928 AD82      2377            mov     r5,dpl
092A AE83      2378            mov     r6,dph
092C D003      2379            pop     ar3
092E D002      2380            pop     ar2
0930 851000    2381            mov     __mulint_PARM_2,_vy_thres
0933 851101    2382            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0936 900064    2383            mov     dptr,#0x0064
0939 C003      2384            push    ar3
093B C005      2385            push    ar5
093D C006      2386            push    ar6
093F 120000    2387            lcall   __mulint
0942 AF82      2388            mov     r7,dpl
0944 AA83      2389            mov     r2,dph
0946 D006      2390            pop     ar6
0948 D005      2391            pop     ar5
094A D003      2392            pop     ar3
094C 750002    2393            mov     __divsint_PARM_2,#0x02
094F E4        2394            clr     a
0950 F501      2395            mov     (__divsint_PARM_2 + 1),a
0952 8F82      2396            mov     dpl,r7
0954 8A83      2397            mov     dph,r2
0956 C005      2398            push    ar5
0958 C006      2399            push    ar6
095A 120000    2400            lcall   __divsint
095D AA82      2401            mov     r2,dpl
095F AB83      2402            mov     r3,dph
0961 D006      2403            pop     ar6
0963 D005      2404            pop     ar5
0965 C3        2405            clr     c
0966 EA        2406            mov     a,r2
0967 9D        2407            subb    a,r5
0968 EB        2408            mov     a,r3
0969 6480      2409            xrl     a,#0x80
096B 8EF0      2410            mov     b,r6
096D 63F080    2411            xrl     b,#0x80
0970 95F0      2412            subb    a,b
0972 D003      2413            pop     ar3
0974 D002      2414            pop     ar2
0976 4000      2415            jc      L022017?
0978           2416   ;        main.c:628: pwm_left = vy_error*100/(vx_error+vy_error);
0978 85B000    2417            mov     __mulint_PARM_2,_main_vy_error_1_131
097B 85B101    2418            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_131 + 1)
097E 900064    2419            mov     dptr,#0x0064
0981 C002      2420            push    ar2
0983 C003      2421            push    ar3
0985 120000    2422            lcall   __mulint
0988 AD82      2423            mov     r5,dpl
098A AE83      2424            mov     r6,dph
098C E5B0      2425            mov     a,_main_vy_error_1_131
098E 2560      2426            add     a,_main_vx_error_1_131
0990 F500      2427            mov     __divsint_PARM_2,a
0992 E5B1      2428            mov     a,(_main_vy_error_1_131 + 1)
0994 3561      2429            addc    a,(_main_vx_error_1_131 + 1)
0996 F501      2430            mov     (__divsint_PARM_2 + 1),a
0998 8D82      2431            mov     dpl,r5
099A 8E83      2432            mov     dph,r6
099C 120000    2433            lcall   __divsint
099F AD82      2434            mov     r5,dpl
09A1 AE83      2435            mov     r6,dph
09A3 D003      2436            pop     ar3
09A5 D002      2437            pop     ar2
09A7 8DD0      2438            mov     _pwm_left,r5
09A9           2439   ;        main.c:629: pwm_right = vy_error; 
09A9 85B090    2440            mov     _pwm_right,_main_vy_error_1_131
09AC 8000      2441            sjmp    L022023?
09AE           2442   L022017?:
09AE           2443   ;        main.c:632: pwm_left = vx_error*100/(vx_error+vy_error);
09AE 856000    2444            mov     __mulint_PARM_2,_main_vx_error_1_131
09B1 856101    2445            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_131 + 1)
09B4 900064    2446            mov     dptr,#0x0064
09B7 C002      2447            push    ar2
09B9 C003      2448            push    ar3
09BB 120000    2449            lcall   __mulint
09BE AD82      2450            mov     r5,dpl
09C0 AE83      2451            mov     r6,dph
09C2 E5B0      2452            mov     a,_main_vy_error_1_131
09C4 2560      2453            add     a,_main_vx_error_1_131
09C6 F500      2454            mov     __divsint_PARM_2,a
09C8 E5B1      2455            mov     a,(_main_vy_error_1_131 + 1)
09CA 3561      2456            addc    a,(_main_vx_error_1_131 + 1)
09CC F501      2457            mov     (__divsint_PARM_2 + 1),a
09CE 8D82      2458            mov     dpl,r5
09D0 8E83      2459            mov     dph,r6
09D2 120000    2460            lcall   __divsint
09D5 AD82      2461            mov     r5,dpl
09D7 AE83      2462            mov     r6,dph
09D9 D003      2463            pop     ar3
09DB D002      2464            pop     ar2
09DD 8DD0      2465            mov     _pwm_left,r5
09DF           2466   ;        main.c:633: pwm_right = vx_error; 
09DF 856090    2467            mov     _pwm_right,_main_vx_error_1_131
09E2           2468   L022023?:
09E2           2469   ;        main.c:638: if (vy_err<0){
09E2 E551      2470            mov     a,(_main_vy_err_1_131 + 1)
09E4 20E778    2471            jb      acc.7,L022091?
09E7 020000    2472            ljmp    L022049?
09EA           2473   L022091?:
09EA           2474   ;        main.c:639: L_motor_dir = 1; 
09EA 755001    2475            mov     _L_motor_dir,#0x01
09ED           2476   ;        main.c:640: R_motor_dir = 1; 
09ED 751001    2477            mov     _R_motor_dir,#0x01
09F0           2478   ;        main.c:642: if (vx_err>0){
09F0 C3        2479            clr     c
09F1 E4        2480            clr     a
09F2 9500      2481            subb    a,_main_vx_err_1_131
09F4 E4        2482            clr     a
09F5 6480      2483            xrl     a,#0x80
09F7 8501F0    2484            mov     b,(_main_vx_err_1_131 + 1)
09FA 63F080    2485            xrl     b,#0x80
09FD 95F0      2486            subb    a,b
09FF 4000      2487            jc      L022092?
0A01 020000    2488            ljmp    L022031?
0A04           2489   L022092?:
0A04           2490   ;        main.c:643: if (vy*100<=vy_thres*100/2){
0A04 C002      2491            push    ar2
0A06 C003      2492            push    ar3
0A08 85D000    2493            mov     __mulint_PARM_2,_main_vy_1_131
0A0B 85D101    2494            mov     (__mulint_PARM_2 + 1),(_main_vy_1_131 + 1)
0A0E 900064    2495            mov     dptr,#0x0064
0A11 C002      2496            push    ar2
0A13 C003      2497            push    ar3
0A15 120000    2498            lcall   __mulint
0A18 AD82      2499            mov     r5,dpl
0A1A AE83      2500            mov     r6,dph
0A1C D003      2501            pop     ar3
0A1E D002      2502            pop     ar2
0A20 851000    2503            mov     __mulint_PARM_2,_vy_thres
0A23 851101    2504            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0A26 900064    2505            mov     dptr,#0x0064
0A29 C003      2506            push    ar3
0A2B C005      2507            push    ar5
0A2D C006      2508            push    ar6
0A2F 120000    2509            lcall   __mulint
0A32 AF82      2510            mov     r7,dpl
0A34 AA83      2511            mov     r2,dph
0A36 D006      2512            pop     ar6
0A38 D005      2513            pop     ar5
0A3A D003      2514            pop     ar3
0A3C 750002    2515            mov     __divsint_PARM_2,#0x02
0A3F E4        2516            clr     a
0A40 F501      2517            mov     (__divsint_PARM_2 + 1),a
0A42 8F82      2518            mov     dpl,r7
0A44 8A83      2519            mov     dph,r2
0A46 C005      2520            push    ar5
0A48 C006      2521            push    ar6
0A4A 120000    2522            lcall   __divsint
0A4D AA82      2523            mov     r2,dpl
0A4F AB83      2524            mov     r3,dph
0A51 D006      2525            pop     ar6
0A53 D005      2526            pop     ar5
0A55 C3        2527            clr     c
0A56 EA        2528            mov     a,r2
0A57 9D        2529            subb    a,r5
0A58 EB        2530            mov     a,r3
0A59 6480      2531            xrl     a,#0x80
0A5B 8EF0      2532            mov     b,r6
0A5D 63F080    2533            xrl     b,#0x80
0A60 95F0      2534            subb    a,b
0A62 D003      2535            pop     ar3
0A64 D002      2536            pop     ar2
0A66 4000      2537            jc      L022025?
0A68           2538   ;        main.c:644: pwm_left = vy_error; 
0A68 85B0D0    2539            mov     _pwm_left,_main_vy_error_1_131
0A6B           2540   ;        main.c:645: pwm_right = vy_error*100/(vx_error+vy_error);
0A6B 85B000    2541            mov     __mulint_PARM_2,_main_vy_error_1_131
0A6E 85B101    2542            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_131 + 1)
0A71 900064    2543            mov     dptr,#0x0064
0A74 C002      2544            push    ar2
0A76 C003      2545            push    ar3
0A78 120000    2546            lcall   __mulint
0A7B AD82      2547            mov     r5,dpl
0A7D AE83      2548            mov     r6,dph
0A7F E5B0      2549            mov     a,_main_vy_error_1_131
0A81 2560      2550            add     a,_main_vx_error_1_131
0A83 F500      2551            mov     __divsint_PARM_2,a
0A85 E5B1      2552            mov     a,(_main_vy_error_1_131 + 1)
0A87 3561      2553            addc    a,(_main_vx_error_1_131 + 1)
0A89 F501      2554            mov     (__divsint_PARM_2 + 1),a
0A8B 8D82      2555            mov     dpl,r5
0A8D 8E83      2556            mov     dph,r6
0A8F 120000    2557            lcall   __divsint
0A92 AD82      2558            mov     r5,dpl
0A94 AE83      2559            mov     r6,dph
0A96 D003      2560            pop     ar3
0A98 D002      2561            pop     ar2
0A9A 8D90      2562            mov     _pwm_right,r5
0A9C 020000    2563            ljmp    L022049?
0A9F           2564   L022025?:
0A9F           2565   ;        main.c:648: pwm_left = vx_error; 
0A9F 8560D0    2566            mov     _pwm_left,_main_vx_error_1_131
0AA2           2567   ;        main.c:649: pwm_right = vx_error*100/(vx_error+vy_error);
0AA2 856000    2568            mov     __mulint_PARM_2,_main_vx_error_1_131
0AA5 856101    2569            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_131 + 1)
0AA8 900064    2570            mov     dptr,#0x0064
0AAB C002      2571            push    ar2
0AAD C003      2572            push    ar3
0AAF 120000    2573            lcall   __mulint
0AB2 AD82      2574            mov     r5,dpl
0AB4 AE83      2575            mov     r6,dph
0AB6 E5B0      2576            mov     a,_main_vy_error_1_131
0AB8 2560      2577            add     a,_main_vx_error_1_131
0ABA F500      2578            mov     __divsint_PARM_2,a
0ABC E5B1      2579            mov     a,(_main_vy_error_1_131 + 1)
0ABE 3561      2580            addc    a,(_main_vx_error_1_131 + 1)
0AC0 F501      2581            mov     (__divsint_PARM_2 + 1),a
0AC2 8D82      2582            mov     dpl,r5
0AC4 8E83      2583            mov     dph,r6
0AC6 120000    2584            lcall   __divsint
0AC9 AD82      2585            mov     r5,dpl
0ACB AE83      2586            mov     r6,dph
0ACD D003      2587            pop     ar3
0ACF D002      2588            pop     ar2
0AD1 8D90      2589            mov     _pwm_right,r5
0AD3 020000    2590            ljmp    L022049?
0AD6           2591   L022031?:
0AD6           2592   ;        main.c:654: if (vy*100<=vy_thres*100/2){
0AD6 C002      2593            push    ar2
0AD8 C003      2594            push    ar3
0ADA 85D000    2595            mov     __mulint_PARM_2,_main_vy_1_131
0ADD 85D101    2596            mov     (__mulint_PARM_2 + 1),(_main_vy_1_131 + 1)
0AE0 900064    2597            mov     dptr,#0x0064
0AE3 C002      2598            push    ar2
0AE5 C003      2599            push    ar3
0AE7 120000    2600            lcall   __mulint
0AEA AD82      2601            mov     r5,dpl
0AEC AE83      2602            mov     r6,dph
0AEE D003      2603            pop     ar3
0AF0 D002      2604            pop     ar2
0AF2 851000    2605            mov     __mulint_PARM_2,_vy_thres
0AF5 851101    2606            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0AF8 900064    2607            mov     dptr,#0x0064
0AFB C003      2608            push    ar3
0AFD C005      2609            push    ar5
0AFF C006      2610            push    ar6
0B01 120000    2611            lcall   __mulint
0B04 AF82      2612            mov     r7,dpl
0B06 AA83      2613            mov     r2,dph
0B08 D006      2614            pop     ar6
0B0A D005      2615            pop     ar5
0B0C D003      2616            pop     ar3
0B0E 750002    2617            mov     __divsint_PARM_2,#0x02
0B11 E4        2618            clr     a
0B12 F501      2619            mov     (__divsint_PARM_2 + 1),a
0B14 8F82      2620            mov     dpl,r7
0B16 8A83      2621            mov     dph,r2
0B18 C005      2622            push    ar5
0B1A C006      2623            push    ar6
0B1C 120000    2624            lcall   __divsint
0B1F AA82      2625            mov     r2,dpl
0B21 AB83      2626            mov     r3,dph
0B23 D006      2627            pop     ar6
0B25 D005      2628            pop     ar5
0B27 C3        2629            clr     c
0B28 EA        2630            mov     a,r2
0B29 9D        2631            subb    a,r5
0B2A EB        2632            mov     a,r3
0B2B 6480      2633            xrl     a,#0x80
0B2D 8EF0      2634            mov     b,r6
0B2F 63F080    2635            xrl     b,#0x80
0B32 95F0      2636            subb    a,b
0B34 D003      2637            pop     ar3
0B36 D002      2638            pop     ar2
0B38 4000      2639            jc      L022028?
0B3A           2640   ;        main.c:655: pwm_left = vy_error*100/(vx_error+vy_error);
0B3A 85B000    2641            mov     __mulint_PARM_2,_main_vy_error_1_131
0B3D 85B101    2642            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_131 + 1)
0B40 900064    2643            mov     dptr,#0x0064
0B43 C002      2644            push    ar2
0B45 C003      2645            push    ar3
0B47 120000    2646            lcall   __mulint
0B4A AD82      2647            mov     r5,dpl
0B4C AE83      2648            mov     r6,dph
0B4E E5B0      2649            mov     a,_main_vy_error_1_131
0B50 2560      2650            add     a,_main_vx_error_1_131
0B52 F500      2651            mov     __divsint_PARM_2,a
0B54 E5B1      2652            mov     a,(_main_vy_error_1_131 + 1)
0B56 3561      2653            addc    a,(_main_vx_error_1_131 + 1)
0B58 F501      2654            mov     (__divsint_PARM_2 + 1),a
0B5A 8D82      2655            mov     dpl,r5
0B5C 8E83      2656            mov     dph,r6
0B5E 120000    2657            lcall   __divsint
0B61 AD82      2658            mov     r5,dpl
0B63 AE83      2659            mov     r6,dph
0B65 D003      2660            pop     ar3
0B67 D002      2661            pop     ar2
0B69 8DD0      2662            mov     _pwm_left,r5
0B6B           2663   ;        main.c:656: pwm_right = vy_error; 
0B6B 85B090    2664            mov     _pwm_right,_main_vy_error_1_131
0B6E 020000    2665            ljmp    L022049?
0B71           2666   L022028?:
0B71           2667   ;        main.c:659: pwm_left = vx_error*100/(vx_error+vy_error);
0B71 856000    2668            mov     __mulint_PARM_2,_main_vx_error_1_131
0B74 856101    2669            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_131 + 1)
0B77 900064    2670            mov     dptr,#0x0064
0B7A C002      2671            push    ar2
0B7C C003      2672            push    ar3
0B7E 120000    2673            lcall   __mulint
0B81 AD82      2674            mov     r5,dpl
0B83 AE83      2675            mov     r6,dph
0B85 E5B0      2676            mov     a,_main_vy_error_1_131
0B87 2560      2677            add     a,_main_vx_error_1_131
0B89 F500      2678            mov     __divsint_PARM_2,a
0B8B E5B1      2679            mov     a,(_main_vy_error_1_131 + 1)
0B8D 3561      2680            addc    a,(_main_vx_error_1_131 + 1)
0B8F F501      2681            mov     (__divsint_PARM_2 + 1),a
0B91 8D82      2682            mov     dpl,r5
0B93 8E83      2683            mov     dph,r6
0B95 120000    2684            lcall   __divsint
0B98 AD82      2685            mov     r5,dpl
0B9A AE83      2686            mov     r6,dph
0B9C D003      2687            pop     ar3
0B9E D002      2688            pop     ar2
0BA0 8DD0      2689            mov     _pwm_left,r5
0BA2           2690   ;        main.c:660: pwm_right = vx_error; 
0BA2 856090    2691            mov     _pwm_right,_main_vx_error_1_131
0BA5 020000    2692            ljmp    L022049?
0BA8           2693   L022039?:
0BA8           2694   ;        main.c:668: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0BA8 904410    2695            mov     dptr,#_buff
0BAB 75F040    2696            mov     b,#0x40
0BAE C002      2697            push    ar2
0BB0 C003      2698            push    ar3
0BB2 120000    2699            lcall   _strlen
0BB5 AD82      2700            mov     r5,dpl
0BB7 AE83      2701            mov     r6,dph
0BB9 C005      2702            push    ar5
0BBB C006      2703            push    ar6
0BBD 7410      2704            mov     a,#_buff
0BBF C0E0      2705            push    acc
0BC1 7444      2706            mov     a,#(_buff >> 8)
0BC3 C0E0      2707            push    acc
0BC5 7440      2708            mov     a,#0x40
0BC7 C0E0      2709            push    acc
0BC9 74B8      2710            mov     a,#__str_14
0BCB C0E0      2711            push    acc
0BCD 74D7      2712            mov     a,#(__str_14 >> 8)
0BCF C0E0      2713            push    acc
0BD1 7480      2714            mov     a,#0x80
0BD3 C0E0      2715            push    acc
0BD5 120000    2716            lcall   _printf
0BD8 E581      2717            mov     a,sp
0BDA 24F8      2718            add     a,#0xf8
0BDC F581      2719            mov     sp,a
0BDE D003      2720            pop     ar3
0BE0 D002      2721            pop     ar2
0BE2 020000    2722            ljmp    L022049?
0BE5           2723   L022044?:
0BE5           2724   ;        main.c:674: else if(c=='@') // Master wants slave data
0BE5 BC40F8    2725            cjne    r4,#0x40,L022095?
0BE8 8000      2726            sjmp    L022096?
0BEA           2727   L022095?:
0BEA 020000    2728            ljmp    L022049?
0BED           2729   L022096?:
0BED           2730   ;        main.c:676: sprintf(buff, "%05u\n", cnt);
0BED C002      2731            push    ar2
0BEF C003      2732            push    ar3
0BF1 C002      2733            push    ar2
0BF3 C003      2734            push    ar3
0BF5 7478      2735            mov     a,#__str_15
0BF7 C0E0      2736            push    acc
0BF9 74D8      2737            mov     a,#(__str_15 >> 8)
0BFB C0E0      2738            push    acc
0BFD 7480      2739            mov     a,#0x80
0BFF C0E0      2740            push    acc
0C01 7410      2741            mov     a,#_buff
0C03 C0E0      2742            push    acc
0C05 7444      2743            mov     a,#(_buff >> 8)
0C07 C0E0      2744            push    acc
0C09 7440      2745            mov     a,#0x40
0C0B C0E0      2746            push    acc
0C0D 120000    2747            lcall   _sprintf
0C10 E581      2748            mov     a,sp
0C12 24F8      2749            add     a,#0xf8
0C14 F581      2750            mov     sp,a
0C16 D003      2751            pop     ar3
0C18 D002      2752            pop     ar2
0C1A           2753   ;        main.c:677: cnt++;
0C1A 0A        2754            inc     r2
0C1B BA00F8    2755            cjne    r2,#0x00,L022097?
0C1E 0B        2756            inc     r3
0C1F           2757   L022097?:
0C1F           2758   ;        main.c:678: waitms(5); // The radio seems to need this delay...
0C1F 900005    2759            mov     dptr,#0x0005
0C22 C002      2760            push    ar2
0C24 C003      2761            push    ar3
0C26 120000    2762            lcall   _waitms
0C29           2763   ;        main.c:679: sendstr1(buff);
0C29 904410    2764            mov     dptr,#_buff
0C2C 75F040    2765            mov     b,#0x40
0C2F 120000    2766            lcall   _sendstr1
0C32 D003      2767            pop     ar3
0C34 D002      2768            pop     ar2
0C36 020000    2769            ljmp    L022049?
0C39           2770            rseg R_CSEG
0C39           2771   
0000           2772            rseg R_XINIT
0000           2773   
0000           2774            rseg R_CONST
0000           2775   __str_0:
0000 436F6D6D  2776            db 'Command: %s'
     616E643A
     202573
000B 00        2777            db 0x00
000C           2778   __str_1:
000C 52657370  2779            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2780            db 0x0D
0019 0A        2781            db 0x0A
001A 00        2782            db 0x00
001B           2783   __str_2:
001B 41542B44  2784            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2785            db 0x0D
0027 0A        2786            db 0x0A
0028 00        2787            db 0x00
0029           2788   __str_3:
0029 0D        2789            db 0x0D
002A 0A        2790            db 0x0A
002B 45464D38  2791            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2792            db 0x0D
0047 0A        2793            db 0x0A
0048 00        2794            db 0x00
0049           2795   __str_4:
0049 41542B56  2796            db 'AT+VER'
     4552
004F 0D        2797            db 0x0D
0050 0A        2798            db 0x0A
0051 00        2799            db 0x00
0052           2800   __str_5:
0052 41542B42  2801            db 'AT+BAUD'
     415544
0059 0D        2802            db 0x0D
005A 0A        2803            db 0x0A
005B 00        2804            db 0x00
005C           2805   __str_6:
005C 41542B52  2806            db 'AT+RFID'
     464944
0063 0D        2807            db 0x0D
0064 0A        2808            db 0x0A
0065 00        2809            db 0x00
0066           2810   __str_7:
0066 41542B44  2811            db 'AT+DVID'
     564944
006D 0D        2812            db 0x0D
006E 0A        2813            db 0x0A
006F 00        2814            db 0x00
0070           2815   __str_8:
0070 41542B52  2816            db 'AT+RFC'
     4643
0076 0D        2817            db 0x0D
0077 0A        2818            db 0x0A
0078 00        2819            db 0x00
0079           2820   __str_9:
0079 41542B50  2821            db 'AT+POWE'
     4F5745
0080 0D        2822            db 0x0D
0081 0A        2823            db 0x0A
0082 00        2824            db 0x00
0083           2825   __str_10:
0083 41542B43  2826            db 'AT+CLSS'
     4C5353
008A 0D        2827            db 0x0D
008B 0A        2828            db 0x0A
008C 00        2829            db 0x00
008D           2830   __str_11:
008D 41542B44  2831            db 'AT+DVIDEFEF'
     56494445
     464546
0098 0D        2832            db 0x0D
0099 0A        2833            db 0x0A
009A 00        2834            db 0x00
009B           2835   __str_12:
009B 25303364  2836            db '%03d,%03d'
     2C253033
     64
00A4 00        2837            db 0x00
00A5           2838   __str_13:
00A5 4A6F7973  2839            db 'Joystick Received: Vx = %03d, Vy = %03d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     303364
00CC 0D        2840            db 0x0D
00CD 0A        2841            db 0x0A
00CE 00        2842            db 0x00
00CF           2843   __str_14:
00CF 2A2A2A20  2844            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
00EA 0D        2845            db 0x0D
00EB 0A        2846            db 0x0A
00EC 00        2847            db 0x00
00ED           2848   __str_15:
00ED 25303575  2849            db '%05u'
00F1 0A        2850            db 0x0A
00F2 00        2851            db 0x00
00F3           2852   
0096           2853            CSEG
0096           2854   
0096           2855   end
