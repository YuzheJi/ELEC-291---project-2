0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 16 10:19:10 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TurnLeft
0000             30            public _TurnRight
0000             31            public _MoveBackward
0000             32            public _MoveForward
0000             33            public _Timer5_ISR
0000             34            public _ADC_at_Pin
0000             35            public _InitPinADC
0000             36            public _InitADC
0000             37            public _Set_Pin_Output
0000             38            public _ReceptionOff
0000             39            public _SendATCommand
0000             40            public _waitms_or_RI1
0000             41            public _RXU1
0000             42            public _getstr1
0000             43            public _getchar1_with_timeout
0000             44            public _getchar1
0000             45            public _sendstr1
0000             46            public _putchar1
0000             47            public _UART1_Init
0000             48            public _waitms
0000             49            public _Timer3us
0000             50            public __c51_external_startup
0000             51            public _buff
0000             52            public _getstr1_PARM_2
0000             53            public _R_motor_dir
0000             54            public _L_motor_dir
0000             55            public _pwm_right
0000             56            public _pwm_left
0000             57            public _pwm_counter
0000             58   ;--------------------------------------------------------
0000             59   ; Special Function Registers
0000             60   ;--------------------------------------------------------
0000             61   _ACC            DATA 0xe0
0000             62   _ADC0ASAH       DATA 0xb6
0000             63   _ADC0ASAL       DATA 0xb5
0000             64   _ADC0ASCF       DATA 0xa1
0000             65   _ADC0ASCT       DATA 0xc7
0000             66   _ADC0CF0        DATA 0xbc
0000             67   _ADC0CF1        DATA 0xb9
0000             68   _ADC0CF2        DATA 0xdf
0000             69   _ADC0CN0        DATA 0xe8
0000             70   _ADC0CN1        DATA 0xb2
0000             71   _ADC0CN2        DATA 0xb3
0000             72   _ADC0GTH        DATA 0xc4
0000             73   _ADC0GTL        DATA 0xc3
0000             74   _ADC0H          DATA 0xbe
0000             75   _ADC0L          DATA 0xbd
0000             76   _ADC0LTH        DATA 0xc6
0000             77   _ADC0LTL        DATA 0xc5
0000             78   _ADC0MX         DATA 0xbb
0000             79   _B              DATA 0xf0
0000             80   _CKCON0         DATA 0x8e
0000             81   _CKCON1         DATA 0xa6
0000             82   _CLEN0          DATA 0xc6
0000             83   _CLIE0          DATA 0xc7
0000             84   _CLIF0          DATA 0xe8
0000             85   _CLKSEL         DATA 0xa9
0000             86   _CLOUT0         DATA 0xd1
0000             87   _CLU0CF         DATA 0xb1
0000             88   _CLU0FN         DATA 0xaf
0000             89   _CLU0MX         DATA 0x84
0000             90   _CLU1CF         DATA 0xb3
0000             91   _CLU1FN         DATA 0xb2
0000             92   _CLU1MX         DATA 0x85
0000             93   _CLU2CF         DATA 0xb6
0000             94   _CLU2FN         DATA 0xb5
0000             95   _CLU2MX         DATA 0x91
0000             96   _CLU3CF         DATA 0xbf
0000             97   _CLU3FN         DATA 0xbe
0000             98   _CLU3MX         DATA 0xae
0000             99   _CMP0CN0        DATA 0x9b
0000            100   _CMP0CN1        DATA 0x99
0000            101   _CMP0MD         DATA 0x9d
0000            102   _CMP0MX         DATA 0x9f
0000            103   _CMP1CN0        DATA 0xbf
0000            104   _CMP1CN1        DATA 0xac
0000            105   _CMP1MD         DATA 0xab
0000            106   _CMP1MX         DATA 0xaa
0000            107   _CRC0CN0        DATA 0xce
0000            108   _CRC0CN1        DATA 0x86
0000            109   _CRC0CNT        DATA 0xd3
0000            110   _CRC0DAT        DATA 0xcb
0000            111   _CRC0FLIP       DATA 0xcf
0000            112   _CRC0IN         DATA 0xca
0000            113   _CRC0ST         DATA 0xd2
0000            114   _DAC0CF0        DATA 0x91
0000            115   _DAC0CF1        DATA 0x92
0000            116   _DAC0H          DATA 0x85
0000            117   _DAC0L          DATA 0x84
0000            118   _DAC1CF0        DATA 0x93
0000            119   _DAC1CF1        DATA 0x94
0000            120   _DAC1H          DATA 0x8a
0000            121   _DAC1L          DATA 0x89
0000            122   _DAC2CF0        DATA 0x95
0000            123   _DAC2CF1        DATA 0x96
0000            124   _DAC2H          DATA 0x8c
0000            125   _DAC2L          DATA 0x8b
0000            126   _DAC3CF0        DATA 0x9a
0000            127   _DAC3CF1        DATA 0x9c
0000            128   _DAC3H          DATA 0x8e
0000            129   _DAC3L          DATA 0x8d
0000            130   _DACGCF0        DATA 0x88
0000            131   _DACGCF1        DATA 0x98
0000            132   _DACGCF2        DATA 0xa2
0000            133   _DERIVID        DATA 0xad
0000            134   _DEVICEID       DATA 0xb5
0000            135   _DPH            DATA 0x83
0000            136   _DPL            DATA 0x82
0000            137   _EIE1           DATA 0xe6
0000            138   _EIE2           DATA 0xf3
0000            139   _EIP1           DATA 0xbb
0000            140   _EIP1H          DATA 0xee
0000            141   _EIP2           DATA 0xed
0000            142   _EIP2H          DATA 0xf6
0000            143   _EMI0CN         DATA 0xe7
0000            144   _FLKEY          DATA 0xb7
0000            145   _HFO0CAL        DATA 0xc7
0000            146   _HFO1CAL        DATA 0xd6
0000            147   _HFOCN          DATA 0xef
0000            148   _I2C0ADM        DATA 0xff
0000            149   _I2C0CN0        DATA 0xba
0000            150   _I2C0DIN        DATA 0xbc
0000            151   _I2C0DOUT       DATA 0xbb
0000            152   _I2C0FCN0       DATA 0xad
0000            153   _I2C0FCN1       DATA 0xab
0000            154   _I2C0FCT        DATA 0xf5
0000            155   _I2C0SLAD       DATA 0xbd
0000            156   _I2C0STAT       DATA 0xb9
0000            157   _IE             DATA 0xa8
0000            158   _IP             DATA 0xb8
0000            159   _IPH            DATA 0xf2
0000            160   _IT01CF         DATA 0xe4
0000            161   _LFO0CN         DATA 0xb1
0000            162   _P0             DATA 0x80
0000            163   _P0MASK         DATA 0xfe
0000            164   _P0MAT          DATA 0xfd
0000            165   _P0MDIN         DATA 0xf1
0000            166   _P0MDOUT        DATA 0xa4
0000            167   _P0SKIP         DATA 0xd4
0000            168   _P1             DATA 0x90
0000            169   _P1MASK         DATA 0xee
0000            170   _P1MAT          DATA 0xed
0000            171   _P1MDIN         DATA 0xf2
0000            172   _P1MDOUT        DATA 0xa5
0000            173   _P1SKIP         DATA 0xd5
0000            174   _P2             DATA 0xa0
0000            175   _P2MASK         DATA 0xfc
0000            176   _P2MAT          DATA 0xfb
0000            177   _P2MDIN         DATA 0xf3
0000            178   _P2MDOUT        DATA 0xa6
0000            179   _P2SKIP         DATA 0xcc
0000            180   _P3             DATA 0xb0
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P3MDOUT        DATA 0x9c
0000            183   _PCA0CENT       DATA 0x9e
0000            184   _PCA0CLR        DATA 0x9c
0000            185   _PCA0CN0        DATA 0xd8
0000            186   _PCA0CPH0       DATA 0xfc
0000            187   _PCA0CPH1       DATA 0xea
0000            188   _PCA0CPH2       DATA 0xec
0000            189   _PCA0CPH3       DATA 0xf5
0000            190   _PCA0CPH4       DATA 0x85
0000            191   _PCA0CPH5       DATA 0xde
0000            192   _PCA0CPL0       DATA 0xfb
0000            193   _PCA0CPL1       DATA 0xe9
0000            194   _PCA0CPL2       DATA 0xeb
0000            195   _PCA0CPL3       DATA 0xf4
0000            196   _PCA0CPL4       DATA 0x84
0000            197   _PCA0CPL5       DATA 0xdd
0000            198   _PCA0CPM0       DATA 0xda
0000            199   _PCA0CPM1       DATA 0xdb
0000            200   _PCA0CPM2       DATA 0xdc
0000            201   _PCA0CPM3       DATA 0xae
0000            202   _PCA0CPM4       DATA 0xaf
0000            203   _PCA0CPM5       DATA 0xcc
0000            204   _PCA0H          DATA 0xfa
0000            205   _PCA0L          DATA 0xf9
0000            206   _PCA0MD         DATA 0xd9
0000            207   _PCA0POL        DATA 0x96
0000            208   _PCA0PWM        DATA 0xf7
0000            209   _PCON0          DATA 0x87
0000            210   _PCON1          DATA 0xcd
0000            211   _PFE0CN         DATA 0xc1
0000            212   _PRTDRV         DATA 0xf6
0000            213   _PSCTL          DATA 0x8f
0000            214   _PSTAT0         DATA 0xaa
0000            215   _PSW            DATA 0xd0
0000            216   _REF0CN         DATA 0xd1
0000            217   _REG0CN         DATA 0xc9
0000            218   _REVID          DATA 0xb6
0000            219   _RSTSRC         DATA 0xef
0000            220   _SBCON1         DATA 0x94
0000            221   _SBRLH1         DATA 0x96
0000            222   _SBRLL1         DATA 0x95
0000            223   _SBUF           DATA 0x99
0000            224   _SBUF0          DATA 0x99
0000            225   _SBUF1          DATA 0x92
0000            226   _SCON           DATA 0x98
0000            227   _SCON0          DATA 0x98
0000            228   _SCON1          DATA 0xc8
0000            229   _SFRPAGE        DATA 0xa7
0000            230   _SFRPGCN        DATA 0xbc
0000            231   _SFRSTACK       DATA 0xd7
0000            232   _SMB0ADM        DATA 0xd6
0000            233   _SMB0ADR        DATA 0xd7
0000            234   _SMB0CF         DATA 0xc1
0000            235   _SMB0CN0        DATA 0xc0
0000            236   _SMB0DAT        DATA 0xc2
0000            237   _SMB0FCN0       DATA 0xc3
0000            238   _SMB0FCN1       DATA 0xc4
0000            239   _SMB0FCT        DATA 0xef
0000            240   _SMB0RXLN       DATA 0xc5
0000            241   _SMB0TC         DATA 0xac
0000            242   _SMOD1          DATA 0x93
0000            243   _SP             DATA 0x81
0000            244   _SPI0CFG        DATA 0xa1
0000            245   _SPI0CKR        DATA 0xa2
0000            246   _SPI0CN0        DATA 0xf8
0000            247   _SPI0DAT        DATA 0xa3
0000            248   _SPI0FCN0       DATA 0x9a
0000            249   _SPI0FCN1       DATA 0x9b
0000            250   _SPI0FCT        DATA 0xf7
0000            251   _SPI0PCF        DATA 0xdf
0000            252   _TCON           DATA 0x88
0000            253   _TH0            DATA 0x8c
0000            254   _TH1            DATA 0x8d
0000            255   _TL0            DATA 0x8a
0000            256   _TL1            DATA 0x8b
0000            257   _TMOD           DATA 0x89
0000            258   _TMR2CN0        DATA 0xc8
0000            259   _TMR2CN1        DATA 0xfd
0000            260   _TMR2H          DATA 0xcf
0000            261   _TMR2L          DATA 0xce
0000            262   _TMR2RLH        DATA 0xcb
0000            263   _TMR2RLL        DATA 0xca
0000            264   _TMR3CN0        DATA 0x91
0000            265   _TMR3CN1        DATA 0xfe
0000            266   _TMR3H          DATA 0x95
0000            267   _TMR3L          DATA 0x94
0000            268   _TMR3RLH        DATA 0x93
0000            269   _TMR3RLL        DATA 0x92
0000            270   _TMR4CN0        DATA 0x98
0000            271   _TMR4CN1        DATA 0xff
0000            272   _TMR4H          DATA 0xa5
0000            273   _TMR4L          DATA 0xa4
0000            274   _TMR4RLH        DATA 0xa3
0000            275   _TMR4RLL        DATA 0xa2
0000            276   _TMR5CN0        DATA 0xc0
0000            277   _TMR5CN1        DATA 0xf1
0000            278   _TMR5H          DATA 0xd5
0000            279   _TMR5L          DATA 0xd4
0000            280   _TMR5RLH        DATA 0xd3
0000            281   _TMR5RLL        DATA 0xd2
0000            282   _UART0PCF       DATA 0xd9
0000            283   _UART1FCN0      DATA 0x9d
0000            284   _UART1FCN1      DATA 0xd8
0000            285   _UART1FCT       DATA 0xfa
0000            286   _UART1LIN       DATA 0x9e
0000            287   _UART1PCF       DATA 0xda
0000            288   _VDM0CN         DATA 0xff
0000            289   _WDTCN          DATA 0x97
0000            290   _XBR0           DATA 0xe1
0000            291   _XBR1           DATA 0xe2
0000            292   _XBR2           DATA 0xe3
0000            293   _XOSC0CN        DATA 0x86
0000            294   _DPTR           DATA 0x8382
0000            295   _TMR2RL         DATA 0xcbca
0000            296   _TMR3RL         DATA 0x9392
0000            297   _TMR4RL         DATA 0xa3a2
0000            298   _TMR5RL         DATA 0xd3d2
0000            299   _TMR0           DATA 0x8c8a
0000            300   _TMR1           DATA 0x8d8b
0000            301   _TMR2           DATA 0xcfce
0000            302   _TMR3           DATA 0x9594
0000            303   _TMR4           DATA 0xa5a4
0000            304   _TMR5           DATA 0xd5d4
0000            305   _SBRL1          DATA 0x9695
0000            306   _PCA0           DATA 0xfaf9
0000            307   _PCA0CP0        DATA 0xfcfb
0000            308   _PCA0CP1        DATA 0xeae9
0000            309   _PCA0CP2        DATA 0xeceb
0000            310   _PCA0CP3        DATA 0xf5f4
0000            311   _PCA0CP4        DATA 0x8584
0000            312   _PCA0CP5        DATA 0xdedd
0000            313   _ADC0ASA        DATA 0xb6b5
0000            314   _ADC0GT         DATA 0xc4c3
0000            315   _ADC0           DATA 0xbebd
0000            316   _ADC0LT         DATA 0xc6c5
0000            317   _DAC0           DATA 0x8584
0000            318   _DAC1           DATA 0x8a89
0000            319   _DAC2           DATA 0x8c8b
0000            320   _DAC3           DATA 0x8e8d
0000            321   ;--------------------------------------------------------
0000            322   ; special function bits
0000            323   ;--------------------------------------------------------
0000            324   _ACC_0          BIT 0xe0
0000            325   _ACC_1          BIT 0xe1
0000            326   _ACC_2          BIT 0xe2
0000            327   _ACC_3          BIT 0xe3
0000            328   _ACC_4          BIT 0xe4
0000            329   _ACC_5          BIT 0xe5
0000            330   _ACC_6          BIT 0xe6
0000            331   _ACC_7          BIT 0xe7
0000            332   _TEMPE          BIT 0xe8
0000            333   _ADGN0          BIT 0xe9
0000            334   _ADGN1          BIT 0xea
0000            335   _ADWINT         BIT 0xeb
0000            336   _ADBUSY         BIT 0xec
0000            337   _ADINT          BIT 0xed
0000            338   _IPOEN          BIT 0xee
0000            339   _ADEN           BIT 0xef
0000            340   _B_0            BIT 0xf0
0000            341   _B_1            BIT 0xf1
0000            342   _B_2            BIT 0xf2
0000            343   _B_3            BIT 0xf3
0000            344   _B_4            BIT 0xf4
0000            345   _B_5            BIT 0xf5
0000            346   _B_6            BIT 0xf6
0000            347   _B_7            BIT 0xf7
0000            348   _C0FIF          BIT 0xe8
0000            349   _C0RIF          BIT 0xe9
0000            350   _C1FIF          BIT 0xea
0000            351   _C1RIF          BIT 0xeb
0000            352   _C2FIF          BIT 0xec
0000            353   _C2RIF          BIT 0xed
0000            354   _C3FIF          BIT 0xee
0000            355   _C3RIF          BIT 0xef
0000            356   _D1SRC0         BIT 0x88
0000            357   _D1SRC1         BIT 0x89
0000            358   _D1AMEN         BIT 0x8a
0000            359   _D01REFSL       BIT 0x8b
0000            360   _D3SRC0         BIT 0x8c
0000            361   _D3SRC1         BIT 0x8d
0000            362   _D3AMEN         BIT 0x8e
0000            363   _D23REFSL       BIT 0x8f
0000            364   _D0UDIS         BIT 0x98
0000            365   _D1UDIS         BIT 0x99
0000            366   _D2UDIS         BIT 0x9a
0000            367   _D3UDIS         BIT 0x9b
0000            368   _EX0            BIT 0xa8
0000            369   _ET0            BIT 0xa9
0000            370   _EX1            BIT 0xaa
0000            371   _ET1            BIT 0xab
0000            372   _ES0            BIT 0xac
0000            373   _ET2            BIT 0xad
0000            374   _ESPI0          BIT 0xae
0000            375   _EA             BIT 0xaf
0000            376   _PX0            BIT 0xb8
0000            377   _PT0            BIT 0xb9
0000            378   _PX1            BIT 0xba
0000            379   _PT1            BIT 0xbb
0000            380   _PS0            BIT 0xbc
0000            381   _PT2            BIT 0xbd
0000            382   _PSPI0          BIT 0xbe
0000            383   _P0_0           BIT 0x80
0000            384   _P0_1           BIT 0x81
0000            385   _P0_2           BIT 0x82
0000            386   _P0_3           BIT 0x83
0000            387   _P0_4           BIT 0x84
0000            388   _P0_5           BIT 0x85
0000            389   _P0_6           BIT 0x86
0000            390   _P0_7           BIT 0x87
0000            391   _P1_0           BIT 0x90
0000            392   _P1_1           BIT 0x91
0000            393   _P1_2           BIT 0x92
0000            394   _P1_3           BIT 0x93
0000            395   _P1_4           BIT 0x94
0000            396   _P1_5           BIT 0x95
0000            397   _P1_6           BIT 0x96
0000            398   _P1_7           BIT 0x97
0000            399   _P2_0           BIT 0xa0
0000            400   _P2_1           BIT 0xa1
0000            401   _P2_2           BIT 0xa2
0000            402   _P2_3           BIT 0xa3
0000            403   _P2_4           BIT 0xa4
0000            404   _P2_5           BIT 0xa5
0000            405   _P2_6           BIT 0xa6
0000            406   _P3_0           BIT 0xb0
0000            407   _P3_1           BIT 0xb1
0000            408   _P3_2           BIT 0xb2
0000            409   _P3_3           BIT 0xb3
0000            410   _P3_4           BIT 0xb4
0000            411   _P3_7           BIT 0xb7
0000            412   _CCF0           BIT 0xd8
0000            413   _CCF1           BIT 0xd9
0000            414   _CCF2           BIT 0xda
0000            415   _CCF3           BIT 0xdb
0000            416   _CCF4           BIT 0xdc
0000            417   _CCF5           BIT 0xdd
0000            418   _CR             BIT 0xde
0000            419   _CF             BIT 0xdf
0000            420   _PARITY         BIT 0xd0
0000            421   _F1             BIT 0xd1
0000            422   _OV             BIT 0xd2
0000            423   _RS0            BIT 0xd3
0000            424   _RS1            BIT 0xd4
0000            425   _F0             BIT 0xd5
0000            426   _AC             BIT 0xd6
0000            427   _CY             BIT 0xd7
0000            428   _RI             BIT 0x98
0000            429   _TI             BIT 0x99
0000            430   _RB8            BIT 0x9a
0000            431   _TB8            BIT 0x9b
0000            432   _REN            BIT 0x9c
0000            433   _CE             BIT 0x9d
0000            434   _SMODE          BIT 0x9e
0000            435   _RI1            BIT 0xc8
0000            436   _TI1            BIT 0xc9
0000            437   _RBX1           BIT 0xca
0000            438   _TBX1           BIT 0xcb
0000            439   _REN1           BIT 0xcc
0000            440   _PERR1          BIT 0xcd
0000            441   _OVR1           BIT 0xce
0000            442   _SI             BIT 0xc0
0000            443   _ACK            BIT 0xc1
0000            444   _ARBLOST        BIT 0xc2
0000            445   _ACKRQ          BIT 0xc3
0000            446   _STO            BIT 0xc4
0000            447   _STA            BIT 0xc5
0000            448   _TXMODE         BIT 0xc6
0000            449   _MASTER         BIT 0xc7
0000            450   _SPIEN          BIT 0xf8
0000            451   _TXNF           BIT 0xf9
0000            452   _NSSMD0         BIT 0xfa
0000            453   _NSSMD1         BIT 0xfb
0000            454   _RXOVRN         BIT 0xfc
0000            455   _MODF           BIT 0xfd
0000            456   _WCOL           BIT 0xfe
0000            457   _SPIF           BIT 0xff
0000            458   _IT0            BIT 0x88
0000            459   _IE0            BIT 0x89
0000            460   _IT1            BIT 0x8a
0000            461   _IE1            BIT 0x8b
0000            462   _TR0            BIT 0x8c
0000            463   _TF0            BIT 0x8d
0000            464   _TR1            BIT 0x8e
0000            465   _TF1            BIT 0x8f
0000            466   _T2XCLK0        BIT 0xc8
0000            467   _T2XCLK1        BIT 0xc9
0000            468   _TR2            BIT 0xca
0000            469   _T2SPLIT        BIT 0xcb
0000            470   _TF2CEN         BIT 0xcc
0000            471   _TF2LEN         BIT 0xcd
0000            472   _TF2L           BIT 0xce
0000            473   _TF2H           BIT 0xcf
0000            474   _T4XCLK0        BIT 0x98
0000            475   _T4XCLK1        BIT 0x99
0000            476   _TR4            BIT 0x9a
0000            477   _T4SPLIT        BIT 0x9b
0000            478   _TF4CEN         BIT 0x9c
0000            479   _TF4LEN         BIT 0x9d
0000            480   _TF4L           BIT 0x9e
0000            481   _TF4H           BIT 0x9f
0000            482   _T5XCLK0        BIT 0xc0
0000            483   _T5XCLK1        BIT 0xc1
0000            484   _TR5            BIT 0xc2
0000            485   _T5SPLIT        BIT 0xc3
0000            486   _TF5CEN         BIT 0xc4
0000            487   _TF5LEN         BIT 0xc5
0000            488   _TF5L           BIT 0xc6
0000            489   _TF5H           BIT 0xc7
0000            490   _RIE            BIT 0xd8
0000            491   _RXTO0          BIT 0xd9
0000            492   _RXTO1          BIT 0xda
0000            493   _RFRQ           BIT 0xdb
0000            494   _TIE            BIT 0xdc
0000            495   _TXHOLD         BIT 0xdd
0000            496   _TXNF1          BIT 0xde
0000            497   _TFRQ           BIT 0xdf
0000            498   ;--------------------------------------------------------
0000            499   ; overlayable register banks
0000            500   ;--------------------------------------------------------
0000            501            rbank0 segment data overlay
0000            502   ;--------------------------------------------------------
0000            503   ; internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_DSEG
0000            506   _pwm_counter:
0000            507            ds 2
0002            508   _pwm_left:
0002            509            ds 1
0003            510   _pwm_right:
0003            511            ds 1
0004            512   _L_motor_dir:
0004            513            ds 1
0005            514   _R_motor_dir:
0005            515            ds 1
0006            516   _getstr1_PARM_2:
0006            517            ds 1
0007            518   ;--------------------------------------------------------
0007            519   ; overlayable items in internal ram 
0007            520   ;--------------------------------------------------------
0000            521            rseg    R_OSEG
0000            522            rseg    R_OSEG
0000            523            rseg    R_OSEG
0000            524            rseg    R_OSEG
0000            525            rseg    R_OSEG
0000            526   _InitPinADC_PARM_2:
0000            527            ds 1
0001            528            rseg    R_OSEG
0001            529            rseg    R_OSEG
0001            530            rseg    R_OSEG
0001            531            rseg    R_OSEG
0001            532            rseg    R_OSEG
0001            533   ;--------------------------------------------------------
0001            534   ; indirectly addressable internal ram data
0001            535   ;--------------------------------------------------------
0000            536            rseg R_ISEG
0000            537   _buff:
0000            538            ds 20
0014            539   ;--------------------------------------------------------
0014            540   ; absolute internal ram data
0014            541   ;--------------------------------------------------------
0000            542            DSEG
0000            543   ;--------------------------------------------------------
0000            544   ; bit data
0000            545   ;--------------------------------------------------------
0000            546            rseg R_BSEG
0000            547   ;--------------------------------------------------------
0000            548   ; paged external ram data
0000            549   ;--------------------------------------------------------
0000            550            rseg R_PSEG
0000            551   ;--------------------------------------------------------
0000            552   ; external ram data
0000            553   ;--------------------------------------------------------
0000            554            rseg R_XSEG
0000            555   ;--------------------------------------------------------
0000            556   ; absolute external ram data
0000            557   ;--------------------------------------------------------
0000            558            XSEG
0000            559   ;--------------------------------------------------------
0000            560   ; external initialized ram data
0000            561   ;--------------------------------------------------------
0000            562            rseg R_IXSEG
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_CSEG
0000            566   ;--------------------------------------------------------
0000            567   ; Reset entry point and interrupt vectors
0000            568   ;--------------------------------------------------------
0000            569            CSEG at 0x0000
0000 020000     570            ljmp    _crt0
0093            571            CSEG at 0x0093
0093 020000     572            ljmp    _Timer5_ISR
0096            573   ;--------------------------------------------------------
0096            574   ; global & static initialisations
0096            575   ;--------------------------------------------------------
0000            576            rseg R_HOME
0000            577            rseg R_GSINIT
0000            578            rseg R_GSINIT
0000            579   ;--------------------------------------------------------
0000            580   ; data variables initialization
0000            581   ;--------------------------------------------------------
0000            582            rseg R_DINIT
0000            583   ;        main.c:39: unsigned int pwm_counter = 0; 
0000 E4         584            clr     a
0001 F568       585            mov     _pwm_counter,a
0003 F569       586            mov     (_pwm_counter + 1),a
0005            587   ;        main.c:40: unsigned char pwm_left = 0, pwm_right = 0; 
0005 752800     588            mov     _pwm_left,#0x00
0008            589   ;        main.c:40: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0008 75E800     590            mov     _pwm_right,#0x00
000B            591   ;        main.c:41: 
000B 75A801     592            mov     _L_motor_dir,#0x01
000E            593   ;        main.c:41: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000E 756801     594            mov     _R_motor_dir,#0x01
0011            595            ; The linker places a 'ret' at the end of segment R_DINIT.
0011            596   ;--------------------------------------------------------
0011            597   ; code
0011            598   ;--------------------------------------------------------
0000            599            rseg R_CSEG
0000            600   ;------------------------------------------------------------
0000            601   ;Allocation info for local variables in function '_c51_external_startup'
0000            602   ;------------------------------------------------------------
0000            603   ;------------------------------------------------------------
0000            604   ;        main.c:44: char _c51_external_startup (void)
0000            605   ;        -----------------------------------------
0000            606   ;         function _c51_external_startup
0000            607   ;        -----------------------------------------
0000            608   __c51_external_startup:
0000            609            using   0
0000            610   ;        main.c:47: SFRPAGE = 0x00;
0000 75A700     611            mov     _SFRPAGE,#0x00
0003            612   ;        main.c:48: WDTCN = 0xDE; //First key
0003 7597DE     613            mov     _WDTCN,#0xDE
0006            614   ;        main.c:49: WDTCN = 0xAD; //Second key
0006 7597AD     615            mov     _WDTCN,#0xAD
0009            616   ;        main.c:51: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     617            mov     _VDM0CN,#0x80
000C            618   ;        main.c:52: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     619            mov     _RSTSRC,#0x06
000F            620   ;        main.c:59: SFRPAGE = 0x10;
000F 75A710     621            mov     _SFRPAGE,#0x10
0012            622   ;        main.c:60: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     623            mov     _PFE0CN,#0x20
0015            624   ;        main.c:61: SFRPAGE = 0x00;
0015 75A700     625            mov     _SFRPAGE,#0x00
0018            626   ;        main.c:82: CLKSEL = 0x00;
0018 75A900     627            mov     _CLKSEL,#0x00
001B            628   ;        main.c:83: CLKSEL = 0x00;
001B 75A900     629            mov     _CLKSEL,#0x00
001E            630   ;        main.c:84: while ((CLKSEL & 0x80) == 0);
001E            631   L002001?:
001E E5A9       632            mov     a,_CLKSEL
0020 30E7A8     633            jnb     acc.7,L002001?
0023            634   ;        main.c:85: CLKSEL = 0x03;
0023 75A903     635            mov     _CLKSEL,#0x03
0026            636   ;        main.c:86: CLKSEL = 0x03;
0026 75A903     637            mov     _CLKSEL,#0x03
0029            638   ;        main.c:87: while ((CLKSEL & 0x80) == 0);
0029            639   L002004?:
0029 E5A9       640            mov     a,_CLKSEL
002B 30E728     641            jnb     acc.7,L002004?
002E            642   ;        main.c:92: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     643            orl     _P0MDOUT,#0x11
0031            644   ;        main.c:93: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     645            orl     _P2MDOUT,#0x01
0034            646   ;        main.c:94: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     647            mov     _XBR0,#0x01
0037            648   ;        main.c:95: XBR1     = 0X00;
0037 75E200     649            mov     _XBR1,#0x00
003A            650   ;        main.c:96: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     651            mov     _XBR2,#0x41
003D            652   ;        main.c:102: SCON0 = 0x10;
003D 759810     653            mov     _SCON0,#0x10
0040            654   ;        main.c:103: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     655            mov     _TH1,#0xE6
0043            656   ;        main.c:104: TL1 = TH1;      // Init Timer1
0043 858D8B     657            mov     _TL1,_TH1
0046            658   ;        main.c:105: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     659            anl     _TMOD,#0x0F
0049            660   ;        main.c:106: TMOD |=  0x20;                       
0049 438920     661            orl     _TMOD,#0x20
004C            662   ;        main.c:107: TR1 = 1; // START Timer1
004C D28E       663            setb    _TR1
004E            664   ;        main.c:108: TI = 1;  // Indicate TX0 ready
004E D299       665            setb    _TI
0050            666   ;        main.c:110: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       667            setb    _P2_0
0052            668   ;        main.c:113: SFRPAGE=0x10;
0052 75A710     669            mov     _SFRPAGE,#0x10
0055            670   ;        main.c:114: TMR5CN0=0x00;
0055 75C000     671            mov     _TMR5CN0,#0x00
0058            672   ;        main.c:115: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     673            mov     _TMR5,#0xFF
005B 75D5FF     674            mov     (_TMR5 >> 8),#0xFF
005E            675   ;        main.c:116: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     676            orl     _EIE2,#0x08
0061            677   ;        main.c:117: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       678            setb    _TR5
0063            679   ;        main.c:119: EA=1;
0063 D2AF       680            setb    _EA
0065            681   ;        main.c:121: SFRPAGE=0x00;
0065 75A700     682            mov     _SFRPAGE,#0x00
0068            683   ;        main.c:123: return 0;
0068 758200     684            mov     dpl,#0x00
006B 22         685            ret
006C            686   ;------------------------------------------------------------
006C            687   ;Allocation info for local variables in function 'Timer3us'
006C            688   ;------------------------------------------------------------
006C            689   ;us                        Allocated to registers r2 
006C            690   ;i                         Allocated to registers r3 
006C            691   ;------------------------------------------------------------
006C            692   ;        main.c:127: void Timer3us(unsigned char us)
006C            693   ;        -----------------------------------------
006C            694   ;         function Timer3us
006C            695   ;        -----------------------------------------
006C            696   _Timer3us:
006C AA82       697            mov     r2,dpl
006E            698   ;        main.c:132: CKCON0|=0b_0100_0000;
006E 438E40     699            orl     _CKCON0,#0x40
0071            700   ;        main.c:134: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     701            mov     _TMR3RL,#0xB8
0074 7593FF     702            mov     (_TMR3RL >> 8),#0xFF
0077            703   ;        main.c:135: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     704            mov     _TMR3,_TMR3RL
007A 859395     705            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            706   ;        main.c:137: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     707            mov     _TMR3CN0,#0x04
0080            708   ;        main.c:138: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       709            mov     r3,#0x00
0082            710   L003004?:
0082 C3         711            clr     c
0083 EB         712            mov     a,r3
0084 9A         713            subb    a,r2
0085 5000       714            jnc     L003007?
0087            715   ;        main.c:140: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            716   L003001?:
0087 E591       717            mov     a,_TMR3CN0
0089 30E728     718            jnb     acc.7,L003001?
008C            719   ;        main.c:141: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     720            anl     _TMR3CN0,#0x7F
008F            721   ;        main.c:138: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         722            inc     r3
0090 8000       723            sjmp    L003004?
0092            724   L003007?:
0092            725   ;        main.c:143: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     726            mov     _TMR3CN0,#0x00
0095 22         727            ret
0096            728   ;------------------------------------------------------------
0096            729   ;Allocation info for local variables in function 'waitms'
0096            730   ;------------------------------------------------------------
0096            731   ;ms                        Allocated to registers r2 r3 
0096            732   ;j                         Allocated to registers r4 r5 
0096            733   ;k                         Allocated to registers r6 
0096            734   ;------------------------------------------------------------
0096            735   ;        main.c:146: void waitms (unsigned int ms)
0096            736   ;        -----------------------------------------
0096            737   ;         function waitms
0096            738   ;        -----------------------------------------
0096            739   _waitms:
0096 AA82       740            mov     r2,dpl
0098 AB83       741            mov     r3,dph
009A            742   ;        main.c:150: for(j=0; j<ms; j++)
009A 7C00       743            mov     r4,#0x00
009C 7D00       744            mov     r5,#0x00
009E            745   L004005?:
009E C3         746            clr     c
009F EC         747            mov     a,r4
00A0 9A         748            subb    a,r2
00A1 ED         749            mov     a,r5
00A2 9B         750            subb    a,r3
00A3 5000       751            jnc     L004009?
00A5            752   ;        main.c:151: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       753            mov     r6,#0x00
00A7            754   L004001?:
00A7 BE0468     755            cjne    r6,#0x04,L004018?
00AA            756   L004018?:
00AA 5000       757            jnc     L004007?
00AC 7582FA     758            mov     dpl,#0xFA
00AF C002       759            push    ar2
00B1 C003       760            push    ar3
00B3 C004       761            push    ar4
00B5 C005       762            push    ar5
00B7 C006       763            push    ar6
00B9 120000     764            lcall   _Timer3us
00BC D006       765            pop     ar6
00BE D005       766            pop     ar5
00C0 D004       767            pop     ar4
00C2 D003       768            pop     ar3
00C4 D002       769            pop     ar2
00C6 0E         770            inc     r6
00C7 8000       771            sjmp    L004001?
00C9            772   L004007?:
00C9            773   ;        main.c:150: for(j=0; j<ms; j++)
00C9 0C         774            inc     r4
00CA BC00A8     775            cjne    r4,#0x00,L004005?
00CD 0D         776            inc     r5
00CE 8000       777            sjmp    L004005?
00D0            778   L004009?:
00D0 22         779            ret
00D1            780   ;------------------------------------------------------------
00D1            781   ;Allocation info for local variables in function 'UART1_Init'
00D1            782   ;------------------------------------------------------------
00D1            783   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            784   ;------------------------------------------------------------
00D1            785   ;        main.c:154: void UART1_Init (unsigned long baudrate)
00D1            786   ;        -----------------------------------------
00D1            787   ;         function UART1_Init
00D1            788   ;        -----------------------------------------
00D1            789   _UART1_Init:
00D1 AA82       790            mov     r2,dpl
00D3 AB83       791            mov     r3,dph
00D5 ACF0       792            mov     r4,b
00D7 FD         793            mov     r5,a
00D8            794   ;        main.c:156: SFRPAGE = 0x20;
00D8 75A720     795            mov     _SFRPAGE,#0x20
00DB            796   ;        main.c:157: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     797            mov     _SMOD1,#0x0C
00DE            798   ;        main.c:158: SCON1 = 0x10;
00DE 75C810     799            mov     _SCON1,#0x10
00E1            800   ;        main.c:159: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     801            mov     _SBCON1,#0x00
00E4            802   ;        main.c:160: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       803            mov     __divulong_PARM_2,r2
00E6 8B01       804            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       805            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       806            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     807            mov     dptr,#0xA200
00EF 75F04A     808            mov     b,#0x4A
00F2 7404       809            mov     a,#0x04
00F4 120000     810            lcall   __divulong
00F7 AA82       811            mov     r2,dpl
00F9 AB83       812            mov     r3,dph
00FB ACF0       813            mov     r4,b
00FD FD         814            mov     r5,a
00FE 750018     815            mov     __divulong_PARM_2,#0x18
0101 E4         816            clr     a
0102 F501       817            mov     (__divulong_PARM_2 + 1),a
0104 F502       818            mov     (__divulong_PARM_2 + 2),a
0106 F503       819            mov     (__divulong_PARM_2 + 3),a
0108 8A82       820            mov     dpl,r2
010A 8B83       821            mov     dph,r3
010C 8CF0       822            mov     b,r4
010E ED         823            mov     a,r5
010F 120000     824            lcall   __divulong
0112 AA82       825            mov     r2,dpl
0114 AB83       826            mov     r3,dph
0116 ACF0       827            mov     r4,b
0118 FD         828            mov     r5,a
0119 E4         829            clr     a
011A C3         830            clr     c
011B 9A         831            subb    a,r2
011C FA         832            mov     r2,a
011D E4         833            clr     a
011E 9B         834            subb    a,r3
011F FB         835            mov     r3,a
0120 7401       836            mov     a,#0x01
0122 9C         837            subb    a,r4
0123 E4         838            clr     a
0124 9D         839            subb    a,r5
0125 8A95       840            mov     _SBRL1,r2
0127 8B96       841            mov     (_SBRL1 >> 8),r3
0129            842   ;        main.c:161: TI1 = 1; // indicate ready for TX
0129 D2C9       843            setb    _TI1
012B            844   ;        main.c:162: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     845            orl     _SBCON1,#0x40
012E            846   ;        main.c:163: SFRPAGE = 0x00;
012E 75A700     847            mov     _SFRPAGE,#0x00
0131 22         848            ret
0132            849   ;------------------------------------------------------------
0132            850   ;Allocation info for local variables in function 'putchar1'
0132            851   ;------------------------------------------------------------
0132            852   ;c                         Allocated to registers r2 
0132            853   ;------------------------------------------------------------
0132            854   ;        main.c:166: void putchar1 (char c) 
0132            855   ;        -----------------------------------------
0132            856   ;         function putchar1
0132            857   ;        -----------------------------------------
0132            858   _putchar1:
0132 AA82       859            mov     r2,dpl
0134            860   ;        main.c:168: SFRPAGE = 0x20;
0134 75A720     861            mov     _SFRPAGE,#0x20
0137            862   ;        main.c:169: while (!TI1);
0137            863   L006001?:
0137            864   ;        main.c:170: TI1=0;
0137 10C9F8     865            jbc     _TI1,L006008?
013A 8000       866            sjmp    L006001?
013C            867   L006008?:
013C            868   ;        main.c:171: SBUF1 = c;
013C 8A92       869            mov     _SBUF1,r2
013E            870   ;        main.c:172: SFRPAGE = 0x00;
013E 75A700     871            mov     _SFRPAGE,#0x00
0141 22         872            ret
0142            873   ;------------------------------------------------------------
0142            874   ;Allocation info for local variables in function 'sendstr1'
0142            875   ;------------------------------------------------------------
0142            876   ;s                         Allocated to registers r2 r3 r4 
0142            877   ;------------------------------------------------------------
0142            878   ;        main.c:175: void sendstr1 (char * s)
0142            879   ;        -----------------------------------------
0142            880   ;         function sendstr1
0142            881   ;        -----------------------------------------
0142            882   _sendstr1:
0142 AA82       883            mov     r2,dpl
0144 AB83       884            mov     r3,dph
0146 ACF0       885            mov     r4,b
0148            886   ;        main.c:177: while(*s)
0148            887   L007001?:
0148 8A82       888            mov     dpl,r2
014A 8B83       889            mov     dph,r3
014C 8CF0       890            mov     b,r4
014E 120000     891            lcall   __gptrget
0151 FD         892            mov     r5,a
0152 6000       893            jz      L007004?
0154            894   ;        main.c:179: putchar1(*s);
0154 8D82       895            mov     dpl,r5
0156 C002       896            push    ar2
0158 C003       897            push    ar3
015A C004       898            push    ar4
015C 120000     899            lcall   _putchar1
015F D004       900            pop     ar4
0161 D003       901            pop     ar3
0163 D002       902            pop     ar2
0165            903   ;        main.c:180: s++;        
0165 0A         904            inc     r2
0166 BA0038     905            cjne    r2,#0x00,L007001?
0169 0B         906            inc     r3
016A 8000       907            sjmp    L007001?
016C            908   L007004?:
016C 22         909            ret
016D            910   ;------------------------------------------------------------
016D            911   ;Allocation info for local variables in function 'getchar1'
016D            912   ;------------------------------------------------------------
016D            913   ;c                         Allocated to registers 
016D            914   ;------------------------------------------------------------
016D            915   ;        main.c:184: char getchar1 (void)
016D            916   ;        -----------------------------------------
016D            917   ;         function getchar1
016D            918   ;        -----------------------------------------
016D            919   _getchar1:
016D            920   ;        main.c:187: SFRPAGE = 0x20;
016D 75A720     921            mov     _SFRPAGE,#0x20
0170            922   ;        main.c:188: while (!RI1);
0170            923   L008001?:
0170            924   ;        main.c:189: RI1=0;
0170 10C838     925            jbc     _RI1,L008008?
0173 8000       926            sjmp    L008001?
0175            927   L008008?:
0175            928   ;        main.c:191: SCON1&=0b_0011_1111;
0175 53C83F     929            anl     _SCON1,#0x3F
0178            930   ;        main.c:192: c = SBUF1;
0178 859282     931            mov     dpl,_SBUF1
017B            932   ;        main.c:193: SFRPAGE = 0x00;
017B 75A700     933            mov     _SFRPAGE,#0x00
017E            934   ;        main.c:194: return (c);
017E 22         935            ret
017F            936   ;------------------------------------------------------------
017F            937   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            938   ;------------------------------------------------------------
017F            939   ;c                         Allocated to registers 
017F            940   ;timeout                   Allocated to registers r2 r3 
017F            941   ;------------------------------------------------------------
017F            942   ;        main.c:197: char getchar1_with_timeout (void)
017F            943   ;        -----------------------------------------
017F            944   ;         function getchar1_with_timeout
017F            945   ;        -----------------------------------------
017F            946   _getchar1_with_timeout:
017F            947   ;        main.c:201: SFRPAGE = 0x20;
017F 75A720     948            mov     _SFRPAGE,#0x20
0182            949   ;        main.c:203: while (!RI1)
0182 7A00       950            mov     r2,#0x00
0184 7B00       951            mov     r3,#0x00
0186            952   L009003?:
0186 20C8B8     953            jb      _RI1,L009005?
0189            954   ;        main.c:205: SFRPAGE = 0x00;
0189 75A700     955            mov     _SFRPAGE,#0x00
018C            956   ;        main.c:206: Timer3us(20);
018C 758214     957            mov     dpl,#0x14
018F C002       958            push    ar2
0191 C003       959            push    ar3
0193 120000     960            lcall   _Timer3us
0196 D003       961            pop     ar3
0198 D002       962            pop     ar2
019A            963   ;        main.c:207: SFRPAGE = 0x20;
019A 75A720     964            mov     _SFRPAGE,#0x20
019D            965   ;        main.c:208: timeout++;
019D 0A         966            inc     r2
019E BA00F8     967            cjne    r2,#0x00,L009012?
01A1 0B         968            inc     r3
01A2            969   L009012?:
01A2            970   ;        main.c:209: if(timeout==25000)
01A2 BAA878     971            cjne    r2,#0xA8,L009003?
01A5 BB6178     972            cjne    r3,#0x61,L009003?
01A8            973   ;        main.c:211: SFRPAGE = 0x00;
01A8 75A700     974            mov     _SFRPAGE,#0x00
01AB            975   ;        main.c:212: return ('\n'); // Timeout after half second
01AB 75820A     976            mov     dpl,#0x0A
01AE 22         977            ret
01AF            978   L009005?:
01AF            979   ;        main.c:215: RI1=0;
01AF C2C8       980            clr     _RI1
01B1            981   ;        main.c:217: SCON1&=0b_0011_1111;
01B1 53C83F     982            anl     _SCON1,#0x3F
01B4            983   ;        main.c:218: c = SBUF1;
01B4 859282     984            mov     dpl,_SBUF1
01B7            985   ;        main.c:219: SFRPAGE = 0x00;
01B7 75A700     986            mov     _SFRPAGE,#0x00
01BA            987   ;        main.c:220: return (c);
01BA 22         988            ret
01BB            989   ;------------------------------------------------------------
01BB            990   ;Allocation info for local variables in function 'getstr1'
01BB            991   ;------------------------------------------------------------
01BB            992   ;n                         Allocated with name '_getstr1_PARM_2'
01BB            993   ;s                         Allocated to registers r2 r3 r4 
01BB            994   ;c                         Allocated to registers r1 
01BB            995   ;cnt                       Allocated to registers r5 
01BB            996   ;------------------------------------------------------------
01BB            997   ;        main.c:223: void getstr1 (char * s, unsigned char n)
01BB            998   ;        -----------------------------------------
01BB            999   ;         function getstr1
01BB           1000   ;        -----------------------------------------
01BB           1001   _getstr1:
01BB AA82      1002            mov     r2,dpl
01BD AB83      1003            mov     r3,dph
01BF ACF0      1004            mov     r4,b
01C1           1005   ;        main.c:229: while(1)
01C1 7D00      1006            mov     r5,#0x00
01C3 8A06      1007            mov     ar6,r2
01C5 8B07      1008            mov     ar7,r3
01C7 8C00      1009            mov     ar0,r4
01C9           1010   L010007?:
01C9           1011   ;        main.c:231: c=getchar1_with_timeout();
01C9 C002      1012            push    ar2
01CB C003      1013            push    ar3
01CD C004      1014            push    ar4
01CF C005      1015            push    ar5
01D1 C006      1016            push    ar6
01D3 C007      1017            push    ar7
01D5 C000      1018            push    ar0
01D7 120000    1019            lcall   _getchar1_with_timeout
01DA A982      1020            mov     r1,dpl
01DC D000      1021            pop     ar0
01DE D007      1022            pop     ar7
01E0 D006      1023            pop     ar6
01E2 D005      1024            pop     ar5
01E4 D004      1025            pop     ar4
01E6 D003      1026            pop     ar3
01E8 D002      1027            pop     ar2
01EA           1028   ;        main.c:232: if(c=='\n')
01EA B90A78    1029            cjne    r1,#0x0A,L010002?
01ED           1030   ;        main.c:234: *s=0;
01ED 8A82      1031            mov     dpl,r2
01EF 8B83      1032            mov     dph,r3
01F1 8CF0      1033            mov     b,r4
01F3 E4        1034            clr     a
01F4           1035   ;        main.c:235: return;
01F4 020000    1036            ljmp    __gptrput
01F7           1037   L010002?:
01F7           1038   ;        main.c:238: if (cnt<n)
01F7 C3        1039            clr     c
01F8 ED        1040            mov     a,r5
01F9 9528      1041            subb    a,_getstr1_PARM_2
01FB 5000      1042            jnc     L010004?
01FD           1043   ;        main.c:240: cnt++;
01FD 0D        1044            inc     r5
01FE           1045   ;        main.c:241: *s=c;
01FE 8E82      1046            mov     dpl,r6
0200 8F83      1047            mov     dph,r7
0202 88F0      1048            mov     b,r0
0204 E9        1049            mov     a,r1
0205 120000    1050            lcall   __gptrput
0208 A3        1051            inc     dptr
0209 AE82      1052            mov     r6,dpl
020B AF83      1053            mov     r7,dph
020D           1054   ;        main.c:242: s++;
020D 8E02      1055            mov     ar2,r6
020F 8F03      1056            mov     ar3,r7
0211 8804      1057            mov     ar4,r0
0213 8000      1058            sjmp    L010007?
0215           1059   L010004?:
0215           1060   ;        main.c:246: *s=0;
0215 8A82      1061            mov     dpl,r2
0217 8B83      1062            mov     dph,r3
0219 8CF0      1063            mov     b,r4
021B E4        1064            clr     a
021C           1065   ;        main.c:247: return;
021C 020000    1066            ljmp    __gptrput
021F           1067   ;------------------------------------------------------------
021F           1068   ;Allocation info for local variables in function 'RXU1'
021F           1069   ;------------------------------------------------------------
021F           1070   ;------------------------------------------------------------
021F           1071   ;        main.c:253: bit RXU1 (void)
021F           1072   ;        -----------------------------------------
021F           1073   ;         function RXU1
021F           1074   ;        -----------------------------------------
021F           1075   _RXU1:
021F           1076   ;        main.c:256: SFRPAGE = 0x20;
021F 75A720    1077            mov     _SFRPAGE,#0x20
0222           1078   ;        main.c:257: mybit=RI1;
0222 A2C8      1079            mov     c,_RI1
0224           1080   ;        main.c:258: SFRPAGE = 0x00;
0224 75A700    1081            mov     _SFRPAGE,#0x00
0227           1082   ;        main.c:259: return mybit;
0227 22        1083            ret
0228           1084   ;------------------------------------------------------------
0228           1085   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1086   ;------------------------------------------------------------
0228           1087   ;ms                        Allocated to registers r2 r3 
0228           1088   ;j                         Allocated to registers r4 r5 
0228           1089   ;k                         Allocated to registers r6 
0228           1090   ;------------------------------------------------------------
0228           1091   ;        main.c:262: void waitms_or_RI1 (unsigned int ms)
0228           1092   ;        -----------------------------------------
0228           1093   ;         function waitms_or_RI1
0228           1094   ;        -----------------------------------------
0228           1095   _waitms_or_RI1:
0228 AA82      1096            mov     r2,dpl
022A AB83      1097            mov     r3,dph
022C           1098   ;        main.c:266: for(j=0; j<ms; j++)
022C 7C00      1099            mov     r4,#0x00
022E 7D00      1100            mov     r5,#0x00
0230           1101   L012007?:
0230 C3        1102            clr     c
0231 EC        1103            mov     a,r4
0232 9A        1104            subb    a,r2
0233 ED        1105            mov     a,r5
0234 9B        1106            subb    a,r3
0235 5000      1107            jnc     L012011?
0237           1108   ;        main.c:268: for (k=0; k<4; k++)
0237 7E00      1109            mov     r6,#0x00
0239           1110   L012003?:
0239 BE04F8    1111            cjne    r6,#0x04,L012019?
023C           1112   L012019?:
023C 5000      1113            jnc     L012009?
023E           1114   ;        main.c:270: if(RXU1()) return;
023E C002      1115            push    ar2
0240 C003      1116            push    ar3
0242 C004      1117            push    ar4
0244 C005      1118            push    ar5
0246 C006      1119            push    ar6
0248 120000    1120            lcall   _RXU1
024B E4        1121            clr     a
024C 33        1122            rlc     a
024D D006      1123            pop     ar6
024F D005      1124            pop     ar5
0251 D004      1125            pop     ar4
0253 D003      1126            pop     ar3
0255 D002      1127            pop     ar2
0257 6000      1128            jz      L012002?
0259 22        1129            ret
025A           1130   L012002?:
025A           1131   ;        main.c:271: Timer3us(250);
025A 7582FA    1132            mov     dpl,#0xFA
025D C002      1133            push    ar2
025F C003      1134            push    ar3
0261 C004      1135            push    ar4
0263 C005      1136            push    ar5
0265 C006      1137            push    ar6
0267 120000    1138            lcall   _Timer3us
026A D006      1139            pop     ar6
026C D005      1140            pop     ar5
026E D004      1141            pop     ar4
0270 D003      1142            pop     ar3
0272 D002      1143            pop     ar2
0274           1144   ;        main.c:268: for (k=0; k<4; k++)
0274 0E        1145            inc     r6
0275 8000      1146            sjmp    L012003?
0277           1147   L012009?:
0277           1148   ;        main.c:266: for(j=0; j<ms; j++)
0277 0C        1149            inc     r4
0278 BC0038    1150            cjne    r4,#0x00,L012007?
027B 0D        1151            inc     r5
027C 8000      1152            sjmp    L012007?
027E           1153   L012011?:
027E 22        1154            ret
027F           1155   ;------------------------------------------------------------
027F           1156   ;Allocation info for local variables in function 'SendATCommand'
027F           1157   ;------------------------------------------------------------
027F           1158   ;s                         Allocated to registers r2 r3 r4 
027F           1159   ;------------------------------------------------------------
027F           1160   ;        main.c:276: void SendATCommand (char * s)
027F           1161   ;        -----------------------------------------
027F           1162   ;         function SendATCommand
027F           1163   ;        -----------------------------------------
027F           1164   _SendATCommand:
027F AA82      1165            mov     r2,dpl
0281 AB83      1166            mov     r3,dph
0283 ACF0      1167            mov     r4,b
0285           1168   ;        main.c:278: printf("Command: %s", s);
0285 C002      1169            push    ar2
0287 C003      1170            push    ar3
0289 C004      1171            push    ar4
028B C002      1172            push    ar2
028D C003      1173            push    ar3
028F C004      1174            push    ar4
0291 74B8      1175            mov     a,#__str_0
0293 C0E0      1176            push    acc
0295 74BE      1177            mov     a,#(__str_0 >> 8)
0297 C0E0      1178            push    acc
0299 7480      1179            mov     a,#0x80
029B C0E0      1180            push    acc
029D 120000    1181            lcall   _printf
02A0 E581      1182            mov     a,sp
02A2 24FA      1183            add     a,#0xfa
02A4 F581      1184            mov     sp,a
02A6           1185   ;        main.c:279: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1186            clr     _P2_0
02A8           1187   ;        main.c:280: waitms(5);
02A8 900005    1188            mov     dptr,#0x0005
02AB 120000    1189            lcall   _waitms
02AE D004      1190            pop     ar4
02B0 D003      1191            pop     ar3
02B2 D002      1192            pop     ar2
02B4           1193   ;        main.c:281: sendstr1(s);
02B4 8A82      1194            mov     dpl,r2
02B6 8B83      1195            mov     dph,r3
02B8 8CF0      1196            mov     b,r4
02BA 120000    1197            lcall   _sendstr1
02BD           1198   ;        main.c:282: getstr1(buff, sizeof(buff)-1);
02BD 752813    1199            mov     _getstr1_PARM_2,#0x13
02C0 9046E8    1200            mov     dptr,#_buff
02C3 75F040    1201            mov     b,#0x40
02C6 120000    1202            lcall   _getstr1
02C9           1203   ;        main.c:283: waitms(10);
02C9 90000A    1204            mov     dptr,#0x000A
02CC 120000    1205            lcall   _waitms
02CF           1206   ;        main.c:284: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1207            setb    _P2_0
02D1           1208   ;        main.c:285: printf("Response: %s\r\n", buff);
02D1 74E8      1209            mov     a,#_buff
02D3 C0E0      1210            push    acc
02D5 7446      1211            mov     a,#(_buff >> 8)
02D7 C0E0      1212            push    acc
02D9 7440      1213            mov     a,#0x40
02DB C0E0      1214            push    acc
02DD 7478      1215            mov     a,#__str_1
02DF C0E0      1216            push    acc
02E1 74BF      1217            mov     a,#(__str_1 >> 8)
02E3 C0E0      1218            push    acc
02E5 7480      1219            mov     a,#0x80
02E7 C0E0      1220            push    acc
02E9 120000    1221            lcall   _printf
02EC E581      1222            mov     a,sp
02EE 24FA      1223            add     a,#0xfa
02F0 F581      1224            mov     sp,a
02F2 22        1225            ret
02F3           1226   ;------------------------------------------------------------
02F3           1227   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1228   ;------------------------------------------------------------
02F3           1229   ;------------------------------------------------------------
02F3           1230   ;        main.c:288: void ReceptionOff (void)
02F3           1231   ;        -----------------------------------------
02F3           1232   ;         function ReceptionOff
02F3           1233   ;        -----------------------------------------
02F3           1234   _ReceptionOff:
02F3           1235   ;        main.c:290: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1236            clr     _P2_0
02F5           1237   ;        main.c:291: waitms(10);
02F5 90000A    1238            mov     dptr,#0x000A
02F8 120000    1239            lcall   _waitms
02FB           1240   ;        main.c:292: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90BFB8    1241            mov     dptr,#__str_2
02FE 75F080    1242            mov     b,#0x80
0301 120000    1243            lcall   _sendstr1
0304           1244   ;        main.c:293: waitms(10);
0304 90000A    1245            mov     dptr,#0x000A
0307 120000    1246            lcall   _waitms
030A           1247   ;        main.c:295: SCON1&=0b_0011_1111;
030A 53C83F    1248            anl     _SCON1,#0x3F
030D           1249   ;        main.c:296: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1250            setb    _P2_0
030F 22        1251            ret
0310           1252   ;------------------------------------------------------------
0310           1253   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1254   ;------------------------------------------------------------
0310           1255   ;pin                       Allocated to registers r2 
0310           1256   ;mask                      Allocated to registers r3 
0310           1257   ;------------------------------------------------------------
0310           1258   ;        main.c:299: void Set_Pin_Output (unsigned char pin)
0310           1259   ;        -----------------------------------------
0310           1260   ;         function Set_Pin_Output
0310           1261   ;        -----------------------------------------
0310           1262   _Set_Pin_Output:
0310 AA82      1263            mov     r2,dpl
0312           1264   ;        main.c:303: mask=(1<<(pin&0x7));
0312 7407      1265            mov     a,#0x07
0314 5A        1266            anl     a,r2
0315 F5F0      1267            mov     b,a
0317 05F0      1268            inc     b
0319 7401      1269            mov     a,#0x01
031B 8000      1270            sjmp    L015011?
031D           1271   L015009?:
031D 25E0      1272            add     a,acc
031F           1273   L015011?:
031F D5F040    1274            djnz    b,L015009?
0322 FB        1275            mov     r3,a
0323           1276   ;        main.c:304: switch(pin/0x10)
0323 EA        1277            mov     a,r2
0324 C4        1278            swap    a
0325 540F      1279            anl     a,#0x0f
0327 FA        1280            mov  r2,a
0328 24FC      1281            add     a,#0xff - 0x03
032A 4000      1282            jc      L015006?
032C EA        1283            mov     a,r2
032D 2A        1284            add     a,r2
032E 2A        1285            add     a,r2
032F 90C0C0    1286            mov     dptr,#L015013?
0332 73        1287            jmp     @a+dptr
0333           1288   L015013?:
0333 020000    1289            ljmp    L015001?
0336 020000    1290            ljmp    L015002?
0339 020000    1291            ljmp    L015003?
033C 020000    1292            ljmp    L015004?
033F           1293   ;        main.c:306: case 0: P0MDOUT |= mask; break;
033F           1294   L015001?:
033F EB        1295            mov     a,r3
0340 42A4      1296            orl     _P0MDOUT,a
0342           1297   ;        main.c:307: case 1: P1MDOUT |= mask; break;
0342 22        1298            ret
0343           1299   L015002?:
0343 EB        1300            mov     a,r3
0344 42A5      1301            orl     _P1MDOUT,a
0346           1302   ;        main.c:308: case 2: P2MDOUT |= mask; break; 
0346 22        1303            ret
0347           1304   L015003?:
0347 EB        1305            mov     a,r3
0348 42A6      1306            orl     _P2MDOUT,a
034A           1307   ;        main.c:309: case 3: P3MDOUT |= mask; break; 
034A 22        1308            ret
034B           1309   L015004?:
034B EB        1310            mov     a,r3
034C 429C      1311            orl     _P3MDOUT,a
034E           1312   ;        main.c:310: }   
034E           1313   L015006?:
034E 22        1314            ret
034F           1315   ;------------------------------------------------------------
034F           1316   ;Allocation info for local variables in function 'InitADC'
034F           1317   ;------------------------------------------------------------
034F           1318   ;------------------------------------------------------------
034F           1319   ;        main.c:313: void InitADC (void)
034F           1320   ;        -----------------------------------------
034F           1321   ;         function InitADC
034F           1322   ;        -----------------------------------------
034F           1323   _InitADC:
034F           1324   ;        main.c:315: SFRPAGE = 0x00;
034F 75A700    1325            mov     _SFRPAGE,#0x00
0352           1326   ;        main.c:316: ADEN=0; // Disable ADC
0352 C2EF      1327            clr     _ADEN
0354           1328   ;        main.c:321: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0354 75B280    1329            mov     _ADC0CN1,#0x80
0357           1330   ;        main.c:325: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0357 75BC20    1331            mov     _ADC0CF0,#0x20
035A           1332   ;        main.c:329: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
035A 75B91E    1333            mov     _ADC0CF1,#0x1E
035D           1334   ;        main.c:338: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
035D 75E800    1335            mov     _ADC0CN0,#0x00
0360           1336   ;        main.c:343: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0360 75DF3F    1337            mov     _ADC0CF2,#0x3F
0363           1338   ;        main.c:347: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0363 75B300    1339            mov     _ADC0CN2,#0x00
0366           1340   ;        main.c:349: ADEN=1; // Enable ADC
0366 D2EF      1341            setb    _ADEN
0368 22        1342            ret
0369           1343   ;------------------------------------------------------------
0369           1344   ;Allocation info for local variables in function 'InitPinADC'
0369           1345   ;------------------------------------------------------------
0369           1346   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0369           1347   ;portno                    Allocated to registers r2 
0369           1348   ;mask                      Allocated to registers r3 
0369           1349   ;------------------------------------------------------------
0369           1350   ;        main.c:352: void InitPinADC (unsigned char portno, unsigned char pin_num)
0369           1351   ;        -----------------------------------------
0369           1352   ;         function InitPinADC
0369           1353   ;        -----------------------------------------
0369           1354   _InitPinADC:
0369 AA82      1355            mov     r2,dpl
036B           1356   ;        main.c:356: mask=1<<pin_num;
036B 85C8F0    1357            mov     b,_InitPinADC_PARM_2
036E 05F0      1358            inc     b
0370 7401      1359            mov     a,#0x01
0372 8000      1360            sjmp    L017013?
0374           1361   L017011?:
0374 25E0      1362            add     a,acc
0376           1363   L017013?:
0376 D5F040    1364            djnz    b,L017011?
0379 FB        1365            mov     r3,a
037A           1366   ;        main.c:358: SFRPAGE = 0x20;
037A 75A720    1367            mov     _SFRPAGE,#0x20
037D           1368   ;        main.c:359: switch (portno)
037D BA0080    1369            cjne    r2,#0x00,L017014?
0380 8000      1370            sjmp    L017001?
0382           1371   L017014?:
0382 BA0100    1372            cjne    r2,#0x01,L017015?
0385 8000      1373            sjmp    L017002?
0387           1374   L017015?:
0387           1375   ;        main.c:361: case 0:
0387 BA0280    1376            cjne    r2,#0x02,L017005?
038A 8000      1377            sjmp    L017003?
038C           1378   L017001?:
038C           1379   ;        main.c:362: P0MDIN &= (~mask); // Set pin as analog input
038C EB        1380            mov     a,r3
038D F4        1381            cpl     a
038E FA        1382            mov     r2,a
038F 52F1      1383            anl     _P0MDIN,a
0391           1384   ;        main.c:363: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0391 EB        1385            mov     a,r3
0392 42D4      1386            orl     _P0SKIP,a
0394           1387   ;        main.c:364: break;
0394           1388   ;        main.c:365: case 1:
0394 8000      1389            sjmp    L017005?
0396           1390   L017002?:
0396           1391   ;        main.c:366: P1MDIN &= (~mask); // Set pin as analog input
0396 EB        1392            mov     a,r3
0397 F4        1393            cpl     a
0398 FA        1394            mov     r2,a
0399 52F2      1395            anl     _P1MDIN,a
039B           1396   ;        main.c:367: P1SKIP |= mask; // Skip Crossbar decoding for this pin
039B EB        1397            mov     a,r3
039C 42D5      1398            orl     _P1SKIP,a
039E           1399   ;        main.c:368: break;
039E           1400   ;        main.c:369: case 2:
039E 8000      1401            sjmp    L017005?
03A0           1402   L017003?:
03A0           1403   ;        main.c:370: P2MDIN &= (~mask); // Set pin as analog input
03A0 EB        1404            mov     a,r3
03A1 F4        1405            cpl     a
03A2 FA        1406            mov     r2,a
03A3 52F3      1407            anl     _P2MDIN,a
03A5           1408   ;        main.c:371: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03A5 EB        1409            mov     a,r3
03A6 42CC      1410            orl     _P2SKIP,a
03A8           1411   ;        main.c:375: }
03A8           1412   L017005?:
03A8           1413   ;        main.c:376: SFRPAGE = 0x00;
03A8 75A700    1414            mov     _SFRPAGE,#0x00
03AB 22        1415            ret
03AC           1416   ;------------------------------------------------------------
03AC           1417   ;Allocation info for local variables in function 'ADC_at_Pin'
03AC           1418   ;------------------------------------------------------------
03AC           1419   ;pin                       Allocated to registers 
03AC           1420   ;------------------------------------------------------------
03AC           1421   ;        main.c:379: unsigned int ADC_at_Pin(unsigned char pin)
03AC           1422   ;        -----------------------------------------
03AC           1423   ;         function ADC_at_Pin
03AC           1424   ;        -----------------------------------------
03AC           1425   _ADC_at_Pin:
03AC 8582BB    1426            mov     _ADC0MX,dpl
03AF           1427   ;        main.c:382: ADINT = 0;
03AF C2ED      1428            clr     _ADINT
03B1           1429   ;        main.c:383: ADBUSY = 1;     // Convert voltage at the pin
03B1 D2EC      1430            setb    _ADBUSY
03B3           1431   ;        main.c:384: while (!ADINT); // Wait for conversion to complete
03B3           1432   L018001?:
03B3 30ED00    1433            jnb     _ADINT,L018001?
03B6           1434   ;        main.c:385: return (ADC0);
03B6 85BD82    1435            mov     dpl,_ADC0
03B9 85BE83    1436            mov     dph,(_ADC0 >> 8)
03BC 22        1437            ret
03BD           1438   ;------------------------------------------------------------
03BD           1439   ;Allocation info for local variables in function 'Timer5_ISR'
03BD           1440   ;------------------------------------------------------------
03BD           1441   ;------------------------------------------------------------
03BD           1442   ;        main.c:388: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03BD           1443   ;        -----------------------------------------
03BD           1444   ;         function Timer5_ISR
03BD           1445   ;        -----------------------------------------
03BD           1446   _Timer5_ISR:
03BD C0E0      1447            push    acc
03BF C002      1448            push    ar2
03C1 C003      1449            push    ar3
03C3 C0D0      1450            push    psw
03C5 75D000    1451            mov     psw,#0x00
03C8           1452   ;        main.c:390: SFRPAGE=0x10;
03C8 75A710    1453            mov     _SFRPAGE,#0x10
03CB           1454   ;        main.c:391: TF5H = 0; // Clear Timer5 interrupt flag
03CB C2C7      1455            clr     _TF5H
03CD           1456   ;        main.c:392: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
03CD 75D2C4    1457            mov     _TMR5RL,#0xC4
03D0 75D3FF    1458            mov     (_TMR5RL >> 8),#0xFF
03D3           1459   ;        main.c:394: pwm_counter++; 
03D3 0568      1460            inc     _pwm_counter
03D5 E4        1461            clr     a
03D6 B56880    1462            cjne    a,_pwm_counter,L019022?
03D9 0569      1463            inc     (_pwm_counter + 1)
03DB           1464   L019022?:
03DB           1465   ;        main.c:395: if (pwm_counter >= 1000){
03DB C3        1466            clr     c
03DC E568      1467            mov     a,_pwm_counter
03DE 94E8      1468            subb    a,#0xE8
03E0 E569      1469            mov     a,(_pwm_counter + 1)
03E2 9403      1470            subb    a,#0x03
03E4 4000      1471            jc      L019002?
03E6           1472   ;        main.c:396: pwm_counter = 0; 
03E6 E4        1473            clr     a
03E7 F568      1474            mov     _pwm_counter,a
03E9 F569      1475            mov     (_pwm_counter + 1),a
03EB           1476   L019002?:
03EB           1477   ;        main.c:399: if (pwm_counter < pwm_left){
03EB AA28      1478            mov     r2,_pwm_left
03ED 7B00      1479            mov     r3,#0x00
03EF C3        1480            clr     c
03F0 E568      1481            mov     a,_pwm_counter
03F2 9A        1482            subb    a,r2
03F3 E569      1483            mov     a,(_pwm_counter + 1)
03F5 9B        1484            subb    a,r3
03F6 5000      1485            jnc     L019007?
03F8           1486   ;        main.c:400: if(L_motor_dir){
03F8 E5A8      1487            mov     a,_L_motor_dir
03FA 6000      1488            jz      L019004?
03FC           1489   ;        main.c:401: L_bridge_1 = 1; 
03FC D2A1      1490            setb    _P2_1
03FE           1491   ;        main.c:402: L_bridge_2 = 0; 
03FE C2A2      1492            clr     _P2_2
0400 8000      1493            sjmp    L019008?
0402           1494   L019004?:
0402           1495   ;        main.c:405: L_bridge_1 = 0; 
0402 C2A1      1496            clr     _P2_1
0404           1497   ;        main.c:406: L_bridge_2 = 1; 
0404 D2A2      1498            setb    _P2_2
0406 8000      1499            sjmp    L019008?
0408           1500   L019007?:
0408           1501   ;        main.c:410: L_bridge_1 = 0; 
0408 C2A1      1502            clr     _P2_1
040A           1503   ;        main.c:411: L_bridge_1 = 0; 
040A C2A1      1504            clr     _P2_1
040C           1505   L019008?:
040C           1506   ;        main.c:413: if (pwm_counter < pwm_right){
040C AAE8      1507            mov     r2,_pwm_right
040E 7B00      1508            mov     r3,#0x00
0410 C3        1509            clr     c
0411 E568      1510            mov     a,_pwm_counter
0413 9A        1511            subb    a,r2
0414 E569      1512            mov     a,(_pwm_counter + 1)
0416 9B        1513            subb    a,r3
0417 5000      1514            jnc     L019013?
0419           1515   ;        main.c:414: if (R_motor_dir){
0419 E568      1516            mov     a,_R_motor_dir
041B 6000      1517            jz      L019010?
041D           1518   ;        main.c:415: R_bridge_1 = 1; 
041D D2A4      1519            setb    _P2_4
041F           1520   ;        main.c:416: R_bridge_2 = 0;
041F C2A3      1521            clr     _P2_3
0421 8000      1522            sjmp    L019015?
0423           1523   L019010?:
0423           1524   ;        main.c:419: R_bridge_1 = 0; 
0423 C2A4      1525            clr     _P2_4
0425           1526   ;        main.c:420: R_bridge_2 = 1;
0425 D2A3      1527            setb    _P2_3
0427 8000      1528            sjmp    L019015?
0429           1529   L019013?:
0429           1530   ;        main.c:424: R_bridge_1 = 0; 
0429 C2A4      1531            clr     _P2_4
042B           1532   ;        main.c:425: R_bridge_2 = 0; 
042B C2A3      1533            clr     _P2_3
042D           1534   L019015?:
042D D0D0      1535            pop     psw
042F D003      1536            pop     ar3
0431 D002      1537            pop     ar2
0433 D0E0      1538            pop     acc
0435 32        1539            reti
0436           1540   ;        eliminated unneeded push/pop dpl
0436           1541   ;        eliminated unneeded push/pop dph
0436           1542   ;        eliminated unneeded push/pop b
0436           1543   ;------------------------------------------------------------
0436           1544   ;Allocation info for local variables in function 'MoveForward'
0436           1545   ;------------------------------------------------------------
0436           1546   ;speed                     Allocated to registers r2 r3 
0436           1547   ;------------------------------------------------------------
0436           1548   ;        main.c:429: void MoveForward (int speed)
0436           1549   ;        -----------------------------------------
0436           1550   ;         function MoveForward
0436           1551   ;        -----------------------------------------
0436           1552   _MoveForward:
0436 AA82      1553            mov     r2,dpl
0438           1554   ;        main.c:431: pwm_left = speed * 10; 
0438 EA        1555            mov     a,r2
0439 75F00A    1556            mov     b,#0x0A
043C A4        1557            mul     ab
043D FA        1558            mov     r2,a
043E 8A28      1559            mov     _pwm_left,r2
0440           1560   ;        main.c:432: pwm_right = speed * 10; 
0440 8AE8      1561            mov     _pwm_right,r2
0442           1562   ;        main.c:433: L_motor_dir = 1; 
0442 75A801    1563            mov     _L_motor_dir,#0x01
0445           1564   ;        main.c:434: R_motor_dir = 1; 
0445 756801    1565            mov     _R_motor_dir,#0x01
0448 22        1566            ret
0449           1567   ;------------------------------------------------------------
0449           1568   ;Allocation info for local variables in function 'MoveBackward'
0449           1569   ;------------------------------------------------------------
0449           1570   ;speed                     Allocated to registers r2 r3 
0449           1571   ;------------------------------------------------------------
0449           1572   ;        main.c:437: void MoveBackward (int speed)
0449           1573   ;        -----------------------------------------
0449           1574   ;         function MoveBackward
0449           1575   ;        -----------------------------------------
0449           1576   _MoveBackward:
0449 AA82      1577            mov     r2,dpl
044B           1578   ;        main.c:439: pwm_left = speed * 10; 
044B EA        1579            mov     a,r2
044C 75F00A    1580            mov     b,#0x0A
044F A4        1581            mul     ab
0450 FA        1582            mov     r2,a
0451 8A28      1583            mov     _pwm_left,r2
0453           1584   ;        main.c:440: pwm_right = speed * 10; 
0453 8AE8      1585            mov     _pwm_right,r2
0455           1586   ;        main.c:441: L_motor_dir = 0; 
0455 75A800    1587            mov     _L_motor_dir,#0x00
0458           1588   ;        main.c:442: R_motor_dir = 0;  
0458 756800    1589            mov     _R_motor_dir,#0x00
045B 22        1590            ret
045C           1591   ;------------------------------------------------------------
045C           1592   ;Allocation info for local variables in function 'TurnRight'
045C           1593   ;------------------------------------------------------------
045C           1594   ;speed                     Allocated to registers r2 r3 
045C           1595   ;------------------------------------------------------------
045C           1596   ;        main.c:445: void TurnRight (int speed)
045C           1597   ;        -----------------------------------------
045C           1598   ;         function TurnRight
045C           1599   ;        -----------------------------------------
045C           1600   _TurnRight:
045C AA82      1601            mov     r2,dpl
045E           1602   ;        main.c:447: pwm_left = speed * 10; 
045E EA        1603            mov     a,r2
045F 75F00A    1604            mov     b,#0x0A
0462 A4        1605            mul     ab
0463 FA        1606            mov     r2,a
0464 8A28      1607            mov     _pwm_left,r2
0466           1608   ;        main.c:448: pwm_right = speed * 10; 
0466 8AE8      1609            mov     _pwm_right,r2
0468           1610   ;        main.c:449: L_motor_dir = 0; 
0468 75A800    1611            mov     _L_motor_dir,#0x00
046B           1612   ;        main.c:450: R_motor_dir = 1; 
046B 756801    1613            mov     _R_motor_dir,#0x01
046E 22        1614            ret
046F           1615   ;------------------------------------------------------------
046F           1616   ;Allocation info for local variables in function 'TurnLeft'
046F           1617   ;------------------------------------------------------------
046F           1618   ;speed                     Allocated to registers r2 r3 
046F           1619   ;------------------------------------------------------------
046F           1620   ;        main.c:453: void TurnLeft (int speed)
046F           1621   ;        -----------------------------------------
046F           1622   ;         function TurnLeft
046F           1623   ;        -----------------------------------------
046F           1624   _TurnLeft:
046F AA82      1625            mov     r2,dpl
0471           1626   ;        main.c:455: pwm_left = speed * 10; 
0471 EA        1627            mov     a,r2
0472 75F00A    1628            mov     b,#0x0A
0475 A4        1629            mul     ab
0476 FA        1630            mov     r2,a
0477 8A28      1631            mov     _pwm_left,r2
0479           1632   ;        main.c:456: pwm_right = speed * 10; 
0479 8AE8      1633            mov     _pwm_right,r2
047B           1634   ;        main.c:457: L_motor_dir = 1; 
047B 75A801    1635            mov     _L_motor_dir,#0x01
047E           1636   ;        main.c:458: R_motor_dir = 0; 
047E 756800    1637            mov     _R_motor_dir,#0x00
0481 22        1638            ret
0482           1639   ;------------------------------------------------------------
0482           1640   ;Allocation info for local variables in function 'main'
0482           1641   ;------------------------------------------------------------
0482           1642   ;cnt                       Allocated to registers 
0482           1643   ;c                         Allocated to registers r4 
0482           1644   ;vx_int                    Allocated to registers 
0482           1645   ;vy_int                    Allocated to registers 
0482           1646   ;vx                        Allocated to registers 
0482           1647   ;vy                        Allocated to registers 
0482           1648   ;threshold                 Allocated to registers 
0482           1649   ;------------------------------------------------------------
0482           1650   ;        main.c:461: void main (void)
0482           1651   ;        -----------------------------------------
0482           1652   ;         function main
0482           1653   ;        -----------------------------------------
0482           1654   _main:
0482           1655   ;        main.c:470: waitms(500);
0482 9001F4    1656            mov     dptr,#0x01F4
0485 120000    1657            lcall   _waitms
0488           1658   ;        main.c:471: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0488 7480      1659            mov     a,#__str_3
048A C0E0      1660            push    acc
048C 74C6      1661            mov     a,#(__str_3 >> 8)
048E C0E0      1662            push    acc
0490 7480      1663            mov     a,#0x80
0492 C0E0      1664            push    acc
0494 120000    1665            lcall   _printf
0497 1581      1666            dec     sp
0499 1581      1667            dec     sp
049B 1581      1668            dec     sp
049D           1669   ;        main.c:472: UART1_Init(9600);
049D 902580    1670            mov     dptr,#0x2580
04A0 E4        1671            clr     a
04A1 F5F0      1672            mov     b,a
04A3 120000    1673            lcall   _UART1_Init
04A6           1674   ;        main.c:474: ReceptionOff();
04A6 120000    1675            lcall   _ReceptionOff
04A9           1676   ;        main.c:477: SendATCommand("AT+VER\r\n");
04A9 90C6C0    1677            mov     dptr,#__str_4
04AC 75F080    1678            mov     b,#0x80
04AF 120000    1679            lcall   _SendATCommand
04B2           1680   ;        main.c:478: SendATCommand("AT+BAUD\r\n");
04B2 90C700    1681            mov     dptr,#__str_5
04B5 75F080    1682            mov     b,#0x80
04B8 120000    1683            lcall   _SendATCommand
04BB           1684   ;        main.c:479: SendATCommand("AT+RFID\r\n");
04BB 90C740    1685            mov     dptr,#__str_6
04BE 75F080    1686            mov     b,#0x80
04C1 120000    1687            lcall   _SendATCommand
04C4           1688   ;        main.c:480: SendATCommand("AT+DVID\r\n");
04C4 90C780    1689            mov     dptr,#__str_7
04C7 75F080    1690            mov     b,#0x80
04CA 120000    1691            lcall   _SendATCommand
04CD           1692   ;        main.c:481: SendATCommand("AT+RFC\r\n");
04CD 90C7C0    1693            mov     dptr,#__str_8
04D0 75F080    1694            mov     b,#0x80
04D3 120000    1695            lcall   _SendATCommand
04D6           1696   ;        main.c:482: SendATCommand("AT+POWE\r\n");
04D6 90C800    1697            mov     dptr,#__str_9
04D9 75F080    1698            mov     b,#0x80
04DC 120000    1699            lcall   _SendATCommand
04DF           1700   ;        main.c:483: SendATCommand("AT+CLSS\r\n");
04DF 90C840    1701            mov     dptr,#__str_10
04E2 75F080    1702            mov     b,#0x80
04E5 120000    1703            lcall   _SendATCommand
04E8           1704   ;        main.c:484: SendATCommand("AT+DVIDABBA\r\n");  
04E8 90C880    1705            mov     dptr,#__str_11
04EB 75F080    1706            mov     b,#0x80
04EE 120000    1707            lcall   _SendATCommand
04F1           1708   ;        main.c:487: L_bridge_1 = 0; 
04F1 C2A1      1709            clr     _P2_1
04F3           1710   ;        main.c:488: L_bridge_2 = 0; 
04F3 C2A2      1711            clr     _P2_2
04F5           1712   ;        main.c:489: R_bridge_1 = 0; 
04F5 C2A4      1713            clr     _P2_4
04F7           1714   ;        main.c:490: R_bridge_2 = 0; 
04F7 C2A3      1715            clr     _P2_3
04F9           1716   ;        main.c:493: while(1)
04F9 7A00      1717            mov     r2,#0x00
04FB 7B00      1718            mov     r3,#0x00
04FD           1719   L024009?:
04FD           1720   ;        main.c:495: Set_Pin_Output(0x24);
04FD 758224    1721            mov     dpl,#0x24
0500 C002      1722            push    ar2
0502 C003      1723            push    ar3
0504 120000    1724            lcall   _Set_Pin_Output
0507           1725   ;        main.c:496: Set_Pin_Output(0x23);
0507 758223    1726            mov     dpl,#0x23
050A 120000    1727            lcall   _Set_Pin_Output
050D           1728   ;        main.c:497: Set_Pin_Output(0x22);
050D 758222    1729            mov     dpl,#0x22
0510 120000    1730            lcall   _Set_Pin_Output
0513           1731   ;        main.c:498: Set_Pin_Output(0x21);
0513 758221    1732            mov     dpl,#0x21
0516 120000    1733            lcall   _Set_Pin_Output
0519           1734   ;        main.c:500: MoveForward(100);
0519 900064    1735            mov     dptr,#0x0064
051C 120000    1736            lcall   _MoveForward
051F           1737   ;        main.c:501: waitms(2000);
051F 9007D0    1738            mov     dptr,#0x07D0
0522 120000    1739            lcall   _waitms
0525           1740   ;        main.c:502: MoveForward(50);
0525 900032    1741            mov     dptr,#0x0032
0528 120000    1742            lcall   _MoveForward
052B           1743   ;        main.c:503: waitms(2000);
052B 9007D0    1744            mov     dptr,#0x07D0
052E 120000    1745            lcall   _waitms
0531           1746   ;        main.c:507: if(RXU1()) // Something has arrived
0531 120000    1747            lcall   _RXU1
0534 D003      1748            pop     ar3
0536 D002      1749            pop     ar2
0538 5000      1750            jnc     L024009?
053A           1751   ;        main.c:509: c=getchar1();
053A C002      1752            push    ar2
053C C003      1753            push    ar3
053E 120000    1754            lcall   _getchar1
0541 AC82      1755            mov     r4,dpl
0543 D003      1756            pop     ar3
0545 D002      1757            pop     ar2
0547           1758   ;        main.c:511: if(c=='!') // Master is sending message
0547 BC2100    1759            cjne    r4,#0x21,L024004?
054A           1760   ;        main.c:513: getstr1(buff, sizeof(buff)-1);
054A 752813    1761            mov     _getstr1_PARM_2,#0x13
054D 9046E8    1762            mov     dptr,#_buff
0550 75F040    1763            mov     b,#0x40
0553 C002      1764            push    ar2
0555 C003      1765            push    ar3
0557 120000    1766            lcall   _getstr1
055A           1767   ;        main.c:523: sscanf(buff, "%03d,%03d", vx_int, vy_int);
055A E4        1768            clr     a
055B C0E0      1769            push    acc
055D C0E0      1770            push    acc
055F E4        1771            clr     a
0560 C0E0      1772            push    acc
0562 C0E0      1773            push    acc
0564 7440      1774            mov     a,#__str_12
0566 C0E0      1775            push    acc
0568 74C9      1776            mov     a,#(__str_12 >> 8)
056A C0E0      1777            push    acc
056C 7480      1778            mov     a,#0x80
056E C0E0      1779            push    acc
0570 74E8      1780            mov     a,#_buff
0572 C0E0      1781            push    acc
0574 7446      1782            mov     a,#(_buff >> 8)
0576 C0E0      1783            push    acc
0578 7440      1784            mov     a,#0x40
057A C0E0      1785            push    acc
057C 120000    1786            lcall   _sscanf
057F E581      1787            mov     a,sp
0581 24F6      1788            add     a,#0xf6
0583 F581      1789            mov     sp,a
0585           1790   ;        main.c:527: printf("Joystick Received: Vx = %.3f, Vy = %.3f", vx, vy);
0585 E4        1791            clr     a
0586 C0E0      1792            push    acc
0588 C0E0      1793            push    acc
058A C0E0      1794            push    acc
058C C0E0      1795            push    acc
058E E4        1796            clr     a
058F C0E0      1797            push    acc
0591 C0E0      1798            push    acc
0593 C0E0      1799            push    acc
0595 C0E0      1800            push    acc
0597 74C0      1801            mov     a,#__str_13
0599 C0E0      1802            push    acc
059B 74C9      1803            mov     a,#(__str_13 >> 8)
059D C0E0      1804            push    acc
059F 7480      1805            mov     a,#0x80
05A1 C0E0      1806            push    acc
05A3 120000    1807            lcall   _printf
05A6 E581      1808            mov     a,sp
05A8 24F5      1809            add     a,#0xf5
05AA F581      1810            mov     sp,a
05AC D003      1811            pop     ar3
05AE D002      1812            pop     ar2
05B0 020000    1813            ljmp    L024009?
05B3           1814   L024004?:
05B3           1815   ;        main.c:543: else if(c=='@') // Master wants slave data
05B3 BC4000    1816            cjne    r4,#0x40,L024020?
05B6 8000      1817            sjmp    L024021?
05B8           1818   L024020?:
05B8 020000    1819            ljmp    L024009?
05BB           1820   L024021?:
05BB           1821   ;        main.c:545: sprintf(buff, "%05u\n", cnt);
05BB C002      1822            push    ar2
05BD C003      1823            push    ar3
05BF C002      1824            push    ar2
05C1 C003      1825            push    ar3
05C3 7480      1826            mov     a,#__str_14
05C5 C0E0      1827            push    acc
05C7 74CA      1828            mov     a,#(__str_14 >> 8)
05C9 C0E0      1829            push    acc
05CB 7480      1830            mov     a,#0x80
05CD C0E0      1831            push    acc
05CF 74E8      1832            mov     a,#_buff
05D1 C0E0      1833            push    acc
05D3 7446      1834            mov     a,#(_buff >> 8)
05D5 C0E0      1835            push    acc
05D7 7440      1836            mov     a,#0x40
05D9 C0E0      1837            push    acc
05DB 120000    1838            lcall   _sprintf
05DE E581      1839            mov     a,sp
05E0 24F8      1840            add     a,#0xf8
05E2 F581      1841            mov     sp,a
05E4 D003      1842            pop     ar3
05E6 D002      1843            pop     ar2
05E8           1844   ;        main.c:546: cnt++;
05E8 0A        1845            inc     r2
05E9 BA0000    1846            cjne    r2,#0x00,L024022?
05EC 0B        1847            inc     r3
05ED           1848   L024022?:
05ED           1849   ;        main.c:547: waitms(5); // The radio seems to need this delay...
05ED 900005    1850            mov     dptr,#0x0005
05F0 C002      1851            push    ar2
05F2 C003      1852            push    ar3
05F4 120000    1853            lcall   _waitms
05F7           1854   ;        main.c:548: sendstr1(buff);
05F7 9046E8    1855            mov     dptr,#_buff
05FA 75F040    1856            mov     b,#0x40
05FD 120000    1857            lcall   _sendstr1
0600 D003      1858            pop     ar3
0602 D002      1859            pop     ar2
0604 020000    1860            ljmp    L024009?
0607           1861            rseg R_CSEG
0607           1862   
0000           1863            rseg R_XINIT
0000           1864   
0000           1865            rseg R_CONST
0000           1866   __str_0:
0000 436F6D6D  1867            db 'Command: %s'
     616E643A
     202573
000B 00        1868            db 0x00
000C           1869   __str_1:
000C 52657370  1870            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1871            db 0x0D
0019 0A        1872            db 0x0A
001A 00        1873            db 0x00
001B           1874   __str_2:
001B 41542B44  1875            db 'AT+DVID0000'
     56494430
     303030
0026 0D        1876            db 0x0D
0027 0A        1877            db 0x0A
0028 00        1878            db 0x00
0029           1879   __str_3:
0029 0D        1880            db 0x0D
002A 0A        1881            db 0x0A
002B 45464D38  1882            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        1883            db 0x0D
0047 0A        1884            db 0x0A
0048 00        1885            db 0x00
0049           1886   __str_4:
0049 41542B56  1887            db 'AT+VER'
     4552
004F 0D        1888            db 0x0D
0050 0A        1889            db 0x0A
0051 00        1890            db 0x00
0052           1891   __str_5:
0052 41542B42  1892            db 'AT+BAUD'
     415544
0059 0D        1893            db 0x0D
005A 0A        1894            db 0x0A
005B 00        1895            db 0x00
005C           1896   __str_6:
005C 41542B52  1897            db 'AT+RFID'
     464944
0063 0D        1898            db 0x0D
0064 0A        1899            db 0x0A
0065 00        1900            db 0x00
0066           1901   __str_7:
0066 41542B44  1902            db 'AT+DVID'
     564944
006D 0D        1903            db 0x0D
006E 0A        1904            db 0x0A
006F 00        1905            db 0x00
0070           1906   __str_8:
0070 41542B52  1907            db 'AT+RFC'
     4643
0076 0D        1908            db 0x0D
0077 0A        1909            db 0x0A
0078 00        1910            db 0x00
0079           1911   __str_9:
0079 41542B50  1912            db 'AT+POWE'
     4F5745
0080 0D        1913            db 0x0D
0081 0A        1914            db 0x0A
0082 00        1915            db 0x00
0083           1916   __str_10:
0083 41542B43  1917            db 'AT+CLSS'
     4C5353
008A 0D        1918            db 0x0D
008B 0A        1919            db 0x0A
008C 00        1920            db 0x00
008D           1921   __str_11:
008D 41542B44  1922            db 'AT+DVIDABBA'
     56494441
     424241
0098 0D        1923            db 0x0D
0099 0A        1924            db 0x0A
009A 00        1925            db 0x00
009B           1926   __str_12:
009B 25303364  1927            db '%03d,%03d'
     2C253033
     64
00A4 00        1928            db 0x00
00A5           1929   __str_13:
00A5 4A6F7973  1930            db 'Joystick Received: Vx = %.3f, Vy = %.3f'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     252E3366
     2C205679
     203D2025
     2E3366
00CC 00        1931            db 0x00
00CD           1932   __str_14:
00CD 25303575  1933            db '%05u'
00D1 0A        1934            db 0x0A
00D2 00        1935            db 0x00
00D3           1936   
0096           1937            CSEG
0096           1938   
0096           1939   end
