0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 16 00:36:26 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _TurnRight
0000             28            public _TurnLeft
0000             29            public _MovBackward
0000             30            public _MoveForward
0000             31            public _Set_Pin_Output
0000             32            public _ReceptionOff
0000             33            public _SendATCommand
0000             34            public _waitms_or_RI1
0000             35            public _RXU1
0000             36            public _getstr1
0000             37            public _getchar1_with_timeout
0000             38            public _getchar1
0000             39            public _sendstr1
0000             40            public _putchar1
0000             41            public _UART1_Init
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public __c51_external_startup
0000             45            public _buff
0000             46            public _getstr1_PARM_2
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _ACC            DATA 0xe0
0000             51   _ADC0ASAH       DATA 0xb6
0000             52   _ADC0ASAL       DATA 0xb5
0000             53   _ADC0ASCF       DATA 0xa1
0000             54   _ADC0ASCT       DATA 0xc7
0000             55   _ADC0CF0        DATA 0xbc
0000             56   _ADC0CF1        DATA 0xb9
0000             57   _ADC0CF2        DATA 0xdf
0000             58   _ADC0CN0        DATA 0xe8
0000             59   _ADC0CN1        DATA 0xb2
0000             60   _ADC0CN2        DATA 0xb3
0000             61   _ADC0GTH        DATA 0xc4
0000             62   _ADC0GTL        DATA 0xc3
0000             63   _ADC0H          DATA 0xbe
0000             64   _ADC0L          DATA 0xbd
0000             65   _ADC0LTH        DATA 0xc6
0000             66   _ADC0LTL        DATA 0xc5
0000             67   _ADC0MX         DATA 0xbb
0000             68   _B              DATA 0xf0
0000             69   _CKCON0         DATA 0x8e
0000             70   _CKCON1         DATA 0xa6
0000             71   _CLEN0          DATA 0xc6
0000             72   _CLIE0          DATA 0xc7
0000             73   _CLIF0          DATA 0xe8
0000             74   _CLKSEL         DATA 0xa9
0000             75   _CLOUT0         DATA 0xd1
0000             76   _CLU0CF         DATA 0xb1
0000             77   _CLU0FN         DATA 0xaf
0000             78   _CLU0MX         DATA 0x84
0000             79   _CLU1CF         DATA 0xb3
0000             80   _CLU1FN         DATA 0xb2
0000             81   _CLU1MX         DATA 0x85
0000             82   _CLU2CF         DATA 0xb6
0000             83   _CLU2FN         DATA 0xb5
0000             84   _CLU2MX         DATA 0x91
0000             85   _CLU3CF         DATA 0xbf
0000             86   _CLU3FN         DATA 0xbe
0000             87   _CLU3MX         DATA 0xae
0000             88   _CMP0CN0        DATA 0x9b
0000             89   _CMP0CN1        DATA 0x99
0000             90   _CMP0MD         DATA 0x9d
0000             91   _CMP0MX         DATA 0x9f
0000             92   _CMP1CN0        DATA 0xbf
0000             93   _CMP1CN1        DATA 0xac
0000             94   _CMP1MD         DATA 0xab
0000             95   _CMP1MX         DATA 0xaa
0000             96   _CRC0CN0        DATA 0xce
0000             97   _CRC0CN1        DATA 0x86
0000             98   _CRC0CNT        DATA 0xd3
0000             99   _CRC0DAT        DATA 0xcb
0000            100   _CRC0FLIP       DATA 0xcf
0000            101   _CRC0IN         DATA 0xca
0000            102   _CRC0ST         DATA 0xd2
0000            103   _DAC0CF0        DATA 0x91
0000            104   _DAC0CF1        DATA 0x92
0000            105   _DAC0H          DATA 0x85
0000            106   _DAC0L          DATA 0x84
0000            107   _DAC1CF0        DATA 0x93
0000            108   _DAC1CF1        DATA 0x94
0000            109   _DAC1H          DATA 0x8a
0000            110   _DAC1L          DATA 0x89
0000            111   _DAC2CF0        DATA 0x95
0000            112   _DAC2CF1        DATA 0x96
0000            113   _DAC2H          DATA 0x8c
0000            114   _DAC2L          DATA 0x8b
0000            115   _DAC3CF0        DATA 0x9a
0000            116   _DAC3CF1        DATA 0x9c
0000            117   _DAC3H          DATA 0x8e
0000            118   _DAC3L          DATA 0x8d
0000            119   _DACGCF0        DATA 0x88
0000            120   _DACGCF1        DATA 0x98
0000            121   _DACGCF2        DATA 0xa2
0000            122   _DERIVID        DATA 0xad
0000            123   _DEVICEID       DATA 0xb5
0000            124   _DPH            DATA 0x83
0000            125   _DPL            DATA 0x82
0000            126   _EIE1           DATA 0xe6
0000            127   _EIE2           DATA 0xf3
0000            128   _EIP1           DATA 0xbb
0000            129   _EIP1H          DATA 0xee
0000            130   _EIP2           DATA 0xed
0000            131   _EIP2H          DATA 0xf6
0000            132   _EMI0CN         DATA 0xe7
0000            133   _FLKEY          DATA 0xb7
0000            134   _HFO0CAL        DATA 0xc7
0000            135   _HFO1CAL        DATA 0xd6
0000            136   _HFOCN          DATA 0xef
0000            137   _I2C0ADM        DATA 0xff
0000            138   _I2C0CN0        DATA 0xba
0000            139   _I2C0DIN        DATA 0xbc
0000            140   _I2C0DOUT       DATA 0xbb
0000            141   _I2C0FCN0       DATA 0xad
0000            142   _I2C0FCN1       DATA 0xab
0000            143   _I2C0FCT        DATA 0xf5
0000            144   _I2C0SLAD       DATA 0xbd
0000            145   _I2C0STAT       DATA 0xb9
0000            146   _IE             DATA 0xa8
0000            147   _IP             DATA 0xb8
0000            148   _IPH            DATA 0xf2
0000            149   _IT01CF         DATA 0xe4
0000            150   _LFO0CN         DATA 0xb1
0000            151   _P0             DATA 0x80
0000            152   _P0MASK         DATA 0xfe
0000            153   _P0MAT          DATA 0xfd
0000            154   _P0MDIN         DATA 0xf1
0000            155   _P0MDOUT        DATA 0xa4
0000            156   _P0SKIP         DATA 0xd4
0000            157   _P1             DATA 0x90
0000            158   _P1MASK         DATA 0xee
0000            159   _P1MAT          DATA 0xed
0000            160   _P1MDIN         DATA 0xf2
0000            161   _P1MDOUT        DATA 0xa5
0000            162   _P1SKIP         DATA 0xd5
0000            163   _P2             DATA 0xa0
0000            164   _P2MASK         DATA 0xfc
0000            165   _P2MAT          DATA 0xfb
0000            166   _P2MDIN         DATA 0xf3
0000            167   _P2MDOUT        DATA 0xa6
0000            168   _P2SKIP         DATA 0xcc
0000            169   _P3             DATA 0xb0
0000            170   _P3MDIN         DATA 0xf4
0000            171   _P3MDOUT        DATA 0x9c
0000            172   _PCA0CENT       DATA 0x9e
0000            173   _PCA0CLR        DATA 0x9c
0000            174   _PCA0CN0        DATA 0xd8
0000            175   _PCA0CPH0       DATA 0xfc
0000            176   _PCA0CPH1       DATA 0xea
0000            177   _PCA0CPH2       DATA 0xec
0000            178   _PCA0CPH3       DATA 0xf5
0000            179   _PCA0CPH4       DATA 0x85
0000            180   _PCA0CPH5       DATA 0xde
0000            181   _PCA0CPL0       DATA 0xfb
0000            182   _PCA0CPL1       DATA 0xe9
0000            183   _PCA0CPL2       DATA 0xeb
0000            184   _PCA0CPL3       DATA 0xf4
0000            185   _PCA0CPL4       DATA 0x84
0000            186   _PCA0CPL5       DATA 0xdd
0000            187   _PCA0CPM0       DATA 0xda
0000            188   _PCA0CPM1       DATA 0xdb
0000            189   _PCA0CPM2       DATA 0xdc
0000            190   _PCA0CPM3       DATA 0xae
0000            191   _PCA0CPM4       DATA 0xaf
0000            192   _PCA0CPM5       DATA 0xcc
0000            193   _PCA0H          DATA 0xfa
0000            194   _PCA0L          DATA 0xf9
0000            195   _PCA0MD         DATA 0xd9
0000            196   _PCA0POL        DATA 0x96
0000            197   _PCA0PWM        DATA 0xf7
0000            198   _PCON0          DATA 0x87
0000            199   _PCON1          DATA 0xcd
0000            200   _PFE0CN         DATA 0xc1
0000            201   _PRTDRV         DATA 0xf6
0000            202   _PSCTL          DATA 0x8f
0000            203   _PSTAT0         DATA 0xaa
0000            204   _PSW            DATA 0xd0
0000            205   _REF0CN         DATA 0xd1
0000            206   _REG0CN         DATA 0xc9
0000            207   _REVID          DATA 0xb6
0000            208   _RSTSRC         DATA 0xef
0000            209   _SBCON1         DATA 0x94
0000            210   _SBRLH1         DATA 0x96
0000            211   _SBRLL1         DATA 0x95
0000            212   _SBUF           DATA 0x99
0000            213   _SBUF0          DATA 0x99
0000            214   _SBUF1          DATA 0x92
0000            215   _SCON           DATA 0x98
0000            216   _SCON0          DATA 0x98
0000            217   _SCON1          DATA 0xc8
0000            218   _SFRPAGE        DATA 0xa7
0000            219   _SFRPGCN        DATA 0xbc
0000            220   _SFRSTACK       DATA 0xd7
0000            221   _SMB0ADM        DATA 0xd6
0000            222   _SMB0ADR        DATA 0xd7
0000            223   _SMB0CF         DATA 0xc1
0000            224   _SMB0CN0        DATA 0xc0
0000            225   _SMB0DAT        DATA 0xc2
0000            226   _SMB0FCN0       DATA 0xc3
0000            227   _SMB0FCN1       DATA 0xc4
0000            228   _SMB0FCT        DATA 0xef
0000            229   _SMB0RXLN       DATA 0xc5
0000            230   _SMB0TC         DATA 0xac
0000            231   _SMOD1          DATA 0x93
0000            232   _SP             DATA 0x81
0000            233   _SPI0CFG        DATA 0xa1
0000            234   _SPI0CKR        DATA 0xa2
0000            235   _SPI0CN0        DATA 0xf8
0000            236   _SPI0DAT        DATA 0xa3
0000            237   _SPI0FCN0       DATA 0x9a
0000            238   _SPI0FCN1       DATA 0x9b
0000            239   _SPI0FCT        DATA 0xf7
0000            240   _SPI0PCF        DATA 0xdf
0000            241   _TCON           DATA 0x88
0000            242   _TH0            DATA 0x8c
0000            243   _TH1            DATA 0x8d
0000            244   _TL0            DATA 0x8a
0000            245   _TL1            DATA 0x8b
0000            246   _TMOD           DATA 0x89
0000            247   _TMR2CN0        DATA 0xc8
0000            248   _TMR2CN1        DATA 0xfd
0000            249   _TMR2H          DATA 0xcf
0000            250   _TMR2L          DATA 0xce
0000            251   _TMR2RLH        DATA 0xcb
0000            252   _TMR2RLL        DATA 0xca
0000            253   _TMR3CN0        DATA 0x91
0000            254   _TMR3CN1        DATA 0xfe
0000            255   _TMR3H          DATA 0x95
0000            256   _TMR3L          DATA 0x94
0000            257   _TMR3RLH        DATA 0x93
0000            258   _TMR3RLL        DATA 0x92
0000            259   _TMR4CN0        DATA 0x98
0000            260   _TMR4CN1        DATA 0xff
0000            261   _TMR4H          DATA 0xa5
0000            262   _TMR4L          DATA 0xa4
0000            263   _TMR4RLH        DATA 0xa3
0000            264   _TMR4RLL        DATA 0xa2
0000            265   _TMR5CN0        DATA 0xc0
0000            266   _TMR5CN1        DATA 0xf1
0000            267   _TMR5H          DATA 0xd5
0000            268   _TMR5L          DATA 0xd4
0000            269   _TMR5RLH        DATA 0xd3
0000            270   _TMR5RLL        DATA 0xd2
0000            271   _UART0PCF       DATA 0xd9
0000            272   _UART1FCN0      DATA 0x9d
0000            273   _UART1FCN1      DATA 0xd8
0000            274   _UART1FCT       DATA 0xfa
0000            275   _UART1LIN       DATA 0x9e
0000            276   _UART1PCF       DATA 0xda
0000            277   _VDM0CN         DATA 0xff
0000            278   _WDTCN          DATA 0x97
0000            279   _XBR0           DATA 0xe1
0000            280   _XBR1           DATA 0xe2
0000            281   _XBR2           DATA 0xe3
0000            282   _XOSC0CN        DATA 0x86
0000            283   _DPTR           DATA 0x8382
0000            284   _TMR2RL         DATA 0xcbca
0000            285   _TMR3RL         DATA 0x9392
0000            286   _TMR4RL         DATA 0xa3a2
0000            287   _TMR5RL         DATA 0xd3d2
0000            288   _TMR0           DATA 0x8c8a
0000            289   _TMR1           DATA 0x8d8b
0000            290   _TMR2           DATA 0xcfce
0000            291   _TMR3           DATA 0x9594
0000            292   _TMR4           DATA 0xa5a4
0000            293   _TMR5           DATA 0xd5d4
0000            294   _SBRL1          DATA 0x9695
0000            295   _PCA0           DATA 0xfaf9
0000            296   _PCA0CP0        DATA 0xfcfb
0000            297   _PCA0CP1        DATA 0xeae9
0000            298   _PCA0CP2        DATA 0xeceb
0000            299   _PCA0CP3        DATA 0xf5f4
0000            300   _PCA0CP4        DATA 0x8584
0000            301   _PCA0CP5        DATA 0xdedd
0000            302   _ADC0ASA        DATA 0xb6b5
0000            303   _ADC0GT         DATA 0xc4c3
0000            304   _ADC0           DATA 0xbebd
0000            305   _ADC0LT         DATA 0xc6c5
0000            306   _DAC0           DATA 0x8584
0000            307   _DAC1           DATA 0x8a89
0000            308   _DAC2           DATA 0x8c8b
0000            309   _DAC3           DATA 0x8e8d
0000            310   ;--------------------------------------------------------
0000            311   ; special function bits
0000            312   ;--------------------------------------------------------
0000            313   _ACC_0          BIT 0xe0
0000            314   _ACC_1          BIT 0xe1
0000            315   _ACC_2          BIT 0xe2
0000            316   _ACC_3          BIT 0xe3
0000            317   _ACC_4          BIT 0xe4
0000            318   _ACC_5          BIT 0xe5
0000            319   _ACC_6          BIT 0xe6
0000            320   _ACC_7          BIT 0xe7
0000            321   _TEMPE          BIT 0xe8
0000            322   _ADGN0          BIT 0xe9
0000            323   _ADGN1          BIT 0xea
0000            324   _ADWINT         BIT 0xeb
0000            325   _ADBUSY         BIT 0xec
0000            326   _ADINT          BIT 0xed
0000            327   _IPOEN          BIT 0xee
0000            328   _ADEN           BIT 0xef
0000            329   _B_0            BIT 0xf0
0000            330   _B_1            BIT 0xf1
0000            331   _B_2            BIT 0xf2
0000            332   _B_3            BIT 0xf3
0000            333   _B_4            BIT 0xf4
0000            334   _B_5            BIT 0xf5
0000            335   _B_6            BIT 0xf6
0000            336   _B_7            BIT 0xf7
0000            337   _C0FIF          BIT 0xe8
0000            338   _C0RIF          BIT 0xe9
0000            339   _C1FIF          BIT 0xea
0000            340   _C1RIF          BIT 0xeb
0000            341   _C2FIF          BIT 0xec
0000            342   _C2RIF          BIT 0xed
0000            343   _C3FIF          BIT 0xee
0000            344   _C3RIF          BIT 0xef
0000            345   _D1SRC0         BIT 0x88
0000            346   _D1SRC1         BIT 0x89
0000            347   _D1AMEN         BIT 0x8a
0000            348   _D01REFSL       BIT 0x8b
0000            349   _D3SRC0         BIT 0x8c
0000            350   _D3SRC1         BIT 0x8d
0000            351   _D3AMEN         BIT 0x8e
0000            352   _D23REFSL       BIT 0x8f
0000            353   _D0UDIS         BIT 0x98
0000            354   _D1UDIS         BIT 0x99
0000            355   _D2UDIS         BIT 0x9a
0000            356   _D3UDIS         BIT 0x9b
0000            357   _EX0            BIT 0xa8
0000            358   _ET0            BIT 0xa9
0000            359   _EX1            BIT 0xaa
0000            360   _ET1            BIT 0xab
0000            361   _ES0            BIT 0xac
0000            362   _ET2            BIT 0xad
0000            363   _ESPI0          BIT 0xae
0000            364   _EA             BIT 0xaf
0000            365   _PX0            BIT 0xb8
0000            366   _PT0            BIT 0xb9
0000            367   _PX1            BIT 0xba
0000            368   _PT1            BIT 0xbb
0000            369   _PS0            BIT 0xbc
0000            370   _PT2            BIT 0xbd
0000            371   _PSPI0          BIT 0xbe
0000            372   _P0_0           BIT 0x80
0000            373   _P0_1           BIT 0x81
0000            374   _P0_2           BIT 0x82
0000            375   _P0_3           BIT 0x83
0000            376   _P0_4           BIT 0x84
0000            377   _P0_5           BIT 0x85
0000            378   _P0_6           BIT 0x86
0000            379   _P0_7           BIT 0x87
0000            380   _P1_0           BIT 0x90
0000            381   _P1_1           BIT 0x91
0000            382   _P1_2           BIT 0x92
0000            383   _P1_3           BIT 0x93
0000            384   _P1_4           BIT 0x94
0000            385   _P1_5           BIT 0x95
0000            386   _P1_6           BIT 0x96
0000            387   _P1_7           BIT 0x97
0000            388   _P2_0           BIT 0xa0
0000            389   _P2_1           BIT 0xa1
0000            390   _P2_2           BIT 0xa2
0000            391   _P2_3           BIT 0xa3
0000            392   _P2_4           BIT 0xa4
0000            393   _P2_5           BIT 0xa5
0000            394   _P2_6           BIT 0xa6
0000            395   _P3_0           BIT 0xb0
0000            396   _P3_1           BIT 0xb1
0000            397   _P3_2           BIT 0xb2
0000            398   _P3_3           BIT 0xb3
0000            399   _P3_4           BIT 0xb4
0000            400   _P3_7           BIT 0xb7
0000            401   _CCF0           BIT 0xd8
0000            402   _CCF1           BIT 0xd9
0000            403   _CCF2           BIT 0xda
0000            404   _CCF3           BIT 0xdb
0000            405   _CCF4           BIT 0xdc
0000            406   _CCF5           BIT 0xdd
0000            407   _CR             BIT 0xde
0000            408   _CF             BIT 0xdf
0000            409   _PARITY         BIT 0xd0
0000            410   _F1             BIT 0xd1
0000            411   _OV             BIT 0xd2
0000            412   _RS0            BIT 0xd3
0000            413   _RS1            BIT 0xd4
0000            414   _F0             BIT 0xd5
0000            415   _AC             BIT 0xd6
0000            416   _CY             BIT 0xd7
0000            417   _RI             BIT 0x98
0000            418   _TI             BIT 0x99
0000            419   _RB8            BIT 0x9a
0000            420   _TB8            BIT 0x9b
0000            421   _REN            BIT 0x9c
0000            422   _CE             BIT 0x9d
0000            423   _SMODE          BIT 0x9e
0000            424   _RI1            BIT 0xc8
0000            425   _TI1            BIT 0xc9
0000            426   _RBX1           BIT 0xca
0000            427   _TBX1           BIT 0xcb
0000            428   _REN1           BIT 0xcc
0000            429   _PERR1          BIT 0xcd
0000            430   _OVR1           BIT 0xce
0000            431   _SI             BIT 0xc0
0000            432   _ACK            BIT 0xc1
0000            433   _ARBLOST        BIT 0xc2
0000            434   _ACKRQ          BIT 0xc3
0000            435   _STO            BIT 0xc4
0000            436   _STA            BIT 0xc5
0000            437   _TXMODE         BIT 0xc6
0000            438   _MASTER         BIT 0xc7
0000            439   _SPIEN          BIT 0xf8
0000            440   _TXNF           BIT 0xf9
0000            441   _NSSMD0         BIT 0xfa
0000            442   _NSSMD1         BIT 0xfb
0000            443   _RXOVRN         BIT 0xfc
0000            444   _MODF           BIT 0xfd
0000            445   _WCOL           BIT 0xfe
0000            446   _SPIF           BIT 0xff
0000            447   _IT0            BIT 0x88
0000            448   _IE0            BIT 0x89
0000            449   _IT1            BIT 0x8a
0000            450   _IE1            BIT 0x8b
0000            451   _TR0            BIT 0x8c
0000            452   _TF0            BIT 0x8d
0000            453   _TR1            BIT 0x8e
0000            454   _TF1            BIT 0x8f
0000            455   _T2XCLK0        BIT 0xc8
0000            456   _T2XCLK1        BIT 0xc9
0000            457   _TR2            BIT 0xca
0000            458   _T2SPLIT        BIT 0xcb
0000            459   _TF2CEN         BIT 0xcc
0000            460   _TF2LEN         BIT 0xcd
0000            461   _TF2L           BIT 0xce
0000            462   _TF2H           BIT 0xcf
0000            463   _T4XCLK0        BIT 0x98
0000            464   _T4XCLK1        BIT 0x99
0000            465   _TR4            BIT 0x9a
0000            466   _T4SPLIT        BIT 0x9b
0000            467   _TF4CEN         BIT 0x9c
0000            468   _TF4LEN         BIT 0x9d
0000            469   _TF4L           BIT 0x9e
0000            470   _TF4H           BIT 0x9f
0000            471   _T5XCLK0        BIT 0xc0
0000            472   _T5XCLK1        BIT 0xc1
0000            473   _TR5            BIT 0xc2
0000            474   _T5SPLIT        BIT 0xc3
0000            475   _TF5CEN         BIT 0xc4
0000            476   _TF5LEN         BIT 0xc5
0000            477   _TF5L           BIT 0xc6
0000            478   _TF5H           BIT 0xc7
0000            479   _RIE            BIT 0xd8
0000            480   _RXTO0          BIT 0xd9
0000            481   _RXTO1          BIT 0xda
0000            482   _RFRQ           BIT 0xdb
0000            483   _TIE            BIT 0xdc
0000            484   _TXHOLD         BIT 0xdd
0000            485   _TXNF1          BIT 0xde
0000            486   _TFRQ           BIT 0xdf
0000            487   ;--------------------------------------------------------
0000            488   ; overlayable register banks
0000            489   ;--------------------------------------------------------
0000            490            rbank0 segment data overlay
0000            491   ;--------------------------------------------------------
0000            492   ; internal ram data
0000            493   ;--------------------------------------------------------
0000            494            rseg R_DSEG
0000            495   _getstr1_PARM_2:
0000            496            ds 1
0001            497   ;--------------------------------------------------------
0001            498   ; overlayable items in internal ram 
0001            499   ;--------------------------------------------------------
0000            500            rseg    R_OSEG
0000            501            rseg    R_OSEG
0000            502            rseg    R_OSEG
0000            503            rseg    R_OSEG
0000            504   ;--------------------------------------------------------
0000            505   ; indirectly addressable internal ram data
0000            506   ;--------------------------------------------------------
0000            507            rseg R_ISEG
0000            508   _buff:
0000            509            ds 20
0014            510   ;--------------------------------------------------------
0014            511   ; absolute internal ram data
0014            512   ;--------------------------------------------------------
0000            513            DSEG
0000            514   ;--------------------------------------------------------
0000            515   ; bit data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_BSEG
0000            518   ;--------------------------------------------------------
0000            519   ; paged external ram data
0000            520   ;--------------------------------------------------------
0000            521            rseg R_PSEG
0000            522   ;--------------------------------------------------------
0000            523   ; external ram data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_XSEG
0000            526   ;--------------------------------------------------------
0000            527   ; absolute external ram data
0000            528   ;--------------------------------------------------------
0000            529            XSEG
0000            530   ;--------------------------------------------------------
0000            531   ; external initialized ram data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_IXSEG
0000            534            rseg R_HOME
0000            535            rseg R_GSINIT
0000            536            rseg R_CSEG
0000            537   ;--------------------------------------------------------
0000            538   ; Reset entry point and interrupt vectors
0000            539   ;--------------------------------------------------------
0000            540            CSEG at 0x0000
0000 020000     541            ljmp    _crt0
0003            542   ;--------------------------------------------------------
0003            543   ; global & static initialisations
0003            544   ;--------------------------------------------------------
0000            545            rseg R_HOME
0000            546            rseg R_GSINIT
0000            547            rseg R_GSINIT
0000            548   ;--------------------------------------------------------
0000            549   ; data variables initialization
0000            550   ;--------------------------------------------------------
0000            551            rseg R_DINIT
0000            552            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            553   ;--------------------------------------------------------
0000            554   ; code
0000            555   ;--------------------------------------------------------
0000            556            rseg R_CSEG
0000            557   ;------------------------------------------------------------
0000            558   ;Allocation info for local variables in function '_c51_external_startup'
0000            559   ;------------------------------------------------------------
0000            560   ;------------------------------------------------------------
0000            561   ;        main.c:40: char _c51_external_startup (void)
0000            562   ;        -----------------------------------------
0000            563   ;         function _c51_external_startup
0000            564   ;        -----------------------------------------
0000            565   __c51_external_startup:
0000            566            using   0
0000            567   ;        main.c:43: SFRPAGE = 0x00;
0000 75A700     568            mov     _SFRPAGE,#0x00
0003            569   ;        main.c:44: WDTCN = 0xDE; //First key
0003 7597DE     570            mov     _WDTCN,#0xDE
0006            571   ;        main.c:45: WDTCN = 0xAD; //Second key
0006 7597AD     572            mov     _WDTCN,#0xAD
0009            573   ;        main.c:47: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     574            mov     _VDM0CN,#0x80
000C            575   ;        main.c:48: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     576            mov     _RSTSRC,#0x06
000F            577   ;        main.c:55: SFRPAGE = 0x10;
000F 75A710     578            mov     _SFRPAGE,#0x10
0012            579   ;        main.c:56: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     580            mov     _PFE0CN,#0x20
0015            581   ;        main.c:57: SFRPAGE = 0x00;
0015 75A700     582            mov     _SFRPAGE,#0x00
0018            583   ;        main.c:78: CLKSEL = 0x00;
0018 75A900     584            mov     _CLKSEL,#0x00
001B            585   ;        main.c:79: CLKSEL = 0x00;
001B 75A900     586            mov     _CLKSEL,#0x00
001E            587   ;        main.c:80: while ((CLKSEL & 0x80) == 0);
001E            588   L002001?:
001E E5A9       589            mov     a,_CLKSEL
0020 30E718     590            jnb     acc.7,L002001?
0023            591   ;        main.c:81: CLKSEL = 0x03;
0023 75A903     592            mov     _CLKSEL,#0x03
0026            593   ;        main.c:82: CLKSEL = 0x03;
0026 75A903     594            mov     _CLKSEL,#0x03
0029            595   ;        main.c:83: while ((CLKSEL & 0x80) == 0);
0029            596   L002004?:
0029 E5A9       597            mov     a,_CLKSEL
002B 30E798     598            jnb     acc.7,L002004?
002E            599   ;        main.c:88: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     600            orl     _P0MDOUT,#0x11
0031            601   ;        main.c:89: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     602            orl     _P2MDOUT,#0x01
0034            603   ;        main.c:90: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     604            mov     _XBR0,#0x01
0037            605   ;        main.c:91: XBR1     = 0X00;
0037 75E200     606            mov     _XBR1,#0x00
003A            607   ;        main.c:92: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     608            mov     _XBR2,#0x41
003D            609   ;        main.c:98: SCON0 = 0x10;
003D 759810     610            mov     _SCON0,#0x10
0040            611   ;        main.c:99: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     612            mov     _TH1,#0xE6
0043            613   ;        main.c:100: TL1 = TH1;      // Init Timer1
0043 858D8B     614            mov     _TL1,_TH1
0046            615   ;        main.c:101: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     616            anl     _TMOD,#0x0F
0049            617   ;        main.c:102: TMOD |=  0x20;                       
0049 438920     618            orl     _TMOD,#0x20
004C            619   ;        main.c:103: TR1 = 1; // START Timer1
004C D28E       620            setb    _TR1
004E            621   ;        main.c:104: TI = 1;  // Indicate TX0 ready
004E D299       622            setb    _TI
0050            623   ;        main.c:106: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       624            setb    _P2_0
0052            625   ;        main.c:108: return 0;
0052 758200     626            mov     dpl,#0x00
0055 22         627            ret
0056            628   ;------------------------------------------------------------
0056            629   ;Allocation info for local variables in function 'Timer3us'
0056            630   ;------------------------------------------------------------
0056            631   ;us                        Allocated to registers r2 
0056            632   ;i                         Allocated to registers r3 
0056            633   ;------------------------------------------------------------
0056            634   ;        main.c:112: void Timer3us(unsigned char us)
0056            635   ;        -----------------------------------------
0056            636   ;         function Timer3us
0056            637   ;        -----------------------------------------
0056            638   _Timer3us:
0056 AA82       639            mov     r2,dpl
0058            640   ;        main.c:117: CKCON0|=0b_0100_0000;
0058 438E40     641            orl     _CKCON0,#0x40
005B            642   ;        main.c:119: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
005B 7592B8     643            mov     _TMR3RL,#0xB8
005E 7593FF     644            mov     (_TMR3RL >> 8),#0xFF
0061            645   ;        main.c:120: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0061 859294     646            mov     _TMR3,_TMR3RL
0064 859395     647            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0067            648   ;        main.c:122: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0067 759104     649            mov     _TMR3CN0,#0x04
006A            650   ;        main.c:123: for (i = 0; i < us; i++)       // Count <us> overflows
006A 7B00       651            mov     r3,#0x00
006C            652   L003004?:
006C C3         653            clr     c
006D EB         654            mov     a,r3
006E 9A         655            subb    a,r2
006F 5000       656            jnc     L003007?
0071            657   ;        main.c:125: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0071            658   L003001?:
0071 E591       659            mov     a,_TMR3CN0
0073 30E798     660            jnb     acc.7,L003001?
0076            661   ;        main.c:126: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0076 53917F     662            anl     _TMR3CN0,#0x7F
0079            663   ;        main.c:123: for (i = 0; i < us; i++)       // Count <us> overflows
0079 0B         664            inc     r3
007A 8000       665            sjmp    L003004?
007C            666   L003007?:
007C            667   ;        main.c:128: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007C 759100     668            mov     _TMR3CN0,#0x00
007F 22         669            ret
0080            670   ;------------------------------------------------------------
0080            671   ;Allocation info for local variables in function 'waitms'
0080            672   ;------------------------------------------------------------
0080            673   ;ms                        Allocated to registers r2 r3 
0080            674   ;j                         Allocated to registers r4 r5 
0080            675   ;k                         Allocated to registers r6 
0080            676   ;------------------------------------------------------------
0080            677   ;        main.c:131: void waitms (unsigned int ms)
0080            678   ;        -----------------------------------------
0080            679   ;         function waitms
0080            680   ;        -----------------------------------------
0080            681   _waitms:
0080 AA82       682            mov     r2,dpl
0082 AB83       683            mov     r3,dph
0084            684   ;        main.c:135: for(j=0; j<ms; j++)
0084 7C00       685            mov     r4,#0x00
0086 7D00       686            mov     r5,#0x00
0088            687   L004005?:
0088 C3         688            clr     c
0089 EC         689            mov     a,r4
008A 9A         690            subb    a,r2
008B ED         691            mov     a,r5
008C 9B         692            subb    a,r3
008D 5000       693            jnc     L004009?
008F            694   ;        main.c:136: for (k=0; k<4; k++) Timer3us(250);
008F 7E00       695            mov     r6,#0x00
0091            696   L004001?:
0091 BE04D8     697            cjne    r6,#0x04,L004018?
0094            698   L004018?:
0094 5000       699            jnc     L004007?
0096 7582FA     700            mov     dpl,#0xFA
0099 C002       701            push    ar2
009B C003       702            push    ar3
009D C004       703            push    ar4
009F C005       704            push    ar5
00A1 C006       705            push    ar6
00A3 120000     706            lcall   _Timer3us
00A6 D006       707            pop     ar6
00A8 D005       708            pop     ar5
00AA D004       709            pop     ar4
00AC D003       710            pop     ar3
00AE D002       711            pop     ar2
00B0 0E         712            inc     r6
00B1 8000       713            sjmp    L004001?
00B3            714   L004007?:
00B3            715   ;        main.c:135: for(j=0; j<ms; j++)
00B3 0C         716            inc     r4
00B4 BC0018     717            cjne    r4,#0x00,L004005?
00B7 0D         718            inc     r5
00B8 8000       719            sjmp    L004005?
00BA            720   L004009?:
00BA 22         721            ret
00BB            722   ;------------------------------------------------------------
00BB            723   ;Allocation info for local variables in function 'UART1_Init'
00BB            724   ;------------------------------------------------------------
00BB            725   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00BB            726   ;------------------------------------------------------------
00BB            727   ;        main.c:139: void UART1_Init (unsigned long baudrate)
00BB            728   ;        -----------------------------------------
00BB            729   ;         function UART1_Init
00BB            730   ;        -----------------------------------------
00BB            731   _UART1_Init:
00BB AA82       732            mov     r2,dpl
00BD AB83       733            mov     r3,dph
00BF ACF0       734            mov     r4,b
00C1 FD         735            mov     r5,a
00C2            736   ;        main.c:141: SFRPAGE = 0x20;
00C2 75A720     737            mov     _SFRPAGE,#0x20
00C5            738   ;        main.c:142: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00C5 75930C     739            mov     _SMOD1,#0x0C
00C8            740   ;        main.c:143: SCON1 = 0x10;
00C8 75C810     741            mov     _SCON1,#0x10
00CB            742   ;        main.c:144: SBCON1 =0x00;   // disable baud rate generator
00CB 759400     743            mov     _SBCON1,#0x00
00CE            744   ;        main.c:145: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00CE 8A00       745            mov     __divulong_PARM_2,r2
00D0 8B01       746            mov     (__divulong_PARM_2 + 1),r3
00D2 8C02       747            mov     (__divulong_PARM_2 + 2),r4
00D4 8D03       748            mov     (__divulong_PARM_2 + 3),r5
00D6 90A200     749            mov     dptr,#0xA200
00D9 75F04A     750            mov     b,#0x4A
00DC 7404       751            mov     a,#0x04
00DE 120000     752            lcall   __divulong
00E1 AA82       753            mov     r2,dpl
00E3 AB83       754            mov     r3,dph
00E5 ACF0       755            mov     r4,b
00E7 FD         756            mov     r5,a
00E8 750018     757            mov     __divulong_PARM_2,#0x18
00EB E4         758            clr     a
00EC F501       759            mov     (__divulong_PARM_2 + 1),a
00EE F502       760            mov     (__divulong_PARM_2 + 2),a
00F0 F503       761            mov     (__divulong_PARM_2 + 3),a
00F2 8A82       762            mov     dpl,r2
00F4 8B83       763            mov     dph,r3
00F6 8CF0       764            mov     b,r4
00F8 ED         765            mov     a,r5
00F9 120000     766            lcall   __divulong
00FC AA82       767            mov     r2,dpl
00FE AB83       768            mov     r3,dph
0100 ACF0       769            mov     r4,b
0102 FD         770            mov     r5,a
0103 E4         771            clr     a
0104 C3         772            clr     c
0105 9A         773            subb    a,r2
0106 FA         774            mov     r2,a
0107 E4         775            clr     a
0108 9B         776            subb    a,r3
0109 FB         777            mov     r3,a
010A 7401       778            mov     a,#0x01
010C 9C         779            subb    a,r4
010D E4         780            clr     a
010E 9D         781            subb    a,r5
010F 8A95       782            mov     _SBRL1,r2
0111 8B96       783            mov     (_SBRL1 >> 8),r3
0113            784   ;        main.c:146: TI1 = 1; // indicate ready for TX
0113 D2C9       785            setb    _TI1
0115            786   ;        main.c:147: SBCON1 |= 0x40;   // enable baud rate generator
0115 439440     787            orl     _SBCON1,#0x40
0118            788   ;        main.c:148: SFRPAGE = 0x00;
0118 75A700     789            mov     _SFRPAGE,#0x00
011B 22         790            ret
011C            791   ;------------------------------------------------------------
011C            792   ;Allocation info for local variables in function 'putchar1'
011C            793   ;------------------------------------------------------------
011C            794   ;c                         Allocated to registers r2 
011C            795   ;------------------------------------------------------------
011C            796   ;        main.c:151: void putchar1 (char c) 
011C            797   ;        -----------------------------------------
011C            798   ;         function putchar1
011C            799   ;        -----------------------------------------
011C            800   _putchar1:
011C AA82       801            mov     r2,dpl
011E            802   ;        main.c:153: SFRPAGE = 0x20;
011E 75A720     803            mov     _SFRPAGE,#0x20
0121            804   ;        main.c:154: while (!TI1);
0121            805   L006001?:
0121            806   ;        main.c:155: TI1=0;
0121 10C968     807            jbc     _TI1,L006008?
0124 8000       808            sjmp    L006001?
0126            809   L006008?:
0126            810   ;        main.c:156: SBUF1 = c;
0126 8A92       811            mov     _SBUF1,r2
0128            812   ;        main.c:157: SFRPAGE = 0x00;
0128 75A700     813            mov     _SFRPAGE,#0x00
012B 22         814            ret
012C            815   ;------------------------------------------------------------
012C            816   ;Allocation info for local variables in function 'sendstr1'
012C            817   ;------------------------------------------------------------
012C            818   ;s                         Allocated to registers r2 r3 r4 
012C            819   ;------------------------------------------------------------
012C            820   ;        main.c:160: void sendstr1 (char * s)
012C            821   ;        -----------------------------------------
012C            822   ;         function sendstr1
012C            823   ;        -----------------------------------------
012C            824   _sendstr1:
012C AA82       825            mov     r2,dpl
012E AB83       826            mov     r3,dph
0130 ACF0       827            mov     r4,b
0132            828   ;        main.c:162: while(*s)
0132            829   L007001?:
0132 8A82       830            mov     dpl,r2
0134 8B83       831            mov     dph,r3
0136 8CF0       832            mov     b,r4
0138 120000     833            lcall   __gptrget
013B FD         834            mov     r5,a
013C 6000       835            jz      L007004?
013E            836   ;        main.c:164: putchar1(*s);
013E 8D82       837            mov     dpl,r5
0140 C002       838            push    ar2
0142 C003       839            push    ar3
0144 C004       840            push    ar4
0146 120000     841            lcall   _putchar1
0149 D004       842            pop     ar4
014B D003       843            pop     ar3
014D D002       844            pop     ar2
014F            845   ;        main.c:165: s++;        
014F 0A         846            inc     r2
0150 BA00A8     847            cjne    r2,#0x00,L007001?
0153 0B         848            inc     r3
0154 8000       849            sjmp    L007001?
0156            850   L007004?:
0156 22         851            ret
0157            852   ;------------------------------------------------------------
0157            853   ;Allocation info for local variables in function 'getchar1'
0157            854   ;------------------------------------------------------------
0157            855   ;c                         Allocated to registers 
0157            856   ;------------------------------------------------------------
0157            857   ;        main.c:169: char getchar1 (void)
0157            858   ;        -----------------------------------------
0157            859   ;         function getchar1
0157            860   ;        -----------------------------------------
0157            861   _getchar1:
0157            862   ;        main.c:172: SFRPAGE = 0x20;
0157 75A720     863            mov     _SFRPAGE,#0x20
015A            864   ;        main.c:173: while (!RI1);
015A            865   L008001?:
015A            866   ;        main.c:174: RI1=0;
015A 10C8A8     867            jbc     _RI1,L008008?
015D 8000       868            sjmp    L008001?
015F            869   L008008?:
015F            870   ;        main.c:176: SCON1&=0b_0011_1111;
015F 53C83F     871            anl     _SCON1,#0x3F
0162            872   ;        main.c:177: c = SBUF1;
0162 859282     873            mov     dpl,_SBUF1
0165            874   ;        main.c:178: SFRPAGE = 0x00;
0165 75A700     875            mov     _SFRPAGE,#0x00
0168            876   ;        main.c:179: return (c);
0168 22         877            ret
0169            878   ;------------------------------------------------------------
0169            879   ;Allocation info for local variables in function 'getchar1_with_timeout'
0169            880   ;------------------------------------------------------------
0169            881   ;c                         Allocated to registers 
0169            882   ;timeout                   Allocated to registers r2 r3 
0169            883   ;------------------------------------------------------------
0169            884   ;        main.c:182: char getchar1_with_timeout (void)
0169            885   ;        -----------------------------------------
0169            886   ;         function getchar1_with_timeout
0169            887   ;        -----------------------------------------
0169            888   _getchar1_with_timeout:
0169            889   ;        main.c:186: SFRPAGE = 0x20;
0169 75A720     890            mov     _SFRPAGE,#0x20
016C            891   ;        main.c:188: while (!RI1)
016C 7A00       892            mov     r2,#0x00
016E 7B00       893            mov     r3,#0x00
0170            894   L009003?:
0170 20C828     895            jb      _RI1,L009005?
0173            896   ;        main.c:190: SFRPAGE = 0x00;
0173 75A700     897            mov     _SFRPAGE,#0x00
0176            898   ;        main.c:191: Timer3us(20);
0176 758214     899            mov     dpl,#0x14
0179 C002       900            push    ar2
017B C003       901            push    ar3
017D 120000     902            lcall   _Timer3us
0180 D003       903            pop     ar3
0182 D002       904            pop     ar2
0184            905   ;        main.c:192: SFRPAGE = 0x20;
0184 75A720     906            mov     _SFRPAGE,#0x20
0187            907   ;        main.c:193: timeout++;
0187 0A         908            inc     r2
0188 BA0068     909            cjne    r2,#0x00,L009012?
018B 0B         910            inc     r3
018C            911   L009012?:
018C            912   ;        main.c:194: if(timeout==25000)
018C BAA8E8     913            cjne    r2,#0xA8,L009003?
018F BB61E8     914            cjne    r3,#0x61,L009003?
0192            915   ;        main.c:196: SFRPAGE = 0x00;
0192 75A700     916            mov     _SFRPAGE,#0x00
0195            917   ;        main.c:197: return ('\n'); // Timeout after half second
0195 75820A     918            mov     dpl,#0x0A
0198 22         919            ret
0199            920   L009005?:
0199            921   ;        main.c:200: RI1=0;
0199 C2C8       922            clr     _RI1
019B            923   ;        main.c:202: SCON1&=0b_0011_1111;
019B 53C83F     924            anl     _SCON1,#0x3F
019E            925   ;        main.c:203: c = SBUF1;
019E 859282     926            mov     dpl,_SBUF1
01A1            927   ;        main.c:204: SFRPAGE = 0x00;
01A1 75A700     928            mov     _SFRPAGE,#0x00
01A4            929   ;        main.c:205: return (c);
01A4 22         930            ret
01A5            931   ;------------------------------------------------------------
01A5            932   ;Allocation info for local variables in function 'getstr1'
01A5            933   ;------------------------------------------------------------
01A5            934   ;n                         Allocated with name '_getstr1_PARM_2'
01A5            935   ;s                         Allocated to registers r2 r3 r4 
01A5            936   ;c                         Allocated to registers r1 
01A5            937   ;cnt                       Allocated to registers r5 
01A5            938   ;------------------------------------------------------------
01A5            939   ;        main.c:208: void getstr1 (char * s, unsigned char n)
01A5            940   ;        -----------------------------------------
01A5            941   ;         function getstr1
01A5            942   ;        -----------------------------------------
01A5            943   _getstr1:
01A5 AA82       944            mov     r2,dpl
01A7 AB83       945            mov     r3,dph
01A9 ACF0       946            mov     r4,b
01AB            947   ;        main.c:214: while(1)
01AB 7D00       948            mov     r5,#0x00
01AD 8A06       949            mov     ar6,r2
01AF 8B07       950            mov     ar7,r3
01B1 8C00       951            mov     ar0,r4
01B3            952   L010007?:
01B3            953   ;        main.c:216: c=getchar1_with_timeout();
01B3 C002       954            push    ar2
01B5 C003       955            push    ar3
01B7 C004       956            push    ar4
01B9 C005       957            push    ar5
01BB C006       958            push    ar6
01BD C007       959            push    ar7
01BF C000       960            push    ar0
01C1 120000     961            lcall   _getchar1_with_timeout
01C4 A982       962            mov     r1,dpl
01C6 D000       963            pop     ar0
01C8 D007       964            pop     ar7
01CA D006       965            pop     ar6
01CC D005       966            pop     ar5
01CE D004       967            pop     ar4
01D0 D003       968            pop     ar3
01D2 D002       969            pop     ar2
01D4            970   ;        main.c:217: if(c=='\n')
01D4 B90AE8     971            cjne    r1,#0x0A,L010002?
01D7            972   ;        main.c:219: *s=0;
01D7 8A82       973            mov     dpl,r2
01D9 8B83       974            mov     dph,r3
01DB 8CF0       975            mov     b,r4
01DD E4         976            clr     a
01DE            977   ;        main.c:220: return;
01DE 020000     978            ljmp    __gptrput
01E1            979   L010002?:
01E1            980   ;        main.c:223: if (cnt<n)
01E1 C3         981            clr     c
01E2 ED         982            mov     a,r5
01E3 95D8       983            subb    a,_getstr1_PARM_2
01E5 5000       984            jnc     L010004?
01E7            985   ;        main.c:225: cnt++;
01E7 0D         986            inc     r5
01E8            987   ;        main.c:226: *s=c;
01E8 8E82       988            mov     dpl,r6
01EA 8F83       989            mov     dph,r7
01EC 88F0       990            mov     b,r0
01EE E9         991            mov     a,r1
01EF 120000     992            lcall   __gptrput
01F2 A3         993            inc     dptr
01F3 AE82       994            mov     r6,dpl
01F5 AF83       995            mov     r7,dph
01F7            996   ;        main.c:227: s++;
01F7 8E02       997            mov     ar2,r6
01F9 8F03       998            mov     ar3,r7
01FB 8804       999            mov     ar4,r0
01FD 8000      1000            sjmp    L010007?
01FF           1001   L010004?:
01FF           1002   ;        main.c:231: *s=0;
01FF 8A82      1003            mov     dpl,r2
0201 8B83      1004            mov     dph,r3
0203 8CF0      1005            mov     b,r4
0205 E4        1006            clr     a
0206           1007   ;        main.c:232: return;
0206 020000    1008            ljmp    __gptrput
0209           1009   ;------------------------------------------------------------
0209           1010   ;Allocation info for local variables in function 'RXU1'
0209           1011   ;------------------------------------------------------------
0209           1012   ;------------------------------------------------------------
0209           1013   ;        main.c:238: bit RXU1 (void)
0209           1014   ;        -----------------------------------------
0209           1015   ;         function RXU1
0209           1016   ;        -----------------------------------------
0209           1017   _RXU1:
0209           1018   ;        main.c:241: SFRPAGE = 0x20;
0209 75A720    1019            mov     _SFRPAGE,#0x20
020C           1020   ;        main.c:242: mybit=RI1;
020C A2C8      1021            mov     c,_RI1
020E           1022   ;        main.c:243: SFRPAGE = 0x00;
020E 75A700    1023            mov     _SFRPAGE,#0x00
0211           1024   ;        main.c:244: return mybit;
0211 22        1025            ret
0212           1026   ;------------------------------------------------------------
0212           1027   ;Allocation info for local variables in function 'waitms_or_RI1'
0212           1028   ;------------------------------------------------------------
0212           1029   ;ms                        Allocated to registers r2 r3 
0212           1030   ;j                         Allocated to registers r4 r5 
0212           1031   ;k                         Allocated to registers r6 
0212           1032   ;------------------------------------------------------------
0212           1033   ;        main.c:247: void waitms_or_RI1 (unsigned int ms)
0212           1034   ;        -----------------------------------------
0212           1035   ;         function waitms_or_RI1
0212           1036   ;        -----------------------------------------
0212           1037   _waitms_or_RI1:
0212 AA82      1038            mov     r2,dpl
0214 AB83      1039            mov     r3,dph
0216           1040   ;        main.c:251: for(j=0; j<ms; j++)
0216 7C00      1041            mov     r4,#0x00
0218 7D00      1042            mov     r5,#0x00
021A           1043   L012007?:
021A C3        1044            clr     c
021B EC        1045            mov     a,r4
021C 9A        1046            subb    a,r2
021D ED        1047            mov     a,r5
021E 9B        1048            subb    a,r3
021F 5000      1049            jnc     L012011?
0221           1050   ;        main.c:253: for (k=0; k<4; k++)
0221 7E00      1051            mov     r6,#0x00
0223           1052   L012003?:
0223 BE0468    1053            cjne    r6,#0x04,L012019?
0226           1054   L012019?:
0226 5000      1055            jnc     L012009?
0228           1056   ;        main.c:255: if(RXU1()) return;
0228 C002      1057            push    ar2
022A C003      1058            push    ar3
022C C004      1059            push    ar4
022E C005      1060            push    ar5
0230 C006      1061            push    ar6
0232 120000    1062            lcall   _RXU1
0235 E4        1063            clr     a
0236 33        1064            rlc     a
0237 D006      1065            pop     ar6
0239 D005      1066            pop     ar5
023B D004      1067            pop     ar4
023D D003      1068            pop     ar3
023F D002      1069            pop     ar2
0241 6000      1070            jz      L012002?
0243 22        1071            ret
0244           1072   L012002?:
0244           1073   ;        main.c:256: Timer3us(250);
0244 7582FA    1074            mov     dpl,#0xFA
0247 C002      1075            push    ar2
0249 C003      1076            push    ar3
024B C004      1077            push    ar4
024D C005      1078            push    ar5
024F C006      1079            push    ar6
0251 120000    1080            lcall   _Timer3us
0254 D006      1081            pop     ar6
0256 D005      1082            pop     ar5
0258 D004      1083            pop     ar4
025A D003      1084            pop     ar3
025C D002      1085            pop     ar2
025E           1086   ;        main.c:253: for (k=0; k<4; k++)
025E 0E        1087            inc     r6
025F 8000      1088            sjmp    L012003?
0261           1089   L012009?:
0261           1090   ;        main.c:251: for(j=0; j<ms; j++)
0261 0C        1091            inc     r4
0262 BC00A8    1092            cjne    r4,#0x00,L012007?
0265 0D        1093            inc     r5
0266 8000      1094            sjmp    L012007?
0268           1095   L012011?:
0268 22        1096            ret
0269           1097   ;------------------------------------------------------------
0269           1098   ;Allocation info for local variables in function 'SendATCommand'
0269           1099   ;------------------------------------------------------------
0269           1100   ;s                         Allocated to registers r2 r3 r4 
0269           1101   ;------------------------------------------------------------
0269           1102   ;        main.c:261: void SendATCommand (char * s)
0269           1103   ;        -----------------------------------------
0269           1104   ;         function SendATCommand
0269           1105   ;        -----------------------------------------
0269           1106   _SendATCommand:
0269 AA82      1107            mov     r2,dpl
026B AB83      1108            mov     r3,dph
026D ACF0      1109            mov     r4,b
026F           1110   ;        main.c:263: printf("Command: %s", s);
026F C002      1111            push    ar2
0271 C003      1112            push    ar3
0273 C004      1113            push    ar4
0275 C002      1114            push    ar2
0277 C003      1115            push    ar3
0279 C004      1116            push    ar4
027B 7428      1117            mov     a,#__str_0
027D C0E0      1118            push    acc
027F 74BC      1119            mov     a,#(__str_0 >> 8)
0281 C0E0      1120            push    acc
0283 7480      1121            mov     a,#0x80
0285 C0E0      1122            push    acc
0287 120000    1123            lcall   _printf
028A E581      1124            mov     a,sp
028C 24FA      1125            add     a,#0xfa
028E F581      1126            mov     sp,a
0290           1127   ;        main.c:264: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0290 C2A0      1128            clr     _P2_0
0292           1129   ;        main.c:265: waitms(5);
0292 900005    1130            mov     dptr,#0x0005
0295 120000    1131            lcall   _waitms
0298 D004      1132            pop     ar4
029A D003      1133            pop     ar3
029C D002      1134            pop     ar2
029E           1135   ;        main.c:266: sendstr1(s);
029E 8A82      1136            mov     dpl,r2
02A0 8B83      1137            mov     dph,r3
02A2 8CF0      1138            mov     b,r4
02A4 120000    1139            lcall   _sendstr1
02A7           1140   ;        main.c:267: getstr1(buff, sizeof(buff)-1);
02A7 75D813    1141            mov     _getstr1_PARM_2,#0x13
02AA 904598    1142            mov     dptr,#_buff
02AD 75F040    1143            mov     b,#0x40
02B0 120000    1144            lcall   _getstr1
02B3           1145   ;        main.c:268: waitms(10);
02B3 90000A    1146            mov     dptr,#0x000A
02B6 120000    1147            lcall   _waitms
02B9           1148   ;        main.c:269: P2_0=1; // 'set' pin to 1 is normal operation mode.
02B9 D2A0      1149            setb    _P2_0
02BB           1150   ;        main.c:270: printf("Response: %s\r\n", buff);
02BB 7498      1151            mov     a,#_buff
02BD C0E0      1152            push    acc
02BF 7445      1153            mov     a,#(_buff >> 8)
02C1 C0E0      1154            push    acc
02C3 7440      1155            mov     a,#0x40
02C5 C0E0      1156            push    acc
02C7 74E8      1157            mov     a,#__str_1
02C9 C0E0      1158            push    acc
02CB 74BC      1159            mov     a,#(__str_1 >> 8)
02CD C0E0      1160            push    acc
02CF 7480      1161            mov     a,#0x80
02D1 C0E0      1162            push    acc
02D3 120000    1163            lcall   _printf
02D6 E581      1164            mov     a,sp
02D8 24FA      1165            add     a,#0xfa
02DA F581      1166            mov     sp,a
02DC 22        1167            ret
02DD           1168   ;------------------------------------------------------------
02DD           1169   ;Allocation info for local variables in function 'ReceptionOff'
02DD           1170   ;------------------------------------------------------------
02DD           1171   ;------------------------------------------------------------
02DD           1172   ;        main.c:273: void ReceptionOff (void)
02DD           1173   ;        -----------------------------------------
02DD           1174   ;         function ReceptionOff
02DD           1175   ;        -----------------------------------------
02DD           1176   _ReceptionOff:
02DD           1177   ;        main.c:275: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02DD C2A0      1178            clr     _P2_0
02DF           1179   ;        main.c:276: waitms(10);
02DF 90000A    1180            mov     dptr,#0x000A
02E2 120000    1181            lcall   _waitms
02E5           1182   ;        main.c:277: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02E5 90BD28    1183            mov     dptr,#__str_2
02E8 75F080    1184            mov     b,#0x80
02EB 120000    1185            lcall   _sendstr1
02EE           1186   ;        main.c:278: waitms(10);
02EE 90000A    1187            mov     dptr,#0x000A
02F1 120000    1188            lcall   _waitms
02F4           1189   ;        main.c:280: SCON1&=0b_0011_1111;
02F4 53C83F    1190            anl     _SCON1,#0x3F
02F7           1191   ;        main.c:281: P2_0=1; // 'set' pin to 1 is normal operation mode.
02F7 D2A0      1192            setb    _P2_0
02F9 22        1193            ret
02FA           1194   ;------------------------------------------------------------
02FA           1195   ;Allocation info for local variables in function 'Set_Pin_Output'
02FA           1196   ;------------------------------------------------------------
02FA           1197   ;pin                       Allocated to registers r2 
02FA           1198   ;mask                      Allocated to registers r3 
02FA           1199   ;------------------------------------------------------------
02FA           1200   ;        main.c:284: void Set_Pin_Output (unsigned char pin)
02FA           1201   ;        -----------------------------------------
02FA           1202   ;         function Set_Pin_Output
02FA           1203   ;        -----------------------------------------
02FA           1204   _Set_Pin_Output:
02FA AA82      1205            mov     r2,dpl
02FC           1206   ;        main.c:288: mask=(1<<(pin&0x7));
02FC 7407      1207            mov     a,#0x07
02FE 5A        1208            anl     a,r2
02FF F5F0      1209            mov     b,a
0301 05F0      1210            inc     b
0303 7401      1211            mov     a,#0x01
0305 8000      1212            sjmp    L015011?
0307           1213   L015009?:
0307 25E0      1214            add     a,acc
0309           1215   L015011?:
0309 D5F0A8    1216            djnz    b,L015009?
030C FB        1217            mov     r3,a
030D           1218   ;        main.c:289: switch(pin/0x10)
030D EA        1219            mov     a,r2
030E C4        1220            swap    a
030F 540F      1221            anl     a,#0x0f
0311 FA        1222            mov  r2,a
0312 24FC      1223            add     a,#0xff - 0x03
0314 4000      1224            jc      L015006?
0316 EA        1225            mov     a,r2
0317 2A        1226            add     a,r2
0318 2A        1227            add     a,r2
0319 90BE28    1228            mov     dptr,#L015013?
031C 73        1229            jmp     @a+dptr
031D           1230   L015013?:
031D 020000    1231            ljmp    L015001?
0320 020000    1232            ljmp    L015002?
0323 020000    1233            ljmp    L015003?
0326 020000    1234            ljmp    L015004?
0329           1235   ;        main.c:291: case 0: P0MDOUT |= mask; break;
0329           1236   L015001?:
0329 EB        1237            mov     a,r3
032A 42A4      1238            orl     _P0MDOUT,a
032C           1239   ;        main.c:292: case 1: P1MDOUT |= mask; break;
032C 22        1240            ret
032D           1241   L015002?:
032D EB        1242            mov     a,r3
032E 42A5      1243            orl     _P1MDOUT,a
0330           1244   ;        main.c:293: case 2: P2MDOUT |= mask; break; 
0330 22        1245            ret
0331           1246   L015003?:
0331 EB        1247            mov     a,r3
0332 42A6      1248            orl     _P2MDOUT,a
0334           1249   ;        main.c:294: case 3: P3MDOUT |= mask; break; 
0334 22        1250            ret
0335           1251   L015004?:
0335 EB        1252            mov     a,r3
0336 429C      1253            orl     _P3MDOUT,a
0338           1254   ;        main.c:295: }   
0338           1255   L015006?:
0338 22        1256            ret
0339           1257   ;------------------------------------------------------------
0339           1258   ;Allocation info for local variables in function 'MoveForward'
0339           1259   ;------------------------------------------------------------
0339           1260   ;------------------------------------------------------------
0339           1261   ;        main.c:298: void MoveForward (void)
0339           1262   ;        -----------------------------------------
0339           1263   ;         function MoveForward
0339           1264   ;        -----------------------------------------
0339           1265   _MoveForward:
0339           1266   ;        main.c:300: L_bridge_1 = 0; 
0339 C2A1      1267            clr     _P2_1
033B           1268   ;        main.c:301: L_bridge_2 = 1; 
033B D2A2      1269            setb    _P2_2
033D           1270   ;        main.c:302: R_bridge_1 = 0; 
033D C2A4      1271            clr     _P2_4
033F           1272   ;        main.c:303: R_bridge_2 = 1; 
033F D2A3      1273            setb    _P2_3
0341 22        1274            ret
0342           1275   ;------------------------------------------------------------
0342           1276   ;Allocation info for local variables in function 'MovBackward'
0342           1277   ;------------------------------------------------------------
0342           1278   ;------------------------------------------------------------
0342           1279   ;        main.c:306: void MovBackward (void)
0342           1280   ;        -----------------------------------------
0342           1281   ;         function MovBackward
0342           1282   ;        -----------------------------------------
0342           1283   _MovBackward:
0342           1284   ;        main.c:308: L_bridge_1 = 1; 
0342 D2A1      1285            setb    _P2_1
0344           1286   ;        main.c:309: L_bridge_2 = 0; 
0344 C2A2      1287            clr     _P2_2
0346           1288   ;        main.c:310: R_bridge_1 = 1; 
0346 D2A4      1289            setb    _P2_4
0348           1290   ;        main.c:311: R_bridge_2 = 0; 
0348 C2A3      1291            clr     _P2_3
034A 22        1292            ret
034B           1293   ;------------------------------------------------------------
034B           1294   ;Allocation info for local variables in function 'TurnLeft'
034B           1295   ;------------------------------------------------------------
034B           1296   ;------------------------------------------------------------
034B           1297   ;        main.c:314: void TurnLeft (void)
034B           1298   ;        -----------------------------------------
034B           1299   ;         function TurnLeft
034B           1300   ;        -----------------------------------------
034B           1301   _TurnLeft:
034B           1302   ;        main.c:316: L_bridge_1 = 0; 
034B C2A1      1303            clr     _P2_1
034D           1304   ;        main.c:317: L_bridge_2 = 1; 
034D D2A2      1305            setb    _P2_2
034F           1306   ;        main.c:318: R_bridge_1 = 1; 
034F D2A4      1307            setb    _P2_4
0351           1308   ;        main.c:319: R_bridge_2 = 0; 
0351 C2A3      1309            clr     _P2_3
0353 22        1310            ret
0354           1311   ;------------------------------------------------------------
0354           1312   ;Allocation info for local variables in function 'TurnRight'
0354           1313   ;------------------------------------------------------------
0354           1314   ;------------------------------------------------------------
0354           1315   ;        main.c:322: void TurnRight (void)
0354           1316   ;        -----------------------------------------
0354           1317   ;         function TurnRight
0354           1318   ;        -----------------------------------------
0354           1319   _TurnRight:
0354           1320   ;        main.c:324: L_bridge_1 = 1; 
0354 D2A1      1321            setb    _P2_1
0356           1322   ;        main.c:325: L_bridge_2 = 0; 
0356 C2A2      1323            clr     _P2_2
0358           1324   ;        main.c:326: R_bridge_1 = 0; 
0358 C2A4      1325            clr     _P2_4
035A           1326   ;        main.c:327: R_bridge_2 = 1; 
035A D2A3      1327            setb    _P2_3
035C 22        1328            ret
035D           1329   ;------------------------------------------------------------
035D           1330   ;Allocation info for local variables in function 'main'
035D           1331   ;------------------------------------------------------------
035D           1332   ;cnt                       Allocated to registers 
035D           1333   ;c                         Allocated to registers r4 
035D           1334   ;------------------------------------------------------------
035D           1335   ;        main.c:330: void main (void)
035D           1336   ;        -----------------------------------------
035D           1337   ;         function main
035D           1338   ;        -----------------------------------------
035D           1339   _main:
035D           1340   ;        main.c:335: waitms(500);
035D 9001F4    1341            mov     dptr,#0x01F4
0360 120000    1342            lcall   _waitms
0363           1343   ;        main.c:336: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0363 7468      1344            mov     a,#__str_3
0365 C0E0      1345            push    acc
0367 74BF      1346            mov     a,#(__str_3 >> 8)
0369 C0E0      1347            push    acc
036B 7480      1348            mov     a,#0x80
036D C0E0      1349            push    acc
036F 120000    1350            lcall   _printf
0372 1581      1351            dec     sp
0374 1581      1352            dec     sp
0376 1581      1353            dec     sp
0378           1354   ;        main.c:337: UART1_Init(9600);
0378 902580    1355            mov     dptr,#0x2580
037B E4        1356            clr     a
037C F5F0      1357            mov     b,a
037E 120000    1358            lcall   _UART1_Init
0381           1359   ;        main.c:339: ReceptionOff();
0381 120000    1360            lcall   _ReceptionOff
0384           1361   ;        main.c:342: SendATCommand("AT+VER\r\n");
0384 90BFA8    1362            mov     dptr,#__str_4
0387 75F080    1363            mov     b,#0x80
038A 120000    1364            lcall   _SendATCommand
038D           1365   ;        main.c:343: SendATCommand("AT+BAUD\r\n");
038D 90BFE8    1366            mov     dptr,#__str_5
0390 75F080    1367            mov     b,#0x80
0393 120000    1368            lcall   _SendATCommand
0396           1369   ;        main.c:344: SendATCommand("AT+RFID\r\n");
0396 90C028    1370            mov     dptr,#__str_6
0399 75F080    1371            mov     b,#0x80
039C 120000    1372            lcall   _SendATCommand
039F           1373   ;        main.c:345: SendATCommand("AT+DVID\r\n");
039F 90C068    1374            mov     dptr,#__str_7
03A2 75F080    1375            mov     b,#0x80
03A5 120000    1376            lcall   _SendATCommand
03A8           1377   ;        main.c:346: SendATCommand("AT+RFC\r\n");
03A8 90C0A8    1378            mov     dptr,#__str_8
03AB 75F080    1379            mov     b,#0x80
03AE 120000    1380            lcall   _SendATCommand
03B1           1381   ;        main.c:347: SendATCommand("AT+POWE\r\n");
03B1 90C0E8    1382            mov     dptr,#__str_9
03B4 75F080    1383            mov     b,#0x80
03B7 120000    1384            lcall   _SendATCommand
03BA           1385   ;        main.c:348: SendATCommand("AT+CLSS\r\n");
03BA 90C128    1386            mov     dptr,#__str_10
03BD 75F080    1387            mov     b,#0x80
03C0 120000    1388            lcall   _SendATCommand
03C3           1389   ;        main.c:349: SendATCommand("AT+DVIDABBA\r\n");  
03C3 90C168    1390            mov     dptr,#__str_11
03C6 75F080    1391            mov     b,#0x80
03C9 120000    1392            lcall   _SendATCommand
03CC           1393   ;        main.c:352: L_bridge_1 = 0; 
03CC C2A1      1394            clr     _P2_1
03CE           1395   ;        main.c:353: L_bridge_2 = 0; 
03CE C2A2      1396            clr     _P2_2
03D0           1397   ;        main.c:354: R_bridge_1 = 0; 
03D0 C2A4      1398            clr     _P2_4
03D2           1399   ;        main.c:355: R_bridge_2 = 0; 
03D2 C2A3      1400            clr     _P2_3
03D4           1401   ;        main.c:358: while(1)
03D4 7A00      1402            mov     r2,#0x00
03D6 7B00      1403            mov     r3,#0x00
03D8           1404   L020012?:
03D8           1405   ;        main.c:360: Set_Pin_Output(0x24);
03D8 758224    1406            mov     dpl,#0x24
03DB C002      1407            push    ar2
03DD C003      1408            push    ar3
03DF 120000    1409            lcall   _Set_Pin_Output
03E2           1410   ;        main.c:361: Set_Pin_Output(0x23);
03E2 758223    1411            mov     dpl,#0x23
03E5 120000    1412            lcall   _Set_Pin_Output
03E8           1413   ;        main.c:362: Set_Pin_Output(0x22);
03E8 758222    1414            mov     dpl,#0x22
03EB 120000    1415            lcall   _Set_Pin_Output
03EE           1416   ;        main.c:363: Set_Pin_Output(0x21);
03EE 758221    1417            mov     dpl,#0x21
03F1 120000    1418            lcall   _Set_Pin_Output
03F4           1419   ;        main.c:365: MoveForward();
03F4 120000    1420            lcall   _MoveForward
03F7           1421   ;        main.c:366: waitms(2000);
03F7 9007D0    1422            mov     dptr,#0x07D0
03FA 120000    1423            lcall   _waitms
03FD           1424   ;        main.c:367: MovBackward();
03FD 120000    1425            lcall   _MovBackward
0400           1426   ;        main.c:368: waitms(2000);
0400 9007D0    1427            mov     dptr,#0x07D0
0403 120000    1428            lcall   _waitms
0406           1429   ;        main.c:369: TurnLeft();
0406 120000    1430            lcall   _TurnLeft
0409           1431   ;        main.c:370: waitms(2000);
0409 9007D0    1432            mov     dptr,#0x07D0
040C 120000    1433            lcall   _waitms
040F           1434   ;        main.c:371: TurnRight();
040F 120000    1435            lcall   _TurnRight
0412           1436   ;        main.c:372: waitms(2000);
0412 9007D0    1437            mov     dptr,#0x07D0
0415 120000    1438            lcall   _waitms
0418           1439   ;        main.c:376: if(RXU1()) // Something has arrived
0418 120000    1440            lcall   _RXU1
041B D003      1441            pop     ar3
041D D002      1442            pop     ar2
041F 5000      1443            jnc     L020012?
0421           1444   ;        main.c:378: c=getchar1();
0421 C002      1445            push    ar2
0423 C003      1446            push    ar3
0425 120000    1447            lcall   _getchar1
0428 AC82      1448            mov     r4,dpl
042A D003      1449            pop     ar3
042C D002      1450            pop     ar2
042E           1451   ;        main.c:380: if(c=='!') // Master is sending message
042E BC21E8    1452            cjne    r4,#0x21,L020022?
0431 8000      1453            sjmp    L020023?
0433           1454   L020022?:
0433 020000    1455            ljmp    L020007?
0436           1456   L020023?:
0436           1457   ;        main.c:382: getstr1(buff, sizeof(buff)-1);
0436 75D813    1458            mov     _getstr1_PARM_2,#0x13
0439 904598    1459            mov     dptr,#_buff
043C 75F040    1460            mov     b,#0x40
043F C002      1461            push    ar2
0441 C003      1462            push    ar3
0443 120000    1463            lcall   _getstr1
0446           1464   ;        main.c:383: if(strlen(buff)==7)
0446 904598    1465            mov     dptr,#_buff
0449 75F040    1466            mov     b,#0x40
044C 120000    1467            lcall   _strlen
044F AD82      1468            mov     r5,dpl
0451 AE83      1469            mov     r6,dph
0453 D003      1470            pop     ar3
0455 D002      1471            pop     ar2
0457 BD07E8    1472            cjne    r5,#0x07,L020002?
045A BE00E8    1473            cjne    r6,#0x00,L020002?
045D           1474   ;        main.c:385: printf("Master says: %s\r\n", buff);
045D C002      1475            push    ar2
045F C003      1476            push    ar3
0461 7498      1477            mov     a,#_buff
0463 C0E0      1478            push    acc
0465 7445      1479            mov     a,#(_buff >> 8)
0467 C0E0      1480            push    acc
0469 7440      1481            mov     a,#0x40
046B C0E0      1482            push    acc
046D 7428      1483            mov     a,#__str_12
046F C0E0      1484            push    acc
0471 74C3      1485            mov     a,#(__str_12 >> 8)
0473 C0E0      1486            push    acc
0475 7480      1487            mov     a,#0x80
0477 C0E0      1488            push    acc
0479 120000    1489            lcall   _printf
047C E581      1490            mov     a,sp
047E 24FA      1491            add     a,#0xfa
0480 F581      1492            mov     sp,a
0482 D003      1493            pop     ar3
0484 D002      1494            pop     ar2
0486 020000    1495            ljmp    L020012?
0489           1496   L020002?:
0489           1497   ;        main.c:389: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0489 904598    1498            mov     dptr,#_buff
048C 75F040    1499            mov     b,#0x40
048F C002      1500            push    ar2
0491 C003      1501            push    ar3
0493 120000    1502            lcall   _strlen
0496 AD82      1503            mov     r5,dpl
0498 AE83      1504            mov     r6,dph
049A C005      1505            push    ar5
049C C006      1506            push    ar6
049E 7498      1507            mov     a,#_buff
04A0 C0E0      1508            push    acc
04A2 7445      1509            mov     a,#(_buff >> 8)
04A4 C0E0      1510            push    acc
04A6 7440      1511            mov     a,#0x40
04A8 C0E0      1512            push    acc
04AA 7468      1513            mov     a,#__str_13
04AC C0E0      1514            push    acc
04AE 74C3      1515            mov     a,#(__str_13 >> 8)
04B0 C0E0      1516            push    acc
04B2 7480      1517            mov     a,#0x80
04B4 C0E0      1518            push    acc
04B6 120000    1519            lcall   _printf
04B9 E581      1520            mov     a,sp
04BB 24F8      1521            add     a,#0xf8
04BD F581      1522            mov     sp,a
04BF D003      1523            pop     ar3
04C1 D002      1524            pop     ar2
04C3 020000    1525            ljmp    L020012?
04C6           1526   L020007?:
04C6           1527   ;        main.c:392: else if(c=='@') // Master wants slave data
04C6 BC40A8    1528            cjne    r4,#0x40,L020026?
04C9 8000      1529            sjmp    L020027?
04CB           1530   L020026?:
04CB 020000    1531            ljmp    L020012?
04CE           1532   L020027?:
04CE           1533   ;        main.c:394: sprintf(buff, "%05u\n", cnt);
04CE C002      1534            push    ar2
04D0 C003      1535            push    ar3
04D2 C002      1536            push    ar2
04D4 C003      1537            push    ar3
04D6 7428      1538            mov     a,#__str_14
04D8 C0E0      1539            push    acc
04DA 74C4      1540            mov     a,#(__str_14 >> 8)
04DC C0E0      1541            push    acc
04DE 7480      1542            mov     a,#0x80
04E0 C0E0      1543            push    acc
04E2 7498      1544            mov     a,#_buff
04E4 C0E0      1545            push    acc
04E6 7445      1546            mov     a,#(_buff >> 8)
04E8 C0E0      1547            push    acc
04EA 7440      1548            mov     a,#0x40
04EC C0E0      1549            push    acc
04EE 120000    1550            lcall   _sprintf
04F1 E581      1551            mov     a,sp
04F3 24F8      1552            add     a,#0xf8
04F5 F581      1553            mov     sp,a
04F7 D003      1554            pop     ar3
04F9 D002      1555            pop     ar2
04FB           1556   ;        main.c:395: cnt++;
04FB 0A        1557            inc     r2
04FC BA00A8    1558            cjne    r2,#0x00,L020028?
04FF 0B        1559            inc     r3
0500           1560   L020028?:
0500           1561   ;        main.c:396: waitms(5); // The radio seems to need this delay...
0500 900005    1562            mov     dptr,#0x0005
0503 C002      1563            push    ar2
0505 C003      1564            push    ar3
0507 120000    1565            lcall   _waitms
050A           1566   ;        main.c:397: sendstr1(buff);
050A 904598    1567            mov     dptr,#_buff
050D 75F040    1568            mov     b,#0x40
0510 120000    1569            lcall   _sendstr1
0513 D003      1570            pop     ar3
0515 D002      1571            pop     ar2
0517 020000    1572            ljmp    L020012?
051A           1573            rseg R_CSEG
051A           1574   
0000           1575            rseg R_XINIT
0000           1576   
0000           1577            rseg R_CONST
0000           1578   __str_0:
0000 436F6D6D  1579            db 'Command: %s'
     616E643A
     202573
000B 00        1580            db 0x00
000C           1581   __str_1:
000C 52657370  1582            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1583            db 0x0D
0019 0A        1584            db 0x0A
001A 00        1585            db 0x00
001B           1586   __str_2:
001B 41542B44  1587            db 'AT+DVID0000'
     56494430
     303030
0026 0D        1588            db 0x0D
0027 0A        1589            db 0x0A
0028 00        1590            db 0x00
0029           1591   __str_3:
0029 0D        1592            db 0x0D
002A 0A        1593            db 0x0A
002B 45464D38  1594            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        1595            db 0x0D
0047 0A        1596            db 0x0A
0048 00        1597            db 0x00
0049           1598   __str_4:
0049 41542B56  1599            db 'AT+VER'
     4552
004F 0D        1600            db 0x0D
0050 0A        1601            db 0x0A
0051 00        1602            db 0x00
0052           1603   __str_5:
0052 41542B42  1604            db 'AT+BAUD'
     415544
0059 0D        1605            db 0x0D
005A 0A        1606            db 0x0A
005B 00        1607            db 0x00
005C           1608   __str_6:
005C 41542B52  1609            db 'AT+RFID'
     464944
0063 0D        1610            db 0x0D
0064 0A        1611            db 0x0A
0065 00        1612            db 0x00
0066           1613   __str_7:
0066 41542B44  1614            db 'AT+DVID'
     564944
006D 0D        1615            db 0x0D
006E 0A        1616            db 0x0A
006F 00        1617            db 0x00
0070           1618   __str_8:
0070 41542B52  1619            db 'AT+RFC'
     4643
0076 0D        1620            db 0x0D
0077 0A        1621            db 0x0A
0078 00        1622            db 0x00
0079           1623   __str_9:
0079 41542B50  1624            db 'AT+POWE'
     4F5745
0080 0D        1625            db 0x0D
0081 0A        1626            db 0x0A
0082 00        1627            db 0x00
0083           1628   __str_10:
0083 41542B43  1629            db 'AT+CLSS'
     4C5353
008A 0D        1630            db 0x0D
008B 0A        1631            db 0x0A
008C 00        1632            db 0x00
008D           1633   __str_11:
008D 41542B44  1634            db 'AT+DVIDABBA'
     56494441
     424241
0098 0D        1635            db 0x0D
0099 0A        1636            db 0x0A
009A 00        1637            db 0x00
009B           1638   __str_12:
009B 4D617374  1639            db 'Master says: %s'
     65722073
     6179733A
     202573
00AA 0D        1640            db 0x0D
00AB 0A        1641            db 0x0A
00AC 00        1642            db 0x00
00AD           1643   __str_13:
00AD 2A2A2A20  1644            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
00C8 0D        1645            db 0x0D
00C9 0A        1646            db 0x0A
00CA 00        1647            db 0x00
00CB           1648   __str_14:
00CB 25303575  1649            db '%05u'
00CF 0A        1650            db 0x0A
00D0 00        1651            db 0x00
00D1           1652   
0003           1653            CSEG
0003           1654   
0003           1655   end
