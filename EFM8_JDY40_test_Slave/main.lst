0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 21 17:22:00 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _servo_pick
0000             29            public _Timer5_ISR
0000             30            public _ADC_at_Pin
0000             31            public _InitPinADC
0000             32            public _InitADC
0000             33            public _Set_Pin_Input
0000             34            public _Set_Pin_Output
0000             35            public _ReceptionOff
0000             36            public _SendATCommand
0000             37            public _waitms_or_RI1
0000             38            public _RXU1
0000             39            public _getstr1
0000             40            public _getchar1_with_timeout
0000             41            public _getchar1
0000             42            public _sendstr1
0000             43            public _putchar1
0000             44            public _UART1_Init
0000             45            public _waitms
0000             46            public _Timer3us
0000             47            public __c51_external_startup
0000             48            public _buff
0000             49            public _getstr1_PARM_2
0000             50            public _vy
0000             51            public _vx
0000             52            public _vy_thres
0000             53            public _vx_thres
0000             54            public _servo_arm
0000             55            public _servo_base
0000             56            public _R_motor_dir
0000             57            public _L_motor_dir
0000             58            public _pwm_right
0000             59            public _pwm_left
0000             60            public _servo_counter
0000             61            public _pwm_counter
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADC0ASAH       DATA 0xb6
0000             67   _ADC0ASAL       DATA 0xb5
0000             68   _ADC0ASCF       DATA 0xa1
0000             69   _ADC0ASCT       DATA 0xc7
0000             70   _ADC0CF0        DATA 0xbc
0000             71   _ADC0CF1        DATA 0xb9
0000             72   _ADC0CF2        DATA 0xdf
0000             73   _ADC0CN0        DATA 0xe8
0000             74   _ADC0CN1        DATA 0xb2
0000             75   _ADC0CN2        DATA 0xb3
0000             76   _ADC0GTH        DATA 0xc4
0000             77   _ADC0GTL        DATA 0xc3
0000             78   _ADC0H          DATA 0xbe
0000             79   _ADC0L          DATA 0xbd
0000             80   _ADC0LTH        DATA 0xc6
0000             81   _ADC0LTL        DATA 0xc5
0000             82   _ADC0MX         DATA 0xbb
0000             83   _B              DATA 0xf0
0000             84   _CKCON0         DATA 0x8e
0000             85   _CKCON1         DATA 0xa6
0000             86   _CLEN0          DATA 0xc6
0000             87   _CLIE0          DATA 0xc7
0000             88   _CLIF0          DATA 0xe8
0000             89   _CLKSEL         DATA 0xa9
0000             90   _CLOUT0         DATA 0xd1
0000             91   _CLU0CF         DATA 0xb1
0000             92   _CLU0FN         DATA 0xaf
0000             93   _CLU0MX         DATA 0x84
0000             94   _CLU1CF         DATA 0xb3
0000             95   _CLU1FN         DATA 0xb2
0000             96   _CLU1MX         DATA 0x85
0000             97   _CLU2CF         DATA 0xb6
0000             98   _CLU2FN         DATA 0xb5
0000             99   _CLU2MX         DATA 0x91
0000            100   _CLU3CF         DATA 0xbf
0000            101   _CLU3FN         DATA 0xbe
0000            102   _CLU3MX         DATA 0xae
0000            103   _CMP0CN0        DATA 0x9b
0000            104   _CMP0CN1        DATA 0x99
0000            105   _CMP0MD         DATA 0x9d
0000            106   _CMP0MX         DATA 0x9f
0000            107   _CMP1CN0        DATA 0xbf
0000            108   _CMP1CN1        DATA 0xac
0000            109   _CMP1MD         DATA 0xab
0000            110   _CMP1MX         DATA 0xaa
0000            111   _CRC0CN0        DATA 0xce
0000            112   _CRC0CN1        DATA 0x86
0000            113   _CRC0CNT        DATA 0xd3
0000            114   _CRC0DAT        DATA 0xcb
0000            115   _CRC0FLIP       DATA 0xcf
0000            116   _CRC0IN         DATA 0xca
0000            117   _CRC0ST         DATA 0xd2
0000            118   _DAC0CF0        DATA 0x91
0000            119   _DAC0CF1        DATA 0x92
0000            120   _DAC0H          DATA 0x85
0000            121   _DAC0L          DATA 0x84
0000            122   _DAC1CF0        DATA 0x93
0000            123   _DAC1CF1        DATA 0x94
0000            124   _DAC1H          DATA 0x8a
0000            125   _DAC1L          DATA 0x89
0000            126   _DAC2CF0        DATA 0x95
0000            127   _DAC2CF1        DATA 0x96
0000            128   _DAC2H          DATA 0x8c
0000            129   _DAC2L          DATA 0x8b
0000            130   _DAC3CF0        DATA 0x9a
0000            131   _DAC3CF1        DATA 0x9c
0000            132   _DAC3H          DATA 0x8e
0000            133   _DAC3L          DATA 0x8d
0000            134   _DACGCF0        DATA 0x88
0000            135   _DACGCF1        DATA 0x98
0000            136   _DACGCF2        DATA 0xa2
0000            137   _DERIVID        DATA 0xad
0000            138   _DEVICEID       DATA 0xb5
0000            139   _DPH            DATA 0x83
0000            140   _DPL            DATA 0x82
0000            141   _EIE1           DATA 0xe6
0000            142   _EIE2           DATA 0xf3
0000            143   _EIP1           DATA 0xbb
0000            144   _EIP1H          DATA 0xee
0000            145   _EIP2           DATA 0xed
0000            146   _EIP2H          DATA 0xf6
0000            147   _EMI0CN         DATA 0xe7
0000            148   _FLKEY          DATA 0xb7
0000            149   _HFO0CAL        DATA 0xc7
0000            150   _HFO1CAL        DATA 0xd6
0000            151   _HFOCN          DATA 0xef
0000            152   _I2C0ADM        DATA 0xff
0000            153   _I2C0CN0        DATA 0xba
0000            154   _I2C0DIN        DATA 0xbc
0000            155   _I2C0DOUT       DATA 0xbb
0000            156   _I2C0FCN0       DATA 0xad
0000            157   _I2C0FCN1       DATA 0xab
0000            158   _I2C0FCT        DATA 0xf5
0000            159   _I2C0SLAD       DATA 0xbd
0000            160   _I2C0STAT       DATA 0xb9
0000            161   _IE             DATA 0xa8
0000            162   _IP             DATA 0xb8
0000            163   _IPH            DATA 0xf2
0000            164   _IT01CF         DATA 0xe4
0000            165   _LFO0CN         DATA 0xb1
0000            166   _P0             DATA 0x80
0000            167   _P0MASK         DATA 0xfe
0000            168   _P0MAT          DATA 0xfd
0000            169   _P0MDIN         DATA 0xf1
0000            170   _P0MDOUT        DATA 0xa4
0000            171   _P0SKIP         DATA 0xd4
0000            172   _P1             DATA 0x90
0000            173   _P1MASK         DATA 0xee
0000            174   _P1MAT          DATA 0xed
0000            175   _P1MDIN         DATA 0xf2
0000            176   _P1MDOUT        DATA 0xa5
0000            177   _P1SKIP         DATA 0xd5
0000            178   _P2             DATA 0xa0
0000            179   _P2MASK         DATA 0xfc
0000            180   _P2MAT          DATA 0xfb
0000            181   _P2MDIN         DATA 0xf3
0000            182   _P2MDOUT        DATA 0xa6
0000            183   _P2SKIP         DATA 0xcc
0000            184   _P3             DATA 0xb0
0000            185   _P3MDIN         DATA 0xf4
0000            186   _P3MDOUT        DATA 0x9c
0000            187   _PCA0CENT       DATA 0x9e
0000            188   _PCA0CLR        DATA 0x9c
0000            189   _PCA0CN0        DATA 0xd8
0000            190   _PCA0CPH0       DATA 0xfc
0000            191   _PCA0CPH1       DATA 0xea
0000            192   _PCA0CPH2       DATA 0xec
0000            193   _PCA0CPH3       DATA 0xf5
0000            194   _PCA0CPH4       DATA 0x85
0000            195   _PCA0CPH5       DATA 0xde
0000            196   _PCA0CPL0       DATA 0xfb
0000            197   _PCA0CPL1       DATA 0xe9
0000            198   _PCA0CPL2       DATA 0xeb
0000            199   _PCA0CPL3       DATA 0xf4
0000            200   _PCA0CPL4       DATA 0x84
0000            201   _PCA0CPL5       DATA 0xdd
0000            202   _PCA0CPM0       DATA 0xda
0000            203   _PCA0CPM1       DATA 0xdb
0000            204   _PCA0CPM2       DATA 0xdc
0000            205   _PCA0CPM3       DATA 0xae
0000            206   _PCA0CPM4       DATA 0xaf
0000            207   _PCA0CPM5       DATA 0xcc
0000            208   _PCA0H          DATA 0xfa
0000            209   _PCA0L          DATA 0xf9
0000            210   _PCA0MD         DATA 0xd9
0000            211   _PCA0POL        DATA 0x96
0000            212   _PCA0PWM        DATA 0xf7
0000            213   _PCON0          DATA 0x87
0000            214   _PCON1          DATA 0xcd
0000            215   _PFE0CN         DATA 0xc1
0000            216   _PRTDRV         DATA 0xf6
0000            217   _PSCTL          DATA 0x8f
0000            218   _PSTAT0         DATA 0xaa
0000            219   _PSW            DATA 0xd0
0000            220   _REF0CN         DATA 0xd1
0000            221   _REG0CN         DATA 0xc9
0000            222   _REVID          DATA 0xb6
0000            223   _RSTSRC         DATA 0xef
0000            224   _SBCON1         DATA 0x94
0000            225   _SBRLH1         DATA 0x96
0000            226   _SBRLL1         DATA 0x95
0000            227   _SBUF           DATA 0x99
0000            228   _SBUF0          DATA 0x99
0000            229   _SBUF1          DATA 0x92
0000            230   _SCON           DATA 0x98
0000            231   _SCON0          DATA 0x98
0000            232   _SCON1          DATA 0xc8
0000            233   _SFRPAGE        DATA 0xa7
0000            234   _SFRPGCN        DATA 0xbc
0000            235   _SFRSTACK       DATA 0xd7
0000            236   _SMB0ADM        DATA 0xd6
0000            237   _SMB0ADR        DATA 0xd7
0000            238   _SMB0CF         DATA 0xc1
0000            239   _SMB0CN0        DATA 0xc0
0000            240   _SMB0DAT        DATA 0xc2
0000            241   _SMB0FCN0       DATA 0xc3
0000            242   _SMB0FCN1       DATA 0xc4
0000            243   _SMB0FCT        DATA 0xef
0000            244   _SMB0RXLN       DATA 0xc5
0000            245   _SMB0TC         DATA 0xac
0000            246   _SMOD1          DATA 0x93
0000            247   _SP             DATA 0x81
0000            248   _SPI0CFG        DATA 0xa1
0000            249   _SPI0CKR        DATA 0xa2
0000            250   _SPI0CN0        DATA 0xf8
0000            251   _SPI0DAT        DATA 0xa3
0000            252   _SPI0FCN0       DATA 0x9a
0000            253   _SPI0FCN1       DATA 0x9b
0000            254   _SPI0FCT        DATA 0xf7
0000            255   _SPI0PCF        DATA 0xdf
0000            256   _TCON           DATA 0x88
0000            257   _TH0            DATA 0x8c
0000            258   _TH1            DATA 0x8d
0000            259   _TL0            DATA 0x8a
0000            260   _TL1            DATA 0x8b
0000            261   _TMOD           DATA 0x89
0000            262   _TMR2CN0        DATA 0xc8
0000            263   _TMR2CN1        DATA 0xfd
0000            264   _TMR2H          DATA 0xcf
0000            265   _TMR2L          DATA 0xce
0000            266   _TMR2RLH        DATA 0xcb
0000            267   _TMR2RLL        DATA 0xca
0000            268   _TMR3CN0        DATA 0x91
0000            269   _TMR3CN1        DATA 0xfe
0000            270   _TMR3H          DATA 0x95
0000            271   _TMR3L          DATA 0x94
0000            272   _TMR3RLH        DATA 0x93
0000            273   _TMR3RLL        DATA 0x92
0000            274   _TMR4CN0        DATA 0x98
0000            275   _TMR4CN1        DATA 0xff
0000            276   _TMR4H          DATA 0xa5
0000            277   _TMR4L          DATA 0xa4
0000            278   _TMR4RLH        DATA 0xa3
0000            279   _TMR4RLL        DATA 0xa2
0000            280   _TMR5CN0        DATA 0xc0
0000            281   _TMR5CN1        DATA 0xf1
0000            282   _TMR5H          DATA 0xd5
0000            283   _TMR5L          DATA 0xd4
0000            284   _TMR5RLH        DATA 0xd3
0000            285   _TMR5RLL        DATA 0xd2
0000            286   _UART0PCF       DATA 0xd9
0000            287   _UART1FCN0      DATA 0x9d
0000            288   _UART1FCN1      DATA 0xd8
0000            289   _UART1FCT       DATA 0xfa
0000            290   _UART1LIN       DATA 0x9e
0000            291   _UART1PCF       DATA 0xda
0000            292   _VDM0CN         DATA 0xff
0000            293   _WDTCN          DATA 0x97
0000            294   _XBR0           DATA 0xe1
0000            295   _XBR1           DATA 0xe2
0000            296   _XBR2           DATA 0xe3
0000            297   _XOSC0CN        DATA 0x86
0000            298   _DPTR           DATA 0x8382
0000            299   _TMR2RL         DATA 0xcbca
0000            300   _TMR3RL         DATA 0x9392
0000            301   _TMR4RL         DATA 0xa3a2
0000            302   _TMR5RL         DATA 0xd3d2
0000            303   _TMR0           DATA 0x8c8a
0000            304   _TMR1           DATA 0x8d8b
0000            305   _TMR2           DATA 0xcfce
0000            306   _TMR3           DATA 0x9594
0000            307   _TMR4           DATA 0xa5a4
0000            308   _TMR5           DATA 0xd5d4
0000            309   _SBRL1          DATA 0x9695
0000            310   _PCA0           DATA 0xfaf9
0000            311   _PCA0CP0        DATA 0xfcfb
0000            312   _PCA0CP1        DATA 0xeae9
0000            313   _PCA0CP2        DATA 0xeceb
0000            314   _PCA0CP3        DATA 0xf5f4
0000            315   _PCA0CP4        DATA 0x8584
0000            316   _PCA0CP5        DATA 0xdedd
0000            317   _ADC0ASA        DATA 0xb6b5
0000            318   _ADC0GT         DATA 0xc4c3
0000            319   _ADC0           DATA 0xbebd
0000            320   _ADC0LT         DATA 0xc6c5
0000            321   _DAC0           DATA 0x8584
0000            322   _DAC1           DATA 0x8a89
0000            323   _DAC2           DATA 0x8c8b
0000            324   _DAC3           DATA 0x8e8d
0000            325   ;--------------------------------------------------------
0000            326   ; special function bits
0000            327   ;--------------------------------------------------------
0000            328   _ACC_0          BIT 0xe0
0000            329   _ACC_1          BIT 0xe1
0000            330   _ACC_2          BIT 0xe2
0000            331   _ACC_3          BIT 0xe3
0000            332   _ACC_4          BIT 0xe4
0000            333   _ACC_5          BIT 0xe5
0000            334   _ACC_6          BIT 0xe6
0000            335   _ACC_7          BIT 0xe7
0000            336   _TEMPE          BIT 0xe8
0000            337   _ADGN0          BIT 0xe9
0000            338   _ADGN1          BIT 0xea
0000            339   _ADWINT         BIT 0xeb
0000            340   _ADBUSY         BIT 0xec
0000            341   _ADINT          BIT 0xed
0000            342   _IPOEN          BIT 0xee
0000            343   _ADEN           BIT 0xef
0000            344   _B_0            BIT 0xf0
0000            345   _B_1            BIT 0xf1
0000            346   _B_2            BIT 0xf2
0000            347   _B_3            BIT 0xf3
0000            348   _B_4            BIT 0xf4
0000            349   _B_5            BIT 0xf5
0000            350   _B_6            BIT 0xf6
0000            351   _B_7            BIT 0xf7
0000            352   _C0FIF          BIT 0xe8
0000            353   _C0RIF          BIT 0xe9
0000            354   _C1FIF          BIT 0xea
0000            355   _C1RIF          BIT 0xeb
0000            356   _C2FIF          BIT 0xec
0000            357   _C2RIF          BIT 0xed
0000            358   _C3FIF          BIT 0xee
0000            359   _C3RIF          BIT 0xef
0000            360   _D1SRC0         BIT 0x88
0000            361   _D1SRC1         BIT 0x89
0000            362   _D1AMEN         BIT 0x8a
0000            363   _D01REFSL       BIT 0x8b
0000            364   _D3SRC0         BIT 0x8c
0000            365   _D3SRC1         BIT 0x8d
0000            366   _D3AMEN         BIT 0x8e
0000            367   _D23REFSL       BIT 0x8f
0000            368   _D0UDIS         BIT 0x98
0000            369   _D1UDIS         BIT 0x99
0000            370   _D2UDIS         BIT 0x9a
0000            371   _D3UDIS         BIT 0x9b
0000            372   _EX0            BIT 0xa8
0000            373   _ET0            BIT 0xa9
0000            374   _EX1            BIT 0xaa
0000            375   _ET1            BIT 0xab
0000            376   _ES0            BIT 0xac
0000            377   _ET2            BIT 0xad
0000            378   _ESPI0          BIT 0xae
0000            379   _EA             BIT 0xaf
0000            380   _PX0            BIT 0xb8
0000            381   _PT0            BIT 0xb9
0000            382   _PX1            BIT 0xba
0000            383   _PT1            BIT 0xbb
0000            384   _PS0            BIT 0xbc
0000            385   _PT2            BIT 0xbd
0000            386   _PSPI0          BIT 0xbe
0000            387   _P0_0           BIT 0x80
0000            388   _P0_1           BIT 0x81
0000            389   _P0_2           BIT 0x82
0000            390   _P0_3           BIT 0x83
0000            391   _P0_4           BIT 0x84
0000            392   _P0_5           BIT 0x85
0000            393   _P0_6           BIT 0x86
0000            394   _P0_7           BIT 0x87
0000            395   _P1_0           BIT 0x90
0000            396   _P1_1           BIT 0x91
0000            397   _P1_2           BIT 0x92
0000            398   _P1_3           BIT 0x93
0000            399   _P1_4           BIT 0x94
0000            400   _P1_5           BIT 0x95
0000            401   _P1_6           BIT 0x96
0000            402   _P1_7           BIT 0x97
0000            403   _P2_0           BIT 0xa0
0000            404   _P2_1           BIT 0xa1
0000            405   _P2_2           BIT 0xa2
0000            406   _P2_3           BIT 0xa3
0000            407   _P2_4           BIT 0xa4
0000            408   _P2_5           BIT 0xa5
0000            409   _P2_6           BIT 0xa6
0000            410   _P3_0           BIT 0xb0
0000            411   _P3_1           BIT 0xb1
0000            412   _P3_2           BIT 0xb2
0000            413   _P3_3           BIT 0xb3
0000            414   _P3_4           BIT 0xb4
0000            415   _P3_7           BIT 0xb7
0000            416   _CCF0           BIT 0xd8
0000            417   _CCF1           BIT 0xd9
0000            418   _CCF2           BIT 0xda
0000            419   _CCF3           BIT 0xdb
0000            420   _CCF4           BIT 0xdc
0000            421   _CCF5           BIT 0xdd
0000            422   _CR             BIT 0xde
0000            423   _CF             BIT 0xdf
0000            424   _PARITY         BIT 0xd0
0000            425   _F1             BIT 0xd1
0000            426   _OV             BIT 0xd2
0000            427   _RS0            BIT 0xd3
0000            428   _RS1            BIT 0xd4
0000            429   _F0             BIT 0xd5
0000            430   _AC             BIT 0xd6
0000            431   _CY             BIT 0xd7
0000            432   _RI             BIT 0x98
0000            433   _TI             BIT 0x99
0000            434   _RB8            BIT 0x9a
0000            435   _TB8            BIT 0x9b
0000            436   _REN            BIT 0x9c
0000            437   _CE             BIT 0x9d
0000            438   _SMODE          BIT 0x9e
0000            439   _RI1            BIT 0xc8
0000            440   _TI1            BIT 0xc9
0000            441   _RBX1           BIT 0xca
0000            442   _TBX1           BIT 0xcb
0000            443   _REN1           BIT 0xcc
0000            444   _PERR1          BIT 0xcd
0000            445   _OVR1           BIT 0xce
0000            446   _SI             BIT 0xc0
0000            447   _ACK            BIT 0xc1
0000            448   _ARBLOST        BIT 0xc2
0000            449   _ACKRQ          BIT 0xc3
0000            450   _STO            BIT 0xc4
0000            451   _STA            BIT 0xc5
0000            452   _TXMODE         BIT 0xc6
0000            453   _MASTER         BIT 0xc7
0000            454   _SPIEN          BIT 0xf8
0000            455   _TXNF           BIT 0xf9
0000            456   _NSSMD0         BIT 0xfa
0000            457   _NSSMD1         BIT 0xfb
0000            458   _RXOVRN         BIT 0xfc
0000            459   _MODF           BIT 0xfd
0000            460   _WCOL           BIT 0xfe
0000            461   _SPIF           BIT 0xff
0000            462   _IT0            BIT 0x88
0000            463   _IE0            BIT 0x89
0000            464   _IT1            BIT 0x8a
0000            465   _IE1            BIT 0x8b
0000            466   _TR0            BIT 0x8c
0000            467   _TF0            BIT 0x8d
0000            468   _TR1            BIT 0x8e
0000            469   _TF1            BIT 0x8f
0000            470   _T2XCLK0        BIT 0xc8
0000            471   _T2XCLK1        BIT 0xc9
0000            472   _TR2            BIT 0xca
0000            473   _T2SPLIT        BIT 0xcb
0000            474   _TF2CEN         BIT 0xcc
0000            475   _TF2LEN         BIT 0xcd
0000            476   _TF2L           BIT 0xce
0000            477   _TF2H           BIT 0xcf
0000            478   _T4XCLK0        BIT 0x98
0000            479   _T4XCLK1        BIT 0x99
0000            480   _TR4            BIT 0x9a
0000            481   _T4SPLIT        BIT 0x9b
0000            482   _TF4CEN         BIT 0x9c
0000            483   _TF4LEN         BIT 0x9d
0000            484   _TF4L           BIT 0x9e
0000            485   _TF4H           BIT 0x9f
0000            486   _T5XCLK0        BIT 0xc0
0000            487   _T5XCLK1        BIT 0xc1
0000            488   _TR5            BIT 0xc2
0000            489   _T5SPLIT        BIT 0xc3
0000            490   _TF5CEN         BIT 0xc4
0000            491   _TF5LEN         BIT 0xc5
0000            492   _TF5L           BIT 0xc6
0000            493   _TF5H           BIT 0xc7
0000            494   _RIE            BIT 0xd8
0000            495   _RXTO0          BIT 0xd9
0000            496   _RXTO1          BIT 0xda
0000            497   _RFRQ           BIT 0xdb
0000            498   _TIE            BIT 0xdc
0000            499   _TXHOLD         BIT 0xdd
0000            500   _TXNF1          BIT 0xde
0000            501   _TFRQ           BIT 0xdf
0000            502   ;--------------------------------------------------------
0000            503   ; overlayable register banks
0000            504   ;--------------------------------------------------------
0000            505            rbank0 segment data overlay
0000            506   ;--------------------------------------------------------
0000            507   ; internal ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_DSEG
0000            510   _pwm_counter:
0000            511            ds 2
0002            512   _servo_counter:
0002            513            ds 2
0004            514   _pwm_left:
0004            515            ds 1
0005            516   _pwm_right:
0005            517            ds 1
0006            518   _L_motor_dir:
0006            519            ds 1
0007            520   _R_motor_dir:
0007            521            ds 1
0008            522   _servo_base:
0008            523            ds 1
0009            524   _servo_arm:
0009            525            ds 1
000A            526   _vx_thres:
000A            527            ds 2
000C            528   _vy_thres:
000C            529            ds 2
000E            530   _vx:
000E            531            ds 2
0010            532   _vy:
0010            533            ds 2
0012            534   _getstr1_PARM_2:
0012            535            ds 1
0013            536   _main_vx_error_1_129:
0013            537            ds 2
0015            538   _main_vy_error_1_129:
0015            539            ds 2
0017            540   _main_vx_err_1_129:
0017            541            ds 2
0019            542   _main_vy_err_1_129:
0019            543            ds 2
001B            544   _main_vx_1_129:
001B            545            ds 2
001D            546   _main_vy_1_129:
001D            547            ds 2
001F            548   _main_pick_1_129:
001F            549            ds 2
0021            550   ;--------------------------------------------------------
0021            551   ; overlayable items in internal ram 
0021            552   ;--------------------------------------------------------
0000            553            rseg    R_OSEG
0000            554            rseg    R_OSEG
0000            555            rseg    R_OSEG
0000            556            rseg    R_OSEG
0000            557            rseg    R_OSEG
0000            558            rseg    R_OSEG
0000            559   _InitPinADC_PARM_2:
0000            560            ds 1
0001            561            rseg    R_OSEG
0001            562   ;--------------------------------------------------------
0001            563   ; indirectly addressable internal ram data
0001            564   ;--------------------------------------------------------
0000            565            rseg R_ISEG
0000            566   _buff:
0000            567            ds 20
0014            568   ;--------------------------------------------------------
0014            569   ; absolute internal ram data
0014            570   ;--------------------------------------------------------
0000            571            DSEG
0000            572   ;--------------------------------------------------------
0000            573   ; bit data
0000            574   ;--------------------------------------------------------
0000            575            rseg R_BSEG
0000            576   ;--------------------------------------------------------
0000            577   ; paged external ram data
0000            578   ;--------------------------------------------------------
0000            579            rseg R_PSEG
0000            580   ;--------------------------------------------------------
0000            581   ; external ram data
0000            582   ;--------------------------------------------------------
0000            583            rseg R_XSEG
0000            584   ;--------------------------------------------------------
0000            585   ; absolute external ram data
0000            586   ;--------------------------------------------------------
0000            587            XSEG
0000            588   ;--------------------------------------------------------
0000            589   ; external initialized ram data
0000            590   ;--------------------------------------------------------
0000            591            rseg R_IXSEG
0000            592            rseg R_HOME
0000            593            rseg R_GSINIT
0000            594            rseg R_CSEG
0000            595   ;--------------------------------------------------------
0000            596   ; Reset entry point and interrupt vectors
0000            597   ;--------------------------------------------------------
0000            598            CSEG at 0x0000
0000 020000     599            ljmp    _crt0
0093            600            CSEG at 0x0093
0093 020000     601            ljmp    _Timer5_ISR
0096            602   ;--------------------------------------------------------
0096            603   ; global & static initialisations
0096            604   ;--------------------------------------------------------
0000            605            rseg R_HOME
0000            606            rseg R_GSINIT
0000            607            rseg R_GSINIT
0000            608   ;--------------------------------------------------------
0000            609   ; data variables initialization
0000            610   ;--------------------------------------------------------
0000            611            rseg R_DINIT
0000            612   ;        main.c:50: unsigned int pwm_counter = 0; 
0000 E4         613            clr     a
0001 F550       614            mov     _pwm_counter,a
0003 F551       615            mov     (_pwm_counter + 1),a
0005            616   ;        main.c:51: unsigned int servo_counter = 0; 
0005 E4         617            clr     a
0006 F510       618            mov     _servo_counter,a
0008 F511       619            mov     (_servo_counter + 1),a
000A            620   ;        main.c:52: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75D000     621            mov     _pwm_left,#0x00
000D            622   ;        main.c:52: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 759000     623            mov     _pwm_right,#0x00
0010            624   ;        main.c:53: unsigned char servo_base = 1, servo_arm = 1; 
0010 755001     625            mov     _L_motor_dir,#0x01
0013            626   ;        main.c:53: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 751001     627            mov     _R_motor_dir,#0x01
0016            628   ;        main.c:54: unsigned char servo_base = 1, servo_arm = 1; 
0016 75D001     629            mov     _servo_base,#0x01
0019            630   ;        main.c:54: int vx_thres = 161, vy_thres = 166; 
0019 759001     631            mov     _servo_arm,#0x01
001C            632   ;        main.c:55: int vx = 0, vy = 0; 
001C 7550A1     633            mov     _vx_thres,#0xA1
001F E4         634            clr     a
0020 F551       635            mov     (_vx_thres + 1),a
0022            636   ;        main.c:55: int vx_thres = 161, vy_thres = 166; 
0022 7510A6     637            mov     _vy_thres,#0xA6
0025 E4         638            clr     a
0026 F511       639            mov     (_vy_thres + 1),a
0028            640   ;        main.c:56: int vx = 0, vy = 0; 
0028 E4         641            clr     a
0029 F5D0       642            mov     _vx,a
002B F5D1       643            mov     (_vx + 1),a
002D            644   ;        main.c:56: 
002D E4         645            clr     a
002E F590       646            mov     _vy,a
0030 F591       647            mov     (_vy + 1),a
0032            648            ; The linker places a 'ret' at the end of segment R_DINIT.
0032            649   ;--------------------------------------------------------
0032            650   ; code
0032            651   ;--------------------------------------------------------
0000            652            rseg R_CSEG
0000            653   ;------------------------------------------------------------
0000            654   ;Allocation info for local variables in function '_c51_external_startup'
0000            655   ;------------------------------------------------------------
0000            656   ;------------------------------------------------------------
0000            657   ;        main.c:59: char _c51_external_startup (void)
0000            658   ;        -----------------------------------------
0000            659   ;         function _c51_external_startup
0000            660   ;        -----------------------------------------
0000            661   __c51_external_startup:
0000            662            using   0
0000            663   ;        main.c:62: SFRPAGE = 0x00;
0000 75A700     664            mov     _SFRPAGE,#0x00
0003            665   ;        main.c:63: WDTCN = 0xDE; //First key
0003 7597DE     666            mov     _WDTCN,#0xDE
0006            667   ;        main.c:64: WDTCN = 0xAD; //Second key
0006 7597AD     668            mov     _WDTCN,#0xAD
0009            669   ;        main.c:66: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     670            mov     _VDM0CN,#0x80
000C            671   ;        main.c:67: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     672            mov     _RSTSRC,#0x06
000F            673   ;        main.c:74: SFRPAGE = 0x10;
000F 75A710     674            mov     _SFRPAGE,#0x10
0012            675   ;        main.c:75: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     676            mov     _PFE0CN,#0x20
0015            677   ;        main.c:76: SFRPAGE = 0x00;
0015 75A700     678            mov     _SFRPAGE,#0x00
0018            679   ;        main.c:97: CLKSEL = 0x00;
0018 75A900     680            mov     _CLKSEL,#0x00
001B            681   ;        main.c:98: CLKSEL = 0x00;
001B 75A900     682            mov     _CLKSEL,#0x00
001E            683   ;        main.c:99: while ((CLKSEL & 0x80) == 0);
001E            684   L002001?:
001E E5A9       685            mov     a,_CLKSEL
0020 30E7A0     686            jnb     acc.7,L002001?
0023            687   ;        main.c:100: CLKSEL = 0x03;
0023 75A903     688            mov     _CLKSEL,#0x03
0026            689   ;        main.c:101: CLKSEL = 0x03;
0026 75A903     690            mov     _CLKSEL,#0x03
0029            691   ;        main.c:102: while ((CLKSEL & 0x80) == 0);
0029            692   L002004?:
0029 E5A9       693            mov     a,_CLKSEL
002B 30E720     694            jnb     acc.7,L002004?
002E            695   ;        main.c:107: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     696            orl     _P0MDOUT,#0x11
0031            697   ;        main.c:108: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     698            orl     _P2MDOUT,#0x01
0034            699   ;        main.c:109: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     700            mov     _XBR0,#0x01
0037            701   ;        main.c:110: XBR1     = 0X00;
0037 75E200     702            mov     _XBR1,#0x00
003A            703   ;        main.c:111: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     704            mov     _XBR2,#0x41
003D            705   ;        main.c:117: SCON0 = 0x10;
003D 759810     706            mov     _SCON0,#0x10
0040            707   ;        main.c:118: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     708            mov     _TH1,#0xE6
0043            709   ;        main.c:119: TL1 = TH1;      // Init Timer1
0043 858D8B     710            mov     _TL1,_TH1
0046            711   ;        main.c:120: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     712            anl     _TMOD,#0x0F
0049            713   ;        main.c:121: TMOD |=  0x20;                       
0049 438920     714            orl     _TMOD,#0x20
004C            715   ;        main.c:122: TR1 = 1; // START Timer1
004C D28E       716            setb    _TR1
004E            717   ;        main.c:123: TI = 1;  // Indicate TX0 ready
004E D299       718            setb    _TI
0050            719   ;        main.c:125: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       720            setb    _P2_0
0052            721   ;        main.c:128: SFRPAGE=0x10;
0052 75A710     722            mov     _SFRPAGE,#0x10
0055            723   ;        main.c:129: TMR5CN0=0x00;
0055 75C000     724            mov     _TMR5CN0,#0x00
0058            725   ;        main.c:130: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     726            mov     _TMR5,#0xFF
005B 75D5FF     727            mov     (_TMR5 >> 8),#0xFF
005E            728   ;        main.c:131: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     729            orl     _EIE2,#0x08
0061            730   ;        main.c:132: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       731            setb    _TR5
0063            732   ;        main.c:135: EA=1;  // Enable global interrupts
0063 D2AF       733            setb    _EA
0065            734   ;        main.c:136: SFRPAGE=0x00;
0065 75A700     735            mov     _SFRPAGE,#0x00
0068            736   ;        main.c:138: return 0;
0068 758200     737            mov     dpl,#0x00
006B 22         738            ret
006C            739   ;------------------------------------------------------------
006C            740   ;Allocation info for local variables in function 'Timer3us'
006C            741   ;------------------------------------------------------------
006C            742   ;us                        Allocated to registers r2 
006C            743   ;i                         Allocated to registers r3 
006C            744   ;------------------------------------------------------------
006C            745   ;        main.c:142: void Timer3us(unsigned char us)
006C            746   ;        -----------------------------------------
006C            747   ;         function Timer3us
006C            748   ;        -----------------------------------------
006C            749   _Timer3us:
006C AA82       750            mov     r2,dpl
006E            751   ;        main.c:147: CKCON0|=0b_0100_0000;
006E 438E40     752            orl     _CKCON0,#0x40
0071            753   ;        main.c:149: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     754            mov     _TMR3RL,#0xB8
0074 7593FF     755            mov     (_TMR3RL >> 8),#0xFF
0077            756   ;        main.c:150: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     757            mov     _TMR3,_TMR3RL
007A 859395     758            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            759   ;        main.c:152: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     760            mov     _TMR3CN0,#0x04
0080            761   ;        main.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       762            mov     r3,#0x00
0082            763   L003004?:
0082 C3         764            clr     c
0083 EB         765            mov     a,r3
0084 9A         766            subb    a,r2
0085 5000       767            jnc     L003007?
0087            768   ;        main.c:155: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            769   L003001?:
0087 E591       770            mov     a,_TMR3CN0
0089 30E720     771            jnb     acc.7,L003001?
008C            772   ;        main.c:156: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     773            anl     _TMR3CN0,#0x7F
008F            774   ;        main.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         775            inc     r3
0090 8000       776            sjmp    L003004?
0092            777   L003007?:
0092            778   ;        main.c:158: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     779            mov     _TMR3CN0,#0x00
0095 22         780            ret
0096            781   ;------------------------------------------------------------
0096            782   ;Allocation info for local variables in function 'waitms'
0096            783   ;------------------------------------------------------------
0096            784   ;ms                        Allocated to registers r2 r3 
0096            785   ;j                         Allocated to registers r4 r5 
0096            786   ;k                         Allocated to registers r6 
0096            787   ;------------------------------------------------------------
0096            788   ;        main.c:161: void waitms (unsigned int ms)
0096            789   ;        -----------------------------------------
0096            790   ;         function waitms
0096            791   ;        -----------------------------------------
0096            792   _waitms:
0096 AA82       793            mov     r2,dpl
0098 AB83       794            mov     r3,dph
009A            795   ;        main.c:165: for(j=0; j<ms; j++)
009A 7C00       796            mov     r4,#0x00
009C 7D00       797            mov     r5,#0x00
009E            798   L004005?:
009E C3         799            clr     c
009F EC         800            mov     a,r4
00A0 9A         801            subb    a,r2
00A1 ED         802            mov     a,r5
00A2 9B         803            subb    a,r3
00A3 5000       804            jnc     L004009?
00A5            805   ;        main.c:166: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       806            mov     r6,#0x00
00A7            807   L004001?:
00A7 BE0460     808            cjne    r6,#0x04,L004018?
00AA            809   L004018?:
00AA 5000       810            jnc     L004007?
00AC 7582FA     811            mov     dpl,#0xFA
00AF C002       812            push    ar2
00B1 C003       813            push    ar3
00B3 C004       814            push    ar4
00B5 C005       815            push    ar5
00B7 C006       816            push    ar6
00B9 120000     817            lcall   _Timer3us
00BC D006       818            pop     ar6
00BE D005       819            pop     ar5
00C0 D004       820            pop     ar4
00C2 D003       821            pop     ar3
00C4 D002       822            pop     ar2
00C6 0E         823            inc     r6
00C7 8000       824            sjmp    L004001?
00C9            825   L004007?:
00C9            826   ;        main.c:165: for(j=0; j<ms; j++)
00C9 0C         827            inc     r4
00CA BC00A0     828            cjne    r4,#0x00,L004005?
00CD 0D         829            inc     r5
00CE 8000       830            sjmp    L004005?
00D0            831   L004009?:
00D0 22         832            ret
00D1            833   ;------------------------------------------------------------
00D1            834   ;Allocation info for local variables in function 'UART1_Init'
00D1            835   ;------------------------------------------------------------
00D1            836   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            837   ;------------------------------------------------------------
00D1            838   ;        main.c:169: void UART1_Init (unsigned long baudrate)
00D1            839   ;        -----------------------------------------
00D1            840   ;         function UART1_Init
00D1            841   ;        -----------------------------------------
00D1            842   _UART1_Init:
00D1 AA82       843            mov     r2,dpl
00D3 AB83       844            mov     r3,dph
00D5 ACF0       845            mov     r4,b
00D7 FD         846            mov     r5,a
00D8            847   ;        main.c:171: SFRPAGE = 0x20;
00D8 75A720     848            mov     _SFRPAGE,#0x20
00DB            849   ;        main.c:172: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     850            mov     _SMOD1,#0x0C
00DE            851   ;        main.c:173: SCON1 = 0x10;
00DE 75C810     852            mov     _SCON1,#0x10
00E1            853   ;        main.c:174: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     854            mov     _SBCON1,#0x00
00E4            855   ;        main.c:175: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       856            mov     __divulong_PARM_2,r2
00E6 8B01       857            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       858            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       859            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     860            mov     dptr,#0xA200
00EF 75F04A     861            mov     b,#0x4A
00F2 7404       862            mov     a,#0x04
00F4 120000     863            lcall   __divulong
00F7 AA82       864            mov     r2,dpl
00F9 AB83       865            mov     r3,dph
00FB ACF0       866            mov     r4,b
00FD FD         867            mov     r5,a
00FE 750018     868            mov     __divulong_PARM_2,#0x18
0101 E4         869            clr     a
0102 F501       870            mov     (__divulong_PARM_2 + 1),a
0104 F502       871            mov     (__divulong_PARM_2 + 2),a
0106 F503       872            mov     (__divulong_PARM_2 + 3),a
0108 8A82       873            mov     dpl,r2
010A 8B83       874            mov     dph,r3
010C 8CF0       875            mov     b,r4
010E ED         876            mov     a,r5
010F 120000     877            lcall   __divulong
0112 AA82       878            mov     r2,dpl
0114 AB83       879            mov     r3,dph
0116 ACF0       880            mov     r4,b
0118 FD         881            mov     r5,a
0119 E4         882            clr     a
011A C3         883            clr     c
011B 9A         884            subb    a,r2
011C FA         885            mov     r2,a
011D E4         886            clr     a
011E 9B         887            subb    a,r3
011F FB         888            mov     r3,a
0120 7401       889            mov     a,#0x01
0122 9C         890            subb    a,r4
0123 E4         891            clr     a
0124 9D         892            subb    a,r5
0125 8A95       893            mov     _SBRL1,r2
0127 8B96       894            mov     (_SBRL1 >> 8),r3
0129            895   ;        main.c:176: TI1 = 1; // indicate ready for TX
0129 D2C9       896            setb    _TI1
012B            897   ;        main.c:177: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     898            orl     _SBCON1,#0x40
012E            899   ;        main.c:178: SFRPAGE = 0x00;
012E 75A700     900            mov     _SFRPAGE,#0x00
0131 22         901            ret
0132            902   ;------------------------------------------------------------
0132            903   ;Allocation info for local variables in function 'putchar1'
0132            904   ;------------------------------------------------------------
0132            905   ;c                         Allocated to registers r2 
0132            906   ;------------------------------------------------------------
0132            907   ;        main.c:181: void putchar1 (char c) 
0132            908   ;        -----------------------------------------
0132            909   ;         function putchar1
0132            910   ;        -----------------------------------------
0132            911   _putchar1:
0132 AA82       912            mov     r2,dpl
0134            913   ;        main.c:183: SFRPAGE = 0x20;
0134 75A720     914            mov     _SFRPAGE,#0x20
0137            915   ;        main.c:184: while (!TI1);
0137            916   L006001?:
0137            917   ;        main.c:185: TI1=0;
0137 10C9F0     918            jbc     _TI1,L006008?
013A 8000       919            sjmp    L006001?
013C            920   L006008?:
013C            921   ;        main.c:186: SBUF1 = c;
013C 8A92       922            mov     _SBUF1,r2
013E            923   ;        main.c:187: SFRPAGE = 0x00;
013E 75A700     924            mov     _SFRPAGE,#0x00
0141 22         925            ret
0142            926   ;------------------------------------------------------------
0142            927   ;Allocation info for local variables in function 'sendstr1'
0142            928   ;------------------------------------------------------------
0142            929   ;s                         Allocated to registers r2 r3 r4 
0142            930   ;------------------------------------------------------------
0142            931   ;        main.c:190: void sendstr1 (char * s)
0142            932   ;        -----------------------------------------
0142            933   ;         function sendstr1
0142            934   ;        -----------------------------------------
0142            935   _sendstr1:
0142 AA82       936            mov     r2,dpl
0144 AB83       937            mov     r3,dph
0146 ACF0       938            mov     r4,b
0148            939   ;        main.c:192: while(*s)
0148            940   L007001?:
0148 8A82       941            mov     dpl,r2
014A 8B83       942            mov     dph,r3
014C 8CF0       943            mov     b,r4
014E 120000     944            lcall   __gptrget
0151 FD         945            mov     r5,a
0152 6000       946            jz      L007004?
0154            947   ;        main.c:194: putchar1(*s);
0154 8D82       948            mov     dpl,r5
0156 C002       949            push    ar2
0158 C003       950            push    ar3
015A C004       951            push    ar4
015C 120000     952            lcall   _putchar1
015F D004       953            pop     ar4
0161 D003       954            pop     ar3
0163 D002       955            pop     ar2
0165            956   ;        main.c:195: s++;        
0165 0A         957            inc     r2
0166 BA0030     958            cjne    r2,#0x00,L007001?
0169 0B         959            inc     r3
016A 8000       960            sjmp    L007001?
016C            961   L007004?:
016C 22         962            ret
016D            963   ;------------------------------------------------------------
016D            964   ;Allocation info for local variables in function 'getchar1'
016D            965   ;------------------------------------------------------------
016D            966   ;c                         Allocated to registers 
016D            967   ;------------------------------------------------------------
016D            968   ;        main.c:199: char getchar1 (void)
016D            969   ;        -----------------------------------------
016D            970   ;         function getchar1
016D            971   ;        -----------------------------------------
016D            972   _getchar1:
016D            973   ;        main.c:202: SFRPAGE = 0x20;
016D 75A720     974            mov     _SFRPAGE,#0x20
0170            975   ;        main.c:203: while (!RI1);
0170            976   L008001?:
0170            977   ;        main.c:204: RI1=0;
0170 10C830     978            jbc     _RI1,L008008?
0173 8000       979            sjmp    L008001?
0175            980   L008008?:
0175            981   ;        main.c:206: SCON1&=0b_0011_1111;
0175 53C83F     982            anl     _SCON1,#0x3F
0178            983   ;        main.c:207: c = SBUF1;
0178 859282     984            mov     dpl,_SBUF1
017B            985   ;        main.c:208: SFRPAGE = 0x00;
017B 75A700     986            mov     _SFRPAGE,#0x00
017E            987   ;        main.c:209: return (c);
017E 22         988            ret
017F            989   ;------------------------------------------------------------
017F            990   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F            991   ;------------------------------------------------------------
017F            992   ;c                         Allocated to registers 
017F            993   ;timeout                   Allocated to registers r2 r3 
017F            994   ;------------------------------------------------------------
017F            995   ;        main.c:212: char getchar1_with_timeout (void)
017F            996   ;        -----------------------------------------
017F            997   ;         function getchar1_with_timeout
017F            998   ;        -----------------------------------------
017F            999   _getchar1_with_timeout:
017F           1000   ;        main.c:216: SFRPAGE = 0x20;
017F 75A720    1001            mov     _SFRPAGE,#0x20
0182           1002   ;        main.c:218: while (!RI1)
0182 7A00      1003            mov     r2,#0x00
0184 7B00      1004            mov     r3,#0x00
0186           1005   L009003?:
0186 20C8B0    1006            jb      _RI1,L009005?
0189           1007   ;        main.c:220: SFRPAGE = 0x00;
0189 75A700    1008            mov     _SFRPAGE,#0x00
018C           1009   ;        main.c:221: Timer3us(20);
018C 758214    1010            mov     dpl,#0x14
018F C002      1011            push    ar2
0191 C003      1012            push    ar3
0193 120000    1013            lcall   _Timer3us
0196 D003      1014            pop     ar3
0198 D002      1015            pop     ar2
019A           1016   ;        main.c:222: SFRPAGE = 0x20;
019A 75A720    1017            mov     _SFRPAGE,#0x20
019D           1018   ;        main.c:223: timeout++;
019D 0A        1019            inc     r2
019E BA00F0    1020            cjne    r2,#0x00,L009012?
01A1 0B        1021            inc     r3
01A2           1022   L009012?:
01A2           1023   ;        main.c:224: if(timeout==25000)
01A2 BAA870    1024            cjne    r2,#0xA8,L009003?
01A5 BB6170    1025            cjne    r3,#0x61,L009003?
01A8           1026   ;        main.c:226: SFRPAGE = 0x00;
01A8 75A700    1027            mov     _SFRPAGE,#0x00
01AB           1028   ;        main.c:227: return ('\n'); // Timeout after half second
01AB 75820A    1029            mov     dpl,#0x0A
01AE 22        1030            ret
01AF           1031   L009005?:
01AF           1032   ;        main.c:230: RI1=0;
01AF C2C8      1033            clr     _RI1
01B1           1034   ;        main.c:232: SCON1&=0b_0011_1111;
01B1 53C83F    1035            anl     _SCON1,#0x3F
01B4           1036   ;        main.c:233: c = SBUF1;
01B4 859282    1037            mov     dpl,_SBUF1
01B7           1038   ;        main.c:234: SFRPAGE = 0x00;
01B7 75A700    1039            mov     _SFRPAGE,#0x00
01BA           1040   ;        main.c:235: return (c);
01BA 22        1041            ret
01BB           1042   ;------------------------------------------------------------
01BB           1043   ;Allocation info for local variables in function 'getstr1'
01BB           1044   ;------------------------------------------------------------
01BB           1045   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1046   ;s                         Allocated to registers r2 r3 r4 
01BB           1047   ;c                         Allocated to registers r1 
01BB           1048   ;cnt                       Allocated to registers r5 
01BB           1049   ;------------------------------------------------------------
01BB           1050   ;        main.c:238: void getstr1 (char * s, unsigned char n)
01BB           1051   ;        -----------------------------------------
01BB           1052   ;         function getstr1
01BB           1053   ;        -----------------------------------------
01BB           1054   _getstr1:
01BB AA82      1055            mov     r2,dpl
01BD AB83      1056            mov     r3,dph
01BF ACF0      1057            mov     r4,b
01C1           1058   ;        main.c:244: while(1)
01C1 7D00      1059            mov     r5,#0x00
01C3 8A06      1060            mov     ar6,r2
01C5 8B07      1061            mov     ar7,r3
01C7 8C00      1062            mov     ar0,r4
01C9           1063   L010007?:
01C9           1064   ;        main.c:246: c=getchar1_with_timeout();
01C9 C002      1065            push    ar2
01CB C003      1066            push    ar3
01CD C004      1067            push    ar4
01CF C005      1068            push    ar5
01D1 C006      1069            push    ar6
01D3 C007      1070            push    ar7
01D5 C000      1071            push    ar0
01D7 120000    1072            lcall   _getchar1_with_timeout
01DA A982      1073            mov     r1,dpl
01DC D000      1074            pop     ar0
01DE D007      1075            pop     ar7
01E0 D006      1076            pop     ar6
01E2 D005      1077            pop     ar5
01E4 D004      1078            pop     ar4
01E6 D003      1079            pop     ar3
01E8 D002      1080            pop     ar2
01EA           1081   ;        main.c:247: if(c=='\n')
01EA B90A70    1082            cjne    r1,#0x0A,L010002?
01ED           1083   ;        main.c:249: *s=0;
01ED 8A82      1084            mov     dpl,r2
01EF 8B83      1085            mov     dph,r3
01F1 8CF0      1086            mov     b,r4
01F3 E4        1087            clr     a
01F4           1088   ;        main.c:250: return;
01F4 020000    1089            ljmp    __gptrput
01F7           1090   L010002?:
01F7           1091   ;        main.c:253: if (cnt<n)
01F7 C3        1092            clr     c
01F8 ED        1093            mov     a,r5
01F9 9550      1094            subb    a,_getstr1_PARM_2
01FB 5000      1095            jnc     L010004?
01FD           1096   ;        main.c:255: cnt++;
01FD 0D        1097            inc     r5
01FE           1098   ;        main.c:256: *s=c;
01FE 8E82      1099            mov     dpl,r6
0200 8F83      1100            mov     dph,r7
0202 88F0      1101            mov     b,r0
0204 E9        1102            mov     a,r1
0205 120000    1103            lcall   __gptrput
0208 A3        1104            inc     dptr
0209 AE82      1105            mov     r6,dpl
020B AF83      1106            mov     r7,dph
020D           1107   ;        main.c:257: s++;
020D 8E02      1108            mov     ar2,r6
020F 8F03      1109            mov     ar3,r7
0211 8804      1110            mov     ar4,r0
0213 8000      1111            sjmp    L010007?
0215           1112   L010004?:
0215           1113   ;        main.c:261: *s=0;
0215 8A82      1114            mov     dpl,r2
0217 8B83      1115            mov     dph,r3
0219 8CF0      1116            mov     b,r4
021B E4        1117            clr     a
021C           1118   ;        main.c:262: return;
021C 020000    1119            ljmp    __gptrput
021F           1120   ;------------------------------------------------------------
021F           1121   ;Allocation info for local variables in function 'RXU1'
021F           1122   ;------------------------------------------------------------
021F           1123   ;------------------------------------------------------------
021F           1124   ;        main.c:268: bit RXU1 (void)
021F           1125   ;        -----------------------------------------
021F           1126   ;         function RXU1
021F           1127   ;        -----------------------------------------
021F           1128   _RXU1:
021F           1129   ;        main.c:271: SFRPAGE = 0x20;
021F 75A720    1130            mov     _SFRPAGE,#0x20
0222           1131   ;        main.c:272: mybit=RI1;
0222 A2C8      1132            mov     c,_RI1
0224           1133   ;        main.c:273: SFRPAGE = 0x00;
0224 75A700    1134            mov     _SFRPAGE,#0x00
0227           1135   ;        main.c:274: return mybit;
0227 22        1136            ret
0228           1137   ;------------------------------------------------------------
0228           1138   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1139   ;------------------------------------------------------------
0228           1140   ;ms                        Allocated to registers r2 r3 
0228           1141   ;j                         Allocated to registers r4 r5 
0228           1142   ;k                         Allocated to registers r6 
0228           1143   ;------------------------------------------------------------
0228           1144   ;        main.c:277: void waitms_or_RI1 (unsigned int ms)
0228           1145   ;        -----------------------------------------
0228           1146   ;         function waitms_or_RI1
0228           1147   ;        -----------------------------------------
0228           1148   _waitms_or_RI1:
0228 AA82      1149            mov     r2,dpl
022A AB83      1150            mov     r3,dph
022C           1151   ;        main.c:281: for(j=0; j<ms; j++)
022C 7C00      1152            mov     r4,#0x00
022E 7D00      1153            mov     r5,#0x00
0230           1154   L012007?:
0230 C3        1155            clr     c
0231 EC        1156            mov     a,r4
0232 9A        1157            subb    a,r2
0233 ED        1158            mov     a,r5
0234 9B        1159            subb    a,r3
0235 5000      1160            jnc     L012011?
0237           1161   ;        main.c:283: for (k=0; k<4; k++)
0237 7E00      1162            mov     r6,#0x00
0239           1163   L012003?:
0239 BE04F0    1164            cjne    r6,#0x04,L012019?
023C           1165   L012019?:
023C 5000      1166            jnc     L012009?
023E           1167   ;        main.c:285: if(RXU1()) return;
023E C002      1168            push    ar2
0240 C003      1169            push    ar3
0242 C004      1170            push    ar4
0244 C005      1171            push    ar5
0246 C006      1172            push    ar6
0248 120000    1173            lcall   _RXU1
024B E4        1174            clr     a
024C 33        1175            rlc     a
024D D006      1176            pop     ar6
024F D005      1177            pop     ar5
0251 D004      1178            pop     ar4
0253 D003      1179            pop     ar3
0255 D002      1180            pop     ar2
0257 6000      1181            jz      L012002?
0259 22        1182            ret
025A           1183   L012002?:
025A           1184   ;        main.c:286: Timer3us(250);
025A 7582FA    1185            mov     dpl,#0xFA
025D C002      1186            push    ar2
025F C003      1187            push    ar3
0261 C004      1188            push    ar4
0263 C005      1189            push    ar5
0265 C006      1190            push    ar6
0267 120000    1191            lcall   _Timer3us
026A D006      1192            pop     ar6
026C D005      1193            pop     ar5
026E D004      1194            pop     ar4
0270 D003      1195            pop     ar3
0272 D002      1196            pop     ar2
0274           1197   ;        main.c:283: for (k=0; k<4; k++)
0274 0E        1198            inc     r6
0275 8000      1199            sjmp    L012003?
0277           1200   L012009?:
0277           1201   ;        main.c:281: for(j=0; j<ms; j++)
0277 0C        1202            inc     r4
0278 BC0030    1203            cjne    r4,#0x00,L012007?
027B 0D        1204            inc     r5
027C 8000      1205            sjmp    L012007?
027E           1206   L012011?:
027E 22        1207            ret
027F           1208   ;------------------------------------------------------------
027F           1209   ;Allocation info for local variables in function 'SendATCommand'
027F           1210   ;------------------------------------------------------------
027F           1211   ;s                         Allocated to registers r2 r3 r4 
027F           1212   ;------------------------------------------------------------
027F           1213   ;        main.c:291: void SendATCommand (char * s)
027F           1214   ;        -----------------------------------------
027F           1215   ;         function SendATCommand
027F           1216   ;        -----------------------------------------
027F           1217   _SendATCommand:
027F AA82      1218            mov     r2,dpl
0281 AB83      1219            mov     r3,dph
0283 ACF0      1220            mov     r4,b
0285           1221   ;        main.c:293: printf("Command: %s", s);
0285 C002      1222            push    ar2
0287 C003      1223            push    ar3
0289 C004      1224            push    ar4
028B C002      1225            push    ar2
028D C003      1226            push    ar3
028F C004      1227            push    ar4
0291 74B0      1228            mov     a,#__str_0
0293 C0E0      1229            push    acc
0295 74BF      1230            mov     a,#(__str_0 >> 8)
0297 C0E0      1231            push    acc
0299 7480      1232            mov     a,#0x80
029B C0E0      1233            push    acc
029D 120000    1234            lcall   _printf
02A0 E581      1235            mov     a,sp
02A2 24FA      1236            add     a,#0xfa
02A4 F581      1237            mov     sp,a
02A6           1238   ;        main.c:294: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1239            clr     _P2_0
02A8           1240   ;        main.c:295: waitms(5);
02A8 900005    1241            mov     dptr,#0x0005
02AB 120000    1242            lcall   _waitms
02AE D004      1243            pop     ar4
02B0 D003      1244            pop     ar3
02B2 D002      1245            pop     ar2
02B4           1246   ;        main.c:296: sendstr1(s);
02B4 8A82      1247            mov     dpl,r2
02B6 8B83      1248            mov     dph,r3
02B8 8CF0      1249            mov     b,r4
02BA 120000    1250            lcall   _sendstr1
02BD           1251   ;        main.c:297: getstr1(buff, sizeof(buff)-1);
02BD 755013    1252            mov     _getstr1_PARM_2,#0x13
02C0 904410    1253            mov     dptr,#_buff
02C3 75F040    1254            mov     b,#0x40
02C6 120000    1255            lcall   _getstr1
02C9           1256   ;        main.c:298: waitms(10);
02C9 90000A    1257            mov     dptr,#0x000A
02CC 120000    1258            lcall   _waitms
02CF           1259   ;        main.c:299: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1260            setb    _P2_0
02D1           1261   ;        main.c:300: printf("Response: %s\r\n", buff);
02D1 7410      1262            mov     a,#_buff
02D3 C0E0      1263            push    acc
02D5 7444      1264            mov     a,#(_buff >> 8)
02D7 C0E0      1265            push    acc
02D9 7440      1266            mov     a,#0x40
02DB C0E0      1267            push    acc
02DD 7470      1268            mov     a,#__str_1
02DF C0E0      1269            push    acc
02E1 74C0      1270            mov     a,#(__str_1 >> 8)
02E3 C0E0      1271            push    acc
02E5 7480      1272            mov     a,#0x80
02E7 C0E0      1273            push    acc
02E9 120000    1274            lcall   _printf
02EC E581      1275            mov     a,sp
02EE 24FA      1276            add     a,#0xfa
02F0 F581      1277            mov     sp,a
02F2 22        1278            ret
02F3           1279   ;------------------------------------------------------------
02F3           1280   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1281   ;------------------------------------------------------------
02F3           1282   ;------------------------------------------------------------
02F3           1283   ;        main.c:303: void ReceptionOff (void)
02F3           1284   ;        -----------------------------------------
02F3           1285   ;         function ReceptionOff
02F3           1286   ;        -----------------------------------------
02F3           1287   _ReceptionOff:
02F3           1288   ;        main.c:305: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1289            clr     _P2_0
02F5           1290   ;        main.c:306: waitms(10);
02F5 90000A    1291            mov     dptr,#0x000A
02F8 120000    1292            lcall   _waitms
02FB           1293   ;        main.c:307: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C0B0    1294            mov     dptr,#__str_2
02FE 75F080    1295            mov     b,#0x80
0301 120000    1296            lcall   _sendstr1
0304           1297   ;        main.c:308: waitms(10);
0304 90000A    1298            mov     dptr,#0x000A
0307 120000    1299            lcall   _waitms
030A           1300   ;        main.c:310: SCON1&=0b_0011_1111;
030A 53C83F    1301            anl     _SCON1,#0x3F
030D           1302   ;        main.c:311: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1303            setb    _P2_0
030F 22        1304            ret
0310           1305   ;------------------------------------------------------------
0310           1306   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1307   ;------------------------------------------------------------
0310           1308   ;pin                       Allocated to registers r2 
0310           1309   ;mask                      Allocated to registers r3 
0310           1310   ;------------------------------------------------------------
0310           1311   ;        main.c:314: void Set_Pin_Output (unsigned char pin)
0310           1312   ;        -----------------------------------------
0310           1313   ;         function Set_Pin_Output
0310           1314   ;        -----------------------------------------
0310           1315   _Set_Pin_Output:
0310 AA82      1316            mov     r2,dpl
0312           1317   ;        main.c:318: mask=(1<<(pin&0x7));
0312 7407      1318            mov     a,#0x07
0314 5A        1319            anl     a,r2
0315 F5F0      1320            mov     b,a
0317 05F0      1321            inc     b
0319 7401      1322            mov     a,#0x01
031B 8000      1323            sjmp    L015011?
031D           1324   L015009?:
031D 25E0      1325            add     a,acc
031F           1326   L015011?:
031F D5F030    1327            djnz    b,L015009?
0322 FB        1328            mov     r3,a
0323           1329   ;        main.c:319: switch(pin/0x10)
0323 EA        1330            mov     a,r2
0324 C4        1331            swap    a
0325 540F      1332            anl     a,#0x0f
0327 FA        1333            mov  r2,a
0328 24FC      1334            add     a,#0xff - 0x03
032A 4000      1335            jc      L015006?
032C EA        1336            mov     a,r2
032D 2A        1337            add     a,r2
032E 2A        1338            add     a,r2
032F 90C1B0    1339            mov     dptr,#L015013?
0332 73        1340            jmp     @a+dptr
0333           1341   L015013?:
0333 020000    1342            ljmp    L015001?
0336 020000    1343            ljmp    L015002?
0339 020000    1344            ljmp    L015003?
033C 020000    1345            ljmp    L015004?
033F           1346   ;        main.c:321: case 0: P0MDOUT |= mask; break;
033F           1347   L015001?:
033F EB        1348            mov     a,r3
0340 42A4      1349            orl     _P0MDOUT,a
0342           1350   ;        main.c:322: case 1: P1MDOUT |= mask; break;
0342 22        1351            ret
0343           1352   L015002?:
0343 EB        1353            mov     a,r3
0344 42A5      1354            orl     _P1MDOUT,a
0346           1355   ;        main.c:323: case 2: P2MDOUT |= mask; break; 
0346 22        1356            ret
0347           1357   L015003?:
0347 EB        1358            mov     a,r3
0348 42A6      1359            orl     _P2MDOUT,a
034A           1360   ;        main.c:324: case 3: P3MDOUT |= mask; break; 
034A 22        1361            ret
034B           1362   L015004?:
034B EB        1363            mov     a,r3
034C 429C      1364            orl     _P3MDOUT,a
034E           1365   ;        main.c:325: }   
034E           1366   L015006?:
034E 22        1367            ret
034F           1368   ;------------------------------------------------------------
034F           1369   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1370   ;------------------------------------------------------------
034F           1371   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1372   ;pin                       Allocated to registers r2 
034F           1373   ;------------------------------------------------------------
034F           1374   ;        main.c:328: void Set_Pin_Input (unsigned char pin)
034F           1375   ;        -----------------------------------------
034F           1376   ;         function Set_Pin_Input
034F           1377   ;        -----------------------------------------
034F           1378   _Set_Pin_Input:
034F AA82      1379            mov     r2,dpl
0351           1380   ;        main.c:332: mask=(1<<(pin&0x7));
0351 7407      1381            mov     a,#0x07
0353 5A        1382            anl     a,r2
0354 F5F0      1383            mov     b,a
0356 05F0      1384            inc     b
0358 7401      1385            mov     a,#0x01
035A 8000      1386            sjmp    L016011?
035C           1387   L016009?:
035C 25E0      1388            add     a,acc
035E           1389   L016011?:
035E D5F030    1390            djnz    b,L016009?
0361           1391   ;        main.c:333: mask=~mask;
0361 F4        1392            cpl     a
0362 FB        1393            mov     r3,a
0363           1394   ;        main.c:334: switch(pin/0x10)
0363 EA        1395            mov     a,r2
0364 C4        1396            swap    a
0365 540F      1397            anl     a,#0x0f
0367 FA        1398            mov  r2,a
0368 24FC      1399            add     a,#0xff - 0x03
036A 4000      1400            jc      L016006?
036C EA        1401            mov     a,r2
036D 2A        1402            add     a,r2
036E 2A        1403            add     a,r2
036F 90C3B0    1404            mov     dptr,#L016013?
0372 73        1405            jmp     @a+dptr
0373           1406   L016013?:
0373 020000    1407            ljmp    L016001?
0376 020000    1408            ljmp    L016002?
0379 020000    1409            ljmp    L016003?
037C 020000    1410            ljmp    L016004?
037F           1411   ;        main.c:336: case 0: P0MDOUT &= mask; break;
037F           1412   L016001?:
037F EB        1413            mov     a,r3
0380 52A4      1414            anl     _P0MDOUT,a
0382           1415   ;        main.c:337: case 1: P1MDOUT &= mask; break;
0382 22        1416            ret
0383           1417   L016002?:
0383 EB        1418            mov     a,r3
0384 52A5      1419            anl     _P1MDOUT,a
0386           1420   ;        main.c:338: case 2: P2MDOUT &= mask; break; 
0386 22        1421            ret
0387           1422   L016003?:
0387 EB        1423            mov     a,r3
0388 52A6      1424            anl     _P2MDOUT,a
038A           1425   ;        main.c:339: case 3: P3MDOUT &= mask; break; 
038A 22        1426            ret
038B           1427   L016004?:
038B EB        1428            mov     a,r3
038C 529C      1429            anl     _P3MDOUT,a
038E           1430   ;        main.c:340: }   
038E           1431   L016006?:
038E 22        1432            ret
038F           1433   ;------------------------------------------------------------
038F           1434   ;Allocation info for local variables in function 'InitADC'
038F           1435   ;------------------------------------------------------------
038F           1436   ;------------------------------------------------------------
038F           1437   ;        main.c:343: void InitADC (void)
038F           1438   ;        -----------------------------------------
038F           1439   ;         function InitADC
038F           1440   ;        -----------------------------------------
038F           1441   _InitADC:
038F           1442   ;        main.c:345: SFRPAGE = 0x00;
038F 75A700    1443            mov     _SFRPAGE,#0x00
0392           1444   ;        main.c:346: ADEN=0; // Disable ADC
0392 C2EF      1445            clr     _ADEN
0394           1446   ;        main.c:351: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1447            mov     _ADC0CN1,#0x80
0397           1448   ;        main.c:355: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1449            mov     _ADC0CF0,#0x20
039A           1450   ;        main.c:359: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1451            mov     _ADC0CF1,#0x1E
039D           1452   ;        main.c:368: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1453            mov     _ADC0CN0,#0x00
03A0           1454   ;        main.c:373: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1455            mov     _ADC0CF2,#0x3F
03A3           1456   ;        main.c:377: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1457            mov     _ADC0CN2,#0x00
03A6           1458   ;        main.c:379: ADEN=1; // Enable ADC
03A6 D2EF      1459            setb    _ADEN
03A8 22        1460            ret
03A9           1461   ;------------------------------------------------------------
03A9           1462   ;Allocation info for local variables in function 'InitPinADC'
03A9           1463   ;------------------------------------------------------------
03A9           1464   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1465   ;portno                    Allocated to registers r2 
03A9           1466   ;mask                      Allocated to registers r3 
03A9           1467   ;------------------------------------------------------------
03A9           1468   ;        main.c:382: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1469   ;        -----------------------------------------
03A9           1470   ;         function InitPinADC
03A9           1471   ;        -----------------------------------------
03A9           1472   _InitPinADC:
03A9 AA82      1473            mov     r2,dpl
03AB           1474   ;        main.c:386: mask=1<<pin_num;
03AB 8588F0    1475            mov     b,_InitPinADC_PARM_2
03AE 05F0      1476            inc     b
03B0 7401      1477            mov     a,#0x01
03B2 8000      1478            sjmp    L018013?
03B4           1479   L018011?:
03B4 25E0      1480            add     a,acc
03B6           1481   L018013?:
03B6 D5F030    1482            djnz    b,L018011?
03B9 FB        1483            mov     r3,a
03BA           1484   ;        main.c:388: SFRPAGE = 0x20;
03BA 75A720    1485            mov     _SFRPAGE,#0x20
03BD           1486   ;        main.c:389: switch (portno)
03BD BA0070    1487            cjne    r2,#0x00,L018014?
03C0 8000      1488            sjmp    L018001?
03C2           1489   L018014?:
03C2 BA01F0    1490            cjne    r2,#0x01,L018015?
03C5 8000      1491            sjmp    L018002?
03C7           1492   L018015?:
03C7           1493   ;        main.c:391: case 0:
03C7 BA0270    1494            cjne    r2,#0x02,L018005?
03CA 8000      1495            sjmp    L018003?
03CC           1496   L018001?:
03CC           1497   ;        main.c:392: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1498            mov     a,r3
03CD F4        1499            cpl     a
03CE FA        1500            mov     r2,a
03CF 52F1      1501            anl     _P0MDIN,a
03D1           1502   ;        main.c:393: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1503            mov     a,r3
03D2 42D4      1504            orl     _P0SKIP,a
03D4           1505   ;        main.c:394: break;
03D4           1506   ;        main.c:395: case 1:
03D4 8000      1507            sjmp    L018005?
03D6           1508   L018002?:
03D6           1509   ;        main.c:396: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1510            mov     a,r3
03D7 F4        1511            cpl     a
03D8 FA        1512            mov     r2,a
03D9 52F2      1513            anl     _P1MDIN,a
03DB           1514   ;        main.c:397: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1515            mov     a,r3
03DC 42D5      1516            orl     _P1SKIP,a
03DE           1517   ;        main.c:398: break;
03DE           1518   ;        main.c:399: case 2:
03DE 8000      1519            sjmp    L018005?
03E0           1520   L018003?:
03E0           1521   ;        main.c:400: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1522            mov     a,r3
03E1 F4        1523            cpl     a
03E2 FA        1524            mov     r2,a
03E3 52F3      1525            anl     _P2MDIN,a
03E5           1526   ;        main.c:401: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1527            mov     a,r3
03E6 42CC      1528            orl     _P2SKIP,a
03E8           1529   ;        main.c:405: }
03E8           1530   L018005?:
03E8           1531   ;        main.c:406: SFRPAGE = 0x00;
03E8 75A700    1532            mov     _SFRPAGE,#0x00
03EB 22        1533            ret
03EC           1534   ;------------------------------------------------------------
03EC           1535   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1536   ;------------------------------------------------------------
03EC           1537   ;pin                       Allocated to registers 
03EC           1538   ;------------------------------------------------------------
03EC           1539   ;        main.c:409: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1540   ;        -----------------------------------------
03EC           1541   ;         function ADC_at_Pin
03EC           1542   ;        -----------------------------------------
03EC           1543   _ADC_at_Pin:
03EC 8582BB    1544            mov     _ADC0MX,dpl
03EF           1545   ;        main.c:412: ADINT = 0;
03EF C2ED      1546            clr     _ADINT
03F1           1547   ;        main.c:413: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1548            setb    _ADBUSY
03F3           1549   ;        main.c:414: while (!ADINT); // Wait for conversion to complete
03F3           1550   L019001?:
03F3 30EDF0    1551            jnb     _ADINT,L019001?
03F6           1552   ;        main.c:415: return (ADC0);
03F6 85BD82    1553            mov     dpl,_ADC0
03F9 85BE83    1554            mov     dph,(_ADC0 >> 8)
03FC 22        1555            ret
03FD           1556   ;------------------------------------------------------------
03FD           1557   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1558   ;------------------------------------------------------------
03FD           1559   ;------------------------------------------------------------
03FD           1560   ;        main.c:418: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1561   ;        -----------------------------------------
03FD           1562   ;         function Timer5_ISR
03FD           1563   ;        -----------------------------------------
03FD           1564   _Timer5_ISR:
03FD C0E0      1565            push    acc
03FF C002      1566            push    ar2
0401 C003      1567            push    ar3
0403 C0D0      1568            push    psw
0405 75D000    1569            mov     psw,#0x00
0408           1570   ;        main.c:420: SFRPAGE=0x10;
0408 75A710    1571            mov     _SFRPAGE,#0x10
040B           1572   ;        main.c:421: TF5H = 0; // Clear Timer5 interrupt flag
040B C2C7      1573            clr     _TF5H
040D           1574   ;        main.c:422: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
040D 75D2C4    1575            mov     _TMR5RL,#0xC4
0410 75D3FF    1576            mov     (_TMR5RL >> 8),#0xFF
0413           1577   ;        main.c:424: pwm_counter++; 
0413 0550      1578            inc     _pwm_counter
0415 E4        1579            clr     a
0416 B55070    1580            cjne    a,_pwm_counter,L020031?
0419 0551      1581            inc     (_pwm_counter + 1)
041B           1582   L020031?:
041B           1583   ;        main.c:425: if (pwm_counter == 100){
041B 7464      1584            mov     a,#0x64
041D B550B0    1585            cjne    a,_pwm_counter,L020032?
0420 E4        1586            clr     a
0421 B551B0    1587            cjne    a,(_pwm_counter + 1),L020032?
0424 8000      1588            sjmp    L020033?
0426           1589   L020032?:
0426 8000      1590            sjmp    L020002?
0428           1591   L020033?:
0428           1592   ;        main.c:426: pwm_counter = 0; 
0428 E4        1593            clr     a
0429 F550      1594            mov     _pwm_counter,a
042B F551      1595            mov     (_pwm_counter + 1),a
042D           1596   L020002?:
042D           1597   ;        main.c:429: if (pwm_right > pwm_counter){
042D AA90      1598            mov     r2,_pwm_right
042F 7B00      1599            mov     r3,#0x00
0431 C3        1600            clr     c
0432 E550      1601            mov     a,_pwm_counter
0434 9A        1602            subb    a,r2
0435 E551      1603            mov     a,(_pwm_counter + 1)
0437 9B        1604            subb    a,r3
0438 5000      1605            jnc     L020007?
043A           1606   ;        main.c:430: if(L_motor_dir){
043A E550      1607            mov     a,_L_motor_dir
043C 6000      1608            jz      L020004?
043E           1609   ;        main.c:431: L_bridge_1 = 1; 
043E D2A1      1610            setb    _P2_1
0440           1611   ;        main.c:432: L_bridge_2 = 0; 
0440 C2A2      1612            clr     _P2_2
0442 8000      1613            sjmp    L020008?
0444           1614   L020004?:
0444           1615   ;        main.c:435: L_bridge_1 = 0; 
0444 C2A1      1616            clr     _P2_1
0446           1617   ;        main.c:436: L_bridge_2 = 1; 
0446 D2A2      1618            setb    _P2_2
0448 8000      1619            sjmp    L020008?
044A           1620   L020007?:
044A           1621   ;        main.c:440: L_bridge_1 = 0; 
044A C2A1      1622            clr     _P2_1
044C           1623   ;        main.c:441: L_bridge_2 = 0; 
044C C2A2      1624            clr     _P2_2
044E           1625   L020008?:
044E           1626   ;        main.c:443: if (pwm_left > pwm_counter){
044E AAD0      1627            mov     r2,_pwm_left
0450 7B00      1628            mov     r3,#0x00
0452 C3        1629            clr     c
0453 E550      1630            mov     a,_pwm_counter
0455 9A        1631            subb    a,r2
0456 E551      1632            mov     a,(_pwm_counter + 1)
0458 9B        1633            subb    a,r3
0459 5000      1634            jnc     L020013?
045B           1635   ;        main.c:444: if (R_motor_dir){
045B E510      1636            mov     a,_R_motor_dir
045D 6000      1637            jz      L020010?
045F           1638   ;        main.c:445: R_bridge_1 = 1; 
045F D2A4      1639            setb    _P2_4
0461           1640   ;        main.c:446: R_bridge_2 = 0;
0461 C2A3      1641            clr     _P2_3
0463 8000      1642            sjmp    L020014?
0465           1643   L020010?:
0465           1644   ;        main.c:449: R_bridge_1 = 0; 
0465 C2A4      1645            clr     _P2_4
0467           1646   ;        main.c:450: R_bridge_2 = 1;
0467 D2A3      1647            setb    _P2_3
0469 8000      1648            sjmp    L020014?
046B           1649   L020013?:
046B           1650   ;        main.c:454: R_bridge_1 = 0; 
046B C2A4      1651            clr     _P2_4
046D           1652   ;        main.c:455: R_bridge_2 = 0; 
046D C2A3      1653            clr     _P2_3
046F           1654   L020014?:
046F           1655   ;        main.c:458: servo_counter++;
046F 0510      1656            inc     _servo_counter
0471 E4        1657            clr     a
0472 B510F0    1658            cjne    a,_servo_counter,L020038?
0475 0511      1659            inc     (_servo_counter + 1)
0477           1660   L020038?:
0477           1661   ;        main.c:459: if(servo_counter==2000)
0477 74D0      1662            mov     a,#0xD0
0479 B51030    1663            cjne    a,_servo_counter,L020016?
047C 7407      1664            mov     a,#0x07
047E B51130    1665            cjne    a,(_servo_counter + 1),L020016?
0481           1666   ;        main.c:461: servo_counter=0;
0481 E4        1667            clr     a
0482 F510      1668            mov     _servo_counter,a
0484 F511      1669            mov     (_servo_counter + 1),a
0486           1670   ;        main.c:462: Servo_arm=1;
0486 D296      1671            setb    _P1_6
0488           1672   ;        main.c:463: Servo_base=1;
0488 D297      1673            setb    _P1_7
048A           1674   L020016?:
048A           1675   ;        main.c:465: if(servo_arm==servo_counter)
048A AA90      1676            mov     r2,_servo_arm
048C 7B00      1677            mov     r3,#0x00
048E EA        1678            mov     a,r2
048F B51070    1679            cjne    a,_servo_counter,L020018?
0492 EB        1680            mov     a,r3
0493 B51170    1681            cjne    a,(_servo_counter + 1),L020018?
0496           1682   ;        main.c:467: Servo_arm=0;
0496 C296      1683            clr     _P1_6
0498           1684   L020018?:
0498           1685   ;        main.c:469: if(servo_base==servo_counter)
0498 AAD0      1686            mov     r2,_servo_base
049A 7B00      1687            mov     r3,#0x00
049C EA        1688            mov     a,r2
049D B510B0    1689            cjne    a,_servo_counter,L020021?
04A0 EB        1690            mov     a,r3
04A1 B511B0    1691            cjne    a,(_servo_counter + 1),L020021?
04A4           1692   ;        main.c:471: Servo_base=0;
04A4 C297      1693            clr     _P1_7
04A6           1694   L020021?:
04A6 D0D0      1695            pop     psw
04A8 D003      1696            pop     ar3
04AA D002      1697            pop     ar2
04AC D0E0      1698            pop     acc
04AE 32        1699            reti
04AF           1700   ;        eliminated unneeded push/pop dpl
04AF           1701   ;        eliminated unneeded push/pop dph
04AF           1702   ;        eliminated unneeded push/pop b
04AF           1703   ;------------------------------------------------------------
04AF           1704   ;Allocation info for local variables in function 'servo_pick'
04AF           1705   ;------------------------------------------------------------
04AF           1706   ;i                         Allocated to registers r2 r3 
04AF           1707   ;------------------------------------------------------------
04AF           1708   ;        main.c:476: void servo_pick(){
04AF           1709   ;        -----------------------------------------
04AF           1710   ;         function servo_pick
04AF           1711   ;        -----------------------------------------
04AF           1712   _servo_pick:
04AF           1713   ;        main.c:478: servo_arm = 1;
04AF 759001    1714            mov     _servo_arm,#0x01
04B2           1715   ;        main.c:480: servo_base = 250;
04B2 75D0FA    1716            mov     _servo_base,#0xFA
04B5           1717   ;        main.c:481: waitms(200);
04B5 9000C8    1718            mov     dptr,#0x00C8
04B8 120000    1719            lcall   _waitms
04BB           1720   ;        main.c:482: servo_arm = 250;
04BB 7590FA    1721            mov     _servo_arm,#0xFA
04BE           1722   ;        main.c:483: Magnet = 1;
04BE D295      1723            setb    _P1_5
04C0           1724   ;        main.c:484: waitms(200);
04C0 9000C8    1725            mov     dptr,#0x00C8
04C3 120000    1726            lcall   _waitms
04C6           1727   ;        main.c:485: for(i = 0; i<109; i++){
04C6 7A00      1728            mov     r2,#0x00
04C8 7B00      1729            mov     r3,#0x00
04CA           1730   L021001?:
04CA C3        1731            clr     c
04CB EA        1732            mov     a,r2
04CC 946D      1733            subb    a,#0x6D
04CE EB        1734            mov     a,r3
04CF 6480      1735            xrl     a,#0x80
04D1 9480      1736            subb    a,#0x80
04D3 5000      1737            jnc     L021004?
04D5           1738   ;        main.c:486: waitms(5);
04D5 900005    1739            mov     dptr,#0x0005
04D8 C002      1740            push    ar2
04DA C003      1741            push    ar3
04DC 120000    1742            lcall   _waitms
04DF D003      1743            pop     ar3
04E1 D002      1744            pop     ar2
04E3           1745   ;        main.c:487: servo_base--;
04E3 15D0      1746            dec     _servo_base
04E5           1747   ;        main.c:485: for(i = 0; i<109; i++){
04E5 0A        1748            inc     r2
04E6 BA00F0    1749            cjne    r2,#0x00,L021001?
04E9 0B        1750            inc     r3
04EA 8000      1751            sjmp    L021001?
04EC           1752   L021004?:
04EC           1753   ;        main.c:489: waitms(200);
04EC 9000C8    1754            mov     dptr,#0x00C8
04EF 120000    1755            lcall   _waitms
04F2           1756   ;        main.c:490: for(i = 0; i<159; i++){
04F2 7A00      1757            mov     r2,#0x00
04F4 7B00      1758            mov     r3,#0x00
04F6           1759   L021005?:
04F6 C3        1760            clr     c
04F7 EA        1761            mov     a,r2
04F8 949F      1762            subb    a,#0x9F
04FA EB        1763            mov     a,r3
04FB 6480      1764            xrl     a,#0x80
04FD 9480      1765            subb    a,#0x80
04FF 5000      1766            jnc     L021008?
0501           1767   ;        main.c:491: waitms(5);
0501 900005    1768            mov     dptr,#0x0005
0504 C002      1769            push    ar2
0506 C003      1770            push    ar3
0508 120000    1771            lcall   _waitms
050B D003      1772            pop     ar3
050D D002      1773            pop     ar2
050F           1774   ;        main.c:492: servo_arm--;
050F 1590      1775            dec     _servo_arm
0511           1776   ;        main.c:490: for(i = 0; i<159; i++){
0511 0A        1777            inc     r2
0512 BA0070    1778            cjne    r2,#0x00,L021005?
0515 0B        1779            inc     r3
0516 8000      1780            sjmp    L021005?
0518           1781   L021008?:
0518           1782   ;        main.c:494: waitms(200);
0518 9000C8    1783            mov     dptr,#0x00C8
051B 120000    1784            lcall   _waitms
051E           1785   ;        main.c:495: for(i = 0; i<45; i++){
051E 7A00      1786            mov     r2,#0x00
0520 7B00      1787            mov     r3,#0x00
0522           1788   L021009?:
0522 C3        1789            clr     c
0523 EA        1790            mov     a,r2
0524 942D      1791            subb    a,#0x2D
0526 EB        1792            mov     a,r3
0527 6480      1793            xrl     a,#0x80
0529 9480      1794            subb    a,#0x80
052B 5000      1795            jnc     L021012?
052D           1796   ;        main.c:496: waitms(5);
052D 900005    1797            mov     dptr,#0x0005
0530 C002      1798            push    ar2
0532 C003      1799            push    ar3
0534 120000    1800            lcall   _waitms
0537 D003      1801            pop     ar3
0539 D002      1802            pop     ar2
053B           1803   ;        main.c:497: servo_base--;
053B 15D0      1804            dec     _servo_base
053D           1805   ;        main.c:495: for(i = 0; i<45; i++){
053D 0A        1806            inc     r2
053E BA00F0    1807            cjne    r2,#0x00,L021009?
0541 0B        1808            inc     r3
0542 8000      1809            sjmp    L021009?
0544           1810   L021012?:
0544           1811   ;        main.c:499: waitms(500);
0544 9001F4    1812            mov     dptr,#0x01F4
0547 120000    1813            lcall   _waitms
054A           1814   ;        main.c:500: Magnet = 0;
054A C295      1815            clr     _P1_5
054C           1816   ;        main.c:501: waitms(200);
054C 9000C8    1817            mov     dptr,#0x00C8
054F 120000    1818            lcall   _waitms
0552           1819   ;        main.c:502: servo_arm=1;
0552 759001    1820            mov     _servo_arm,#0x01
0555           1821   ;        main.c:503: servo_base=1;
0555 75D001    1822            mov     _servo_base,#0x01
0558           1823   ;        main.c:504: return;
0558 22        1824            ret
0559           1825   ;------------------------------------------------------------
0559           1826   ;Allocation info for local variables in function 'main'
0559           1827   ;------------------------------------------------------------
0559           1828   ;cnt                       Allocated to registers 
0559           1829   ;c                         Allocated to registers r4 
0559           1830   ;vx_error                  Allocated with name '_main_vx_error_1_129'
0559           1831   ;vy_error                  Allocated with name '_main_vy_error_1_129'
0559           1832   ;vx_err                    Allocated with name '_main_vx_err_1_129'
0559           1833   ;vy_err                    Allocated with name '_main_vy_err_1_129'
0559           1834   ;vx                        Allocated with name '_main_vx_1_129'
0559           1835   ;vy                        Allocated with name '_main_vy_1_129'
0559           1836   ;threshold                 Allocated to registers 
0559           1837   ;motor_pwm                 Allocated to registers 
0559           1838   ;pick                      Allocated with name '_main_pick_1_129'
0559           1839   ;pick_done                 Allocated to registers 
0559           1840   ;------------------------------------------------------------
0559           1841   ;        main.c:507: void main (void)
0559           1842   ;        -----------------------------------------
0559           1843   ;         function main
0559           1844   ;        -----------------------------------------
0559           1845   _main:
0559           1846   ;        main.c:512: int vx = 0, vy = 0; 
0559 E4        1847            clr     a
055A F590      1848            mov     _main_vx_1_129,a
055C F591      1849            mov     (_main_vx_1_129 + 1),a
055E F5D0      1850            mov     _main_vy_1_129,a
0560 F5D1      1851            mov     (_main_vy_1_129 + 1),a
0562           1852   ;        main.c:518: Set_Pin_Output(0x24);
0562 758224    1853            mov     dpl,#0x24
0565 120000    1854            lcall   _Set_Pin_Output
0568           1855   ;        main.c:519: Set_Pin_Output(0x23);
0568 758223    1856            mov     dpl,#0x23
056B 120000    1857            lcall   _Set_Pin_Output
056E           1858   ;        main.c:520: Set_Pin_Output(0x22);
056E 758222    1859            mov     dpl,#0x22
0571 120000    1860            lcall   _Set_Pin_Output
0574           1861   ;        main.c:521: Set_Pin_Output(0x21);
0574 758221    1862            mov     dpl,#0x21
0577 120000    1863            lcall   _Set_Pin_Output
057A           1864   ;        main.c:522: Set_Pin_Output(0x17);
057A 758217    1865            mov     dpl,#0x17
057D 120000    1866            lcall   _Set_Pin_Output
0580           1867   ;        main.c:523: Set_Pin_Output(0x16);
0580 758216    1868            mov     dpl,#0x16
0583 120000    1869            lcall   _Set_Pin_Output
0586           1870   ;        main.c:524: Set_Pin_Output(0x15);
0586 758215    1871            mov     dpl,#0x15
0589 120000    1872            lcall   _Set_Pin_Output
058C           1873   ;        main.c:526: Servo_arm=0;
058C C296      1874            clr     _P1_6
058E           1875   ;        main.c:527: Servo_base=0;
058E C297      1876            clr     _P1_7
0590           1877   ;        main.c:528: Magnet = 0;
0590 C295      1878            clr     _P1_5
0592           1879   ;        main.c:530: waitms(500);
0592 9001F4    1880            mov     dptr,#0x01F4
0595 120000    1881            lcall   _waitms
0598           1882   ;        main.c:531: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0598 7470      1883            mov     a,#__str_3
059A C0E0      1884            push    acc
059C 74CC      1885            mov     a,#(__str_3 >> 8)
059E C0E0      1886            push    acc
05A0 7480      1887            mov     a,#0x80
05A2 C0E0      1888            push    acc
05A4 120000    1889            lcall   _printf
05A7 1581      1890            dec     sp
05A9 1581      1891            dec     sp
05AB 1581      1892            dec     sp
05AD           1893   ;        main.c:532: UART1_Init(9600);
05AD 902580    1894            mov     dptr,#0x2580
05B0 E4        1895            clr     a
05B1 F5F0      1896            mov     b,a
05B3 120000    1897            lcall   _UART1_Init
05B6           1898   ;        main.c:534: ReceptionOff();
05B6 120000    1899            lcall   _ReceptionOff
05B9           1900   ;        main.c:538: SendATCommand("AT+VER\r\n");
05B9 90CCB0    1901            mov     dptr,#__str_4
05BC 75F080    1902            mov     b,#0x80
05BF 120000    1903            lcall   _SendATCommand
05C2           1904   ;        main.c:539: SendATCommand("AT+BAUD\r\n");
05C2 90CCF0    1905            mov     dptr,#__str_5
05C5 75F080    1906            mov     b,#0x80
05C8 120000    1907            lcall   _SendATCommand
05CB           1908   ;        main.c:540: SendATCommand("AT+RFID\r\n");
05CB 90CD30    1909            mov     dptr,#__str_6
05CE 75F080    1910            mov     b,#0x80
05D1 120000    1911            lcall   _SendATCommand
05D4           1912   ;        main.c:541: SendATCommand("AT+DVID\r\n");
05D4 90CD70    1913            mov     dptr,#__str_7
05D7 75F080    1914            mov     b,#0x80
05DA 120000    1915            lcall   _SendATCommand
05DD           1916   ;        main.c:542: SendATCommand("AT+RFC\r\n");
05DD 90CDB0    1917            mov     dptr,#__str_8
05E0 75F080    1918            mov     b,#0x80
05E3 120000    1919            lcall   _SendATCommand
05E6           1920   ;        main.c:543: SendATCommand("AT+POWE\r\n");
05E6 90CDF0    1921            mov     dptr,#__str_9
05E9 75F080    1922            mov     b,#0x80
05EC 120000    1923            lcall   _SendATCommand
05EF           1924   ;        main.c:544: SendATCommand("AT+CLSS\r\n");
05EF 90CE30    1925            mov     dptr,#__str_10
05F2 75F080    1926            mov     b,#0x80
05F5 120000    1927            lcall   _SendATCommand
05F8           1928   ;        main.c:545: SendATCommand("AT+DVIDEFEF\r\n");  
05F8 90CE70    1929            mov     dptr,#__str_11
05FB 75F080    1930            mov     b,#0x80
05FE 120000    1931            lcall   _SendATCommand
0601           1932   ;        main.c:548: L_bridge_1 = 0; 
0601 C2A1      1933            clr     _P2_1
0603           1934   ;        main.c:549: L_bridge_2 = 0; 
0603 C2A2      1935            clr     _P2_2
0605           1936   ;        main.c:550: R_bridge_1 = 0; 
0605 C2A4      1937            clr     _P2_4
0607           1938   ;        main.c:551: R_bridge_2 = 0; 
0607 C2A3      1939            clr     _P2_3
0609           1940   ;        main.c:554: while(1)
0609 7A00      1941            mov     r2,#0x00
060B 7B00      1942            mov     r3,#0x00
060D           1943   L022051?:
060D           1944   ;        main.c:558: if(RXU1()) // Something has arrived
060D C002      1945            push    ar2
060F C003      1946            push    ar3
0611 120000    1947            lcall   _RXU1
0614 E4        1948            clr     a
0615 33        1949            rlc     a
0616 D003      1950            pop     ar3
0618 D002      1951            pop     ar2
061A 6000      1952            jz      L022051?
061C           1953   ;        main.c:560: c=getchar1();
061C C002      1954            push    ar2
061E C003      1955            push    ar3
0620 120000    1956            lcall   _getchar1
0623 AC82      1957            mov     r4,dpl
0625 D003      1958            pop     ar3
0627 D002      1959            pop     ar2
0629           1960   ;        main.c:562: if(c=='!') // Master is sending message
0629 BC21F0    1961            cjne    r4,#0x21,L022078?
062C 8000      1962            sjmp    L022079?
062E           1963   L022078?:
062E 020000    1964            ljmp    L022046?
0631           1965   L022079?:
0631           1966   ;        main.c:564: getstr1(buff, sizeof(buff)-1);
0631 755013    1967            mov     _getstr1_PARM_2,#0x13
0634 904410    1968            mov     dptr,#_buff
0637 75F040    1969            mov     b,#0x40
063A C002      1970            push    ar2
063C C003      1971            push    ar3
063E 120000    1972            lcall   _getstr1
0641           1973   ;        main.c:565: if(strlen(buff)==9)
0641 904410    1974            mov     dptr,#_buff
0644 75F040    1975            mov     b,#0x40
0647 120000    1976            lcall   _strlen
064A AD82      1977            mov     r5,dpl
064C AE83      1978            mov     r6,dph
064E D003      1979            pop     ar3
0650 D002      1980            pop     ar2
0652 BD09F0    1981            cjne    r5,#0x09,L022080?
0655 BE00F0    1982            cjne    r6,#0x00,L022080?
0658 8000      1983            sjmp    L022081?
065A           1984   L022080?:
065A 020000    1985            ljmp    L022041?
065D           1986   L022081?:
065D           1987   ;        main.c:567: printf("Master says: %s\r\n", buff);
065D C002      1988            push    ar2
065F C003      1989            push    ar3
0661 7410      1990            mov     a,#_buff
0663 C0E0      1991            push    acc
0665 7444      1992            mov     a,#(_buff >> 8)
0667 C0E0      1993            push    acc
0669 7440      1994            mov     a,#0x40
066B C0E0      1995            push    acc
066D 74B0      1996            mov     a,#__str_12
066F C0E0      1997            push    acc
0671 74D0      1998            mov     a,#(__str_12 >> 8)
0673 C0E0      1999            push    acc
0675 7480      2000            mov     a,#0x80
0677 C0E0      2001            push    acc
0679 120000    2002            lcall   _printf
067C E581      2003            mov     a,sp
067E 24FA      2004            add     a,#0xfa
0680 F581      2005            mov     sp,a
0682           2006   ;        main.c:569: sscanf(buff, "%03d,%03d,%01d", &vx, &vy, &pick);
0682 7420      2007            mov     a,#_main_pick_1_129
0684 C0E0      2008            push    acc
0686 74B6      2009            mov     a,#(_main_pick_1_129 >> 8)
0688 C0E0      2010            push    acc
068A 7440      2011            mov     a,#0x40
068C C0E0      2012            push    acc
068E 74D0      2013            mov     a,#_main_vy_1_129
0690 C0E0      2014            push    acc
0692 74B5      2015            mov     a,#(_main_vy_1_129 >> 8)
0694 C0E0      2016            push    acc
0696 7440      2017            mov     a,#0x40
0698 C0E0      2018            push    acc
069A 7490      2019            mov     a,#_main_vx_1_129
069C C0E0      2020            push    acc
069E 74B5      2021            mov     a,#(_main_vx_1_129 >> 8)
06A0 C0E0      2022            push    acc
06A2 7440      2023            mov     a,#0x40
06A4 C0E0      2024            push    acc
06A6 74F0      2025            mov     a,#__str_13
06A8 C0E0      2026            push    acc
06AA 74D0      2027            mov     a,#(__str_13 >> 8)
06AC C0E0      2028            push    acc
06AE 7480      2029            mov     a,#0x80
06B0 C0E0      2030            push    acc
06B2 7410      2031            mov     a,#_buff
06B4 C0E0      2032            push    acc
06B6 7444      2033            mov     a,#(_buff >> 8)
06B8 C0E0      2034            push    acc
06BA 7440      2035            mov     a,#0x40
06BC C0E0      2036            push    acc
06BE 120000    2037            lcall   _sscanf
06C1 E581      2038            mov     a,sp
06C3 24F1      2039            add     a,#0xf1
06C5 F581      2040            mov     sp,a
06C7           2041   ;        main.c:571: printf("Joystick Received: Vx = %03d, Vy = %03d, Order = %01d\r\n", vx, vy, pick);
06C7 C020      2042            push    _main_pick_1_129
06C9 C021      2043            push    (_main_pick_1_129 + 1)
06CB C0D0      2044            push    _main_vy_1_129
06CD C0D1      2045            push    (_main_vy_1_129 + 1)
06CF C090      2046            push    _main_vx_1_129
06D1 C091      2047            push    (_main_vx_1_129 + 1)
06D3 7470      2048            mov     a,#__str_14
06D5 C0E0      2049            push    acc
06D7 74D1      2050            mov     a,#(__str_14 >> 8)
06D9 C0E0      2051            push    acc
06DB 7480      2052            mov     a,#0x80
06DD C0E0      2053            push    acc
06DF 120000    2054            lcall   _printf
06E2 E581      2055            mov     a,sp
06E4 24F7      2056            add     a,#0xf7
06E6 F581      2057            mov     sp,a
06E8 D003      2058            pop     ar3
06EA D002      2059            pop     ar2
06EC           2060   ;        main.c:573: if(pick==1){
06EC 7401      2061            mov     a,#0x01
06EE B520B0    2062            cjne    a,_main_pick_1_129,L022082?
06F1 E4        2063            clr     a
06F2 B521B0    2064            cjne    a,(_main_pick_1_129 + 1),L022082?
06F5 8000      2065            sjmp    L022083?
06F7           2066   L022082?:
06F7 8000      2067            sjmp    L022002?
06F9           2068   L022083?:
06F9           2069   ;        main.c:574: servo_pick();
06F9 C002      2070            push    ar2
06FB C003      2071            push    ar3
06FD 120000    2072            lcall   _servo_pick
0700 D003      2073            pop     ar3
0702 D002      2074            pop     ar2
0704           2075   L022002?:
0704           2076   ;        main.c:578: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0704 E590      2077            mov     a,_main_vx_1_129
0706 C3        2078            clr     c
0707 9550      2079            subb    a,_vx_thres
0709 F582      2080            mov     dpl,a
070B E591      2081            mov     a,(_main_vx_1_129 + 1)
070D 9551      2082            subb    a,(_vx_thres + 1)
070F F583      2083            mov     dph,a
0711 C002      2084            push    ar2
0713 C003      2085            push    ar3
0715 120000    2086            lcall   _abs
0718 858200    2087            mov     __mulint_PARM_2,dpl
071B 858301    2088            mov     (__mulint_PARM_2 + 1),dph
071E 900064    2089            mov     dptr,#0x0064
0721 120000    2090            lcall   __mulint
0724 855000    2091            mov     __divsint_PARM_2,_vx_thres
0727 855101    2092            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
072A 120000    2093            lcall   __divsint
072D 858260    2094            mov     _main_vx_error_1_129,dpl
0730 858361    2095            mov     (_main_vx_error_1_129 + 1),dph
0733           2096   ;        main.c:579: vy_error = abs(vy-vy_thres)*100/vy_thres; 
0733 E5D0      2097            mov     a,_main_vy_1_129
0735 C3        2098            clr     c
0736 9510      2099            subb    a,_vy_thres
0738 F582      2100            mov     dpl,a
073A E5D1      2101            mov     a,(_main_vy_1_129 + 1)
073C 9511      2102            subb    a,(_vy_thres + 1)
073E F583      2103            mov     dph,a
0740 120000    2104            lcall   _abs
0743 858200    2105            mov     __mulint_PARM_2,dpl
0746 858301    2106            mov     (__mulint_PARM_2 + 1),dph
0749 900064    2107            mov     dptr,#0x0064
074C 120000    2108            lcall   __mulint
074F 851000    2109            mov     __divsint_PARM_2,_vy_thres
0752 851101    2110            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
0755 120000    2111            lcall   __divsint
0758 8582B0    2112            mov     _main_vy_error_1_129,dpl
075B 8583B1    2113            mov     (_main_vy_error_1_129 + 1),dph
075E D003      2114            pop     ar3
0760 D002      2115            pop     ar2
0762           2116   ;        main.c:580: vx_err = vx-vx_thres; 
0762 E590      2117            mov     a,_main_vx_1_129
0764 C3        2118            clr     c
0765 9550      2119            subb    a,_vx_thres
0767 F500      2120            mov     _main_vx_err_1_129,a
0769 E591      2121            mov     a,(_main_vx_1_129 + 1)
076B 9551      2122            subb    a,(_vx_thres + 1)
076D F501      2123            mov     (_main_vx_err_1_129 + 1),a
076F           2124   ;        main.c:581: vy_err = vy-vy_thres; 
076F E5D0      2125            mov     a,_main_vy_1_129
0771 C3        2126            clr     c
0772 9510      2127            subb    a,_vy_thres
0774 F550      2128            mov     _main_vy_err_1_129,a
0776 E5D1      2129            mov     a,(_main_vy_1_129 + 1)
0778 9511      2130            subb    a,(_vy_thres + 1)
077A F551      2131            mov     (_main_vy_err_1_129 + 1),a
077C           2132   ;        main.c:582: pwm_left = 0; 
077C 75D000    2133            mov     _pwm_left,#0x00
077F           2134   ;        main.c:583: pwm_right = 0; 
077F 759000    2135            mov     _pwm_right,#0x00
0782           2136   ;        main.c:585: if ((vy_error>5) && (vx_error<5)){
0782 C3        2137            clr     c
0783 7405      2138            mov     a,#0x05
0785 95B0      2139            subb    a,_main_vy_error_1_129
0787 E4        2140            clr     a
0788 6480      2141            xrl     a,#0x80
078A 85B1F0    2142            mov     b,(_main_vy_error_1_129 + 1)
078D 63F080    2143            xrl     b,#0x80
0790 95F0      2144            subb    a,b
0792 E4        2145            clr     a
0793 33        2146            rlc     a
0794 FF        2147            mov     r7,a
0795 6000      2148            jz      L022007?
0797 C3        2149            clr     c
0798 E560      2150            mov     a,_main_vx_error_1_129
079A 9405      2151            subb    a,#0x05
079C E561      2152            mov     a,(_main_vx_error_1_129 + 1)
079E 6480      2153            xrl     a,#0x80
07A0 9480      2154            subb    a,#0x80
07A2 5000      2155            jnc     L022007?
07A4           2156   ;        main.c:586: pwm_left = vy_error; 
07A4 ADB0      2157            mov     r5,_main_vy_error_1_129
07A6 8DD0      2158            mov     _pwm_left,r5
07A8           2159   ;        main.c:587: pwm_right = vy_error; 
07A8 8D90      2160            mov     _pwm_right,r5
07AA           2161   ;        main.c:588: if (vy_err > 0){ //move forward
07AA C3        2162            clr     c
07AB E4        2163            clr     a
07AC 9550      2164            subb    a,_main_vy_err_1_129
07AE E4        2165            clr     a
07AF 6480      2166            xrl     a,#0x80
07B1 8551F0    2167            mov     b,(_main_vy_err_1_129 + 1)
07B4 63F080    2168            xrl     b,#0x80
07B7 95F0      2169            subb    a,b
07B9 5000      2170            jnc     L022004?
07BB           2171   ;        main.c:589: L_motor_dir = 0; 
07BB 755000    2172            mov     _L_motor_dir,#0x00
07BE           2173   ;        main.c:590: R_motor_dir = 0; 
07BE 751000    2174            mov     _R_motor_dir,#0x00
07C1 8000      2175            sjmp    L022007?
07C3           2176   L022004?:
07C3           2177   ;        main.c:593: L_motor_dir = 1; 
07C3 755001    2178            mov     _L_motor_dir,#0x01
07C6           2179   ;        main.c:594: R_motor_dir = 1; 
07C6 751001    2180            mov     _R_motor_dir,#0x01
07C9           2181   L022007?:
07C9           2182   ;        main.c:597: if ((vx_error>5)&&(vy_error<5)){
07C9 C3        2183            clr     c
07CA 7405      2184            mov     a,#0x05
07CC 9560      2185            subb    a,_main_vx_error_1_129
07CE E4        2186            clr     a
07CF 6480      2187            xrl     a,#0x80
07D1 8561F0    2188            mov     b,(_main_vx_error_1_129 + 1)
07D4 63F080    2189            xrl     b,#0x80
07D7 95F0      2190            subb    a,b
07D9 E4        2191            clr     a
07DA 33        2192            rlc     a
07DB FD        2193            mov     r5,a
07DC 6000      2194            jz      L022013?
07DE C3        2195            clr     c
07DF E5B0      2196            mov     a,_main_vy_error_1_129
07E1 9405      2197            subb    a,#0x05
07E3 E5B1      2198            mov     a,(_main_vy_error_1_129 + 1)
07E5 6480      2199            xrl     a,#0x80
07E7 9480      2200            subb    a,#0x80
07E9 5000      2201            jnc     L022013?
07EB           2202   ;        main.c:598: pwm_left = vx_error; 
07EB AE60      2203            mov     r6,_main_vx_error_1_129
07ED 8ED0      2204            mov     _pwm_left,r6
07EF           2205   ;        main.c:599: pwm_right = vx_error; 
07EF 8E90      2206            mov     _pwm_right,r6
07F1           2207   ;        main.c:600: if (vx_err > 0){ //turn right
07F1 C3        2208            clr     c
07F2 E4        2209            clr     a
07F3 9500      2210            subb    a,_main_vx_err_1_129
07F5 E4        2211            clr     a
07F6 6480      2212            xrl     a,#0x80
07F8 8501F0    2213            mov     b,(_main_vx_err_1_129 + 1)
07FB 63F080    2214            xrl     b,#0x80
07FE 95F0      2215            subb    a,b
0800 5000      2216            jnc     L022010?
0802           2217   ;        main.c:601: L_motor_dir = 1; 
0802 755001    2218            mov     _L_motor_dir,#0x01
0805           2219   ;        main.c:602: R_motor_dir = 0; 
0805 751000    2220            mov     _R_motor_dir,#0x00
0808 8000      2221            sjmp    L022013?
080A           2222   L022010?:
080A           2223   ;        main.c:605: L_motor_dir = 0; 
080A 755000    2224            mov     _L_motor_dir,#0x00
080D           2225   ;        main.c:606: R_motor_dir = 1; 
080D 751001    2226            mov     _R_motor_dir,#0x01
0810           2227   L022013?:
0810           2228   ;        main.c:609: if ((vx_error>5)&&(vy_error)>5){
0810 ED        2229            mov     a,r5
0811 7000      2230            jnz     L022090?
0813 020000    2231            ljmp    L022051?
0816           2232   L022090?:
0816 EF        2233            mov     a,r7
0817 7000      2234            jnz     L022091?
0819 020000    2235            ljmp    L022051?
081C           2236   L022091?:
081C           2237   ;        main.c:611: if (vy_err>0){
081C C3        2238            clr     c
081D E4        2239            clr     a
081E 9550      2240            subb    a,_main_vy_err_1_129
0820 E4        2241            clr     a
0821 6480      2242            xrl     a,#0x80
0823 8551F0    2243            mov     b,(_main_vy_err_1_129 + 1)
0826 63F080    2244            xrl     b,#0x80
0829 95F0      2245            subb    a,b
082B 4000      2246            jc      L022092?
082D 020000    2247            ljmp    L022025?
0830           2248   L022092?:
0830           2249   ;        main.c:612: L_motor_dir = 0; 
0830 755000    2250            mov     _L_motor_dir,#0x00
0833           2251   ;        main.c:613: R_motor_dir = 0; 
0833 751000    2252            mov     _R_motor_dir,#0x00
0836           2253   ;        main.c:615: if (vx_err>0){
0836 C3        2254            clr     c
0837 E4        2255            clr     a
0838 9500      2256            subb    a,_main_vx_err_1_129
083A E4        2257            clr     a
083B 6480      2258            xrl     a,#0x80
083D 8501F0    2259            mov     b,(_main_vx_err_1_129 + 1)
0840 63F080    2260            xrl     b,#0x80
0843 95F0      2261            subb    a,b
0845 4000      2262            jc      L022093?
0847 020000    2263            ljmp    L022022?
084A           2264   L022093?:
084A           2265   ;        main.c:616: if (vy*100<=vy_thres*100/2){
084A C002      2266            push    ar2
084C C003      2267            push    ar3
084E 85D000    2268            mov     __mulint_PARM_2,_main_vy_1_129
0851 85D101    2269            mov     (__mulint_PARM_2 + 1),(_main_vy_1_129 + 1)
0854 900064    2270            mov     dptr,#0x0064
0857 C002      2271            push    ar2
0859 C003      2272            push    ar3
085B 120000    2273            lcall   __mulint
085E AD82      2274            mov     r5,dpl
0860 AE83      2275            mov     r6,dph
0862 D003      2276            pop     ar3
0864 D002      2277            pop     ar2
0866 851000    2278            mov     __mulint_PARM_2,_vy_thres
0869 851101    2279            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
086C 900064    2280            mov     dptr,#0x0064
086F C003      2281            push    ar3
0871 C005      2282            push    ar5
0873 C006      2283            push    ar6
0875 120000    2284            lcall   __mulint
0878 AF82      2285            mov     r7,dpl
087A AA83      2286            mov     r2,dph
087C D006      2287            pop     ar6
087E D005      2288            pop     ar5
0880 D003      2289            pop     ar3
0882 750002    2290            mov     __divsint_PARM_2,#0x02
0885 E4        2291            clr     a
0886 F501      2292            mov     (__divsint_PARM_2 + 1),a
0888 8F82      2293            mov     dpl,r7
088A 8A83      2294            mov     dph,r2
088C C005      2295            push    ar5
088E C006      2296            push    ar6
0890 120000    2297            lcall   __divsint
0893 AA82      2298            mov     r2,dpl
0895 AB83      2299            mov     r3,dph
0897 D006      2300            pop     ar6
0899 D005      2301            pop     ar5
089B C3        2302            clr     c
089C EA        2303            mov     a,r2
089D 9D        2304            subb    a,r5
089E EB        2305            mov     a,r3
089F 6480      2306            xrl     a,#0x80
08A1 8EF0      2307            mov     b,r6
08A3 63F080    2308            xrl     b,#0x80
08A6 95F0      2309            subb    a,b
08A8 D003      2310            pop     ar3
08AA D002      2311            pop     ar2
08AC 4000      2312            jc      L022016?
08AE           2313   ;        main.c:617: pwm_left = vy_error; 
08AE 85B0D0    2314            mov     _pwm_left,_main_vy_error_1_129
08B1           2315   ;        main.c:618: pwm_right = vy_error*100/(vx_error+vy_error);
08B1 85B000    2316            mov     __mulint_PARM_2,_main_vy_error_1_129
08B4 85B101    2317            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_129 + 1)
08B7 900064    2318            mov     dptr,#0x0064
08BA C002      2319            push    ar2
08BC C003      2320            push    ar3
08BE 120000    2321            lcall   __mulint
08C1 AD82      2322            mov     r5,dpl
08C3 AE83      2323            mov     r6,dph
08C5 E5B0      2324            mov     a,_main_vy_error_1_129
08C7 2560      2325            add     a,_main_vx_error_1_129
08C9 F500      2326            mov     __divsint_PARM_2,a
08CB E5B1      2327            mov     a,(_main_vy_error_1_129 + 1)
08CD 3561      2328            addc    a,(_main_vx_error_1_129 + 1)
08CF F501      2329            mov     (__divsint_PARM_2 + 1),a
08D1 8D82      2330            mov     dpl,r5
08D3 8E83      2331            mov     dph,r6
08D5 120000    2332            lcall   __divsint
08D8 AD82      2333            mov     r5,dpl
08DA AE83      2334            mov     r6,dph
08DC D003      2335            pop     ar3
08DE D002      2336            pop     ar2
08E0 8D90      2337            mov     _pwm_right,r5
08E2 020000    2338            ljmp    L022025?
08E5           2339   L022016?:
08E5           2340   ;        main.c:621: pwm_left = vx_error; 
08E5 8560D0    2341            mov     _pwm_left,_main_vx_error_1_129
08E8           2342   ;        main.c:622: pwm_right = vx_error*100/(vx_error+vy_error);
08E8 856000    2343            mov     __mulint_PARM_2,_main_vx_error_1_129
08EB 856101    2344            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_129 + 1)
08EE 900064    2345            mov     dptr,#0x0064
08F1 C002      2346            push    ar2
08F3 C003      2347            push    ar3
08F5 120000    2348            lcall   __mulint
08F8 AD82      2349            mov     r5,dpl
08FA AE83      2350            mov     r6,dph
08FC E5B0      2351            mov     a,_main_vy_error_1_129
08FE 2560      2352            add     a,_main_vx_error_1_129
0900 F500      2353            mov     __divsint_PARM_2,a
0902 E5B1      2354            mov     a,(_main_vy_error_1_129 + 1)
0904 3561      2355            addc    a,(_main_vx_error_1_129 + 1)
0906 F501      2356            mov     (__divsint_PARM_2 + 1),a
0908 8D82      2357            mov     dpl,r5
090A 8E83      2358            mov     dph,r6
090C 120000    2359            lcall   __divsint
090F AD82      2360            mov     r5,dpl
0911 AE83      2361            mov     r6,dph
0913 D003      2362            pop     ar3
0915 D002      2363            pop     ar2
0917 8D90      2364            mov     _pwm_right,r5
0919 020000    2365            ljmp    L022025?
091C           2366   L022022?:
091C           2367   ;        main.c:627: if (vy*100<=vy_thres*100/2){
091C C002      2368            push    ar2
091E C003      2369            push    ar3
0920 85D000    2370            mov     __mulint_PARM_2,_main_vy_1_129
0923 85D101    2371            mov     (__mulint_PARM_2 + 1),(_main_vy_1_129 + 1)
0926 900064    2372            mov     dptr,#0x0064
0929 C002      2373            push    ar2
092B C003      2374            push    ar3
092D 120000    2375            lcall   __mulint
0930 AD82      2376            mov     r5,dpl
0932 AE83      2377            mov     r6,dph
0934 D003      2378            pop     ar3
0936 D002      2379            pop     ar2
0938 851000    2380            mov     __mulint_PARM_2,_vy_thres
093B 851101    2381            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
093E 900064    2382            mov     dptr,#0x0064
0941 C003      2383            push    ar3
0943 C005      2384            push    ar5
0945 C006      2385            push    ar6
0947 120000    2386            lcall   __mulint
094A AF82      2387            mov     r7,dpl
094C AA83      2388            mov     r2,dph
094E D006      2389            pop     ar6
0950 D005      2390            pop     ar5
0952 D003      2391            pop     ar3
0954 750002    2392            mov     __divsint_PARM_2,#0x02
0957 E4        2393            clr     a
0958 F501      2394            mov     (__divsint_PARM_2 + 1),a
095A 8F82      2395            mov     dpl,r7
095C 8A83      2396            mov     dph,r2
095E C005      2397            push    ar5
0960 C006      2398            push    ar6
0962 120000    2399            lcall   __divsint
0965 AA82      2400            mov     r2,dpl
0967 AB83      2401            mov     r3,dph
0969 D006      2402            pop     ar6
096B D005      2403            pop     ar5
096D C3        2404            clr     c
096E EA        2405            mov     a,r2
096F 9D        2406            subb    a,r5
0970 EB        2407            mov     a,r3
0971 6480      2408            xrl     a,#0x80
0973 8EF0      2409            mov     b,r6
0975 63F080    2410            xrl     b,#0x80
0978 95F0      2411            subb    a,b
097A D003      2412            pop     ar3
097C D002      2413            pop     ar2
097E 4000      2414            jc      L022019?
0980           2415   ;        main.c:628: pwm_left = vy_error*100/(vx_error+vy_error);
0980 85B000    2416            mov     __mulint_PARM_2,_main_vy_error_1_129
0983 85B101    2417            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_129 + 1)
0986 900064    2418            mov     dptr,#0x0064
0989 C002      2419            push    ar2
098B C003      2420            push    ar3
098D 120000    2421            lcall   __mulint
0990 AD82      2422            mov     r5,dpl
0992 AE83      2423            mov     r6,dph
0994 E5B0      2424            mov     a,_main_vy_error_1_129
0996 2560      2425            add     a,_main_vx_error_1_129
0998 F500      2426            mov     __divsint_PARM_2,a
099A E5B1      2427            mov     a,(_main_vy_error_1_129 + 1)
099C 3561      2428            addc    a,(_main_vx_error_1_129 + 1)
099E F501      2429            mov     (__divsint_PARM_2 + 1),a
09A0 8D82      2430            mov     dpl,r5
09A2 8E83      2431            mov     dph,r6
09A4 120000    2432            lcall   __divsint
09A7 AD82      2433            mov     r5,dpl
09A9 AE83      2434            mov     r6,dph
09AB D003      2435            pop     ar3
09AD D002      2436            pop     ar2
09AF 8DD0      2437            mov     _pwm_left,r5
09B1           2438   ;        main.c:629: pwm_right = vy_error; 
09B1 85B090    2439            mov     _pwm_right,_main_vy_error_1_129
09B4 8000      2440            sjmp    L022025?
09B6           2441   L022019?:
09B6           2442   ;        main.c:632: pwm_left = vx_error*100/(vx_error+vy_error);
09B6 856000    2443            mov     __mulint_PARM_2,_main_vx_error_1_129
09B9 856101    2444            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_129 + 1)
09BC 900064    2445            mov     dptr,#0x0064
09BF C002      2446            push    ar2
09C1 C003      2447            push    ar3
09C3 120000    2448            lcall   __mulint
09C6 AD82      2449            mov     r5,dpl
09C8 AE83      2450            mov     r6,dph
09CA E5B0      2451            mov     a,_main_vy_error_1_129
09CC 2560      2452            add     a,_main_vx_error_1_129
09CE F500      2453            mov     __divsint_PARM_2,a
09D0 E5B1      2454            mov     a,(_main_vy_error_1_129 + 1)
09D2 3561      2455            addc    a,(_main_vx_error_1_129 + 1)
09D4 F501      2456            mov     (__divsint_PARM_2 + 1),a
09D6 8D82      2457            mov     dpl,r5
09D8 8E83      2458            mov     dph,r6
09DA 120000    2459            lcall   __divsint
09DD AD82      2460            mov     r5,dpl
09DF AE83      2461            mov     r6,dph
09E1 D003      2462            pop     ar3
09E3 D002      2463            pop     ar2
09E5 8DD0      2464            mov     _pwm_left,r5
09E7           2465   ;        main.c:633: pwm_right = vx_error; 
09E7 856090    2466            mov     _pwm_right,_main_vx_error_1_129
09EA           2467   L022025?:
09EA           2468   ;        main.c:638: if (vy_err<0){
09EA E551      2469            mov     a,(_main_vy_err_1_129 + 1)
09EC 20E7C0    2470            jb      acc.7,L022096?
09EF 020000    2471            ljmp    L022051?
09F2           2472   L022096?:
09F2           2473   ;        main.c:639: L_motor_dir = 1; 
09F2 755001    2474            mov     _L_motor_dir,#0x01
09F5           2475   ;        main.c:640: R_motor_dir = 1; 
09F5 751001    2476            mov     _R_motor_dir,#0x01
09F8           2477   ;        main.c:642: if (vx_err>0){
09F8 C3        2478            clr     c
09F9 E4        2479            clr     a
09FA 9500      2480            subb    a,_main_vx_err_1_129
09FC E4        2481            clr     a
09FD 6480      2482            xrl     a,#0x80
09FF 8501F0    2483            mov     b,(_main_vx_err_1_129 + 1)
0A02 63F080    2484            xrl     b,#0x80
0A05 95F0      2485            subb    a,b
0A07 4000      2486            jc      L022097?
0A09 020000    2487            ljmp    L022033?
0A0C           2488   L022097?:
0A0C           2489   ;        main.c:643: if (vy*100<=vy_thres*100/2){
0A0C C002      2490            push    ar2
0A0E C003      2491            push    ar3
0A10 85D000    2492            mov     __mulint_PARM_2,_main_vy_1_129
0A13 85D101    2493            mov     (__mulint_PARM_2 + 1),(_main_vy_1_129 + 1)
0A16 900064    2494            mov     dptr,#0x0064
0A19 C002      2495            push    ar2
0A1B C003      2496            push    ar3
0A1D 120000    2497            lcall   __mulint
0A20 AD82      2498            mov     r5,dpl
0A22 AE83      2499            mov     r6,dph
0A24 D003      2500            pop     ar3
0A26 D002      2501            pop     ar2
0A28 851000    2502            mov     __mulint_PARM_2,_vy_thres
0A2B 851101    2503            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0A2E 900064    2504            mov     dptr,#0x0064
0A31 C003      2505            push    ar3
0A33 C005      2506            push    ar5
0A35 C006      2507            push    ar6
0A37 120000    2508            lcall   __mulint
0A3A AF82      2509            mov     r7,dpl
0A3C AA83      2510            mov     r2,dph
0A3E D006      2511            pop     ar6
0A40 D005      2512            pop     ar5
0A42 D003      2513            pop     ar3
0A44 750002    2514            mov     __divsint_PARM_2,#0x02
0A47 E4        2515            clr     a
0A48 F501      2516            mov     (__divsint_PARM_2 + 1),a
0A4A 8F82      2517            mov     dpl,r7
0A4C 8A83      2518            mov     dph,r2
0A4E C005      2519            push    ar5
0A50 C006      2520            push    ar6
0A52 120000    2521            lcall   __divsint
0A55 AA82      2522            mov     r2,dpl
0A57 AB83      2523            mov     r3,dph
0A59 D006      2524            pop     ar6
0A5B D005      2525            pop     ar5
0A5D C3        2526            clr     c
0A5E EA        2527            mov     a,r2
0A5F 9D        2528            subb    a,r5
0A60 EB        2529            mov     a,r3
0A61 6480      2530            xrl     a,#0x80
0A63 8EF0      2531            mov     b,r6
0A65 63F080    2532            xrl     b,#0x80
0A68 95F0      2533            subb    a,b
0A6A D003      2534            pop     ar3
0A6C D002      2535            pop     ar2
0A6E 4000      2536            jc      L022027?
0A70           2537   ;        main.c:644: pwm_left = vy_error; 
0A70 85B0D0    2538            mov     _pwm_left,_main_vy_error_1_129
0A73           2539   ;        main.c:645: pwm_right = vy_error*100/(vx_error+vy_error);
0A73 85B000    2540            mov     __mulint_PARM_2,_main_vy_error_1_129
0A76 85B101    2541            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_129 + 1)
0A79 900064    2542            mov     dptr,#0x0064
0A7C C002      2543            push    ar2
0A7E C003      2544            push    ar3
0A80 120000    2545            lcall   __mulint
0A83 AD82      2546            mov     r5,dpl
0A85 AE83      2547            mov     r6,dph
0A87 E5B0      2548            mov     a,_main_vy_error_1_129
0A89 2560      2549            add     a,_main_vx_error_1_129
0A8B F500      2550            mov     __divsint_PARM_2,a
0A8D E5B1      2551            mov     a,(_main_vy_error_1_129 + 1)
0A8F 3561      2552            addc    a,(_main_vx_error_1_129 + 1)
0A91 F501      2553            mov     (__divsint_PARM_2 + 1),a
0A93 8D82      2554            mov     dpl,r5
0A95 8E83      2555            mov     dph,r6
0A97 120000    2556            lcall   __divsint
0A9A AD82      2557            mov     r5,dpl
0A9C AE83      2558            mov     r6,dph
0A9E D003      2559            pop     ar3
0AA0 D002      2560            pop     ar2
0AA2 8D90      2561            mov     _pwm_right,r5
0AA4 020000    2562            ljmp    L022051?
0AA7           2563   L022027?:
0AA7           2564   ;        main.c:648: pwm_left = vx_error; 
0AA7 8560D0    2565            mov     _pwm_left,_main_vx_error_1_129
0AAA           2566   ;        main.c:649: pwm_right = vx_error*100/(vx_error+vy_error);
0AAA 856000    2567            mov     __mulint_PARM_2,_main_vx_error_1_129
0AAD 856101    2568            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_129 + 1)
0AB0 900064    2569            mov     dptr,#0x0064
0AB3 C002      2570            push    ar2
0AB5 C003      2571            push    ar3
0AB7 120000    2572            lcall   __mulint
0ABA AD82      2573            mov     r5,dpl
0ABC AE83      2574            mov     r6,dph
0ABE E5B0      2575            mov     a,_main_vy_error_1_129
0AC0 2560      2576            add     a,_main_vx_error_1_129
0AC2 F500      2577            mov     __divsint_PARM_2,a
0AC4 E5B1      2578            mov     a,(_main_vy_error_1_129 + 1)
0AC6 3561      2579            addc    a,(_main_vx_error_1_129 + 1)
0AC8 F501      2580            mov     (__divsint_PARM_2 + 1),a
0ACA 8D82      2581            mov     dpl,r5
0ACC 8E83      2582            mov     dph,r6
0ACE 120000    2583            lcall   __divsint
0AD1 AD82      2584            mov     r5,dpl
0AD3 AE83      2585            mov     r6,dph
0AD5 D003      2586            pop     ar3
0AD7 D002      2587            pop     ar2
0AD9 8D90      2588            mov     _pwm_right,r5
0ADB 020000    2589            ljmp    L022051?
0ADE           2590   L022033?:
0ADE           2591   ;        main.c:654: if (vy*100<=vy_thres*100/2){
0ADE C002      2592            push    ar2
0AE0 C003      2593            push    ar3
0AE2 85D000    2594            mov     __mulint_PARM_2,_main_vy_1_129
0AE5 85D101    2595            mov     (__mulint_PARM_2 + 1),(_main_vy_1_129 + 1)
0AE8 900064    2596            mov     dptr,#0x0064
0AEB C002      2597            push    ar2
0AED C003      2598            push    ar3
0AEF 120000    2599            lcall   __mulint
0AF2 AD82      2600            mov     r5,dpl
0AF4 AE83      2601            mov     r6,dph
0AF6 D003      2602            pop     ar3
0AF8 D002      2603            pop     ar2
0AFA 851000    2604            mov     __mulint_PARM_2,_vy_thres
0AFD 851101    2605            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0B00 900064    2606            mov     dptr,#0x0064
0B03 C003      2607            push    ar3
0B05 C005      2608            push    ar5
0B07 C006      2609            push    ar6
0B09 120000    2610            lcall   __mulint
0B0C AF82      2611            mov     r7,dpl
0B0E AA83      2612            mov     r2,dph
0B10 D006      2613            pop     ar6
0B12 D005      2614            pop     ar5
0B14 D003      2615            pop     ar3
0B16 750002    2616            mov     __divsint_PARM_2,#0x02
0B19 E4        2617            clr     a
0B1A F501      2618            mov     (__divsint_PARM_2 + 1),a
0B1C 8F82      2619            mov     dpl,r7
0B1E 8A83      2620            mov     dph,r2
0B20 C005      2621            push    ar5
0B22 C006      2622            push    ar6
0B24 120000    2623            lcall   __divsint
0B27 AA82      2624            mov     r2,dpl
0B29 AB83      2625            mov     r3,dph
0B2B D006      2626            pop     ar6
0B2D D005      2627            pop     ar5
0B2F C3        2628            clr     c
0B30 EA        2629            mov     a,r2
0B31 9D        2630            subb    a,r5
0B32 EB        2631            mov     a,r3
0B33 6480      2632            xrl     a,#0x80
0B35 8EF0      2633            mov     b,r6
0B37 63F080    2634            xrl     b,#0x80
0B3A 95F0      2635            subb    a,b
0B3C D003      2636            pop     ar3
0B3E D002      2637            pop     ar2
0B40 4000      2638            jc      L022030?
0B42           2639   ;        main.c:655: pwm_left = vy_error*100/(vx_error+vy_error);
0B42 85B000    2640            mov     __mulint_PARM_2,_main_vy_error_1_129
0B45 85B101    2641            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_129 + 1)
0B48 900064    2642            mov     dptr,#0x0064
0B4B C002      2643            push    ar2
0B4D C003      2644            push    ar3
0B4F 120000    2645            lcall   __mulint
0B52 AD82      2646            mov     r5,dpl
0B54 AE83      2647            mov     r6,dph
0B56 E5B0      2648            mov     a,_main_vy_error_1_129
0B58 2560      2649            add     a,_main_vx_error_1_129
0B5A F500      2650            mov     __divsint_PARM_2,a
0B5C E5B1      2651            mov     a,(_main_vy_error_1_129 + 1)
0B5E 3561      2652            addc    a,(_main_vx_error_1_129 + 1)
0B60 F501      2653            mov     (__divsint_PARM_2 + 1),a
0B62 8D82      2654            mov     dpl,r5
0B64 8E83      2655            mov     dph,r6
0B66 120000    2656            lcall   __divsint
0B69 AD82      2657            mov     r5,dpl
0B6B AE83      2658            mov     r6,dph
0B6D D003      2659            pop     ar3
0B6F D002      2660            pop     ar2
0B71 8DD0      2661            mov     _pwm_left,r5
0B73           2662   ;        main.c:656: pwm_right = vy_error; 
0B73 85B090    2663            mov     _pwm_right,_main_vy_error_1_129
0B76 020000    2664            ljmp    L022051?
0B79           2665   L022030?:
0B79           2666   ;        main.c:659: pwm_left = vx_error*100/(vx_error+vy_error);
0B79 856000    2667            mov     __mulint_PARM_2,_main_vx_error_1_129
0B7C 856101    2668            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_129 + 1)
0B7F 900064    2669            mov     dptr,#0x0064
0B82 C002      2670            push    ar2
0B84 C003      2671            push    ar3
0B86 120000    2672            lcall   __mulint
0B89 AD82      2673            mov     r5,dpl
0B8B AE83      2674            mov     r6,dph
0B8D E5B0      2675            mov     a,_main_vy_error_1_129
0B8F 2560      2676            add     a,_main_vx_error_1_129
0B91 F500      2677            mov     __divsint_PARM_2,a
0B93 E5B1      2678            mov     a,(_main_vy_error_1_129 + 1)
0B95 3561      2679            addc    a,(_main_vx_error_1_129 + 1)
0B97 F501      2680            mov     (__divsint_PARM_2 + 1),a
0B99 8D82      2681            mov     dpl,r5
0B9B 8E83      2682            mov     dph,r6
0B9D 120000    2683            lcall   __divsint
0BA0 AD82      2684            mov     r5,dpl
0BA2 AE83      2685            mov     r6,dph
0BA4 D003      2686            pop     ar3
0BA6 D002      2687            pop     ar2
0BA8 8DD0      2688            mov     _pwm_left,r5
0BAA           2689   ;        main.c:660: pwm_right = vx_error; 
0BAA 856090    2690            mov     _pwm_right,_main_vx_error_1_129
0BAD 020000    2691            ljmp    L022051?
0BB0           2692   L022041?:
0BB0           2693   ;        main.c:668: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0BB0 904410    2694            mov     dptr,#_buff
0BB3 75F040    2695            mov     b,#0x40
0BB6 C002      2696            push    ar2
0BB8 C003      2697            push    ar3
0BBA 120000    2698            lcall   _strlen
0BBD AD82      2699            mov     r5,dpl
0BBF AE83      2700            mov     r6,dph
0BC1 C005      2701            push    ar5
0BC3 C006      2702            push    ar6
0BC5 7410      2703            mov     a,#_buff
0BC7 C0E0      2704            push    acc
0BC9 7444      2705            mov     a,#(_buff >> 8)
0BCB C0E0      2706            push    acc
0BCD 7440      2707            mov     a,#0x40
0BCF C0E0      2708            push    acc
0BD1 7400      2709            mov     a,#__str_15
0BD3 C0E0      2710            push    acc
0BD5 74D8      2711            mov     a,#(__str_15 >> 8)
0BD7 C0E0      2712            push    acc
0BD9 7480      2713            mov     a,#0x80
0BDB C0E0      2714            push    acc
0BDD 120000    2715            lcall   _printf
0BE0 E581      2716            mov     a,sp
0BE2 24F8      2717            add     a,#0xf8
0BE4 F581      2718            mov     sp,a
0BE6 D003      2719            pop     ar3
0BE8 D002      2720            pop     ar2
0BEA 020000    2721            ljmp    L022051?
0BED           2722   L022046?:
0BED           2723   ;        main.c:674: else if(c=='@') // Master wants slave data
0BED BC4040    2724            cjne    r4,#0x40,L022100?
0BF0 8000      2725            sjmp    L022101?
0BF2           2726   L022100?:
0BF2 020000    2727            ljmp    L022051?
0BF5           2728   L022101?:
0BF5           2729   ;        main.c:676: sprintf(buff, "%01d,%05u\n", 0, cnt);
0BF5 C002      2730            push    ar2
0BF7 C003      2731            push    ar3
0BF9 C002      2732            push    ar2
0BFB C003      2733            push    ar3
0BFD E4        2734            clr     a
0BFE C0E0      2735            push    acc
0C00 C0E0      2736            push    acc
0C02 74C0      2737            mov     a,#__str_16
0C04 C0E0      2738            push    acc
0C06 74D8      2739            mov     a,#(__str_16 >> 8)
0C08 C0E0      2740            push    acc
0C0A 7480      2741            mov     a,#0x80
0C0C C0E0      2742            push    acc
0C0E 7410      2743            mov     a,#_buff
0C10 C0E0      2744            push    acc
0C12 7444      2745            mov     a,#(_buff >> 8)
0C14 C0E0      2746            push    acc
0C16 7440      2747            mov     a,#0x40
0C18 C0E0      2748            push    acc
0C1A 120000    2749            lcall   _sprintf
0C1D E581      2750            mov     a,sp
0C1F 24F6      2751            add     a,#0xf6
0C21 F581      2752            mov     sp,a
0C23 D003      2753            pop     ar3
0C25 D002      2754            pop     ar2
0C27           2755   ;        main.c:677: cnt++;
0C27 0A        2756            inc     r2
0C28 BA0040    2757            cjne    r2,#0x00,L022102?
0C2B 0B        2758            inc     r3
0C2C           2759   L022102?:
0C2C           2760   ;        main.c:678: waitms(5); // The radio seems to need this delay...
0C2C 900005    2761            mov     dptr,#0x0005
0C2F C002      2762            push    ar2
0C31 C003      2763            push    ar3
0C33 120000    2764            lcall   _waitms
0C36           2765   ;        main.c:679: sendstr1(buff);
0C36 904410    2766            mov     dptr,#_buff
0C39 75F040    2767            mov     b,#0x40
0C3C 120000    2768            lcall   _sendstr1
0C3F D003      2769            pop     ar3
0C41 D002      2770            pop     ar2
0C43 020000    2771            ljmp    L022051?
0C46           2772            rseg R_CSEG
0C46           2773   
0000           2774            rseg R_XINIT
0000           2775   
0000           2776            rseg R_CONST
0000           2777   __str_0:
0000 436F6D6D  2778            db 'Command: %s'
     616E643A
     202573
000B 00        2779            db 0x00
000C           2780   __str_1:
000C 52657370  2781            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2782            db 0x0D
0019 0A        2783            db 0x0A
001A 00        2784            db 0x00
001B           2785   __str_2:
001B 41542B44  2786            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2787            db 0x0D
0027 0A        2788            db 0x0A
0028 00        2789            db 0x00
0029           2790   __str_3:
0029 0D        2791            db 0x0D
002A 0A        2792            db 0x0A
002B 45464D38  2793            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2794            db 0x0D
0047 0A        2795            db 0x0A
0048 00        2796            db 0x00
0049           2797   __str_4:
0049 41542B56  2798            db 'AT+VER'
     4552
004F 0D        2799            db 0x0D
0050 0A        2800            db 0x0A
0051 00        2801            db 0x00
0052           2802   __str_5:
0052 41542B42  2803            db 'AT+BAUD'
     415544
0059 0D        2804            db 0x0D
005A 0A        2805            db 0x0A
005B 00        2806            db 0x00
005C           2807   __str_6:
005C 41542B52  2808            db 'AT+RFID'
     464944
0063 0D        2809            db 0x0D
0064 0A        2810            db 0x0A
0065 00        2811            db 0x00
0066           2812   __str_7:
0066 41542B44  2813            db 'AT+DVID'
     564944
006D 0D        2814            db 0x0D
006E 0A        2815            db 0x0A
006F 00        2816            db 0x00
0070           2817   __str_8:
0070 41542B52  2818            db 'AT+RFC'
     4643
0076 0D        2819            db 0x0D
0077 0A        2820            db 0x0A
0078 00        2821            db 0x00
0079           2822   __str_9:
0079 41542B50  2823            db 'AT+POWE'
     4F5745
0080 0D        2824            db 0x0D
0081 0A        2825            db 0x0A
0082 00        2826            db 0x00
0083           2827   __str_10:
0083 41542B43  2828            db 'AT+CLSS'
     4C5353
008A 0D        2829            db 0x0D
008B 0A        2830            db 0x0A
008C 00        2831            db 0x00
008D           2832   __str_11:
008D 41542B44  2833            db 'AT+DVIDEFEF'
     56494445
     464546
0098 0D        2834            db 0x0D
0099 0A        2835            db 0x0A
009A 00        2836            db 0x00
009B           2837   __str_12:
009B 4D617374  2838            db 'Master says: %s'
     65722073
     6179733A
     202573
00AA 0D        2839            db 0x0D
00AB 0A        2840            db 0x0A
00AC 00        2841            db 0x00
00AD           2842   __str_13:
00AD 25303364  2843            db '%03d,%03d,%01d'
     2C253033
     642C2530
     3164
00BB 00        2844            db 0x00
00BC           2845   __str_14:
00BC 4A6F7973  2846            db 'Joystick Received: Vx = %03d, Vy = %03d, Order = %01d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     3033642C
     204F7264
     6572203D
     20253031
     64
00F1 0D        2847            db 0x0D
00F2 0A        2848            db 0x0A
00F3 00        2849            db 0x00
00F4           2850   __str_15:
00F4 2A2A2A20  2851            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
010F 0D        2852            db 0x0D
0110 0A        2853            db 0x0A
0111 00        2854            db 0x00
0112           2855   __str_16:
0112 25303164  2856            db '%01d,%05u'
     2C253035
     75
011B 0A        2857            db 0x0A
011C 00        2858            db 0x00
011D           2859   
0096           2860            CSEG
0096           2861   
0096           2862   end
